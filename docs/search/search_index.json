{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the Twine Cookbook \u00b6 The Twine Cookbook is a collection of examples organized around common topic areas. For each, contributors have tried to provide examples covering each major built-in story format (Chapbook, Harlowe, SugarCube, and Snowman) where possible and appropriate. For some topics, examples are also provided in SugarCane for Twine 1.4.2. Each example page includes a short description, a live version, and its Twee code. Both the live version and Twee code can be downloaded directly from each example page. Reading the Cookbook \u00b6 Created using GitBook , the Twine Cookbook is best viewed as a compiled webpage . In this format, the left sidebar provides access to the different topic areas as well as to a search bar for more quickly looking through the titles and text of the entries. New updates are published in the website format every few months or as necessary. The Twine CookBook can also be read without the live versions on GitHub by starting with the summary page . Note, however, that example pages on GitHub are subject change as new changes are made and revisions submitted before and during editing cycles. Suggesting Examples or Changes \u00b6 Include as much as possible of the following in an issue : A short summary of the example(s) or suggestions(s) How (or if) you would like to be recognized for your contribution Submitting Documentation or Code Updates \u00b6 Clone the repository . Review the Organization page on the wiki for how folders and files are named and structured. Read the recipe formatting page included in the Cookbook and on Github for layout and style guidelines. Add your recipe and submit a pull request to request it to be added to the cookbook. Contributors \u00b6 @videlais (Dan Cox) @klembot (Chris Klimas) @tmedwards (Thomas Michael Edwards) @greyelf (David Tarrant) @webbedspace (Leon Arnott) @shawngraham (Shawn Graham) @Akjosch (Akjosch) @ChapelR (Chapel) License \u00b6 This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License . Version 1.6 (May 2020) \u00b6","title":"Home"},{"location":"index.html#welcome-to-the-twine-cookbook","text":"The Twine Cookbook is a collection of examples organized around common topic areas. For each, contributors have tried to provide examples covering each major built-in story format (Chapbook, Harlowe, SugarCube, and Snowman) where possible and appropriate. For some topics, examples are also provided in SugarCane for Twine 1.4.2. Each example page includes a short description, a live version, and its Twee code. Both the live version and Twee code can be downloaded directly from each example page.","title":"Welcome to the Twine Cookbook"},{"location":"index.html#reading-the-cookbook","text":"Created using GitBook , the Twine Cookbook is best viewed as a compiled webpage . In this format, the left sidebar provides access to the different topic areas as well as to a search bar for more quickly looking through the titles and text of the entries. New updates are published in the website format every few months or as necessary. The Twine CookBook can also be read without the live versions on GitHub by starting with the summary page . Note, however, that example pages on GitHub are subject change as new changes are made and revisions submitted before and during editing cycles.","title":"Reading the Cookbook"},{"location":"index.html#suggesting-examples-or-changes","text":"Include as much as possible of the following in an issue : A short summary of the example(s) or suggestions(s) How (or if) you would like to be recognized for your contribution","title":"Suggesting Examples or Changes"},{"location":"index.html#submitting-documentation-or-code-updates","text":"Clone the repository . Review the Organization page on the wiki for how folders and files are named and structured. Read the recipe formatting page included in the Cookbook and on Github for layout and style guidelines. Add your recipe and submit a pull request to request it to be added to the cookbook.","title":"Submitting Documentation or Code Updates"},{"location":"index.html#contributors","text":"@videlais (Dan Cox) @klembot (Chris Klimas) @tmedwards (Thomas Michael Edwards) @greyelf (David Tarrant) @webbedspace (Leon Arnott) @shawngraham (Shawn Graham) @Akjosch (Akjosch) @ChapelR (Chapel)","title":"Contributors"},{"location":"index.html#license","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"License"},{"location":"index.html#version-16-may-2020","text":"","title":"Version 1.6 (May 2020)"},{"location":"formatting.html","text":"Example Formatting \u00b6 Note: Some examples for specific versions (like those designed for Twine 1.4.2) contain this warning. Note: Other examples contain additional important information. Summary \u00b6 Each example is divided into sections. They start with a summary of the example and a short description of what functionality is used and why. If specific macros or functions are mentioned, they should be emphasized and link to their appropriate documentation where possible. For terms that may not be familiar to a more general audience, they can be added to the Glossary file and their definitions will be available as a tooltip over the term or phrase in the HTML version of the book. Live Example \u00b6 The next section demonstrates the code running. < section > < iframe src = \"storyformat_recipe_example.html\" height = 400 width = 90% ></ iframe > Download: < a href = \"storyformat_recipe_example.html\" target = \"_blank\" > Live Example </ a > </ section > Twee Code \u00b6 Finally, in the last section, all code is shown in its Twee notation for reference and download. Twee notation Download: <a href=\"storyformat_recipe_twee.txt\" target=\"_blank\">Twee Code</a> See Also \u00b6 Some examples use, reference, or share functionality. In this space, some examples link to others in order to better help bridge connections between different ideas and techniques.","title":"Example Formatting"},{"location":"formatting.html#example-formatting","text":"Note: Some examples for specific versions (like those designed for Twine 1.4.2) contain this warning. Note: Other examples contain additional important information.","title":"Example Formatting"},{"location":"formatting.html#summary","text":"Each example is divided into sections. They start with a summary of the example and a short description of what functionality is used and why. If specific macros or functions are mentioned, they should be emphasized and link to their appropriate documentation where possible. For terms that may not be familiar to a more general audience, they can be added to the Glossary file and their definitions will be available as a tooltip over the term or phrase in the HTML version of the book.","title":"Summary"},{"location":"formatting.html#live-example","text":"The next section demonstrates the code running. < section > < iframe src = \"storyformat_recipe_example.html\" height = 400 width = 90% ></ iframe > Download: < a href = \"storyformat_recipe_example.html\" target = \"_blank\" > Live Example </ a > </ section >","title":"Live Example"},{"location":"formatting.html#twee-code","text":"Finally, in the last section, all code is shown in its Twee notation for reference and download. Twee notation Download: <a href=\"storyformat_recipe_twee.txt\" target=\"_blank\">Twee Code</a>","title":"Twee Code"},{"location":"formatting.html#see-also","text":"Some examples use, reference, or share functionality. In this space, some examples link to others in order to better help bridge connections between different ideas and techniques.","title":"See Also"},{"location":"style_guide.html","text":"Style Guide \u00b6 The Twine Cookbook uses certain conventions to indicate text should be considered macros , part of JavaScript , or values to be used with either. HTML and Macros \u00b6 All HTML and macro names (such as those used in Chapbook, Harlowe, and SugarCube) are escaped. They will appear like this <div> for HTML and this <<include>> for macros. This is done for easily allowing users to copy and paste the text from the Cookbook into Twine 2. Variables and JavaScript Functions \u00b6 All variables are highlighted with emphasis . If a story format provides or an example uses particular JavaScript functionality, it will appear with strong emphasis . Quotation Marks \u00b6 In some cases, the value of a variable is shown in quotation marks. This is to help uses see which values are used and how they might be transformed or inform certain functionality.","title":"Style Guide"},{"location":"style_guide.html#style-guide","text":"The Twine Cookbook uses certain conventions to indicate text should be considered macros , part of JavaScript , or values to be used with either.","title":"Style Guide"},{"location":"style_guide.html#html-and-macros","text":"All HTML and macro names (such as those used in Chapbook, Harlowe, and SugarCube) are escaped. They will appear like this <div> for HTML and this <<include>> for macros. This is done for easily allowing users to copy and paste the text from the Cookbook into Twine 2.","title":"HTML and Macros"},{"location":"style_guide.html#variables-and-javascript-functions","text":"All variables are highlighted with emphasis . If a story format provides or an example uses particular JavaScript functionality, it will appear with strong emphasis .","title":"Variables and JavaScript Functions"},{"location":"style_guide.html#quotation-marks","text":"In some cases, the value of a variable is shown in quotation marks. This is to help uses see which values are used and how they might be transformed or inform certain functionality.","title":"Quotation Marks"},{"location":"using_cookbook.html","text":"Using the Twine Cookbook \u00b6 The Twine Cookbook provides live examples, Twee source code, and links to download either on each example page under the different topic areas. Downloading and Using the Live Examples \u00b6 1) Download the compiled HTML from an example page. 2) Import the file into Twine Twine 2: Use the \"Import From File\" link on the right-hand side under the \"+Story\" button. Twine 1: Use File->Import and select \"Compiled HTML File...\". Downloading and Using Twee Code \u00b6 Twee source code is provided for all examples to more easily show the passages and what they contain. Twine 2 \u00b6 Twine 2 does not natively understand Twee source code. Twine 1 \u00b6 For Twine 1 examples, the Twee source code can be downloaded and imported through going to File->Import and selecting \"Twee Source Code...\".","title":"Using the Cookbook"},{"location":"using_cookbook.html#using-the-twine-cookbook","text":"The Twine Cookbook provides live examples, Twee source code, and links to download either on each example page under the different topic areas.","title":"Using the Twine Cookbook"},{"location":"using_cookbook.html#downloading-and-using-the-live-examples","text":"1) Download the compiled HTML from an example page. 2) Import the file into Twine Twine 2: Use the \"Import From File\" link on the right-hand side under the \"+Story\" button. Twine 1: Use File->Import and select \"Compiled HTML File...\".","title":"Downloading and Using the Live Examples"},{"location":"using_cookbook.html#downloading-and-using-twee-code","text":"Twee source code is provided for all examples to more easily show the passages and what they contain.","title":"Downloading and Using Twee Code"},{"location":"using_cookbook.html#twine-2","text":"Twine 2 does not natively understand Twee source code.","title":"Twine 2"},{"location":"using_cookbook.html#twine-1","text":"For Twine 1 examples, the Twee source code can be downloaded and imported through going to File->Import and selecting \"Twee Source Code...\".","title":"Twine 1"},{"location":"addingfunctionality/chapbook/chapbook_adding_functionality.html","text":"\"Adding Functionality\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Chapbook allows for creation of custom inserts and modifiers . The example below adds an insert that displays a \ud83d\ude00 emoji. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Adding Functionality :: UserScript[script] engine.extend('1.0.0', () => { config.template.inserts = [{ match: /^smiley face$/i, render: () => '\ud83d\ude00' }, ...config.template.inserts]; }); :: Start Hello there {smiley face} Download: Twee Code","title":"Chapbook"},{"location":"addingfunctionality/chapbook/chapbook_adding_functionality.html#adding-functionality-chapbook-v100","text":"","title":"\"Adding Functionality\": Chapbook (v1.0.0)"},{"location":"addingfunctionality/chapbook/chapbook_adding_functionality.html#summary","text":"Chapbook allows for creation of custom inserts and modifiers . The example below adds an insert that displays a \ud83d\ude00 emoji.","title":"Summary"},{"location":"addingfunctionality/chapbook/chapbook_adding_functionality.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"addingfunctionality/chapbook/chapbook_adding_functionality.html#twee-code","text":":: StoryTitle Adding Functionality :: UserScript[script] engine.extend('1.0.0', () => { config.template.inserts = [{ match: /^smiley face$/i, render: () => '\ud83d\ude00' }, ...config.template.inserts]; }); :: Start Hello there {smiley face} Download: Twee Code","title":"Twee Code"},{"location":"addingfunctionality/snowman/snowman_adding_functionality.html","text":"\"Adding Functionality\": Snowman (v1.3.0) \u00b6 Summary \u00b6 Snowman does not provide macros . However, additional functionality can be added through the use of the Underscore.js JavaScript library provided with Snowman. In this example, a global function, showCurrentTime() , is added to the window.setup object. It is called in a passage through using the interpolation functionality of Underscore's template system to show a value. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Adding Functionality in Snowman :: UserScript[script] // Use or create window.setup window.setup = window.setup || {}; // Create global function window.setup.showCurrentTime = function() { return new Date(); } :: Start The current time is <%= setup.showCurrentTime() %> Download: Twee Code","title":"Snowman"},{"location":"addingfunctionality/snowman/snowman_adding_functionality.html#adding-functionality-snowman-v130","text":"","title":"\"Adding Functionality\": Snowman (v1.3.0)"},{"location":"addingfunctionality/snowman/snowman_adding_functionality.html#summary","text":"Snowman does not provide macros . However, additional functionality can be added through the use of the Underscore.js JavaScript library provided with Snowman. In this example, a global function, showCurrentTime() , is added to the window.setup object. It is called in a passage through using the interpolation functionality of Underscore's template system to show a value.","title":"Summary"},{"location":"addingfunctionality/snowman/snowman_adding_functionality.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"addingfunctionality/snowman/snowman_adding_functionality.html#twee-code","text":":: StoryTitle Adding Functionality in Snowman :: UserScript[script] // Use or create window.setup window.setup = window.setup || {}; // Create global function window.setup.showCurrentTime = function() { return new Date(); } :: Start The current time is <%= setup.showCurrentTime() %> Download: Twee Code","title":"Twee Code"},{"location":"addingfunctionality/sugarcube/sugarcube_adding_functionality.html","text":"\"Adding Functionality\": SugarCube (v2.18) \u00b6 Summary \u00b6 In SugarCube, additional functionality can be added through the Macro.add() function. In this example, the Date() JavaScript function is used to get the current time. This is saved to payload.contents , and the jQuery.wiki() function is used to convert and append it to the current passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Adding Functionality in SugarCube :: UserScript[script] Macro.add(\"currenttime\", { tags: null, handler: function() { // Try the following code and catch any errors try { // Get the current time and save it to the payload this.payload.contents = new Date(); // Wikify (and append) the current payload contents jQuery(this.output).wiki(this.payload.contents); } catch (ex) { // Return any errors return this.error(\"Error: \" + ex.message); } } }); :: Start <<currenttime>><</currenttime>> Download: Twee Code","title":"SugarCube"},{"location":"addingfunctionality/sugarcube/sugarcube_adding_functionality.html#adding-functionality-sugarcube-v218","text":"","title":"\"Adding Functionality\": SugarCube (v2.18)"},{"location":"addingfunctionality/sugarcube/sugarcube_adding_functionality.html#summary","text":"In SugarCube, additional functionality can be added through the Macro.add() function. In this example, the Date() JavaScript function is used to get the current time. This is saved to payload.contents , and the jQuery.wiki() function is used to convert and append it to the current passage.","title":"Summary"},{"location":"addingfunctionality/sugarcube/sugarcube_adding_functionality.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"addingfunctionality/sugarcube/sugarcube_adding_functionality.html#twee-code","text":":: StoryTitle Adding Functionality in SugarCube :: UserScript[script] Macro.add(\"currenttime\", { tags: null, handler: function() { // Try the following code and catch any errors try { // Get the current time and save it to the payload this.payload.contents = new Date(); // Wikify (and append) the current payload contents jQuery(this.output).wiki(this.payload.contents); } catch (ex) { // Return any errors return this.error(\"Error: \" + ex.message); } } }); :: Start <<currenttime>><</currenttime>> Download: Twee Code","title":"Twee Code"},{"location":"arrays/chapbook/chapbook_arrays.html","text":"\"Arrays\": Chapbook (1.0.0) \u00b6 Summary \u00b6 Using the Vars Section , variables can be set using any JavaScript values, such as arrays . However, Chapbook expressions will only show certain types of values . While Chapbook cannot show an array or its value by position, a new variable can be set and then shown. This following example shows how to do this approach. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Arrays for Chapbook :: Start arrayExample: [13, 15] exampleValue: arrayExample[0] -- Chapbook can't display indexed array values currently. However, setting a value based on a position in an array will show. Here is an {exampleValue}. Download: Twee Code","title":"Chapbook"},{"location":"arrays/chapbook/chapbook_arrays.html#arrays-chapbook-100","text":"","title":"\"Arrays\": Chapbook (1.0.0)"},{"location":"arrays/chapbook/chapbook_arrays.html#summary","text":"Using the Vars Section , variables can be set using any JavaScript values, such as arrays . However, Chapbook expressions will only show certain types of values . While Chapbook cannot show an array or its value by position, a new variable can be set and then shown. This following example shows how to do this approach.","title":"Summary"},{"location":"arrays/chapbook/chapbook_arrays.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"arrays/chapbook/chapbook_arrays.html#twee-code","text":":: StoryTitle Arrays for Chapbook :: Start arrayExample: [13, 15] exampleValue: arrayExample[0] -- Chapbook can't display indexed array values currently. However, setting a value based on a position in an array will show. Here is an {exampleValue}. Download: Twee Code","title":"Twee Code"},{"location":"arrays/harlowe/harlowe_arrays.html","text":"\"Arrays\": Harlowe (v2.1) \u00b6 Summary \u00b6 Arrays are a collection of values. Each entry in an array is assigned an index , which is a number that corresponds to its position in the array. In Harlowe, and unlike in JavaScript, arrays are one-based, meaning the first element in the array is given the index \"1\". Arrays can be created using the (a:) or (array:) macro and assigning a variable to it: (set: $myArray to (a:)) . Specific elements in an array can be accessed by following its variable name with a possessive 's and an ordinal number referencing the index to check, ( $myArray's 2nd ); the final entry, $myArray's last , points to the final element. Its contents can be tested using the contains operator (e.g. (if: $myArray contains 'something')[...] ), add new items using the + operator (e.g. (set: $myArray to + (a: 'something')) ), and remove items using the - operator. All elements in an array can be passed to macros as separate arguments with the spread operator ( ... ). Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Arrays in Harlowe :: init [startup] <!-- it is always a good idea to initialize your variables, but with arrays it is particularly important --> (set: $inventory to (a:)) (set: $chest to (a: 'a shield', 'a suit of armor')) (set: $chestOpen to false) :: inventory [header] You are currently carrying: <!-- if the inventory contains nothing, show \"nothing\" -->\\ (if: $inventory's length is 0)[\\ nothing. ](else:)[\\ <!-- we iterate over the array and print each item -->\\ (for: each _item, ...$inventory)[\\ _item (unless: $inventory's last is _item)[, ]\\ ]. ] ----- :: Start <!-- we use the + operator and wrap the target elements in an (a:) macro to add to the array -->\\ You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. (set: $inventory to it + (a: 'a sword'))\\ [[Continue|hallway]] :: hallway You see a chest here in the hallway. \\ (unless: $chestOpen)[\\ Do you want to open it? { (link: 'Open the chest.')[ <!-- adding to arrays together can also be done with the + operator --> (set: $inventory to it + $chest) (set: $chestOpen to true) (goto: 'chest') ] } ](else:)[\\ It's open, and there's nothing inside. ]\\ [[Move on.|dart trap]] :: chest You open the chest and find (for: each _item, ...$chest)[\\ _item (unless: $chest's last is _item)[ and ]\\ ]. (link: 'Okay')[ (goto: (history:)'s last) ] :: dart trap Several darts shoot out of a wall at you! <!-- we can check to see if the player has a given item with the contains operator --> (if: $inventory contains 'a shield')[\\ Luckily, your shield will protect you. ](else:)[\\ With no way to defend yourself, you die. ] Download: Twee Code","title":"Harlowe"},{"location":"arrays/harlowe/harlowe_arrays.html#arrays-harlowe-v21","text":"","title":"\"Arrays\": Harlowe (v2.1)"},{"location":"arrays/harlowe/harlowe_arrays.html#summary","text":"Arrays are a collection of values. Each entry in an array is assigned an index , which is a number that corresponds to its position in the array. In Harlowe, and unlike in JavaScript, arrays are one-based, meaning the first element in the array is given the index \"1\". Arrays can be created using the (a:) or (array:) macro and assigning a variable to it: (set: $myArray to (a:)) . Specific elements in an array can be accessed by following its variable name with a possessive 's and an ordinal number referencing the index to check, ( $myArray's 2nd ); the final entry, $myArray's last , points to the final element. Its contents can be tested using the contains operator (e.g. (if: $myArray contains 'something')[...] ), add new items using the + operator (e.g. (set: $myArray to + (a: 'something')) ), and remove items using the - operator. All elements in an array can be passed to macros as separate arguments with the spread operator ( ... ).","title":"Summary"},{"location":"arrays/harlowe/harlowe_arrays.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"arrays/harlowe/harlowe_arrays.html#twee-code","text":":: StoryTitle Arrays in Harlowe :: init [startup] <!-- it is always a good idea to initialize your variables, but with arrays it is particularly important --> (set: $inventory to (a:)) (set: $chest to (a: 'a shield', 'a suit of armor')) (set: $chestOpen to false) :: inventory [header] You are currently carrying: <!-- if the inventory contains nothing, show \"nothing\" -->\\ (if: $inventory's length is 0)[\\ nothing. ](else:)[\\ <!-- we iterate over the array and print each item -->\\ (for: each _item, ...$inventory)[\\ _item (unless: $inventory's last is _item)[, ]\\ ]. ] ----- :: Start <!-- we use the + operator and wrap the target elements in an (a:) macro to add to the array -->\\ You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. (set: $inventory to it + (a: 'a sword'))\\ [[Continue|hallway]] :: hallway You see a chest here in the hallway. \\ (unless: $chestOpen)[\\ Do you want to open it? { (link: 'Open the chest.')[ <!-- adding to arrays together can also be done with the + operator --> (set: $inventory to it + $chest) (set: $chestOpen to true) (goto: 'chest') ] } ](else:)[\\ It's open, and there's nothing inside. ]\\ [[Move on.|dart trap]] :: chest You open the chest and find (for: each _item, ...$chest)[\\ _item (unless: $chest's last is _item)[ and ]\\ ]. (link: 'Okay')[ (goto: (history:)'s last) ] :: dart trap Several darts shoot out of a wall at you! <!-- we can check to see if the player has a given item with the contains operator --> (if: $inventory contains 'a shield')[\\ Luckily, your shield will protect you. ](else:)[\\ With no way to defend yourself, you die. ] Download: Twee Code","title":"Twee Code"},{"location":"arrays/snowman/snowman_arrays.html","text":"\"Arrays\": Snowman (v1.3) \u00b6 Summary \u00b6 Arrays are a collection of values. Each value in an array is assigned an index , which is a number that corresponds to the position of that item or element in the array. In JavaScript, arrays are zero-based , meaning the first element in the array is given the index \"0\". Arrays have many built-in methods and other features for your use. You can create an array by assigning a variable to the array literal, which is a pair of brackets ( [] ): <% s.myArray = [] %> . Specific elements can be accessed in an array by following its variable name with a pair of brackets containing the index to check. Testing whether an array contains an element can be done using the Array#includes() function; adding new items can be done using the Array#push() function. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Arrays in Snowman :: UserScript [script] (function () { var s = window.story.state; s.inventory = []; s.chest = ['a shield', 'a suit of armor']; s.chestOpen = false; }()); :: Header You are currently carrying: <% if (s.inventory.length === 0) { %> nothing. <% } else { %> <%= s.inventory.join(', ') + '.' %> <% } %> :: Start <%= window.story.render(\"Header\") %><hr /> You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. <% s.inventory.push('a sword') %> [[Continue|hallway]] :: hallway <%= window.story.render(\"Header\") %><hr /> You see a chest here in the hallway. <% if (!s.chestOpen) { %> Do you want to open it? [[Open the chest.|chest]] <% } else { %> It's open, and there's nothing inside. <% } %> [[Move on.|dart trap]] :: chest <% s.inventory = s.inventory.concat(s.chest) %> <% s.chestOpen = true %> <%= window.story.render(\"Header\") %><hr /> You open the chest and find <%= s.chest.join(' and ') %>. [[Okay.|hallway]] :: dart trap <%= window.story.render(\"Header\") %><hr /> Several darts shoot out of a wall at you! <% if (s.inventory.includes('a shield')) { %> Luckily, your shield will protect you. <% } else { %> With no way to defend yourself, you die. <% } %> Download: Twee Code","title":"Snowman"},{"location":"arrays/snowman/snowman_arrays.html#arrays-snowman-v13","text":"","title":"\"Arrays\": Snowman (v1.3)"},{"location":"arrays/snowman/snowman_arrays.html#summary","text":"Arrays are a collection of values. Each value in an array is assigned an index , which is a number that corresponds to the position of that item or element in the array. In JavaScript, arrays are zero-based , meaning the first element in the array is given the index \"0\". Arrays have many built-in methods and other features for your use. You can create an array by assigning a variable to the array literal, which is a pair of brackets ( [] ): <% s.myArray = [] %> . Specific elements can be accessed in an array by following its variable name with a pair of brackets containing the index to check. Testing whether an array contains an element can be done using the Array#includes() function; adding new items can be done using the Array#push() function.","title":"Summary"},{"location":"arrays/snowman/snowman_arrays.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"arrays/snowman/snowman_arrays.html#twee-code","text":":: StoryTitle Arrays in Snowman :: UserScript [script] (function () { var s = window.story.state; s.inventory = []; s.chest = ['a shield', 'a suit of armor']; s.chestOpen = false; }()); :: Header You are currently carrying: <% if (s.inventory.length === 0) { %> nothing. <% } else { %> <%= s.inventory.join(', ') + '.' %> <% } %> :: Start <%= window.story.render(\"Header\") %><hr /> You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. <% s.inventory.push('a sword') %> [[Continue|hallway]] :: hallway <%= window.story.render(\"Header\") %><hr /> You see a chest here in the hallway. <% if (!s.chestOpen) { %> Do you want to open it? [[Open the chest.|chest]] <% } else { %> It's open, and there's nothing inside. <% } %> [[Move on.|dart trap]] :: chest <% s.inventory = s.inventory.concat(s.chest) %> <% s.chestOpen = true %> <%= window.story.render(\"Header\") %><hr /> You open the chest and find <%= s.chest.join(' and ') %>. [[Okay.|hallway]] :: dart trap <%= window.story.render(\"Header\") %><hr /> Several darts shoot out of a wall at you! <% if (s.inventory.includes('a shield')) { %> Luckily, your shield will protect you. <% } else { %> With no way to defend yourself, you die. <% } %> Download: Twee Code","title":"Twee Code"},{"location":"arrays/sugarcube/sugarcube_arrays.html","text":"\"Arrays\": SugarCube (v2.18) \u00b6 Summary \u00b6 Arrays are a collection of values. Each value in an array is assigned an index , which is a number that corresponds to the position of that item or element. Arrays have many built-in methods and other features, and SugarCube adds many more . Arrays can be created by assigning a variable to the array literal, which is a pair of brackets ( [] ): <<set $myArray to []>> . Specific elements can be accessed in an array by following its variable name with a pair of brackets containing the index to check. Testing whether an array contains an element can be done using the Array#includes() function; adding new items can be done using the Array#push() function. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Arrays in SugarCube :: StoryInit /% it is always a good idea to initialize your variables, but with arrays it is particularly important %/ <<set $inventory to []>> <<set $chest to ['a shield', 'a suit of armor']>> <<set $chestOpen to false>> :: PassageHeader You are currently carrying: /% if the inventory contains nothing, show \"nothing\" %/\\ <<if $inventory.length is 0>>\\ nothing. <<else>>\\ /% the Array#join() method combines all array elements into a single string, with each element separated by the argument given %/\\ <<= $inventory.join(', ')>>. <</if>> ----- :: Start /% we use the Array#push() method to add new items to our inventory array %/\\ You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. <<run $inventory.push('a sword')>>\\ [[Continue|hallway]] :: hallway You see a chest here in the hallway. \\ <<if not $chestOpen>>\\ Do you want to open it? <<link [[Open the chest.|chest]]>> /% concatenating the arrays and setting the result to $inventory moves all the items from the $chest array into the $inventory array %/ <<set $inventory to $inventory.concat($chest)>> <<set $chestOpen to true>> <</link>> <<else>>\\ It's open, and there's nothing inside. <</if>> [[Move on.|dart trap]] :: chest You open the chest and find <<= $chest.join(' and ')>>. [[Okay.|previous()]] :: dart trap Several darts shoot out of a wall at you! /% we can check to see if the player has a given item with Array#includes() %/ <<if $inventory.includes('a shield')>>\\ Luckily, your shield will protect you. <<else>>\\ With no way to defend yourself, you die. <</if>> Download: Twee Code","title":"SugarCube"},{"location":"arrays/sugarcube/sugarcube_arrays.html#arrays-sugarcube-v218","text":"","title":"\"Arrays\": SugarCube (v2.18)"},{"location":"arrays/sugarcube/sugarcube_arrays.html#summary","text":"Arrays are a collection of values. Each value in an array is assigned an index , which is a number that corresponds to the position of that item or element. Arrays have many built-in methods and other features, and SugarCube adds many more . Arrays can be created by assigning a variable to the array literal, which is a pair of brackets ( [] ): <<set $myArray to []>> . Specific elements can be accessed in an array by following its variable name with a pair of brackets containing the index to check. Testing whether an array contains an element can be done using the Array#includes() function; adding new items can be done using the Array#push() function.","title":"Summary"},{"location":"arrays/sugarcube/sugarcube_arrays.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"arrays/sugarcube/sugarcube_arrays.html#twee-code","text":":: StoryTitle Arrays in SugarCube :: StoryInit /% it is always a good idea to initialize your variables, but with arrays it is particularly important %/ <<set $inventory to []>> <<set $chest to ['a shield', 'a suit of armor']>> <<set $chestOpen to false>> :: PassageHeader You are currently carrying: /% if the inventory contains nothing, show \"nothing\" %/\\ <<if $inventory.length is 0>>\\ nothing. <<else>>\\ /% the Array#join() method combines all array elements into a single string, with each element separated by the argument given %/\\ <<= $inventory.join(', ')>>. <</if>> ----- :: Start /% we use the Array#push() method to add new items to our inventory array %/\\ You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. <<run $inventory.push('a sword')>>\\ [[Continue|hallway]] :: hallway You see a chest here in the hallway. \\ <<if not $chestOpen>>\\ Do you want to open it? <<link [[Open the chest.|chest]]>> /% concatenating the arrays and setting the result to $inventory moves all the items from the $chest array into the $inventory array %/ <<set $inventory to $inventory.concat($chest)>> <<set $chestOpen to true>> <</link>> <<else>>\\ It's open, and there's nothing inside. <</if>> [[Move on.|dart trap]] :: chest You open the chest and find <<= $chest.join(' and ')>>. [[Okay.|previous()]] :: dart trap Several darts shoot out of a wall at you! /% we can check to see if the player has a given item with Array#includes() %/ <<if $inventory.includes('a shield')>>\\ Luckily, your shield will protect you. <<else>>\\ With no way to defend yourself, you die. <</if>> Download: Twee Code","title":"Twee Code"},{"location":"audio/chapbook/chapbook_audio.html","text":"\"Audio\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Chapbook supports both looping sounds (which it calls ambient) and one-off sound (which it calls effects). It only allows playing one sound at a time. Note: This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: Start sound.ambient.test.url: 'testpattern.ogg' sound.ambient.test.description: 'An audio test pattern' -- > [[Play sound]] > [[Stop the sound]] :: Play sound {ambient sound: 'test'} [[Return->Start]] :: Stop the sound sound.ambient.test.playing: false -- [[Return->Start]] Download: Twee Code","title":"Chapbook"},{"location":"audio/chapbook/chapbook_audio.html#audio-chapbook-v100","text":"","title":"\"Audio\": Chapbook (v1.0.0)"},{"location":"audio/chapbook/chapbook_audio.html#summary","text":"Chapbook supports both looping sounds (which it calls ambient) and one-off sound (which it calls effects). It only allows playing one sound at a time. Note: This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed.","title":"Summary"},{"location":"audio/chapbook/chapbook_audio.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"audio/chapbook/chapbook_audio.html#twee-code","text":":: Start sound.ambient.test.url: 'testpattern.ogg' sound.ambient.test.description: 'An audio test pattern' -- > [[Play sound]] > [[Stop the sound]] :: Play sound {ambient sound: 'test'} [[Return->Start]] :: Stop the sound sound.ambient.test.playing: false -- [[Return->Start]] Download: Twee Code","title":"Twee Code"},{"location":"audio/harlowe/harlowe_audio.html","text":"\"Audio\": Harlowe (v2.0) \u00b6 Summary \u00b6 Harlowe does not have direct macro support for audio resources. However, additional JavaScript can be added to work with audio elements within a story. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which one is best supported when first loaded. Note: This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Audio in Harlowe :: Start <audio controls> <source src=\"testpattern.ogg\" type=\"audio/ogg\"> <source src=\"testpattern.wav\" type=\"audio/wav\"> Your browser does not support the audio element. </audio> Download: Twee Code","title":"Harlowe"},{"location":"audio/harlowe/harlowe_audio.html#audio-harlowe-v20","text":"","title":"\"Audio\": Harlowe (v2.0)"},{"location":"audio/harlowe/harlowe_audio.html#summary","text":"Harlowe does not have direct macro support for audio resources. However, additional JavaScript can be added to work with audio elements within a story. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which one is best supported when first loaded. Note: This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed.","title":"Summary"},{"location":"audio/harlowe/harlowe_audio.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"audio/harlowe/harlowe_audio.html#twee-code","text":":: StoryTitle Audio in Harlowe :: Start <audio controls> <source src=\"testpattern.ogg\" type=\"audio/ogg\"> <source src=\"testpattern.wav\" type=\"audio/wav\"> Your browser does not support the audio element. </audio> Download: Twee Code","title":"Twee Code"},{"location":"audio/snowman/snowman_audio.html","text":"\"Audio\": Snowman (v1.3.0) \u00b6 Summary \u00b6 Snowman does not have direct macro support for audio resources. However, additional JavaScript can be added to work with audio elements within a story. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which one is best supported when first loaded. Note: This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Audio in Snowman :: Start <audio controls> <source src=\"testpattern.ogg\" type=\"audio/ogg\"> <source src=\"testpattern.wav\" type=\"audio/wav\"> Your browser does not support the audio element. </audio> Download: Twee Code","title":"Snowman"},{"location":"audio/snowman/snowman_audio.html#audio-snowman-v130","text":"","title":"\"Audio\": Snowman (v1.3.0)"},{"location":"audio/snowman/snowman_audio.html#summary","text":"Snowman does not have direct macro support for audio resources. However, additional JavaScript can be added to work with audio elements within a story. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which one is best supported when first loaded. Note: This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed.","title":"Summary"},{"location":"audio/snowman/snowman_audio.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"audio/snowman/snowman_audio.html#twee-code","text":":: StoryTitle Audio in Snowman :: Start <audio controls> <source src=\"testpattern.ogg\" type=\"audio/ogg\"> <source src=\"testpattern.wav\" type=\"audio/wav\"> Your browser does not support the audio element. </audio> Download: Twee Code","title":"Twee Code"},{"location":"audio/sugarcube/sugarcube_audio.html","text":"\"Audio\": SugarCube (v2.18) \u00b6 Summary \u00b6 SugarCube supports audio through multiple macros. For basic playing of audio, resources must be first cached through the <<cacheaudio>> macro and then can be referenced in others like the <<audio>> macro for playing and stopping. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which format is best supported when first loaded. Note: This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Audio in SugarCube :: Start <<link \"Start audio!\">> <<audio \"testpattern\" play>> <</link>> <<link \"Stop audio!\">> <<audio \"testpattern\" stop>> <</link>> :: StoryInit <<cacheaudio \"testpattern\" \"testpattern.ogg\" \"testpattern.wav\">> Download: Twee Code","title":"SugarCube"},{"location":"audio/sugarcube/sugarcube_audio.html#audio-sugarcube-v218","text":"","title":"\"Audio\": SugarCube (v2.18)"},{"location":"audio/sugarcube/sugarcube_audio.html#summary","text":"SugarCube supports audio through multiple macros. For basic playing of audio, resources must be first cached through the <<cacheaudio>> macro and then can be referenced in others like the <<audio>> macro for playing and stopping. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which format is best supported when first loaded. Note: This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed.","title":"Summary"},{"location":"audio/sugarcube/sugarcube_audio.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"audio/sugarcube/sugarcube_audio.html#twee-code","text":":: StoryTitle Audio in SugarCube :: Start <<link \"Start audio!\">> <<audio \"testpattern\" play>> <</link>> <<link \"Stop audio!\">> <<audio \"testpattern\" stop>> <</link>> :: StoryInit <<cacheaudio \"testpattern\" \"testpattern.ogg\" \"testpattern.wav\">> Download: Twee Code","title":"Twee Code"},{"location":"clamping_numbers/chapbook/chapbook_clamping_numbers.html","text":"\"Limiting the Range of a Number\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 This example demonstrates how to limit a numeric variable to a value between a set range. This process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. This added function is then used within the Vars Section to set a value before using an expression to show its value within the passage itself. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Limiting Range of Number :: UserScript[script] (function () { Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. example: Math.clamp(variable, 1, 10) \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. variable: Math.clamp(variable + 5, 1, 10) */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start exampleNumber: 11 exampleResult: Math.clamp(exampleNumber, 1, 10) -- Despite *exampleNumber* being {exampleNumber}, it will be \"clamped\" to the highest number given to the function (10). The result is {exampleResult}. Download: Twee Code","title":"Chapbook"},{"location":"clamping_numbers/chapbook/chapbook_clamping_numbers.html#limiting-the-range-of-a-number-chapbook-v100","text":"","title":"\"Limiting the Range of a Number\": Chapbook (v1.0.0)"},{"location":"clamping_numbers/chapbook/chapbook_clamping_numbers.html#summary","text":"This example demonstrates how to limit a numeric variable to a value between a set range. This process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. This added function is then used within the Vars Section to set a value before using an expression to show its value within the passage itself.","title":"Summary"},{"location":"clamping_numbers/chapbook/chapbook_clamping_numbers.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"clamping_numbers/chapbook/chapbook_clamping_numbers.html#twee-code","text":":: StoryTitle Chapbook: Limiting Range of Number :: UserScript[script] (function () { Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. example: Math.clamp(variable, 1, 10) \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. variable: Math.clamp(variable + 5, 1, 10) */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start exampleNumber: 11 exampleResult: Math.clamp(exampleNumber, 1, 10) -- Despite *exampleNumber* being {exampleNumber}, it will be \"clamped\" to the highest number given to the function (10). The result is {exampleResult}. Download: Twee Code","title":"Twee Code"},{"location":"clamping_numbers/harlowe/harlowe_clamping_numbers.html","text":"\"Limiting the Range of a Number\": Harlowe (v2.0) \u00b6 Summary \u00b6 This example demonstrates how to limit a numeric variable to a value between a set range. This process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. Note: The example also adds a clamp() function to the built-in Number global JavaScript object, which the new Math.clamp() function uses internally. However, due to how Harlowe implements variables, the .clamp() function can't be used directly. ## Live Example Download: Live Example ## Twee Code :: StoryTitle Limiting the range of a number in Harlowe :: UserScript [script] (function () { /* Returns the number clamped to the specified bounds. WARNING: Due to how Harlowe implements variables you can NOT call this function directly, you must use the Math.clamp() function instead. */ Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. (set: $variable to Math.clamp($variable, 1, 10)) \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. (set: $variable to Math.clamp($variable + 5, 1, 10)_ */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start Initialize the numeric variable to a value with the range you want. eg. between ''1'' and ''10'' inclusive. &#40;note: You don't need to use the //Math.clamp()// function at this point.&#41;\\ (set: $valueToClamp to 5) ''Current value'': $valueToClamp Increase the number to a value that is ''within'' the desired range. eg. Add 1 to the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp + 1, 1, 10)) ''New value'': $valueToClamp Try to increase the number to a value that is ''outside'' the desired range. eg. Add 100 to the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp + 100, 1, 10)) ''New value'': $valueToClamp Decrease the number to a value that is ''within'' the desired range. eg. Minus 5 from the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp - 5, 1, 10)) ''New value'': $valueToClamp Try to decrease the number to a value that is ''outside'' the desired range. eg. Minus 100 from the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp - 100, 1, 10)) ''New value'': $valueToClamp Download: Twee Code","title":"Harlowe"},{"location":"clamping_numbers/harlowe/harlowe_clamping_numbers.html#limiting-the-range-of-a-number-harlowe-v20","text":"","title":"\"Limiting the Range of a Number\": Harlowe (v2.0)"},{"location":"clamping_numbers/harlowe/harlowe_clamping_numbers.html#summary","text":"This example demonstrates how to limit a numeric variable to a value between a set range. This process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. Note: The example also adds a clamp() function to the built-in Number global JavaScript object, which the new Math.clamp() function uses internally. However, due to how Harlowe implements variables, the .clamp() function can't be used directly. ## Live Example Download: Live Example ## Twee Code :: StoryTitle Limiting the range of a number in Harlowe :: UserScript [script] (function () { /* Returns the number clamped to the specified bounds. WARNING: Due to how Harlowe implements variables you can NOT call this function directly, you must use the Math.clamp() function instead. */ Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. (set: $variable to Math.clamp($variable, 1, 10)) \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. (set: $variable to Math.clamp($variable + 5, 1, 10)_ */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start Initialize the numeric variable to a value with the range you want. eg. between ''1'' and ''10'' inclusive. &#40;note: You don't need to use the //Math.clamp()// function at this point.&#41;\\ (set: $valueToClamp to 5) ''Current value'': $valueToClamp Increase the number to a value that is ''within'' the desired range. eg. Add 1 to the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp + 1, 1, 10)) ''New value'': $valueToClamp Try to increase the number to a value that is ''outside'' the desired range. eg. Add 100 to the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp + 100, 1, 10)) ''New value'': $valueToClamp Decrease the number to a value that is ''within'' the desired range. eg. Minus 5 from the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp - 5, 1, 10)) ''New value'': $valueToClamp Try to decrease the number to a value that is ''outside'' the desired range. eg. Minus 100 from the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp - 100, 1, 10)) ''New value'': $valueToClamp Download: Twee Code","title":"Summary"},{"location":"clamping_numbers/snowman/snowman_clamping_numbers.html","text":"\"Limiting the Range of a Number\": Snowman (v1.3) \u00b6 Summary \u00b6 This example demonstrates how to limit a numeric variable to a value between a set range, this process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. It also adds a clamp() function to the built-in Number global JavaScript object that the new Math.clamp() function uses internally. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Limiting the range of a number in Snowman :: UserScript [script] (function () { /* Returns the number clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. <% s.variable = s.variable.clamp(1, 10) %> */ Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. <% s.variable = Math.clamp(s.variable, 1, 10) %> \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. <% s.variable = Math.clamp(s.variable + 5, 1, 10) %> */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start Initialize the numeric variable to a value with the range you want.<br> eg. between <b>1</b> and <b>10</b> inclusive.<br> &#40;note: You don't need to use the <i>Math.clamp()</i> function at this point.&#41;<br> <% s.valueToClamp = 5 %> <b>Current value</b>: <%= s.valueToClamp %> Increase the number to a value that is <b>within</b> the desired range.<br> eg. Add 1 to the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp + 1, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Try to increase the number to a value that is <b>outside</b> the desired range.<br> eg. Add 100 to the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp + 100, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Decrease the number to a value that is <b>within</b> the desired range.<br> eg. Minus 5 from the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp - 5, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Try to decrease the number to a value that is <b>outside</b> the desired range.<br> eg. Minus 100 from the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp - 100, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Download: Twee Code","title":"Snowman"},{"location":"clamping_numbers/snowman/snowman_clamping_numbers.html#limiting-the-range-of-a-number-snowman-v13","text":"","title":"\"Limiting the Range of a Number\": Snowman (v1.3)"},{"location":"clamping_numbers/snowman/snowman_clamping_numbers.html#summary","text":"This example demonstrates how to limit a numeric variable to a value between a set range, this process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. It also adds a clamp() function to the built-in Number global JavaScript object that the new Math.clamp() function uses internally.","title":"Summary"},{"location":"clamping_numbers/snowman/snowman_clamping_numbers.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"clamping_numbers/snowman/snowman_clamping_numbers.html#twee-code","text":":: StoryTitle Limiting the range of a number in Snowman :: UserScript [script] (function () { /* Returns the number clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. <% s.variable = s.variable.clamp(1, 10) %> */ Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. <% s.variable = Math.clamp(s.variable, 1, 10) %> \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. <% s.variable = Math.clamp(s.variable + 5, 1, 10) %> */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start Initialize the numeric variable to a value with the range you want.<br> eg. between <b>1</b> and <b>10</b> inclusive.<br> &#40;note: You don't need to use the <i>Math.clamp()</i> function at this point.&#41;<br> <% s.valueToClamp = 5 %> <b>Current value</b>: <%= s.valueToClamp %> Increase the number to a value that is <b>within</b> the desired range.<br> eg. Add 1 to the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp + 1, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Try to increase the number to a value that is <b>outside</b> the desired range.<br> eg. Add 100 to the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp + 100, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Decrease the number to a value that is <b>within</b> the desired range.<br> eg. Minus 5 from the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp - 5, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Try to decrease the number to a value that is <b>outside</b> the desired range.<br> eg. Minus 100 from the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp - 100, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Download: Twee Code","title":"Twee Code"},{"location":"clamping_numbers/sugarcube/sugarcube_clamping_numbers.html","text":"\"Limiting the Range of a Number\": SugarCube (v2.18) \u00b6 Summary \u00b6 This example demonstrates how to limit a numeric variable to a value between a set range, this process is commonly known as clamping. It uses the Math.clamp() function in SugarCube to achieve the desired result. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Limiting the range of a number in SugarCube :: Start Initialize the numeric variable to a value with the range you want. eg. between ''1'' and ''10'' inclusive. (note: You don't need to use the //Math.clamp()// function at this point.)\\ <<set $valueToClamp to 5>> ''Current value'': $valueToClamp Increase the number to a value that is ''within'' the desired range. eg. Add 1 to the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp + 1, 1, 10)>> ''New value'': $valueToClamp Try to increase the number to a value that is ''outside'' the desired range. eg. Add 100 to the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp + 100, 1, 10)>> ''New value'': $valueToClamp Decrease the number to a value that is ''within'' the desired range. eg. Minus 5 from the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp - 5, 1, 10)>> ''New value'': $valueToClamp Try to decrease the number to a value that is ''outside'' the desired range. eg. Minus 100 from the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp - 100, 1, 10)>> ''New value'': $valueToClamp Download: Twee Code","title":"SugarCube"},{"location":"clamping_numbers/sugarcube/sugarcube_clamping_numbers.html#limiting-the-range-of-a-number-sugarcube-v218","text":"","title":"\"Limiting the Range of a Number\": SugarCube (v2.18)"},{"location":"clamping_numbers/sugarcube/sugarcube_clamping_numbers.html#summary","text":"This example demonstrates how to limit a numeric variable to a value between a set range, this process is commonly known as clamping. It uses the Math.clamp() function in SugarCube to achieve the desired result.","title":"Summary"},{"location":"clamping_numbers/sugarcube/sugarcube_clamping_numbers.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"clamping_numbers/sugarcube/sugarcube_clamping_numbers.html#twee-code","text":":: StoryTitle Limiting the range of a number in SugarCube :: Start Initialize the numeric variable to a value with the range you want. eg. between ''1'' and ''10'' inclusive. (note: You don't need to use the //Math.clamp()// function at this point.)\\ <<set $valueToClamp to 5>> ''Current value'': $valueToClamp Increase the number to a value that is ''within'' the desired range. eg. Add 1 to the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp + 1, 1, 10)>> ''New value'': $valueToClamp Try to increase the number to a value that is ''outside'' the desired range. eg. Add 100 to the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp + 100, 1, 10)>> ''New value'': $valueToClamp Decrease the number to a value that is ''within'' the desired range. eg. Minus 5 from the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp - 5, 1, 10)>> ''New value'': $valueToClamp Try to decrease the number to a value that is ''outside'' the desired range. eg. Minus 100 from the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp - 100, 1, 10)>> ''New value'': $valueToClamp Download: Twee Code","title":"Twee Code"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html","text":"\"Conditional Statements\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 The [if condition] and [else] modifiers found in the Conditional Display section of the Chapbook guide can be used to conditionally display content based on the current value of a variable. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Conditional Statements in Chapbook :: Start animal: \"horse\" -- [if animal === \"dog\"] It's a dog! [else] It's a horse! [continue] Download: Twee Code See Also \u00b6 Setting and Showing Variables","title":"Chapbook"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html#conditional-statements-chapbook-v100","text":"","title":"\"Conditional Statements\": Chapbook (v1.0.0)"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html#summary","text":"The [if condition] and [else] modifiers found in the Conditional Display section of the Chapbook guide can be used to conditionally display content based on the current value of a variable.","title":"Summary"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html#twee-code","text":":: StoryTitle Conditional Statements in Chapbook :: Start animal: \"horse\" -- [if animal === \"dog\"] It's a dog! [else] It's a horse! [continue] Download: Twee Code","title":"Twee Code"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html","text":"\"Conditional Statements\": Harlowe (v2.0) \u00b6 Summary \u00b6 The (if:) and (else:) macros conditionally produce commands that can be attached to hooks in Harlowe. If the statement is true, the (if:) section will be run. Otherwise, the (else:) section will be. The (unless:) macro can also be used in place of (if:) for the opposite effect. Furthermore, variables can be attached to hooks to control whether they are displayed based on if they are \"true\" (will be displayed) or \"false\" (will not be displayed). Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Conditional Statements in Harlowe :: Start (set: $animal to \"horse\") (if: $animal is \"dog\")[It's a dog!] (else:)[It's a horse!] (unless: $animal is \"dog\")[It's a horse!] (else:)[It's a dog!] (set: $isDog to $animal is \"horse\") $isDog[It's a dog!] Download: Twee Code See Also \u00b6 Setting and Showing Variables","title":"Harlowe"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html#conditional-statements-harlowe-v20","text":"","title":"\"Conditional Statements\": Harlowe (v2.0)"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html#summary","text":"The (if:) and (else:) macros conditionally produce commands that can be attached to hooks in Harlowe. If the statement is true, the (if:) section will be run. Otherwise, the (else:) section will be. The (unless:) macro can also be used in place of (if:) for the opposite effect. Furthermore, variables can be attached to hooks to control whether they are displayed based on if they are \"true\" (will be displayed) or \"false\" (will not be displayed).","title":"Summary"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html#twee-code","text":":: StoryTitle Conditional Statements in Harlowe :: Start (set: $animal to \"horse\") (if: $animal is \"dog\")[It's a dog!] (else:)[It's a horse!] (unless: $animal is \"dog\")[It's a horse!] (else:)[It's a dog!] (set: $isDog to $animal is \"horse\") $isDog[It's a dog!] Download: Twee Code","title":"Twee Code"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html","text":"\"Conditional Statements\": Snowman (v1.3.0) \u00b6 Summary \u00b6 Through using the s global variable and the built-in Underscore template functionality , JavaScript conditional statements can be run to show content in Snowman. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Conditional Statements in Snowman :: Start <% s.animal = \"horse\"; %> <% if(s.animal == \"dog\"){ %> It's a dog! <% } else { %> It's a horse! <% } %> Download: Twee Code See Also \u00b6 Setting and Showing Variables","title":"Snowman"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html#conditional-statements-snowman-v130","text":"","title":"\"Conditional Statements\": Snowman (v1.3.0)"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html#summary","text":"Through using the s global variable and the built-in Underscore template functionality , JavaScript conditional statements can be run to show content in Snowman.","title":"Summary"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html#twee-code","text":":: StoryTitle Conditional Statements in Snowman :: Start <% s.animal = \"horse\"; %> <% if(s.animal == \"dog\"){ %> It's a dog! <% } else { %> It's a horse! <% } %> Download: Twee Code","title":"Twee Code"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html","text":"\"Conditional Statements\": SugarCube (v2.18) \u00b6 Summary \u00b6 In SugarCube, the <<if>> and <<else>> macros conditionally run sections. If the statement is true, the <<if>> section will be run. Otherwise, the <<else>> section will be. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Conditional Statements in SugarCube :: Start <<set $animal to \"horse\">> <<if $animal is \"dog\">> It's a dog! <<else>> It's a horse! <</if>> Download: Twee Code See Also \u00b6 Setting and Showing Variables","title":"SugarCube"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html#conditional-statements-sugarcube-v218","text":"","title":"\"Conditional Statements\": SugarCube (v2.18)"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html#summary","text":"In SugarCube, the <<if>> and <<else>> macros conditionally run sections. If the statement is true, the <<if>> section will be run. Otherwise, the <<else>> section will be.","title":"Summary"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html#twee-code","text":":: StoryTitle Conditional Statements in SugarCube :: Start <<set $animal to \"horse\">> <<if $animal is \"dog\">> It's a dog! <<else>> It's a horse! <</if>> Download: Twee Code","title":"Twee Code"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"cssselectors/chapbook/chapbook_cssselectors.html","text":"\"CSS Selectors\": Chapbook (v1.0) \u00b6 Summary \u00b6 This example shows how to use CSS selectors to style different areas of the page. In Chapbook, the backdrop covers the whole page, the page is like a \"story\" area in other story formats, and the first <div> inside the <article> is the main passage area. < div id = \"backdrop\" > < div class = \"page\" > < header > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ header > < article > < div ></ div > </ article > < footer > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ footer > </ div > </ div > Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle CSS Selectors in Chapbook :: UserStylesheet[stylesheet] #backdrop { border: 5px solid green; } #page { border: 2px solid red; } #page article>:first-child { border: 1px solid blue; } :: Start The backdrop has a green border; it contains this page (red border) and the article (blue border). [[Second]] :: Second This passage also has a blue border. Download: Twee Code","title":"Chapbook"},{"location":"cssselectors/chapbook/chapbook_cssselectors.html#css-selectors-chapbook-v10","text":"","title":"\"CSS Selectors\": Chapbook (v1.0)"},{"location":"cssselectors/chapbook/chapbook_cssselectors.html#summary","text":"This example shows how to use CSS selectors to style different areas of the page. In Chapbook, the backdrop covers the whole page, the page is like a \"story\" area in other story formats, and the first <div> inside the <article> is the main passage area. < div id = \"backdrop\" > < div class = \"page\" > < header > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ header > < article > < div ></ div > </ article > < footer > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ footer > </ div > </ div >","title":"Summary"},{"location":"cssselectors/chapbook/chapbook_cssselectors.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"cssselectors/chapbook/chapbook_cssselectors.html#twee-code","text":":: StoryTitle CSS Selectors in Chapbook :: UserStylesheet[stylesheet] #backdrop { border: 5px solid green; } #page { border: 2px solid red; } #page article>:first-child { border: 1px solid blue; } :: Start The backdrop has a green border; it contains this page (red border) and the article (blue border). [[Second]] :: Second This passage also has a blue border. Download: Twee Code","title":"Twee Code"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html","text":"\"CSS Selectors\": Harlowe (v2.0) \u00b6 Note: The following example is designed for use in Harlowe 2.x and later Summary \u00b6 This example shows how to use CSS selectors to style different areas of the page. In Harlowe, custom HTML elements are used for layout: the <tw-story> element contains the page as well as a an element containing the currently shown passage, <tw-passage> , and an element containing the sidebar, <tw-sidebar> . <tw-story> <tw-passage> <tw-sidebar>...</tw-sidebar> ... </tw-passage> </tw-story> Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle CSS Selectors in Harlowe :: UserStylesheet [stylesheet] tw-story { border: 5px solid lightgreen; } tw-sidebar { border: 2px solid blue; } tw-passage { border: 1px solid red; } :: Start The page has a green border; it contains this passage (red border) and the sidebar (blue border). [[Second]] :: Second This passage also has a red border. Download: Twee Code See Also \u00b6 See the left sidebar recipe for another example of stylying custom elements like <tw-sidebar> . Harlowe also supports styling passages by tag using its custom 'tags' attribute.","title":"Harlowe"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html#css-selectors-harlowe-v20","text":"Note: The following example is designed for use in Harlowe 2.x and later","title":"\"CSS Selectors\": Harlowe (v2.0)"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html#summary","text":"This example shows how to use CSS selectors to style different areas of the page. In Harlowe, custom HTML elements are used for layout: the <tw-story> element contains the page as well as a an element containing the currently shown passage, <tw-passage> , and an element containing the sidebar, <tw-sidebar> . <tw-story> <tw-passage> <tw-sidebar>...</tw-sidebar> ... </tw-passage> </tw-story>","title":"Summary"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html#twee-code","text":":: StoryTitle CSS Selectors in Harlowe :: UserStylesheet [stylesheet] tw-story { border: 5px solid lightgreen; } tw-sidebar { border: 2px solid blue; } tw-passage { border: 1px solid red; } :: Start The page has a green border; it contains this passage (red border) and the sidebar (blue border). [[Second]] :: Second This passage also has a red border. Download: Twee Code","title":"Twee Code"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html#see-also","text":"See the left sidebar recipe for another example of stylying custom elements like <tw-sidebar> . Harlowe also supports styling passages by tag using its custom 'tags' attribute.","title":"See Also"},{"location":"cssselectors/snowman/snowman_cssselectors.html","text":"\"CSS Selectors\": Snowman (v1.3.0) \u00b6 Summary \u00b6 This example shows how to use CSS selectors to style different areas of the page. Snowman uses a simple HTML structure of a <div> with id \"passage\" directly below (inside) the <body> tag. < body > < div id = \"passage\" > ... </ div > </ body > Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle CSS Selectors in Snowman :: UserStylesheet [stylesheet] body { background-color: lightgreen; } #passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage, which has a red border. [[Second]] :: Second This passage also has a red border. Download: Twee Code See Also \u00b6 See the Snowman left sidebar recipe for an example of styling passages using the id CSS selector .","title":"Snowman"},{"location":"cssselectors/snowman/snowman_cssselectors.html#css-selectors-snowman-v130","text":"","title":"\"CSS Selectors\": Snowman (v1.3.0)"},{"location":"cssselectors/snowman/snowman_cssselectors.html#summary","text":"This example shows how to use CSS selectors to style different areas of the page. Snowman uses a simple HTML structure of a <div> with id \"passage\" directly below (inside) the <body> tag. < body > < div id = \"passage\" > ... </ div > </ body >","title":"Summary"},{"location":"cssselectors/snowman/snowman_cssselectors.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"cssselectors/snowman/snowman_cssselectors.html#twee-code","text":":: StoryTitle CSS Selectors in Snowman :: UserStylesheet [stylesheet] body { background-color: lightgreen; } #passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage, which has a red border. [[Second]] :: Second This passage also has a red border. Download: Twee Code","title":"Twee Code"},{"location":"cssselectors/snowman/snowman_cssselectors.html#see-also","text":"See the Snowman left sidebar recipe for an example of styling passages using the id CSS selector .","title":"See Also"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html","text":"\"CSS Selectors\": Snowman (v2.0.2) \u00b6 Summary \u00b6 This example shows how to use CSS selectors to style different areas of the page. Snowman 2.0 uses the elements <tw-story> and <tw-passage> to show a passage. It also changes from an id to a class named \"passage\" from previous versions of Snowman. < body > < tw-story > < tw-passage class = \"passage\" ></ tw-passage > </ tw-story > </ body > Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle CSS Selectors in Snowman :: UserStylesheet [stylesheet] body { background-color: lightgreen; } tw-passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage, which has a red border. [[Second]] :: Second This passage also has a red border. Download: Twee Code See Also \u00b6 See the Snowman left sidebar recipe for an example of styling passages using the id CSS selector .","title":"Snowman (v2.0 and later)"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html#css-selectors-snowman-v202","text":"","title":"\"CSS Selectors\": Snowman (v2.0.2)"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html#summary","text":"This example shows how to use CSS selectors to style different areas of the page. Snowman 2.0 uses the elements <tw-story> and <tw-passage> to show a passage. It also changes from an id to a class named \"passage\" from previous versions of Snowman. < body > < tw-story > < tw-passage class = \"passage\" ></ tw-passage > </ tw-story > </ body >","title":"Summary"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html#twee-code","text":":: StoryTitle CSS Selectors in Snowman :: UserStylesheet [stylesheet] body { background-color: lightgreen; } tw-passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage, which has a red border. [[Second]] :: Second This passage also has a red border. Download: Twee Code","title":"Twee Code"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html#see-also","text":"See the Snowman left sidebar recipe for an example of styling passages using the id CSS selector .","title":"See Also"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html","text":"\"CSS Selectors\": SugarCube (v2.18) \u00b6 Summary \u00b6 This example shows how to use CSS selectors to style different areas of the page. SugarCube uses nested <div> s with ids to structure its significant elements. Most notably the sidebar is a <div> with id \"ui-bar\". However, these elements are often more easily styled by other means, such as selecting the <body> element to style the entire page, and the \"passage\" class to style the current passage. < body > < div id = \"ui-bar\" > ... </ div > < div id = \"story\" > < div id = \"passages\" > < div id = \"a-passage-name\" class = \"passage\" > ... </ div > </ div > </ div > </ body > Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle CSS Selectors in SugarCube :: UserStylesheet [stylesheet] body { background-color: darkgreen; } #ui-bar { border: 2px solid blue; } .passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage (red border) and the sidebar (blue border). [[Second]] :: Second This passage also has a red border. Download: Twee Code See Also \u00b6 See the SugarCube images recipe for an example of using a single class CSS selector to style a different element. See styling passages by tag for an example of using two classes to style a single element. Bleached \u00b6 Bleached is an alternate, light-colored stylesheet for SugarCube, and a good example of how to change SugarCube's default colors using CSS.","title":"SugarCube"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#css-selectors-sugarcube-v218","text":"","title":"\"CSS Selectors\": SugarCube (v2.18)"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#summary","text":"This example shows how to use CSS selectors to style different areas of the page. SugarCube uses nested <div> s with ids to structure its significant elements. Most notably the sidebar is a <div> with id \"ui-bar\". However, these elements are often more easily styled by other means, such as selecting the <body> element to style the entire page, and the \"passage\" class to style the current passage. < body > < div id = \"ui-bar\" > ... </ div > < div id = \"story\" > < div id = \"passages\" > < div id = \"a-passage-name\" class = \"passage\" > ... </ div > </ div > </ div > </ body >","title":"Summary"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#twee-code","text":":: StoryTitle CSS Selectors in SugarCube :: UserStylesheet [stylesheet] body { background-color: darkgreen; } #ui-bar { border: 2px solid blue; } .passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage (red border) and the sidebar (blue border). [[Second]] :: Second This passage also has a red border. Download: Twee Code","title":"Twee Code"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#see-also","text":"See the SugarCube images recipe for an example of using a single class CSS selector to style a different element. See styling passages by tag for an example of using two classes to style a single element.","title":"See Also"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#bleached","text":"Bleached is an alternate, light-colored stylesheet for SugarCube, and a good example of how to change SugarCube's default colors using CSS.","title":"Bleached"},{"location":"cycling/chapbook/chapbook_cycling.html","text":"\"Cycling Choices\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Chapbook provides the {cycling link} modifier for creating a cycling link effect. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Cycling Links :: Start This cycling link example remembers the choice made: {cycling link for: 'hair', choices: [\"Black\", \"Brown\", \"Blonde\", \"Red\", \"White\"]} This cycling-link example will disappear (show empty string) on its last choice: {cycling link for: 'breakfast', choices: [\"Two eggs\", \"One egg\", \"\"]} Download: Twee Code","title":"Chapbook"},{"location":"cycling/chapbook/chapbook_cycling.html#cycling-choices-chapbook-v100","text":"","title":"\"Cycling Choices\": Chapbook (v1.0.0)"},{"location":"cycling/chapbook/chapbook_cycling.html#summary","text":"Chapbook provides the {cycling link} modifier for creating a cycling link effect.","title":"Summary"},{"location":"cycling/chapbook/chapbook_cycling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"cycling/chapbook/chapbook_cycling.html#twee-code","text":":: StoryTitle Chapbook: Cycling Links :: Start This cycling link example remembers the choice made: {cycling link for: 'hair', choices: [\"Black\", \"Brown\", \"Blonde\", \"Red\", \"White\"]} This cycling-link example will disappear (show empty string) on its last choice: {cycling link for: 'breakfast', choices: [\"Two eggs\", \"One egg\", \"\"]} Download: Twee Code","title":"Twee Code"},{"location":"cycling/harlowe/harlowe_cycling.html","text":"\"Cycling Choices\": Harlowe (v2.0) \u00b6 Note: This example is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values. Summary \u00b6 \"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. The cycle starts with the use of the (display:) macro and the assumption that the 1st element in the $choices Array is the currently selected choice. If the user clicks on the link (created through using the (link:) macro), the $choices array is updated using the (rotated:) macro. This causes the current 1st element to be moved to the end of the array, making the element that was previously 2nd to now be 1st. At the end of every cycle, the currently selected value is always the 1st element in the $choices array. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Cycling Choices in Harlowe :: Start (set: $choices to (array: \"First\", \"Second\", \"Third\")) Click options to cycle: [(display: \"Cycling\")]<choice| [[Submit|Results]] :: Cycling { (link: (text: $choices's 1st) )[ (set: $choices to (rotated: -1, ...$choices)) (replace: ?choice)[(display: \"Cycling\")] ] } :: Results Selected choice: (print: $choices's 1st) Download: Twee Code See Also \u00b6 Setting and Showing Variables , Modularity","title":"Harlowe"},{"location":"cycling/harlowe/harlowe_cycling.html#cycling-choices-harlowe-v20","text":"Note: This example is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values.","title":"\"Cycling Choices\": Harlowe (v2.0)"},{"location":"cycling/harlowe/harlowe_cycling.html#summary","text":"\"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. The cycle starts with the use of the (display:) macro and the assumption that the 1st element in the $choices Array is the currently selected choice. If the user clicks on the link (created through using the (link:) macro), the $choices array is updated using the (rotated:) macro. This causes the current 1st element to be moved to the end of the array, making the element that was previously 2nd to now be 1st. At the end of every cycle, the currently selected value is always the 1st element in the $choices array.","title":"Summary"},{"location":"cycling/harlowe/harlowe_cycling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"cycling/harlowe/harlowe_cycling.html#twee-code","text":":: StoryTitle Cycling Choices in Harlowe :: Start (set: $choices to (array: \"First\", \"Second\", \"Third\")) Click options to cycle: [(display: \"Cycling\")]<choice| [[Submit|Results]] :: Cycling { (link: (text: $choices's 1st) )[ (set: $choices to (rotated: -1, ...$choices)) (replace: ?choice)[(display: \"Cycling\")] ] } :: Results Selected choice: (print: $choices's 1st) Download: Twee Code","title":"Twee Code"},{"location":"cycling/harlowe/harlowe_cycling.html#see-also","text":"Setting and Showing Variables , Modularity","title":"See Also"},{"location":"cycling/harlowe_3/harlowe_cycling.html","text":"\"Cycling Choices\": Harlowe (v3.0) \u00b6 Summary \u00b6 Starting in Harlowe 3.0.1, the (cycling-link) macro was introduced. Clicking on the link it provides allows for cycling though its possibilities. Combined with the bind keyword, its selection can be saved to a variable. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe 3: Cycling Links :: Start This cycling-link example remembers the choice made: (cycling-link: bind $hair, \"Black\", \"Brown\", \"Blonde\", \"Red\", \"White\") This cycling-link example does not: (cycling-link: \"Cat\", \"Dog\", \"Fish\", \"Mouse\") This cycling-link example will disappear (show empty string) on its last choice: (cycling-link: \"Two eggs\", \"One egg\", \"\") [[Show result]] :: Show result The choice of hair was $hair. Download: Twee Code See Also \u00b6 Setting and Showing Variables , Modularity","title":"Harlowe (v3.0.1 or later)"},{"location":"cycling/harlowe_3/harlowe_cycling.html#cycling-choices-harlowe-v30","text":"","title":"\"Cycling Choices\": Harlowe (v3.0)"},{"location":"cycling/harlowe_3/harlowe_cycling.html#summary","text":"Starting in Harlowe 3.0.1, the (cycling-link) macro was introduced. Clicking on the link it provides allows for cycling though its possibilities. Combined with the bind keyword, its selection can be saved to a variable.","title":"Summary"},{"location":"cycling/harlowe_3/harlowe_cycling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"cycling/harlowe_3/harlowe_cycling.html#twee-code","text":":: StoryTitle Harlowe 3: Cycling Links :: Start This cycling-link example remembers the choice made: (cycling-link: bind $hair, \"Black\", \"Brown\", \"Blonde\", \"Red\", \"White\") This cycling-link example does not: (cycling-link: \"Cat\", \"Dog\", \"Fish\", \"Mouse\") This cycling-link example will disappear (show empty string) on its last choice: (cycling-link: \"Two eggs\", \"One egg\", \"\") [[Show result]] :: Show result The choice of hair was $hair. Download: Twee Code","title":"Twee Code"},{"location":"cycling/harlowe_3/harlowe_cycling.html#see-also","text":"Setting and Showing Variables , Modularity","title":"See Also"},{"location":"cycling/snowman/snowman_cycling.html","text":"\"Cycling Choices\": Snowman (v1.3.0) \u00b6 Summary \u00b6 \"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. Starting with iterating over all elements with the class cycle, each element's 'choices' and 'selection' attribute values are saved as global variables not expected to change during the story. Next, through using jQuery, a .click() trigger is set for all elements with the class \"cycle\". When triggered, the global values of \"choices\" and \"selection\" for the element are retrieved and the \"selection\" updated. The text() of the element is set to the selection index of the choices array. Finally, the global variables are updated according to the element's id for later access and to prevent changes to the history of the story potentially affecting saved values. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Cycling Choices in Snowman :: UserScript[script] $(function() { // Create a global object window.setup = window.setup || {}; // Iterate through all elements with the class 'cycle' // For each, save the current 'choices' and 'selection' // (This sets all the 'default' values.) $('.cycle').each(function() { // Create a global object for each 'id' var id = $(this).attr('id'); setup[id] = {}; // Save the current 'choices' for each var choices = JSON.parse($(this).attr(\"data-cycling-choices\")); setup[id].choices = choices; // Save the current 'selection' for each var selection = $(this).attr(\"data-cycling-selection\"); setup[id].selection = selection; }); $('.cycle').click(function(){ // Save the 'id' var id = $(this).attr('id'); // Retrieve the global 'choices' var choices = setup[id].choices; // Retrieve the global 'selection' var selection = setup[id].selection; // Update the 'selection' number selection++; // Check if 'selection' is greater than length of choices if(selection >= choices.length) { selection = 0; } // Update the 'selection' on the element $(this).attr(\"data-cycling-selection\", selection); // Update the text of the element with the choice $(this).text(choices[selection]); // Update the global values of 'choices' and 'selection' setup[id].choices = choices; setup[id].selection = selection; }); }); :: Start <a href='javascript:void(0)' id='cycleOne' class='cycle' data-cycling-choices='[\"One\", \"Two\", \"Three\"]' data-cycling-selection=0>One</a> [[Submit|Results]] :: Results <%= setup[\"cycleOne\"].choices[setup[\"cycleOne\"].selection] %> Download: Twee Code See Also \u00b6 Setting and Showing Variables","title":"Snowman"},{"location":"cycling/snowman/snowman_cycling.html#cycling-choices-snowman-v130","text":"","title":"\"Cycling Choices\": Snowman (v1.3.0)"},{"location":"cycling/snowman/snowman_cycling.html#summary","text":"\"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. Starting with iterating over all elements with the class cycle, each element's 'choices' and 'selection' attribute values are saved as global variables not expected to change during the story. Next, through using jQuery, a .click() trigger is set for all elements with the class \"cycle\". When triggered, the global values of \"choices\" and \"selection\" for the element are retrieved and the \"selection\" updated. The text() of the element is set to the selection index of the choices array. Finally, the global variables are updated according to the element's id for later access and to prevent changes to the history of the story potentially affecting saved values.","title":"Summary"},{"location":"cycling/snowman/snowman_cycling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"cycling/snowman/snowman_cycling.html#twee-code","text":":: StoryTitle Cycling Choices in Snowman :: UserScript[script] $(function() { // Create a global object window.setup = window.setup || {}; // Iterate through all elements with the class 'cycle' // For each, save the current 'choices' and 'selection' // (This sets all the 'default' values.) $('.cycle').each(function() { // Create a global object for each 'id' var id = $(this).attr('id'); setup[id] = {}; // Save the current 'choices' for each var choices = JSON.parse($(this).attr(\"data-cycling-choices\")); setup[id].choices = choices; // Save the current 'selection' for each var selection = $(this).attr(\"data-cycling-selection\"); setup[id].selection = selection; }); $('.cycle').click(function(){ // Save the 'id' var id = $(this).attr('id'); // Retrieve the global 'choices' var choices = setup[id].choices; // Retrieve the global 'selection' var selection = setup[id].selection; // Update the 'selection' number selection++; // Check if 'selection' is greater than length of choices if(selection >= choices.length) { selection = 0; } // Update the 'selection' on the element $(this).attr(\"data-cycling-selection\", selection); // Update the text of the element with the choice $(this).text(choices[selection]); // Update the global values of 'choices' and 'selection' setup[id].choices = choices; setup[id].selection = selection; }); }); :: Start <a href='javascript:void(0)' id='cycleOne' class='cycle' data-cycling-choices='[\"One\", \"Two\", \"Three\"]' data-cycling-selection=0>One</a> [[Submit|Results]] :: Results <%= setup[\"cycleOne\"].choices[setup[\"cycleOne\"].selection] %> Download: Twee Code","title":"Twee Code"},{"location":"cycling/snowman/snowman_cycling.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"cycling/sugarcube/sugarcube_cycling.html","text":"\"Cycling Choices\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. The cycle starts with the use of the <<include>> macro and assumption of * $choicesCount beginning at the number -1. Within the passage \"Cycling\", the first 'cycle' begins with testing if the variable $choices exists. If it does not, $choices and $choicesCount* are set (created) to their initial values. Next, $choicesCount is then increased by one to the start value of 0 (the first location of an array in SugarCube) and the position of $choices is shown based on this. If the user clicks on the link (created through using the <<linkreplace>> and <<include>> macros) again, future 'cycles' test if $choicesCount increases beyond the number of values in the $choices array and resets it to 0. At the end of every cycle, the currently selected value is stored in the variable $cyclingResult for future access and usage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Cycling Choices in SugarCube :: Start Click options to cycle: <<include \"Cycling\">> [[Submit|Results]] :: Cycling <<silently>> <<if not $choices>> <<set $choicesCount to -1>> <<set $choices to [\"First\", \"Second\", \"Third\"]>> <</if>> <<set $choicesCount to $choicesCount + 1>> <<if $choicesCount >= $choices.length>> <<set $choicesCount to 0>> <</if>> <<set $cyclingResult to $choices[$choicesCount]>> <</silently>> \\<<linkreplace $choices[$choicesCount]>><<include \"Cycling\">><</linkreplace>> :: Results $cyclingResult Download: Twee Code See Also \u00b6 Setting and Showing Variables , Modularity","title":"SugarCube"},{"location":"cycling/sugarcube/sugarcube_cycling.html#cycling-choices-sugarcube-v218","text":"","title":"\"Cycling Choices\": SugarCube (v2.18)"},{"location":"cycling/sugarcube/sugarcube_cycling.html#summary","text":"\"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. The cycle starts with the use of the <<include>> macro and assumption of * $choicesCount beginning at the number -1. Within the passage \"Cycling\", the first 'cycle' begins with testing if the variable $choices exists. If it does not, $choices and $choicesCount* are set (created) to their initial values. Next, $choicesCount is then increased by one to the start value of 0 (the first location of an array in SugarCube) and the position of $choices is shown based on this. If the user clicks on the link (created through using the <<linkreplace>> and <<include>> macros) again, future 'cycles' test if $choicesCount increases beyond the number of values in the $choices array and resets it to 0. At the end of every cycle, the currently selected value is stored in the variable $cyclingResult for future access and usage.","title":"Summary"},{"location":"cycling/sugarcube/sugarcube_cycling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"cycling/sugarcube/sugarcube_cycling.html#twee-code","text":":: StoryTitle Cycling Choices in SugarCube :: Start Click options to cycle: <<include \"Cycling\">> [[Submit|Results]] :: Cycling <<silently>> <<if not $choices>> <<set $choicesCount to -1>> <<set $choices to [\"First\", \"Second\", \"Third\"]>> <</if>> <<set $choicesCount to $choicesCount + 1>> <<if $choicesCount >= $choices.length>> <<set $choicesCount to 0>> <</if>> <<set $cyclingResult to $choices[$choicesCount]>> <</silently>> \\<<linkreplace $choices[$choicesCount]>><<include \"Cycling\">><</linkreplace>> :: Results $cyclingResult Download: Twee Code","title":"Twee Code"},{"location":"cycling/sugarcube/sugarcube_cycling.html#see-also","text":"Setting and Showing Variables , Modularity","title":"See Also"},{"location":"dateandtime/chapbook/chapbook_dateandtime.html","text":"\"Date and Time\": Chapbook (1.0.0) \u00b6 Summary \u00b6 Using lookups , Chapbook can easily retrieve the current month, day, and year. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Date and Time in Chapbook :: Start The current month number is {now.month}. The current day number is {now.day}. The current full-year number is {now.year}. Download: Twee Code","title":"Chapbook"},{"location":"dateandtime/chapbook/chapbook_dateandtime.html#date-and-time-chapbook-100","text":"","title":"\"Date and Time\": Chapbook (1.0.0)"},{"location":"dateandtime/chapbook/chapbook_dateandtime.html#summary","text":"Using lookups , Chapbook can easily retrieve the current month, day, and year.","title":"Summary"},{"location":"dateandtime/chapbook/chapbook_dateandtime.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dateandtime/chapbook/chapbook_dateandtime.html#twee-code","text":":: StoryTitle Date and Time in Chapbook :: Start The current month number is {now.month}. The current day number is {now.day}. The current full-year number is {now.year}. Download: Twee Code","title":"Twee Code"},{"location":"dateandtime/harlowe/harlowe_dateandtime.html","text":"\"Date and Time\": Harlowe (v2.1) \u00b6 Summary \u00b6 \"Date and Time\" demonstrates how to use the (current-date:) , (current-time:) , and other time-related macros in Harlowe. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Date and Time in Harlowe :: Start The current date is (current-date:). The current time is (current-time: ). The current day (of the month) is (monthday: ). The current day is (weekday: ). Download: Twee Code","title":"Harlowe"},{"location":"dateandtime/harlowe/harlowe_dateandtime.html#date-and-time-harlowe-v21","text":"","title":"\"Date and Time\": Harlowe (v2.1)"},{"location":"dateandtime/harlowe/harlowe_dateandtime.html#summary","text":"\"Date and Time\" demonstrates how to use the (current-date:) , (current-time:) , and other time-related macros in Harlowe.","title":"Summary"},{"location":"dateandtime/harlowe/harlowe_dateandtime.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dateandtime/harlowe/harlowe_dateandtime.html#twee-code","text":":: StoryTitle Date and Time in Harlowe :: Start The current date is (current-date:). The current time is (current-time: ). The current day (of the month) is (monthday: ). The current day is (weekday: ). Download: Twee Code","title":"Twee Code"},{"location":"dateandtime/snowman/snowman_dateandtime.html","text":"\"Date and Time\": Snowman (v1.3) \u00b6 Summary \u00b6 \"Date and Time\" demonstrates how to use the JavaScript Date() functionality in Snowman. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Date and Time in Snowman :: Start The current time (in milliseconds since January 1, 1970 00:00:00 UTC) is <%= Date.now() %> <% window.setup = {}; window.setup.newDate = new Date(); %> The current month is <%= setup.newDate.getMonth() %>. The current day is <%= setup.newDate.getDay() %>. The current hour is <%= setup.newDate.getHours() %>. The current minute is <%= setup.newDate.getMinutes() %>. The current fullyear is <%= setup.newDate.getFullYear() %>. <% window.setup.originalDate = new Date(\"October 20, 2018\") %> It has been <%= Date.now() - setup.originalDate%> milliseconds since October 20, 2018. Download: Twee Code","title":"Snowman"},{"location":"dateandtime/snowman/snowman_dateandtime.html#date-and-time-snowman-v13","text":"","title":"\"Date and Time\": Snowman (v1.3)"},{"location":"dateandtime/snowman/snowman_dateandtime.html#summary","text":"\"Date and Time\" demonstrates how to use the JavaScript Date() functionality in Snowman.","title":"Summary"},{"location":"dateandtime/snowman/snowman_dateandtime.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dateandtime/snowman/snowman_dateandtime.html#twee-code","text":":: StoryTitle Date and Time in Snowman :: Start The current time (in milliseconds since January 1, 1970 00:00:00 UTC) is <%= Date.now() %> <% window.setup = {}; window.setup.newDate = new Date(); %> The current month is <%= setup.newDate.getMonth() %>. The current day is <%= setup.newDate.getDay() %>. The current hour is <%= setup.newDate.getHours() %>. The current minute is <%= setup.newDate.getMinutes() %>. The current fullyear is <%= setup.newDate.getFullYear() %>. <% window.setup.originalDate = new Date(\"October 20, 2018\") %> It has been <%= Date.now() - setup.originalDate%> milliseconds since October 20, 2018. Download: Twee Code","title":"Twee Code"},{"location":"dateandtime/sugarcube/sugarcube_dateandtime.html","text":"\"Date and Time\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Date and Time\" demonstrates how to use the JavaScript Date() functionality in SugarCube. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Date and Time in SugarCube :: Start <<print \"The current time (in milliseconds since January 1, 1970 00:00:00 UTC) is \" + Date.now()>> <<set $date to new Date()>> The current month is <<print $date.getMonth() >>. The current day is <<print $date.getDay() >>. The current hour is <<print $date.getHours() >>. The current minute is <<print $date.getMinutes() >>. The current fullyear is <<print $date.getFullYear() >>. <<set $originalDate to new Date(\"October 20, 2018\")>> <<set $timeDifference to Date.now() - $originalDate>> It has been $timeDifference milliseconds since October 20, 2018. Download: Twee Code","title":"SugarCube"},{"location":"dateandtime/sugarcube/sugarcube_dateandtime.html#date-and-time-sugarcube-v218","text":"","title":"\"Date and Time\": SugarCube (v2.18)"},{"location":"dateandtime/sugarcube/sugarcube_dateandtime.html#summary","text":"\"Date and Time\" demonstrates how to use the JavaScript Date() functionality in SugarCube.","title":"Summary"},{"location":"dateandtime/sugarcube/sugarcube_dateandtime.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dateandtime/sugarcube/sugarcube_dateandtime.html#twee-code","text":":: StoryTitle Date and Time in SugarCube :: Start <<print \"The current time (in milliseconds since January 1, 1970 00:00:00 UTC) is \" + Date.now()>> <<set $date to new Date()>> The current month is <<print $date.getMonth() >>. The current day is <<print $date.getDay() >>. The current hour is <<print $date.getHours() >>. The current minute is <<print $date.getMinutes() >>. The current fullyear is <<print $date.getFullYear() >>. <<set $originalDate to new Date(\"October 20, 2018\")>> <<set $timeDifference to Date.now() - $originalDate>> It has been $timeDifference milliseconds since October 20, 2018. Download: Twee Code","title":"Twee Code"},{"location":"delayedtext/chapbook/chapbook_delayedtext.html","text":"\"Delayed Text\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 In Chapbook, the [after] modifier shows text after a set amount of time. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Delayed Text :: Start [after 5s; append] It has been 5 seconds. Show the text! Download: Twee Code","title":"Chapbook"},{"location":"delayedtext/chapbook/chapbook_delayedtext.html#delayed-text-chapbook-v100","text":"","title":"\"Delayed Text\": Chapbook (v1.0.0)"},{"location":"delayedtext/chapbook/chapbook_delayedtext.html#summary","text":"In Chapbook, the [after] modifier shows text after a set amount of time.","title":"Summary"},{"location":"delayedtext/chapbook/chapbook_delayedtext.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"delayedtext/chapbook/chapbook_delayedtext.html#twee-code","text":":: StoryTitle Chapbook: Delayed Text :: Start [after 5s; append] It has been 5 seconds. Show the text! Download: Twee Code","title":"Twee Code"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html","text":"\"Delayed Text\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Delayed Text\" uses the (live:) and (stop:) macros to create a loop that runs only once with a delay of five seconds. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Delayed Text in Harlowe :: Start { (live: 5s)[ (stop:) It has been 5 seconds. Show the text! ] } Download: Twee Code See Also \u00b6 Typewriter Effect","title":"Harlowe"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html#delayed-text-harlowe-v20","text":"","title":"\"Delayed Text\": Harlowe (v2.0)"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html#summary","text":"\"Delayed Text\" uses the (live:) and (stop:) macros to create a loop that runs only once with a delay of five seconds.","title":"Summary"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html#twee-code","text":":: StoryTitle Delayed Text in Harlowe :: Start { (live: 5s)[ (stop:) It has been 5 seconds. Show the text! ] } Download: Twee Code","title":"Twee Code"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html#see-also","text":"Typewriter Effect","title":"See Also"},{"location":"delayedtext/snowman/snowman_delayedtext.html","text":"\"Delayed Text\": Snowman (v1.3.0) \u00b6 Summary \u00b6 \"Delayed Text\" uses the delay() function in Underscore combined with a jQuery selector to target an element with the ID of \"results\" to change its internal text after five seconds. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Delayed Text in Snowman :: Start <div id=\"results\"></div> <% _.delay( function() { $(\"#results\").text(\"It has been 5 seconds. Show the text!\"); }, 5000); %> Download: Twee Code See Also \u00b6 Typewriter Effect","title":"Snowman"},{"location":"delayedtext/snowman/snowman_delayedtext.html#delayed-text-snowman-v130","text":"","title":"\"Delayed Text\": Snowman (v1.3.0)"},{"location":"delayedtext/snowman/snowman_delayedtext.html#summary","text":"\"Delayed Text\" uses the delay() function in Underscore combined with a jQuery selector to target an element with the ID of \"results\" to change its internal text after five seconds.","title":"Summary"},{"location":"delayedtext/snowman/snowman_delayedtext.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"delayedtext/snowman/snowman_delayedtext.html#twee-code","text":":: StoryTitle Delayed Text in Snowman :: Start <div id=\"results\"></div> <% _.delay( function() { $(\"#results\").text(\"It has been 5 seconds. Show the text!\"); }, 5000); %> Download: Twee Code","title":"Twee Code"},{"location":"delayedtext/snowman/snowman_delayedtext.html#see-also","text":"Typewriter Effect","title":"See Also"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html","text":"\"Delayed Text\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Delayed Text\" uses the <<timed>> macro to delay five seconds before showing text. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Delayed Text in SugarCube :: Start <<timed 5s>> It has been 5 seconds. Show the text! <</timed>> Download: Twee Code See Also \u00b6 Typewriter Effect","title":"SugarCube"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html#delayed-text-sugarcube-v218","text":"","title":"\"Delayed Text\": SugarCube (v2.18)"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html#summary","text":"\"Delayed Text\" uses the <<timed>> macro to delay five seconds before showing text.","title":"Summary"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html#twee-code","text":":: StoryTitle Delayed Text in SugarCube :: Start <<timed 5s>> It has been 5 seconds. Show the text! <</timed>> Download: Twee Code","title":"Twee Code"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html#see-also","text":"Typewriter Effect","title":"See Also"},{"location":"deletingvariables/chapbook/chapbook_deletingvariables.html","text":"\"Deleting Variables\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 While variables created using the [JavaScript] modifier can be deleted within their blocks, any created within the Vars Section can simply be set to undefined to make them unable to be shown within an expression using the engine.state.set() function. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Deleting Variables :: Start color: \"red\" -- [JavaScript] engine.state.set(\"color\", undefined) [continued] What is color? {color} Download: Twee Code","title":"Chapbook"},{"location":"deletingvariables/chapbook/chapbook_deletingvariables.html#deleting-variables-chapbook-v100","text":"","title":"\"Deleting Variables\": Chapbook (v1.0.0)"},{"location":"deletingvariables/chapbook/chapbook_deletingvariables.html#summary","text":"While variables created using the [JavaScript] modifier can be deleted within their blocks, any created within the Vars Section can simply be set to undefined to make them unable to be shown within an expression using the engine.state.set() function.","title":"Summary"},{"location":"deletingvariables/chapbook/chapbook_deletingvariables.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"deletingvariables/chapbook/chapbook_deletingvariables.html#twee-code","text":":: StoryTitle Chapbook: Deleting Variables :: Start color: \"red\" -- [JavaScript] engine.state.set(\"color\", undefined) [continued] What is color? {color} Download: Twee Code","title":"Twee Code"},{"location":"deletingvariables/snowman/snowman_deletingvariables.html","text":"\"Deleting Variables\": Snowman (v1.3) \u00b6 Summary \u00b6 Through using the Underscore template library available in Snowman, JavaScript can be used within passages without a <script> tag. The delete operator can be used in JavaScript to remove a variable. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Deleting Variables :: UserScript[script] window.story = {}; window.story.example = \"an example!\"; :: Start What is the value of the property \"example\" of the object window.story? <%= window.story.example %> [[Delete the value!]] :: Delete the value! <% // Delete the variable delete window.story.example; %> [[Test for value]] :: Test for value Does \"example\" still exist as part of the object window.story? <%= window.story.hasOwnProperty(\"example\") %> Download: Twee Code","title":"Snowman"},{"location":"deletingvariables/snowman/snowman_deletingvariables.html#deleting-variables-snowman-v13","text":"","title":"\"Deleting Variables\": Snowman (v1.3)"},{"location":"deletingvariables/snowman/snowman_deletingvariables.html#summary","text":"Through using the Underscore template library available in Snowman, JavaScript can be used within passages without a <script> tag. The delete operator can be used in JavaScript to remove a variable.","title":"Summary"},{"location":"deletingvariables/snowman/snowman_deletingvariables.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"deletingvariables/snowman/snowman_deletingvariables.html#twee-code","text":":: StoryTitle Snowman: Deleting Variables :: UserScript[script] window.story = {}; window.story.example = \"an example!\"; :: Start What is the value of the property \"example\" of the object window.story? <%= window.story.example %> [[Delete the value!]] :: Delete the value! <% // Delete the variable delete window.story.example; %> [[Test for value]] :: Test for value Does \"example\" still exist as part of the object window.story? <%= window.story.hasOwnProperty(\"example\") %> Download: Twee Code","title":"Twee Code"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html","text":"\"Deleting Variables\": SugarCube (v2.18) \u00b6 Summary \u00b6 In SugarCube, <<unset>> works as a \"reverse\" to <<set>> . Instead of setting a value, it deletes it. <<unset>> works on both temporary and story variables. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Unsetting Variables :: Start <<set $proof to \"hand-written letter\">> [[Accidentally drop the letter]] :: Accidentally drop the letter <<unset $proof>> [[Present the letter to the sheriff]] :: Present the letter to the sheriff You present the $proof to the sheriff, not realizing the rain has washed away the ink from the hand-written letter. Download: Twee Code See Also \u00b6 Conditional Statements , Setting and Showing","title":"SugarCube"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html#deleting-variables-sugarcube-v218","text":"","title":"\"Deleting Variables\": SugarCube (v2.18)"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html#summary","text":"In SugarCube, <<unset>> works as a \"reverse\" to <<set>> . Instead of setting a value, it deletes it. <<unset>> works on both temporary and story variables.","title":"Summary"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html#twee-code","text":":: StoryTitle SugarCube: Unsetting Variables :: Start <<set $proof to \"hand-written letter\">> [[Accidentally drop the letter]] :: Accidentally drop the letter <<unset $proof>> [[Present the letter to the sheriff]] :: Present the letter to the sheriff You present the $proof to the sheriff, not realizing the rain has washed away the ink from the hand-written letter. Download: Twee Code","title":"Twee Code"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html#see-also","text":"Conditional Statements , Setting and Showing","title":"See Also"},{"location":"dicerolling/chapbook/chapbook_dicerolling.html","text":"\"Dice Rolling\": Chapbook (v1.0) \u00b6 Summary \u00b6 This example demonstrates how to create the same effects of rolling various physical dice through using the random global variable in Chapbook. Inserts are used to display the use of random in the passage. For calculations, a var section and temporary variables are used because expressions cannot be used within inserts. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Rolling Dice :: Start _example1: random.d4 + 4 _example2: random.d6 - 2 _example3: random.d6 + random.d6 + 10 -- Rolling a 1d4: {random.d4} Rolling a 1d6: {random.d6} Rolling a 1d8: {random.d8} Rolling a 1d10: {random.d10} Rolling a 1d12: {random.d12} Rolling a 1d20: {random.d20} Rolling a 1d100: {random.d100} Rolling a 1d4 + 4: {_example1} Rolling a 1d6 - 2: {_example2} Rolling a 2d6 + 10: {_example3} Download: Twee Code","title":"Chapbook"},{"location":"dicerolling/chapbook/chapbook_dicerolling.html#dice-rolling-chapbook-v10","text":"","title":"\"Dice Rolling\": Chapbook (v1.0)"},{"location":"dicerolling/chapbook/chapbook_dicerolling.html#summary","text":"This example demonstrates how to create the same effects of rolling various physical dice through using the random global variable in Chapbook. Inserts are used to display the use of random in the passage. For calculations, a var section and temporary variables are used because expressions cannot be used within inserts.","title":"Summary"},{"location":"dicerolling/chapbook/chapbook_dicerolling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dicerolling/chapbook/chapbook_dicerolling.html#twee-code","text":":: StoryTitle Chapbook: Rolling Dice :: Start _example1: random.d4 + 4 _example2: random.d6 - 2 _example3: random.d6 + random.d6 + 10 -- Rolling a 1d4: {random.d4} Rolling a 1d6: {random.d6} Rolling a 1d8: {random.d8} Rolling a 1d10: {random.d10} Rolling a 1d12: {random.d12} Rolling a 1d20: {random.d20} Rolling a 1d100: {random.d100} Rolling a 1d4 + 4: {_example1} Rolling a 1d6 - 2: {_example2} Rolling a 2d6 + 10: {_example3} Download: Twee Code","title":"Twee Code"},{"location":"dicerolling/harlowe/harlowe_dicerolling.html","text":"\"Dice Rolling\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using the (random:) macro and adding or subtracting numbers. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Dice Rolling :: Start Rolling a 1d4: (random: 1,4) Rolling a 1d6: (random: 1,6) Rolling a 1d8: (random: 1,8) Rolling a 1d10: (random: 1, 10) Rolling a 1d12: (random: 1, 12) Rolling a 1d20: (random: 1, 20) Rolling a 1d100: (random: 1, 100) Rolling a 1d4 + 4: (text: (random: 1, 4) + 4) Rolling a 1d6 - 2: (text: (random: 1, 6) - 2) Rolling a 2d6 + 10: (text: (random: 1, 6) + (random: 1, 6) + 10) Download: Twee Code","title":"Harlowe"},{"location":"dicerolling/harlowe/harlowe_dicerolling.html#dice-rolling-harlowe-v20","text":"","title":"\"Dice Rolling\": Harlowe (v2.0)"},{"location":"dicerolling/harlowe/harlowe_dicerolling.html#summary","text":"\"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using the (random:) macro and adding or subtracting numbers.","title":"Summary"},{"location":"dicerolling/harlowe/harlowe_dicerolling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dicerolling/harlowe/harlowe_dicerolling.html#twee-code","text":":: StoryTitle Harlowe: Dice Rolling :: Start Rolling a 1d4: (random: 1,4) Rolling a 1d6: (random: 1,6) Rolling a 1d8: (random: 1,8) Rolling a 1d10: (random: 1, 10) Rolling a 1d12: (random: 1, 12) Rolling a 1d20: (random: 1, 20) Rolling a 1d100: (random: 1, 100) Rolling a 1d4 + 4: (text: (random: 1, 4) + 4) Rolling a 1d6 - 2: (text: (random: 1, 6) - 2) Rolling a 2d6 + 10: (text: (random: 1, 6) + (random: 1, 6) + 10) Download: Twee Code","title":"Twee Code"},{"location":"dicerolling/snowman/snowman_dicerolling.html","text":"\"Dice Rolling\": Snowman (v1.3) \u00b6 Summary \u00b6 \"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using Underscore.js's _.random() function and its interpolating functionality. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Dice Rolling :: Start Rolling a 1d4: <%= _.random(1,4) %> Rolling a 1d6: <%= _.random(1,6) %> Rolling a 1d8: <%= _.random(1,8) %> Rolling a 1d10: <%= _.random(1, 10) %> Rolling a 1d12: <%= _.random(1, 12) %> Rolling a 1d20: <%= _.random(1, 20) %> Rolling a 1d100: <%= _.random(1, 100) %> Rolling a 1d4 + 4: <%= _.random(1, 4) + 4 %> Rolling a 1d6 - 2: <%= _.random(1, 6) - 2 %> Rolling a 2d6 + 10: <%= _.random(1, 6) + _.random(1, 6) + 10 %> Download: Twee Code","title":"Snowman"},{"location":"dicerolling/snowman/snowman_dicerolling.html#dice-rolling-snowman-v13","text":"","title":"\"Dice Rolling\": Snowman (v1.3)"},{"location":"dicerolling/snowman/snowman_dicerolling.html#summary","text":"\"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using Underscore.js's _.random() function and its interpolating functionality.","title":"Summary"},{"location":"dicerolling/snowman/snowman_dicerolling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dicerolling/snowman/snowman_dicerolling.html#twee-code","text":":: StoryTitle Snowman: Dice Rolling :: Start Rolling a 1d4: <%= _.random(1,4) %> Rolling a 1d6: <%= _.random(1,6) %> Rolling a 1d8: <%= _.random(1,8) %> Rolling a 1d10: <%= _.random(1, 10) %> Rolling a 1d12: <%= _.random(1, 12) %> Rolling a 1d20: <%= _.random(1, 20) %> Rolling a 1d100: <%= _.random(1, 100) %> Rolling a 1d4 + 4: <%= _.random(1, 4) + 4 %> Rolling a 1d6 - 2: <%= _.random(1, 6) - 2 %> Rolling a 2d6 + 10: <%= _.random(1, 6) + _.random(1, 6) + 10 %> Download: Twee Code","title":"Twee Code"},{"location":"dicerolling/sugarcube/sugarcube_dicerolling.html","text":"\"Dice Rolling\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using the random() function and the <<print>> macro to show the results. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Dice Rolling :: Start Rolling a 1d4: <<print random(1,4) >> Rolling a 1d6: <<print random(1,6) >> Rolling a 1d8: <<print random(1,8) >> Rolling a 1d10: <<print random(1, 10) >> Rolling a 1d12: <<print random(1, 12) >> Rolling a 1d20: <<print random(1, 20) >> Rolling a 1d100: <<print random(1, 100) >> Rolling a 1d4 + 4: <<print random(1, 4) + 4 >> Rolling a 1d6 - 2: <<print random(1, 6) - 2 >> Rolling a 2d6 + 10: <<print random(1, 6) + random(1, 6) + 10 >> Download: Twee Code","title":"SugarCube"},{"location":"dicerolling/sugarcube/sugarcube_dicerolling.html#dice-rolling-sugarcube-v218","text":"","title":"\"Dice Rolling\": SugarCube (v2.18)"},{"location":"dicerolling/sugarcube/sugarcube_dicerolling.html#summary","text":"\"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using the random() function and the <<print>> macro to show the results.","title":"Summary"},{"location":"dicerolling/sugarcube/sugarcube_dicerolling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dicerolling/sugarcube/sugarcube_dicerolling.html#twee-code","text":":: StoryTitle SugarCube: Dice Rolling :: Start Rolling a 1d4: <<print random(1,4) >> Rolling a 1d6: <<print random(1,6) >> Rolling a 1d8: <<print random(1,8) >> Rolling a 1d10: <<print random(1, 10) >> Rolling a 1d12: <<print random(1, 12) >> Rolling a 1d20: <<print random(1, 20) >> Rolling a 1d100: <<print random(1, 100) >> Rolling a 1d4 + 4: <<print random(1, 4) + 4 >> Rolling a 1d6 - 2: <<print random(1, 6) - 2 >> Rolling a 2d6 + 10: <<print random(1, 6) + random(1, 6) + 10 >> Download: Twee Code","title":"Twee Code"},{"location":"dropdown/chapbook/chapbook_dropdown.html","text":"\"Dropdown\": Chapbook (v1.0) \u00b6 Summary \u00b6 The insert {dropdown} is used to create a dropdown menu in Chapbook. The for: option specifies where to save the selected value and the choices: option defines what the choices should be for the user. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Dropdown :: Start {dropdown menu for: \"chosenValue\", choices: [\"Up\", \"Down\", \"Left\", \"Right\"]} [[Check Choice]] :: Check Choice You chose {chosenValue}. Download: Twee Code","title":"Chapbook"},{"location":"dropdown/chapbook/chapbook_dropdown.html#dropdown-chapbook-v10","text":"","title":"\"Dropdown\": Chapbook (v1.0)"},{"location":"dropdown/chapbook/chapbook_dropdown.html#summary","text":"The insert {dropdown} is used to create a dropdown menu in Chapbook. The for: option specifies where to save the selected value and the choices: option defines what the choices should be for the user.","title":"Summary"},{"location":"dropdown/chapbook/chapbook_dropdown.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dropdown/chapbook/chapbook_dropdown.html#twee-code","text":":: StoryTitle Chapbook: Dropdown :: Start {dropdown menu for: \"chosenValue\", choices: [\"Up\", \"Down\", \"Left\", \"Right\"]} [[Check Choice]] :: Check Choice You chose {chosenValue}. Download: Twee Code","title":"Twee Code"},{"location":"dropdown/harlowe/harlowe_dropdown.html","text":"\"Dropdown\": Harlowe (v3.0) \u00b6 Summary \u00b6 The macro (dropdown:) was introduced with Harlowe 3.0. It creates a drop-down menu based on the options supplied to it. In order to save the outcome of using the drop-down menu, the keyword bind is used to save the choice. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe 3: Dropdown :: Start Choose direction: (dropdown: bind $direction, \"Up\", \"Down\", \"Left\", \"Right\") [[Show result]] :: Show result The direction picked was $direction. Download: Twee Code","title":"Harlowe (v3.0.1 or later)"},{"location":"dropdown/harlowe/harlowe_dropdown.html#dropdown-harlowe-v30","text":"","title":"\"Dropdown\": Harlowe (v3.0)"},{"location":"dropdown/harlowe/harlowe_dropdown.html#summary","text":"The macro (dropdown:) was introduced with Harlowe 3.0. It creates a drop-down menu based on the options supplied to it. In order to save the outcome of using the drop-down menu, the keyword bind is used to save the choice.","title":"Summary"},{"location":"dropdown/harlowe/harlowe_dropdown.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dropdown/harlowe/harlowe_dropdown.html#twee-code","text":":: StoryTitle Harlowe 3: Dropdown :: Start Choose direction: (dropdown: bind $direction, \"Up\", \"Down\", \"Left\", \"Right\") [[Show result]] :: Show result The direction picked was $direction. Download: Twee Code","title":"Twee Code"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html","text":"\"Moving through a 'dungeon\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Moving through a 'dungeon'\" uses the (array:) macro to create a multidimensional array. Movement positions are then tracked through X and Y variables for a grid system. Each movement subtracts or adds to its corresponding X or Y position and is compared to those same positions within the array. Different directions are shown if movement is possible in that direction. A map of the array is created by iterating through temporary variables and placing different symbols matching walls, movement spaces, and the player herself. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Moving through Dungeons :: User Style [stylesheet] tw-include[type=\"startup\"], tw-hook[name=\"workarea\"] { display: none; } tw-hook[name=\"map\"] { font-family: monospace; line-height: 1.75; font-size: 16pt; } :: Start |map>[(display: \"Map\")] :: Map (set: $map to \"\")\\ |workarea>[ (for: each _y, ...(range: 1, $dungeon's length))[ (for: each _x, ...(range: 1, $dungeon's (_y)'s length))[ (if: _x is $positionX and _y is $positionY)[ (set: $map to it + \"P \") ] (else-if: $dungeon's (_y)'s (_x) is 0)[ (set: $map to it + \"&num; \") ] (else-if: $dungeon's (_y)'s (_x) is 1)[ (set: $map to it + \". \") ] (else-if: $dungeon's (_y)'s (_x) is 2)[ (set: $map to it + \"E \") ] ] (set: $map to it + \" <br>\") ] ]\\ $map { (set: $seperator to \"\")\\ (set: _north to $dungeon's ($positionY - 1)'s ($positionX)) (set: _east to $dungeon's ($positionY)'s ($positionX + 1)) (set: _south to $dungeon's ($positionY + 1)'s ($positionX)) (set: _west to $dungeon's ($positionY)'s ($positionX - 1)) (if: _north is 1)[ $seperator (link: \"North\")[ (set: $positionY to it - 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _north is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _east is 1)[ $seperator (link: \"East\")[ (set: $positionX to it + 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _east is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _south is 1)[ $seperator (link: \"South\")[ (set: $positionY to it + 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _south is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _west is 1)[ $seperator (link: \"West\")[ (set: $positionX to it - 1) (replace: ?map)[(display: \"Map\")] ] ] (else-if: _west is 2)[ $seperator[[Exit]] ] } :: Startup [startup] { (set: $dungeon to (array: (a: 0,0,0,0,0,0,0,0,0,0,0), (a: 0,1,1,1,0,1,1,1,1,1,0), (a: 0,0,0,1,0,0,0,0,0,1,0), (a: 0,1,0,1,1,1,1,1,0,1,0), (a: 0,1,0,0,0,0,0,1,0,1,0), (a: 0,1,1,1,1,1,1,1,0,1,0), (a: 0,0,0,0,0,0,0,1,0,1,0), (a: 0,1,0,1,1,1,1,1,1,1,0), (a: 0,1,0,1,0,0,0,1,0,0,0), (a: 0,1,1,1,0,1,1,1,1,2,0), (a: 0,0,0,0,0,0,0,0,0,0,0) ) ) (set: $positionX to 2) (set: $positionY to 2) } :: Exit You have exited the map. Download: Twee Code See Also \u00b6 Setting and Showing Variables , Conditional Statements , Modularity","title":"Harlowe"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html#moving-through-a-dungeon-harlowe-v20","text":"","title":"\"Moving through a 'dungeon\": Harlowe (v2.0)"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html#summary","text":"\"Moving through a 'dungeon'\" uses the (array:) macro to create a multidimensional array. Movement positions are then tracked through X and Y variables for a grid system. Each movement subtracts or adds to its corresponding X or Y position and is compared to those same positions within the array. Different directions are shown if movement is possible in that direction. A map of the array is created by iterating through temporary variables and placing different symbols matching walls, movement spaces, and the player herself.","title":"Summary"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html#twee-code","text":":: StoryTitle Harlowe: Moving through Dungeons :: User Style [stylesheet] tw-include[type=\"startup\"], tw-hook[name=\"workarea\"] { display: none; } tw-hook[name=\"map\"] { font-family: monospace; line-height: 1.75; font-size: 16pt; } :: Start |map>[(display: \"Map\")] :: Map (set: $map to \"\")\\ |workarea>[ (for: each _y, ...(range: 1, $dungeon's length))[ (for: each _x, ...(range: 1, $dungeon's (_y)'s length))[ (if: _x is $positionX and _y is $positionY)[ (set: $map to it + \"P \") ] (else-if: $dungeon's (_y)'s (_x) is 0)[ (set: $map to it + \"&num; \") ] (else-if: $dungeon's (_y)'s (_x) is 1)[ (set: $map to it + \". \") ] (else-if: $dungeon's (_y)'s (_x) is 2)[ (set: $map to it + \"E \") ] ] (set: $map to it + \" <br>\") ] ]\\ $map { (set: $seperator to \"\")\\ (set: _north to $dungeon's ($positionY - 1)'s ($positionX)) (set: _east to $dungeon's ($positionY)'s ($positionX + 1)) (set: _south to $dungeon's ($positionY + 1)'s ($positionX)) (set: _west to $dungeon's ($positionY)'s ($positionX - 1)) (if: _north is 1)[ $seperator (link: \"North\")[ (set: $positionY to it - 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _north is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _east is 1)[ $seperator (link: \"East\")[ (set: $positionX to it + 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _east is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _south is 1)[ $seperator (link: \"South\")[ (set: $positionY to it + 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _south is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _west is 1)[ $seperator (link: \"West\")[ (set: $positionX to it - 1) (replace: ?map)[(display: \"Map\")] ] ] (else-if: _west is 2)[ $seperator[[Exit]] ] } :: Startup [startup] { (set: $dungeon to (array: (a: 0,0,0,0,0,0,0,0,0,0,0), (a: 0,1,1,1,0,1,1,1,1,1,0), (a: 0,0,0,1,0,0,0,0,0,1,0), (a: 0,1,0,1,1,1,1,1,0,1,0), (a: 0,1,0,0,0,0,0,1,0,1,0), (a: 0,1,1,1,1,1,1,1,0,1,0), (a: 0,0,0,0,0,0,0,1,0,1,0), (a: 0,1,0,1,1,1,1,1,1,1,0), (a: 0,1,0,1,0,0,0,1,0,0,0), (a: 0,1,1,1,0,1,1,1,1,2,0), (a: 0,0,0,0,0,0,0,0,0,0,0) ) ) (set: $positionX to 2) (set: $positionY to 2) } :: Exit You have exited the map. Download: Twee Code","title":"Twee Code"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html#see-also","text":"Setting and Showing Variables , Conditional Statements , Modularity","title":"See Also"},{"location":"dungeonmoving/snowman/snowman_dungeonmoving.html","text":"\"Moving through a 'dungeon\": Snowman (1.3.0) \u00b6 Summary \u00b6 \"Moving through a 'dungeon'\" creates a multidimensional array. Movement positions are then tracked through X and Y variables for a grid system. Each movement subtracts or adds to its corresponding X or Y position and is compared to those same positions within the array. Different directions are shown if movement is possible in that direction. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: Start <div class=\"maze\"></div> <button type=\"button\" data-move=\"n\">North</button> <button type=\"button\" data-move=\"s\">South</button> <button type=\"button\" data-move=\"e\">East</button> <button type=\"button\" data-move=\"w\">West</button> <% /* 0s are walls, 1 are spaces, 2 is the goal. */ var maze = [ [0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0] ]; /* Where the player starts. The top left is (0, 0). */ var positionX = 1, positionY = 1; function renderMaze() { /* Transform the maze into ASCII art. */ /* What characters we use to display the maze. */ var displayChars = ['#', '.', 'E']; $('.maze').html(maze.map(function(row, renderY) { return row.reduceRight(function(html, cell, renderX) { if (renderX === positionX && renderY === positionY) { return 'P' + html; } return displayChars[cell] + html; }, '<br>'); })); } function updateMoves() { /* Enable/disable buttons to move based on what's allowed. We take advantage of the fact that both 0 and undefined (outside the maze) are converted to false by JavaScript by the ! operator. */ $('[data-move=\"n\"]').attr('disabled', !maze[positionY - 1][positionX]); $('[data-move=\"s\"]').attr('disabled', !maze[positionY + 1][positionX]); $('[data-move=\"e\"]').attr('disabled', !maze[positionY][positionX + 1]); $('[data-move=\"w\"]').attr('disabled', !maze[positionY][positionX - 1]); } $(function() { renderMaze(); updateMoves(); /* Change position when the user clicks an appropriate link. We depend on updateMoves() to prevent the user from walking through a wall. */ $('[data-move]').click(function() { var direction = $(this).data('move'); switch (direction) { case 'n': positionY--; break; case 's': positionY++; break; case 'e': positionX++; break; case 'w': positionX--; break; default: throw new Error('Don\\'t know how to move ' + direction); } if (maze[positionY][positionX] === 2) { story.show('Exit'); } else { renderMaze(); updateMoves(); } }); }); %> :: Exit You've escaped this fiendish maze! Download: Twee Code Setting and Showing Variables , Conditional Statements","title":"Snowman"},{"location":"dungeonmoving/snowman/snowman_dungeonmoving.html#moving-through-a-dungeon-snowman-130","text":"","title":"\"Moving through a 'dungeon\": Snowman (1.3.0)"},{"location":"dungeonmoving/snowman/snowman_dungeonmoving.html#summary","text":"\"Moving through a 'dungeon'\" creates a multidimensional array. Movement positions are then tracked through X and Y variables for a grid system. Each movement subtracts or adds to its corresponding X or Y position and is compared to those same positions within the array. Different directions are shown if movement is possible in that direction.","title":"Summary"},{"location":"dungeonmoving/snowman/snowman_dungeonmoving.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dungeonmoving/snowman/snowman_dungeonmoving.html#twee-code","text":":: Start <div class=\"maze\"></div> <button type=\"button\" data-move=\"n\">North</button> <button type=\"button\" data-move=\"s\">South</button> <button type=\"button\" data-move=\"e\">East</button> <button type=\"button\" data-move=\"w\">West</button> <% /* 0s are walls, 1 are spaces, 2 is the goal. */ var maze = [ [0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0] ]; /* Where the player starts. The top left is (0, 0). */ var positionX = 1, positionY = 1; function renderMaze() { /* Transform the maze into ASCII art. */ /* What characters we use to display the maze. */ var displayChars = ['#', '.', 'E']; $('.maze').html(maze.map(function(row, renderY) { return row.reduceRight(function(html, cell, renderX) { if (renderX === positionX && renderY === positionY) { return 'P' + html; } return displayChars[cell] + html; }, '<br>'); })); } function updateMoves() { /* Enable/disable buttons to move based on what's allowed. We take advantage of the fact that both 0 and undefined (outside the maze) are converted to false by JavaScript by the ! operator. */ $('[data-move=\"n\"]').attr('disabled', !maze[positionY - 1][positionX]); $('[data-move=\"s\"]').attr('disabled', !maze[positionY + 1][positionX]); $('[data-move=\"e\"]').attr('disabled', !maze[positionY][positionX + 1]); $('[data-move=\"w\"]').attr('disabled', !maze[positionY][positionX - 1]); } $(function() { renderMaze(); updateMoves(); /* Change position when the user clicks an appropriate link. We depend on updateMoves() to prevent the user from walking through a wall. */ $('[data-move]').click(function() { var direction = $(this).data('move'); switch (direction) { case 'n': positionY--; break; case 's': positionY++; break; case 'e': positionX++; break; case 'w': positionX--; break; default: throw new Error('Don\\'t know how to move ' + direction); } if (maze[positionY][positionX] === 2) { story.show('Exit'); } else { renderMaze(); updateMoves(); } }); }); %> :: Exit You've escaped this fiendish maze! Download: Twee Code Setting and Showing Variables , Conditional Statements","title":"Twee Code"},{"location":"dungeonmoving/sugarcane/sugarcane_dungeonmoving.html","text":"\"Moving through a 'dungeon'\": Sugarcane (v2.0) \u00b6 Note: The following example is designed for Twine 1.4.2. Summary \u00b6 \"Moving through a 'dungeon'\" uses an array of arrays to track positions 'moved' through using X and Y variables. It also creates a <<navigate>> macro that handles the showing of directions. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: North <<set $posy = $posy - 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: StoryTitle Sugarcane: Moving through a 'Dungeon' :: Start <<display \"Maze Addon\">> [[Enter Dungeon]] :: Maze Addon <<silently>> <<set $MazeAddon = function() { var maze = [[0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0]]; var x = 1; var y = 1; $posx = 1; $posy = 1; macros['navigate'] = { handler: function(obj, fnc, val) { x = $posx; y = $posy; if(maze[y-1][x] eq 1) { $North = 1; } else if(maze[x][y+1] eq 2) {$Exit = 1;} else {$North = 0;} if(maze[y+1][x] eq 1) { $South = 1; } else if(maze[x][y-1] eq 2) {$Exit = 1;} else {$South = 0;} if(maze[y][x-1] eq 1) { $West = 1; } else if(maze[x-1][y] eq 2) {$Exit = 1;} else {$West = 0;} if(maze[y][x+1] eq 1) { $East = 1; } else if(maze[x+1][y] eq 2) {$Exit = 1;} else {$East = 0;} } } } >> <<print $MazeAddon()>> <<endsilently>> :: StoryAuthor @videlais :: West <<set $posx = $posx - 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: East <<set $posx = $posx + 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: Enter Dungeon <<navigate>> <<if $North eq true>> [[North]] <<endif>> <<if $South eq true>> [[South]] <<endif>> <<if $West eq true>> [[West]] <<endif>> <<if $East eq true>> [[East]] <<endif>> :: South <<set $posy = $posy + 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: Exit Download: Twee Code","title":"Sugarcane (1.4.2)"},{"location":"dungeonmoving/sugarcane/sugarcane_dungeonmoving.html#moving-through-a-dungeon-sugarcane-v20","text":"Note: The following example is designed for Twine 1.4.2.","title":"\"Moving through a 'dungeon'\": Sugarcane (v2.0)"},{"location":"dungeonmoving/sugarcane/sugarcane_dungeonmoving.html#summary","text":"\"Moving through a 'dungeon'\" uses an array of arrays to track positions 'moved' through using X and Y variables. It also creates a <<navigate>> macro that handles the showing of directions.","title":"Summary"},{"location":"dungeonmoving/sugarcane/sugarcane_dungeonmoving.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dungeonmoving/sugarcane/sugarcane_dungeonmoving.html#twee-code","text":":: North <<set $posy = $posy - 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: StoryTitle Sugarcane: Moving through a 'Dungeon' :: Start <<display \"Maze Addon\">> [[Enter Dungeon]] :: Maze Addon <<silently>> <<set $MazeAddon = function() { var maze = [[0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0]]; var x = 1; var y = 1; $posx = 1; $posy = 1; macros['navigate'] = { handler: function(obj, fnc, val) { x = $posx; y = $posy; if(maze[y-1][x] eq 1) { $North = 1; } else if(maze[x][y+1] eq 2) {$Exit = 1;} else {$North = 0;} if(maze[y+1][x] eq 1) { $South = 1; } else if(maze[x][y-1] eq 2) {$Exit = 1;} else {$South = 0;} if(maze[y][x-1] eq 1) { $West = 1; } else if(maze[x-1][y] eq 2) {$Exit = 1;} else {$West = 0;} if(maze[y][x+1] eq 1) { $East = 1; } else if(maze[x+1][y] eq 2) {$Exit = 1;} else {$East = 0;} } } } >> <<print $MazeAddon()>> <<endsilently>> :: StoryAuthor @videlais :: West <<set $posx = $posx - 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: East <<set $posx = $posx + 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: Enter Dungeon <<navigate>> <<if $North eq true>> [[North]] <<endif>> <<if $South eq true>> [[South]] <<endif>> <<if $West eq true>> [[West]] <<endif>> <<if $East eq true>> [[East]] <<endif>> :: South <<set $posy = $posy + 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: Exit Download: Twee Code","title":"Twee Code"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html","text":"\"Moving through a 'dungeon'\": SugarCube (v2.0) \u00b6 Summary \u00b6 \"Moving through a 'dungeon'\" uses a two-dimensional array for the \"map\" and two variables, X and Y, to track movement through the space. The 'Map System' passage checks the positions of X and Y relative to the \"map\" and writes the available directional movement options. Once a direction is clicked, the X and Y values are added or subtracted corresponding to the direction and the map is re-drawn again. Symbols are then placed on the map matching the walls, movement space, and player. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Moving through a Dungeon :: UserStylesheet[stylesheet] #map { font-family: monospace; } :: StoryInit <<set $mapArray to [[0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0]]>> <<set $positionX to 1>> <<set $positionY to 1>> :: Location <span id=\"map\"> <<nobr>> <<for $i to 0; $i lt $mapArray.length; $i++>> <<for $k to 0; $k lt $mapArray[$i].length; $k++>> <<if $k eq $positionX and $i eq $positionY>> <<print \"P\">> <<elseif $mapArray[$i][$k] eq 1>> <<print \".\">> <<elseif $mapArray[$i][$k] eq 0>> <<print \"#\">> <<elseif $mapArray[$i][$k] eq 2>> <<print \"E\">> <</if>> <</for>> <<print \"<br>\">> <</for>> <</nobr>> </span> :: East <<set $positionX += 1>> <<include \"Map System\">> :: West <<set $positionX -= 1>> <<include \"Map System\">> :: South <<set $positionY += 1>> <<include \"Map System\">> :: North <<set $positionY -= 1>> <<include \"Map System\">> :: Map System <<include \"Location\">> <<nobr>> <<if $mapArray[$positionY-1][$positionX] eq 1>> [[North]] | <<elseif $mapArray[$positionY-1][$positionX] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY][$positionX+1] eq 1>> [[East]] | <<elseif $mapArray[$positionY][$positionX+1] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY+1][$positionX] eq 1>> [[South]] | <<elseif $mapArray[$positionY+1][$positionX] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY][$positionX-1] eq 1>> [[West]] | <<elseif $mapArray[$positionY][$positionX-1] eq 2>> [[Exit]] | <</if>> <</nobr>> :: Exit Double-click this passage to edit it. Download: Twee Code See Also \u00b6 Setting and Showing Variables , Conditional Statements , Modularity","title":"SugarCube"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html#moving-through-a-dungeon-sugarcube-v20","text":"","title":"\"Moving through a 'dungeon'\": SugarCube (v2.0)"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html#summary","text":"\"Moving through a 'dungeon'\" uses a two-dimensional array for the \"map\" and two variables, X and Y, to track movement through the space. The 'Map System' passage checks the positions of X and Y relative to the \"map\" and writes the available directional movement options. Once a direction is clicked, the X and Y values are added or subtracted corresponding to the direction and the map is re-drawn again. Symbols are then placed on the map matching the walls, movement space, and player.","title":"Summary"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html#twee-code","text":":: StoryTitle SugarCube: Moving through a Dungeon :: UserStylesheet[stylesheet] #map { font-family: monospace; } :: StoryInit <<set $mapArray to [[0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0]]>> <<set $positionX to 1>> <<set $positionY to 1>> :: Location <span id=\"map\"> <<nobr>> <<for $i to 0; $i lt $mapArray.length; $i++>> <<for $k to 0; $k lt $mapArray[$i].length; $k++>> <<if $k eq $positionX and $i eq $positionY>> <<print \"P\">> <<elseif $mapArray[$i][$k] eq 1>> <<print \".\">> <<elseif $mapArray[$i][$k] eq 0>> <<print \"#\">> <<elseif $mapArray[$i][$k] eq 2>> <<print \"E\">> <</if>> <</for>> <<print \"<br>\">> <</for>> <</nobr>> </span> :: East <<set $positionX += 1>> <<include \"Map System\">> :: West <<set $positionX -= 1>> <<include \"Map System\">> :: South <<set $positionY += 1>> <<include \"Map System\">> :: North <<set $positionY -= 1>> <<include \"Map System\">> :: Map System <<include \"Location\">> <<nobr>> <<if $mapArray[$positionY-1][$positionX] eq 1>> [[North]] | <<elseif $mapArray[$positionY-1][$positionX] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY][$positionX+1] eq 1>> [[East]] | <<elseif $mapArray[$positionY][$positionX+1] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY+1][$positionX] eq 1>> [[South]] | <<elseif $mapArray[$positionY+1][$positionX] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY][$positionX-1] eq 1>> [[West]] | <<elseif $mapArray[$positionY][$positionX-1] eq 2>> [[Exit]] | <</if>> <</nobr>> :: Exit Double-click this passage to edit it. Download: Twee Code","title":"Twee Code"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html#see-also","text":"Setting and Showing Variables , Conditional Statements , Modularity","title":"See Also"},{"location":"fairmath/chapbook/chapbook_fairmath.html","text":"\"Fairmath System\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 \"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on the operation, increasing and decreasing changes the value by a percentage as the difference between the original and adjusted value. This example defines functions in the Story JavaScript, which are then used in the Vars Section of a passage to set values. These are shown using expressions within the text of the passage itself. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Fairmath :: UserScript[script] // Create a global object window.setup = window.setup || {}; // Create a fairmath global object window.setup.fairmath = {}; // Create an 'increase' function setup.fairmath.increase = function(x,y) { return Math.round(x+((100-x)*(y/100))); }; // Create a \"decrease\" function setup.fairmath.decrease = function(x,y) { return Math.round(x-(x*(y/100))); }; :: Start decreaseExample: setup.fairmath.decrease(100, 50) increaseExample: setup.fairmath.increase(50, 50) -- Decrease 100 by 50% using Fairmath: Decrease Example: {decreaseExample} Increase 50 by 50% using Fairmath: Increase Example: {increaseExample} Download: Twee Code","title":"Chapbook"},{"location":"fairmath/chapbook/chapbook_fairmath.html#fairmath-system-chapbook-v100","text":"","title":"\"Fairmath System\": Chapbook (v1.0.0)"},{"location":"fairmath/chapbook/chapbook_fairmath.html#summary","text":"\"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on the operation, increasing and decreasing changes the value by a percentage as the difference between the original and adjusted value. This example defines functions in the Story JavaScript, which are then used in the Vars Section of a passage to set values. These are shown using expressions within the text of the passage itself.","title":"Summary"},{"location":"fairmath/chapbook/chapbook_fairmath.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"fairmath/chapbook/chapbook_fairmath.html#twee-code","text":":: StoryTitle Chapbook: Fairmath :: UserScript[script] // Create a global object window.setup = window.setup || {}; // Create a fairmath global object window.setup.fairmath = {}; // Create an 'increase' function setup.fairmath.increase = function(x,y) { return Math.round(x+((100-x)*(y/100))); }; // Create a \"decrease\" function setup.fairmath.decrease = function(x,y) { return Math.round(x-(x*(y/100))); }; :: Start decreaseExample: setup.fairmath.decrease(100, 50) increaseExample: setup.fairmath.increase(50, 50) -- Decrease 100 by 50% using Fairmath: Decrease Example: {decreaseExample} Increase 50 by 50% using Fairmath: Increase Example: {increaseExample} Download: Twee Code","title":"Twee Code"},{"location":"fairmath/harlowe/harlowe_fairmath.html","text":"\"Fairmath System\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increasing and decreasing changes the value by a percentage as the difference between the original and adjusted value. This example uses the (display:) macro in Harlowe to separate operations for increasing and decreasing. Through setting values to adjust, either passage can be included and the $resultValue used to track and store changes. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Fairmath System in Harlowe :: Start <!-- Fairmath formulas based on http://choicescriptdev.wikia.com/wiki/Arithmetic_operators#Fairmath --> <!-- Set an initial value for the story --> (set: $valueToAdjust to 100) The initial value is $valueToAdjust. <!-- Set originalValue to the value to adjust --> (set: $originalValue to $valueToAdjust) <!-- Set the changeValue (percentage) to adjust --> (set: $changeValue to 50) <!-- Display (call) the Fairmath Decrease passage --> (display: \"Decrease\") <!-- The new value will be resultValue --> The adjusted value is $resultValue. <!-- Update valueToAdjust --> (set: $valueToAdjust to $resultValue) <!-- Set originalValue to the value to adjust --> (set: $originalValue to $valueToAdjust) <!-- Set the changeValue (percentage) to adjust --> (set: $changeValue to 100) <!-- Display (call) the Fairmath Increase passage --> (display: \"Increase\") The adjusted value is $resultValue. :: Increase (set: $resultValue to (round: $originalValue+((100-$originalValue)*($changeValue/100))) ) :: Decrease (set: $resultValue to (round: $originalValue-($originalValue*($changeValue/100)) ) ) Download: Twee Code","title":"Harlowe"},{"location":"fairmath/harlowe/harlowe_fairmath.html#fairmath-system-harlowe-v20","text":"","title":"\"Fairmath System\": Harlowe (v2.0)"},{"location":"fairmath/harlowe/harlowe_fairmath.html#summary","text":"\"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increasing and decreasing changes the value by a percentage as the difference between the original and adjusted value. This example uses the (display:) macro in Harlowe to separate operations for increasing and decreasing. Through setting values to adjust, either passage can be included and the $resultValue used to track and store changes.","title":"Summary"},{"location":"fairmath/harlowe/harlowe_fairmath.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"fairmath/harlowe/harlowe_fairmath.html#twee-code","text":":: StoryTitle Fairmath System in Harlowe :: Start <!-- Fairmath formulas based on http://choicescriptdev.wikia.com/wiki/Arithmetic_operators#Fairmath --> <!-- Set an initial value for the story --> (set: $valueToAdjust to 100) The initial value is $valueToAdjust. <!-- Set originalValue to the value to adjust --> (set: $originalValue to $valueToAdjust) <!-- Set the changeValue (percentage) to adjust --> (set: $changeValue to 50) <!-- Display (call) the Fairmath Decrease passage --> (display: \"Decrease\") <!-- The new value will be resultValue --> The adjusted value is $resultValue. <!-- Update valueToAdjust --> (set: $valueToAdjust to $resultValue) <!-- Set originalValue to the value to adjust --> (set: $originalValue to $valueToAdjust) <!-- Set the changeValue (percentage) to adjust --> (set: $changeValue to 100) <!-- Display (call) the Fairmath Increase passage --> (display: \"Increase\") The adjusted value is $resultValue. :: Increase (set: $resultValue to (round: $originalValue+((100-$originalValue)*($changeValue/100))) ) :: Decrease (set: $resultValue to (round: $originalValue-($originalValue*($changeValue/100)) ) ) Download: Twee Code","title":"Twee Code"},{"location":"fairmath/snowman/snowman_fairmath.html","text":"\"Fairmath System\": Snowman (v1.3.0) \u00b6 Summary \u00b6 \"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increase and decrease changes the value by a percentage as the difference between the original and adjusted value. This example uses functions increase() and decrease() as part of a created global window.setup.fairmath . These can be called through using the Underscore template functionality to define, use, and show the values of the functions in any one passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Fairmath in Snowman :: UserScript[script] // Create a global object window.setup = window.setup || {}; // Create a fairmath global object window.setup.fairmath = {}; // Create an 'increase' function setup.fairmath.increase = function(x,y) { return Math.round(x+((100-x)*(y/100))); }; // Create a \"decrease\" function setup.fairmath.decrease = function(x,y) { return Math.round(x-(x*(y/100))); }; :: Start Decrease 100 by 50% using Fairmath: <%= setup.fairmath.decrease(100, 50) %> Increase 50 by 50% using Fairmath: <%= setup.fairmath.increase(50, 50) %> Download: Twee Code","title":"Snowman"},{"location":"fairmath/snowman/snowman_fairmath.html#fairmath-system-snowman-v130","text":"","title":"\"Fairmath System\": Snowman (v1.3.0)"},{"location":"fairmath/snowman/snowman_fairmath.html#summary","text":"\"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increase and decrease changes the value by a percentage as the difference between the original and adjusted value. This example uses functions increase() and decrease() as part of a created global window.setup.fairmath . These can be called through using the Underscore template functionality to define, use, and show the values of the functions in any one passage.","title":"Summary"},{"location":"fairmath/snowman/snowman_fairmath.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"fairmath/snowman/snowman_fairmath.html#twee-code","text":":: StoryTitle Fairmath in Snowman :: UserScript[script] // Create a global object window.setup = window.setup || {}; // Create a fairmath global object window.setup.fairmath = {}; // Create an 'increase' function setup.fairmath.increase = function(x,y) { return Math.round(x+((100-x)*(y/100))); }; // Create a \"decrease\" function setup.fairmath.decrease = function(x,y) { return Math.round(x-(x*(y/100))); }; :: Start Decrease 100 by 50% using Fairmath: <%= setup.fairmath.decrease(100, 50) %> Increase 50 by 50% using Fairmath: <%= setup.fairmath.increase(50, 50) %> Download: Twee Code","title":"Twee Code"},{"location":"fairmath/sugarcube/sugarcube_fairmath.html","text":"\"Fairmath System\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increase and decrease changes the value by a percentage as the difference between the original and adjusted value. This example uses the <<widget>> macro in SugarCube to separate operations for increasing and decreasing. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Fairmath in SugarCube :: Start <!-- Fairmath formulas based on http://choicescriptdev.wikia.com/wiki/Arithmetic_operators#Fairmath --> <<set $valueToAdjust to 100>> The inital value is $valueToAdjust <!-- Call the decrease widget --> <<decrease $valueToAdjust 50>> The adjusted value is $resultValue. <!-- Save the changed value --> <<set $valueToAdjust to $resultValue>> <!-- Call the increase widget --> <<increase $valueToAdjust 100>> The adjusted value is $resultValue. :: Fairmath Operations[widget] <<widget \"increase\">> <<set $resultValue to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >> <</widget>> <<widget \"decrease\">> <<set $resultValue to Math.round($args[0]-($args[0]*($args[1]/100) )) >> <</widget>> Download: Twee Code","title":"SugarCube"},{"location":"fairmath/sugarcube/sugarcube_fairmath.html#fairmath-system-sugarcube-v218","text":"","title":"\"Fairmath System\": SugarCube (v2.18)"},{"location":"fairmath/sugarcube/sugarcube_fairmath.html#summary","text":"\"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increase and decrease changes the value by a percentage as the difference between the original and adjusted value. This example uses the <<widget>> macro in SugarCube to separate operations for increasing and decreasing.","title":"Summary"},{"location":"fairmath/sugarcube/sugarcube_fairmath.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"fairmath/sugarcube/sugarcube_fairmath.html#twee-code","text":":: StoryTitle Fairmath in SugarCube :: Start <!-- Fairmath formulas based on http://choicescriptdev.wikia.com/wiki/Arithmetic_operators#Fairmath --> <<set $valueToAdjust to 100>> The inital value is $valueToAdjust <!-- Call the decrease widget --> <<decrease $valueToAdjust 50>> The adjusted value is $resultValue. <!-- Save the changed value --> <<set $valueToAdjust to $resultValue>> <!-- Call the increase widget --> <<increase $valueToAdjust 100>> The adjusted value is $resultValue. :: Fairmath Operations[widget] <<widget \"increase\">> <<set $resultValue to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >> <</widget>> <<widget \"decrease\">> <<set $resultValue to Math.round($args[0]-($args[0]*($args[1]/100) )) >> <</widget>> Download: Twee Code","title":"Twee Code"},{"location":"geolocation/chapbook/chapbook_geolocation.html","text":"\"Geolocation\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. In this example, the [JavaScript] modifier is used to test for, run, and show data using an alert() from the JavaScript functions. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Geolocation :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[GeoLocation]] :: GeoLocation [JavaScript] if(window.geolocation.available() ) { var geolocation = window.geolocation.getLocation(); alert(\"Latitude: \" + geolocation.latitude + \" Longitude:\" + geolocation.longitude); } [continued] Download: Twee Code","title":"Chapbook"},{"location":"geolocation/chapbook/chapbook_geolocation.html#geolocation-chapbook-v100","text":"","title":"\"Geolocation\": Chapbook (v1.0.0)"},{"location":"geolocation/chapbook/chapbook_geolocation.html#summary","text":"Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. In this example, the [JavaScript] modifier is used to test for, run, and show data using an alert() from the JavaScript functions.","title":"Summary"},{"location":"geolocation/chapbook/chapbook_geolocation.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"geolocation/chapbook/chapbook_geolocation.html#twee-code","text":":: StoryTitle Chapbook: Geolocation :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[GeoLocation]] :: GeoLocation [JavaScript] if(window.geolocation.available() ) { var geolocation = window.geolocation.getLocation(); alert(\"Latitude: \" + geolocation.latitude + \" Longitude:\" + geolocation.longitude); } [continued] Download: Twee Code","title":"Twee Code"},{"location":"geolocation/harlowe/harlowe_geolocation.html","text":"\"Geolocation\": Harlowe (v2.0) \u00b6 Summary \u00b6 Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. Harlowe does not have an easy way to bridge the gap between its macros and JavaScript. In this example, the <script> element is used to test for, run, and show an alert() with data from the JavaScript functions. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Geolocation in Harlowe :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[Ask for permission]] :: Ask for permission <script> if(window.geolocation.available() ) { var geolocation = window.geolocation.getLocation(); alert(\"Latitude: \" + geolocation.latitude + \" Longitude:\" + geolocation.longitude); } </script> Download: Twee Code","title":"Harlowe"},{"location":"geolocation/harlowe/harlowe_geolocation.html#geolocation-harlowe-v20","text":"","title":"\"Geolocation\": Harlowe (v2.0)"},{"location":"geolocation/harlowe/harlowe_geolocation.html#summary","text":"Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. Harlowe does not have an easy way to bridge the gap between its macros and JavaScript. In this example, the <script> element is used to test for, run, and show an alert() with data from the JavaScript functions.","title":"Summary"},{"location":"geolocation/harlowe/harlowe_geolocation.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"geolocation/harlowe/harlowe_geolocation.html#twee-code","text":":: StoryTitle Geolocation in Harlowe :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[Ask for permission]] :: Ask for permission <script> if(window.geolocation.available() ) { var geolocation = window.geolocation.getLocation(); alert(\"Latitude: \" + geolocation.latitude + \" Longitude:\" + geolocation.longitude); } </script> Download: Twee Code","title":"Twee Code"},{"location":"geolocation/snowman/snowman_geolocation.html","text":"\"Geolocation\": Snowman (v1.3.0) \u00b6 Summary \u00b6 Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. This example uses Underscore template functionality to test for and show the values of properties storied in the s global variable in Snowman. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Geolocation in Snowman :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[Ask for permission]] :: Show results Is geolocation available? <%= window.geolocation.available() %> <% if(window.geolocation.available()) { s.location = window.geolocation.getLocation(); } %> If so, what is the current location? Latitude: <%= s.location.latitude %> Longitude: <%= s.location.longitude %> Are we in the approximate location of Stonehenge (51.1788853, -1.828409)? Latitude: <%= window.geolocation.approximateLocation(s.location.latitude, 51.1788853) %> Longitude: <%= window.geolocation.approximateLocation(s.location.longitude, -1.828409) %> :: Ask for permission <% if(window.geolocation.available()) { s.location = window.geolocation.getLocation(); } %> [[Show results]] Download: Twee Code","title":"Snowman"},{"location":"geolocation/snowman/snowman_geolocation.html#geolocation-snowman-v130","text":"","title":"\"Geolocation\": Snowman (v1.3.0)"},{"location":"geolocation/snowman/snowman_geolocation.html#summary","text":"Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. This example uses Underscore template functionality to test for and show the values of properties storied in the s global variable in Snowman.","title":"Summary"},{"location":"geolocation/snowman/snowman_geolocation.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"geolocation/snowman/snowman_geolocation.html#twee-code","text":":: StoryTitle Geolocation in Snowman :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[Ask for permission]] :: Show results Is geolocation available? <%= window.geolocation.available() %> <% if(window.geolocation.available()) { s.location = window.geolocation.getLocation(); } %> If so, what is the current location? Latitude: <%= s.location.latitude %> Longitude: <%= s.location.longitude %> Are we in the approximate location of Stonehenge (51.1788853, -1.828409)? Latitude: <%= window.geolocation.approximateLocation(s.location.latitude, 51.1788853) %> Longitude: <%= window.geolocation.approximateLocation(s.location.longitude, -1.828409) %> :: Ask for permission <% if(window.geolocation.available()) { s.location = window.geolocation.getLocation(); } %> [[Show results]] Download: Twee Code","title":"Twee Code"},{"location":"geolocation/sugarcube/sugarcube_geolocation.html","text":"\"Geolocation\": SugarCube (v2.18) \u00b6 Summary \u00b6 Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. This example uses <<linkreplace>> and <<script>> macros to run JavaScript in passages in SugarCube. The State.variables object is used to store the results of running JavaScript functions and using those values in TwineScript. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Geolocation in SugarCube :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start <<linkreplace \"Ask for permission\">> <<script>> State.variables.geoLocationAvailable = window.geolocation.available(); if(window.geolocation.available()) { State.variables.location = window.geolocation.getLocation(); } <</script>> [[Show results]] <</linkreplace>> :: Show results <<script>> State.variables.geoLocationAvailable = window.geolocation.available(); if(window.geolocation.available()) { State.variables.location = window.geolocation.getLocation(); } <</script>> Is geolocation available? $geoLocationAvailable If so, what is the current location? Latitude: $location.latitude Longitude: $location.longitude Are we in the approximate location of Stonehenge (51.1788853, -1.828409)? <<set $approxLat to window.geolocation.approximateLocation(State.variables.location.latitude, 51.1788853) >> <<set $approxLong to window.geolocation.approximateLocation(State.variables.location.longitude, -1.828409) >> Latitude: $approxLat Longitude: $approxLong Download: Twee Code","title":"SugarCube"},{"location":"geolocation/sugarcube/sugarcube_geolocation.html#geolocation-sugarcube-v218","text":"","title":"\"Geolocation\": SugarCube (v2.18)"},{"location":"geolocation/sugarcube/sugarcube_geolocation.html#summary","text":"Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. This example uses <<linkreplace>> and <<script>> macros to run JavaScript in passages in SugarCube. The State.variables object is used to store the results of running JavaScript functions and using those values in TwineScript.","title":"Summary"},{"location":"geolocation/sugarcube/sugarcube_geolocation.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"geolocation/sugarcube/sugarcube_geolocation.html#twee-code","text":":: StoryTitle Geolocation in SugarCube :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start <<linkreplace \"Ask for permission\">> <<script>> State.variables.geoLocationAvailable = window.geolocation.available(); if(window.geolocation.available()) { State.variables.location = window.geolocation.getLocation(); } <</script>> [[Show results]] <</linkreplace>> :: Show results <<script>> State.variables.geoLocationAvailable = window.geolocation.available(); if(window.geolocation.available()) { State.variables.location = window.geolocation.getLocation(); } <</script>> Is geolocation available? $geoLocationAvailable If so, what is the current location? Latitude: $location.latitude Longitude: $location.longitude Are we in the approximate location of Stonehenge (51.1788853, -1.828409)? <<set $approxLat to window.geolocation.approximateLocation(State.variables.location.latitude, 51.1788853) >> <<set $approxLong to window.geolocation.approximateLocation(State.variables.location.longitude, -1.828409) >> Latitude: $approxLat Longitude: $approxLong Download: Twee Code","title":"Twee Code"},{"location":"googlefonts/chapbook/chapbook_googlefonts.html","text":"\"Google Fonts\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Chapbook provides a global variable, config.style.googleFont , that can be used within the Vars Section to load and use an external font . Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Google Fonts :: Start config.style.googleFont: '<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">' config.style.page.font: 'Roboto' -- This text is styled by a Google Font. Download: Twee Code","title":"Chapbook"},{"location":"googlefonts/chapbook/chapbook_googlefonts.html#google-fonts-chapbook-v100","text":"","title":"\"Google Fonts\": Chapbook (v1.0.0)"},{"location":"googlefonts/chapbook/chapbook_googlefonts.html#summary","text":"Chapbook provides a global variable, config.style.googleFont , that can be used within the Vars Section to load and use an external font .","title":"Summary"},{"location":"googlefonts/chapbook/chapbook_googlefonts.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"googlefonts/chapbook/chapbook_googlefonts.html#twee-code","text":":: StoryTitle Chapbook: Google Fonts :: Start config.style.googleFont: '<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">' config.style.page.font: 'Roboto' -- This text is styled by a Google Font. Download: Twee Code","title":"Twee Code"},{"location":"googlefonts/harlowe/harlowe_googlefonts.html","text":"\"Google Fonts\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. The loaded font is then applied to selected text using the (font:) macro. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); :: Start (font:\"Roboto\")[This text is styled by a Google Font] Download: Twee Code","title":"Harlowe"},{"location":"googlefonts/harlowe/harlowe_googlefonts.html#google-fonts-harlowe-v20","text":"","title":"\"Google Fonts\": Harlowe (v2.0)"},{"location":"googlefonts/harlowe/harlowe_googlefonts.html#summary","text":"\"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. The loaded font is then applied to selected text using the (font:) macro. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way.","title":"Summary"},{"location":"googlefonts/harlowe/harlowe_googlefonts.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"googlefonts/harlowe/harlowe_googlefonts.html#twee-code","text":":: StoryTitle Harlowe: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); :: Start (font:\"Roboto\")[This text is styled by a Google Font] Download: Twee Code","title":"Twee Code"},{"location":"googlefonts/snowman/snowman_googlefonts.html","text":"\"Google Fonts\": Snowman (v1.3) \u00b6 Summary \u00b6 \"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Download: Twee Code","title":"Snowman"},{"location":"googlefonts/snowman/snowman_googlefonts.html#google-fonts-snowman-v13","text":"","title":"\"Google Fonts\": Snowman (v1.3)"},{"location":"googlefonts/snowman/snowman_googlefonts.html#summary","text":"\"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way.","title":"Summary"},{"location":"googlefonts/snowman/snowman_googlefonts.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"googlefonts/snowman/snowman_googlefonts.html#twee-code","text":":: StoryTitle Snowman: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Download: Twee Code","title":"Twee Code"},{"location":"googlefonts/sugarcane/sugarcane_googlefonts.html","text":"\"Google Fonts\": Sugarcane (v1.4.2) \u00b6 Note: The following example is designed for Twine 1.4.2. Summary \u00b6 \"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Responsive: Google Fonts :: StoryAuthor @videlais :: StoryStylesheet [stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Download: Twee Code","title":"Sugarcane (1.4.2)"},{"location":"googlefonts/sugarcane/sugarcane_googlefonts.html#google-fonts-sugarcane-v142","text":"Note: The following example is designed for Twine 1.4.2.","title":"\"Google Fonts\": Sugarcane (v1.4.2)"},{"location":"googlefonts/sugarcane/sugarcane_googlefonts.html#summary","text":"\"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way.","title":"Summary"},{"location":"googlefonts/sugarcane/sugarcane_googlefonts.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"googlefonts/sugarcane/sugarcane_googlefonts.html#twee-code","text":":: StoryTitle Responsive: Google Fonts :: StoryAuthor @videlais :: StoryStylesheet [stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Download: Twee Code","title":"Twee Code"},{"location":"googlefonts/sugarcube/sugarcube_googlefonts.html","text":"\"Google Fonts\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Download: Twee Code","title":"SugarCube"},{"location":"googlefonts/sugarcube/sugarcube_googlefonts.html#google-fonts-sugarcube-v218","text":"","title":"\"Google Fonts\": SugarCube (v2.18)"},{"location":"googlefonts/sugarcube/sugarcube_googlefonts.html#summary","text":"\"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way.","title":"Summary"},{"location":"googlefonts/sugarcube/sugarcube_googlefonts.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"googlefonts/sugarcube/sugarcube_googlefonts.html#twee-code","text":":: StoryTitle SugarCube: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Download: Twee Code","title":"Twee Code"},{"location":"headersandfooters/chapbook/chapbook_headersandfooters.html","text":"\"Headers and Footers\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Chapbook provides two global variables, config.header and config.footer , that each have the properties left , right , and center . When set, these properties show their content as the header or footer in the particular position matching its property name. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Header and Footer :: Start config.header.center: \"This is the header!\" config.footer.center: \"This is the footer!\" -- This is content. Download: Twee Code","title":"Chapbook"},{"location":"headersandfooters/chapbook/chapbook_headersandfooters.html#headers-and-footers-chapbook-v100","text":"","title":"\"Headers and Footers\": Chapbook (v1.0.0)"},{"location":"headersandfooters/chapbook/chapbook_headersandfooters.html#summary","text":"Chapbook provides two global variables, config.header and config.footer , that each have the properties left , right , and center . When set, these properties show their content as the header or footer in the particular position matching its property name.","title":"Summary"},{"location":"headersandfooters/chapbook/chapbook_headersandfooters.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"headersandfooters/chapbook/chapbook_headersandfooters.html#twee-code","text":":: StoryTitle Chapbook: Header and Footer :: Start config.header.center: \"This is the header!\" config.footer.center: \"This is the footer!\" -- This is content. Download: Twee Code","title":"Twee Code"},{"location":"headersandfooters/harlowe/harlowe_headersandfooters.html","text":"\"Headers and Footers\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Headers and Footers\" demonstrates the use of the \"header\" and \"footer\" passage tags . When used in passages, they are either prepended (header) or appended (footer) to every passage. Multiple passages can have the tags and are loaded alphabetically when detected. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Headers and Footers :: Start This is content between the header and the footer. :: Header[header] This is the header! :: Footer[footer] This is the footer! Download: Twee Code","title":"Harlowe"},{"location":"headersandfooters/harlowe/harlowe_headersandfooters.html#headers-and-footers-harlowe-v20","text":"","title":"\"Headers and Footers\": Harlowe (v2.0)"},{"location":"headersandfooters/harlowe/harlowe_headersandfooters.html#summary","text":"\"Headers and Footers\" demonstrates the use of the \"header\" and \"footer\" passage tags . When used in passages, they are either prepended (header) or appended (footer) to every passage. Multiple passages can have the tags and are loaded alphabetically when detected.","title":"Summary"},{"location":"headersandfooters/harlowe/harlowe_headersandfooters.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"headersandfooters/harlowe/harlowe_headersandfooters.html#twee-code","text":":: StoryTitle Harlowe: Headers and Footers :: Start This is content between the header and the footer. :: Header[header] This is the header! :: Footer[footer] This is the footer! Download: Twee Code","title":"Twee Code"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html","text":"\"Headers and Footers\": Snowman (v1.3) \u00b6 Summary \u00b6 \"Headers and Footers\" demonstrates the use of the window.story.render() function to return the HTML contents of another passage. Combined with Underscore template functionality , the content of passages can be \"displayed\" in others. Because Snowman does not have pre-defined 'header' or 'footer' functionality, using these two different methods together can create the same result. However, the code would need to be included on any additional passages to continue the effect. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Headers and Footers :: Start <%= window.story.render(\"Header\") %> This content is between the header and the footer. <%= window.story.render(\"Footer\") %> :: Header This is the header! :: Footer This is the footer! Download: Twee Code See Also \u00b6 Passage Events","title":"Snowman"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html#headers-and-footers-snowman-v13","text":"","title":"\"Headers and Footers\": Snowman (v1.3)"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html#summary","text":"\"Headers and Footers\" demonstrates the use of the window.story.render() function to return the HTML contents of another passage. Combined with Underscore template functionality , the content of passages can be \"displayed\" in others. Because Snowman does not have pre-defined 'header' or 'footer' functionality, using these two different methods together can create the same result. However, the code would need to be included on any additional passages to continue the effect.","title":"Summary"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html#twee-code","text":":: StoryTitle Snowman: Headers and Footers :: Start <%= window.story.render(\"Header\") %> This content is between the header and the footer. <%= window.story.render(\"Footer\") %> :: Header This is the header! :: Footer This is the footer! Download: Twee Code","title":"Twee Code"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html#see-also","text":"Passage Events","title":"See Also"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html","text":"\"Headers and Footers\": Sugarcube (v2.18) \u00b6 Summary \u00b6 \"Headers and Footers\" demonstrates the use of \" PassageHeader \" and \" PassageFooter \" special names for passages. When these special names are used, the 'Header' is prepended and the 'Footer' name is appended to all passages. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Headers and Footers :: Start This is content between the header and the footer. :: PassageHeader This is the header! :: PassageFooter This is the footer! Download: Twee Code See Also \u00b6 Passage Events","title":"SugarCube"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html#headers-and-footers-sugarcube-v218","text":"","title":"\"Headers and Footers\": Sugarcube (v2.18)"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html#summary","text":"\"Headers and Footers\" demonstrates the use of \" PassageHeader \" and \" PassageFooter \" special names for passages. When these special names are used, the 'Header' is prepended and the 'Footer' name is appended to all passages.","title":"Summary"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html#twee-code","text":":: StoryTitle SugarCube: Headers and Footers :: Start This is content between the header and the footer. :: PassageHeader This is the header! :: PassageFooter This is the footer! Download: Twee Code","title":"Twee Code"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html#see-also","text":"Passage Events","title":"See Also"},{"location":"hiddenlink/harlowe/harlowe_hiddenlink.html","text":"\"Hidden Link\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events. The use of a \"footer\" special Passage is also used to run the required JavaScript after each passage is displayed. Harlowe supports a number of different techniques for creating links and the resulting HTML elements generated is different for each of these techniques. The generated HTML falls into two main groups: those that include a <<tw-link>> element, and those that include a \".enchantment-link\" classed element. This example supports both groups. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Hidden Link :: UserStylesheet [stylesheet] .hidden tw-link, .hidden .enchantment-link { color: transparent; } tw-include[title=\"Hidden Link Setup\"] { display: none; } :: Hidden Link Setup [footer] <script> /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); </script> :: Start ''Examples of tw-link element based links'' A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> ''Examples of .enchantment-link CSS class based links'' A hidden link that's always hidden: <span class=\"hidden\">[A hidden link]<link|</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[A hidden link]<link|</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[A hidden link]<link|</span> (click: ?link)[(go-to: \"A hidden link\")] :: A hidden link You found it! Download: Twee Code","title":"Harlowe"},{"location":"hiddenlink/harlowe/harlowe_hiddenlink.html#hidden-link-harlowe-v20","text":"","title":"\"Hidden Link\": Harlowe (v2.0)"},{"location":"hiddenlink/harlowe/harlowe_hiddenlink.html#summary","text":"\"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events. The use of a \"footer\" special Passage is also used to run the required JavaScript after each passage is displayed. Harlowe supports a number of different techniques for creating links and the resulting HTML elements generated is different for each of these techniques. The generated HTML falls into two main groups: those that include a <<tw-link>> element, and those that include a \".enchantment-link\" classed element. This example supports both groups.","title":"Summary"},{"location":"hiddenlink/harlowe/harlowe_hiddenlink.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"hiddenlink/harlowe/harlowe_hiddenlink.html#twee-code","text":":: StoryTitle Harlowe: Hidden Link :: UserStylesheet [stylesheet] .hidden tw-link, .hidden .enchantment-link { color: transparent; } tw-include[title=\"Hidden Link Setup\"] { display: none; } :: Hidden Link Setup [footer] <script> /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); </script> :: Start ''Examples of tw-link element based links'' A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> ''Examples of .enchantment-link CSS class based links'' A hidden link that's always hidden: <span class=\"hidden\">[A hidden link]<link|</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[A hidden link]<link|</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[A hidden link]<link|</span> (click: ?link)[(go-to: \"A hidden link\")] :: A hidden link You found it! Download: Twee Code","title":"Twee Code"},{"location":"hiddenlink/snowman/snowman_hiddenlink.html","text":"\"Hidden Link\": Snowman (v1.3.0) \u00b6 Summary \u00b6 \"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Hidden Link :: UserScript[script] $(function () { /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); }); :: UserStylesheet[stylesheet] .hidden a { color: transparent; /* By default links in Snowman have a border */ border-bottom: 0px; } :: Start A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> :: A hidden link You found it! Download: Twee Code","title":"Snowman"},{"location":"hiddenlink/snowman/snowman_hiddenlink.html#hidden-link-snowman-v130","text":"","title":"\"Hidden Link\": Snowman (v1.3.0)"},{"location":"hiddenlink/snowman/snowman_hiddenlink.html#summary","text":"\"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events.","title":"Summary"},{"location":"hiddenlink/snowman/snowman_hiddenlink.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"hiddenlink/snowman/snowman_hiddenlink.html#twee-code","text":":: StoryTitle Snowman: Hidden Link :: UserScript[script] $(function () { /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); }); :: UserStylesheet[stylesheet] .hidden a { color: transparent; /* By default links in Snowman have a border */ border-bottom: 0px; } :: Start A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> :: A hidden link You found it! Download: Twee Code","title":"Twee Code"},{"location":"hiddenlink/sugarcube/sugarcube_hiddenlink.html","text":"\"Hidden Link\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events. The use of the postdisplay functionality is also used to run JavaScript after each passage is displayed. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Hidden Link :: UserScript[script] postdisplay['hidden-link-setup'] = function () { /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); }; :: UserStylesheet[stylesheet] .hidden a { color: transparent; } :: Start A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> :: A hidden link You found it! Download: Twee Code","title":"SugarCube"},{"location":"hiddenlink/sugarcube/sugarcube_hiddenlink.html#hidden-link-sugarcube-v218","text":"","title":"\"Hidden Link\": SugarCube (v2.18)"},{"location":"hiddenlink/sugarcube/sugarcube_hiddenlink.html#summary","text":"\"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events. The use of the postdisplay functionality is also used to run JavaScript after each passage is displayed.","title":"Summary"},{"location":"hiddenlink/sugarcube/sugarcube_hiddenlink.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"hiddenlink/sugarcube/sugarcube_hiddenlink.html#twee-code","text":":: StoryTitle SugarCube: Hidden Link :: UserScript[script] postdisplay['hidden-link-setup'] = function () { /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); }; :: UserStylesheet[stylesheet] .hidden a { color: transparent; } :: Start A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> :: A hidden link You found it! Download: Twee Code","title":"Twee Code"},{"location":"images/chapbook/chapbook_images.html","text":"\"Images\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 When using Chapbook, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Images in Chapbook :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a base-64-encoded CSS image background: <div class=\"base64image\"></div> Download: Twee Code","title":"Chapbook"},{"location":"images/chapbook/chapbook_images.html#images-chapbook-v100","text":"","title":"\"Images\": Chapbook (v1.0.0)"},{"location":"images/chapbook/chapbook_images.html#summary","text":"When using Chapbook, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute.","title":"Summary"},{"location":"images/chapbook/chapbook_images.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"images/chapbook/chapbook_images.html#twee-code","text":":: StoryTitle Images in Chapbook :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a base-64-encoded CSS image background: <div class=\"base64image\"></div> Download: Twee Code","title":"Twee Code"},{"location":"images/harlowe/harlowe_images.html","text":"\"Images\": Harlowe (v2.0) \u00b6 Summary \u00b6 When using Harlowe, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Images in Harlowe :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a base-64-encoded CSS image background: <div class=\"base64image\"></div> Download: Twee Code","title":"Harlowe"},{"location":"images/harlowe/harlowe_images.html#images-harlowe-v20","text":"","title":"\"Images\": Harlowe (v2.0)"},{"location":"images/harlowe/harlowe_images.html#summary","text":"When using Harlowe, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute.","title":"Summary"},{"location":"images/harlowe/harlowe_images.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"images/harlowe/harlowe_images.html#twee-code","text":":: StoryTitle Images in Harlowe :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a base-64-encoded CSS image background: <div class=\"base64image\"></div> Download: Twee Code","title":"Twee Code"},{"location":"images/snowman/snowman_images.html","text":"\"Images\": Snowman (v1.3.0) \u00b6 Summary \u00b6 When using Snowman, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Images in Snowman :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a Base64-encoded CSS image background: <div class=\"base64image\"></div> Download: Twee Code","title":"Snowman"},{"location":"images/snowman/snowman_images.html#images-snowman-v130","text":"","title":"\"Images\": Snowman (v1.3.0)"},{"location":"images/snowman/snowman_images.html#summary","text":"When using Snowman, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute.","title":"Summary"},{"location":"images/snowman/snowman_images.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"images/snowman/snowman_images.html#twee-code","text":":: StoryTitle Images in Snowman :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a Base64-encoded CSS image background: <div class=\"base64image\"></div> Download: Twee Code","title":"Twee Code"},{"location":"images/sugarcube/sugarcube_images.html","text":"\"Images\": SugarCube (v2.18) \u00b6 Summary \u00b6 When using SugarCube, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute. Many macros also support using images in Sugarcube and their location can be used within wiki syntax. Base64-encoded images are not supported in wiki image syntax. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Images in SugarCube :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a Base64-encoded CSS image background: <div class=\"base64image\"></div> Download: Twee Code","title":"SugarCube"},{"location":"images/sugarcube/sugarcube_images.html#images-sugarcube-v218","text":"","title":"\"Images\": SugarCube (v2.18)"},{"location":"images/sugarcube/sugarcube_images.html#summary","text":"When using SugarCube, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute. Many macros also support using images in Sugarcube and their location can be used within wiki syntax. Base64-encoded images are not supported in wiki image syntax.","title":"Summary"},{"location":"images/sugarcube/sugarcube_images.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"images/sugarcube/sugarcube_images.html#twee-code","text":":: StoryTitle Images in SugarCube :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a Base64-encoded CSS image background: <div class=\"base64image\"></div> Download: Twee Code","title":"Twee Code"},{"location":"importexternaljs/chapbook/chapbook_importexternaljs.html","text":"\"Importing External JavaScript\": Chapbook (v1.0.0) \u00b6 Note: This example uses code from Three.js , a library for creating 3D graphics in the browser. It is include only for demonstrational purposes and its own documentation should be consulted to understand its functionality. Summary \u00b6 To include external JavaScript, it must first be loaded. This example uses code from the Mozilla Developer Network to dynamically import scripts . The example library loaded is Three.js. Once loaded, a callback function is used to create a simple Three.js example and, if the browser supports it, shows a rotating 3D cube within the passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Importing External JS :: UserScript[script] // The following code is used from MDN for // dynamically importing scripts // https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement#Dynamically_importing_scripts window.setup = {}; setup.loadError = function(oError) { throw new URIError(\"The script \" + oError.target.src + \" didn't load correctly.\"); }; setup.loadScript = function(url, onloadFunction) { var newScript = document.createElement(\"script\"); newScript.onerror = setup.loadError; if (onloadFunction) { newScript.onload = onloadFunction; } document.head.appendChild(newScript); newScript.async = true; newScript.src = url; }; :: Start <div id=\"drawArea\"></div> [JavaScript] setup.loadScript(\"https://ajax.googleapis.com/ajax/libs/threejs/r84/three.min.js\", function() { var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer(); renderer.setSize( 250, 250 ); document.getElementById(\"drawArea\").appendChild( renderer.domElement ); var geometry = new THREE.BoxGeometry( 1, 1, 1 ); var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } ); var cube = new THREE.Mesh( geometry, material ); scene.add( cube ); camera.position.z = 5; var animate = function () { requestAnimationFrame( animate ); cube.rotation.x += 0.01; cube.rotation.y += 0.01; renderer.render( scene, camera ); }; animate(); }); [continued] Download: Twee Code","title":"Chapbook"},{"location":"importexternaljs/chapbook/chapbook_importexternaljs.html#importing-external-javascript-chapbook-v100","text":"Note: This example uses code from Three.js , a library for creating 3D graphics in the browser. It is include only for demonstrational purposes and its own documentation should be consulted to understand its functionality.","title":"\"Importing External JavaScript\": Chapbook (v1.0.0)"},{"location":"importexternaljs/chapbook/chapbook_importexternaljs.html#summary","text":"To include external JavaScript, it must first be loaded. This example uses code from the Mozilla Developer Network to dynamically import scripts . The example library loaded is Three.js. Once loaded, a callback function is used to create a simple Three.js example and, if the browser supports it, shows a rotating 3D cube within the passage.","title":"Summary"},{"location":"importexternaljs/chapbook/chapbook_importexternaljs.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"importexternaljs/chapbook/chapbook_importexternaljs.html#twee-code","text":":: StoryTitle Chapbook: Importing External JS :: UserScript[script] // The following code is used from MDN for // dynamically importing scripts // https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement#Dynamically_importing_scripts window.setup = {}; setup.loadError = function(oError) { throw new URIError(\"The script \" + oError.target.src + \" didn't load correctly.\"); }; setup.loadScript = function(url, onloadFunction) { var newScript = document.createElement(\"script\"); newScript.onerror = setup.loadError; if (onloadFunction) { newScript.onload = onloadFunction; } document.head.appendChild(newScript); newScript.async = true; newScript.src = url; }; :: Start <div id=\"drawArea\"></div> [JavaScript] setup.loadScript(\"https://ajax.googleapis.com/ajax/libs/threejs/r84/three.min.js\", function() { var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer(); renderer.setSize( 250, 250 ); document.getElementById(\"drawArea\").appendChild( renderer.domElement ); var geometry = new THREE.BoxGeometry( 1, 1, 1 ); var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } ); var cube = new THREE.Mesh( geometry, material ); scene.add( cube ); camera.position.z = 5; var animate = function () { requestAnimationFrame( animate ); cube.rotation.x += 0.01; cube.rotation.y += 0.01; renderer.render( scene, camera ); }; animate(); }); [continued] Download: Twee Code","title":"Twee Code"},{"location":"importexternaljs/harlowe/harlowe_importexternaljs.html","text":"\"Importing External JavaScript\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the built-in jQuery $.getScript() function to load the library and demonstrates a short example of how to use it. Note: The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Importing External JavaScript :: UserScript [script] /* import jQuery UI library. */ $(function () { $.getScript(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\", function (data, textStatus, jqxhr) { console.log('jquery ui file loaded'); } ); }); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <script> $(\"#box\").click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); </script> Download: Twee Code","title":"Harlowe"},{"location":"importexternaljs/harlowe/harlowe_importexternaljs.html#importing-external-javascript-harlowe-v20","text":"","title":"\"Importing External JavaScript\": Harlowe (v2.0)"},{"location":"importexternaljs/harlowe/harlowe_importexternaljs.html#summary","text":"\"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the built-in jQuery $.getScript() function to load the library and demonstrates a short example of how to use it. Note: The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library.","title":"Summary"},{"location":"importexternaljs/harlowe/harlowe_importexternaljs.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"importexternaljs/harlowe/harlowe_importexternaljs.html#twee-code","text":":: StoryTitle Harlowe: Importing External JavaScript :: UserScript [script] /* import jQuery UI library. */ $(function () { $.getScript(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\", function (data, textStatus, jqxhr) { console.log('jquery ui file loaded'); } ); }); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <script> $(\"#box\").click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); </script> Download: Twee Code","title":"Twee Code"},{"location":"importexternaljs/snowman/snowman_importexternaljs.html","text":"\"Importing External JavaScript\": Snowman (v1.3.0) \u00b6 Summary \u00b6 \"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the built-in jQuery $.getScript() function to load the library and demonstrates a short example of how to use it. Note: The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Importing External JavaScript :: UserScript [script] /* import jQuery UI library. */ $(function () { $.getScript(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\", function (data, textStatus, jqxhr) { console.log('jquery ui file loaded'); } ); }); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <script> $(\"#box\").click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); </script> Download: Twee Code","title":"Snowman"},{"location":"importexternaljs/snowman/snowman_importexternaljs.html#importing-external-javascript-snowman-v130","text":"","title":"\"Importing External JavaScript\": Snowman (v1.3.0)"},{"location":"importexternaljs/snowman/snowman_importexternaljs.html#summary","text":"\"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the built-in jQuery $.getScript() function to load the library and demonstrates a short example of how to use it. Note: The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library.","title":"Summary"},{"location":"importexternaljs/snowman/snowman_importexternaljs.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"importexternaljs/snowman/snowman_importexternaljs.html#twee-code","text":":: StoryTitle Snowman: Importing External JavaScript :: UserScript [script] /* import jQuery UI library. */ $(function () { $.getScript(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\", function (data, textStatus, jqxhr) { console.log('jquery ui file loaded'); } ); }); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <script> $(\"#box\").click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); </script> Download: Twee Code","title":"Twee Code"},{"location":"importexternaljs/sugarcube/sugarcube_importexternaljs.html","text":"\"Importing External JavaScript\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the SugarCube importScripts() function to load and integrate the script file's contents. Note: The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Importing External JavaScript :: UserScript [script] /* Import the jQuery UI library. */ importScripts(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\"); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <<script>> $(document).one(':passagerender', function (ev) { $(ev.content) .find(\"#box\") .click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); }); <</script>> Download: Twee Code","title":"SugarCube"},{"location":"importexternaljs/sugarcube/sugarcube_importexternaljs.html#importing-external-javascript-sugarcube-v218","text":"","title":"\"Importing External JavaScript\": SugarCube (v2.18)"},{"location":"importexternaljs/sugarcube/sugarcube_importexternaljs.html#summary","text":"\"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the SugarCube importScripts() function to load and integrate the script file's contents. Note: The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library.","title":"Summary"},{"location":"importexternaljs/sugarcube/sugarcube_importexternaljs.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"importexternaljs/sugarcube/sugarcube_importexternaljs.html#twee-code","text":":: StoryTitle SugarCube: Importing External JavaScript :: UserScript [script] /* Import the jQuery UI library. */ importScripts(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\"); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <<script>> $(document).one(':passagerender', function (ev) { $(ev.content) .find(\"#box\") .click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); }); <</script>> Download: Twee Code","title":"Twee Code"},{"location":"introduction/passages.html","text":"Passages \u00b6 Working in Twine is working with passages. They are foundational to how Twine works, and also what is shown to users when they view a Twine story. A passage is a way of thinking about different parts of a story. They can be rooms in a house, different time periods, or compartments for storage. The connections between them are made by the author or as part of the playing experience by the reader. Links \u00b6 Generally, the action of clicking a link in Twine is a movement between passages. In interactive fiction terminology, this can be thought of as a turn. The act of clicking the link signaled that a choice was made and it is now time to progress to the next content or set of choices. Content AND Code \u00b6 While passages can be thought of as content sections, they are also where code goes to change how text appears and how the passage should respond to the user. Writing prose and code both happen within passages. They are not separated in Twine: writing in a passage has the potential to be either or both at the same time.","title":"Passages"},{"location":"introduction/passages.html#passages","text":"Working in Twine is working with passages. They are foundational to how Twine works, and also what is shown to users when they view a Twine story. A passage is a way of thinking about different parts of a story. They can be rooms in a house, different time periods, or compartments for storage. The connections between them are made by the author or as part of the playing experience by the reader.","title":"Passages"},{"location":"introduction/passages.html#links","text":"Generally, the action of clicking a link in Twine is a movement between passages. In interactive fiction terminology, this can be thought of as a turn. The act of clicking the link signaled that a choice was made and it is now time to progress to the next content or set of choices.","title":"Links"},{"location":"introduction/passages.html#content-and-code","text":"While passages can be thought of as content sections, they are also where code goes to change how text appears and how the passage should respond to the user. Writing prose and code both happen within passages. They are not separated in Twine: writing in a passage has the potential to be either or both at the same time.","title":"Content AND Code"},{"location":"introduction/story_formats.html","text":"Story Formats \u00b6 While using passages are a part of all Twine authoring, there are different collections of rules and styling options called story formats . In Twine 2, they are accessed as part of the Story Menu. Clicking on Change Story Format opens up the options for picking different story formats and, in most cases, also have links to their externally-hosted documentation. Story Format: Dialects \u00b6 In Twine 1, story formats were different visual layouts. Instead of content appearing one way, it could be changed using a different story format. That changed with Twine 2. Now, story formats are more like dialects of the overall language of Twine along with their own visual changes. Some, like Harlowe, are much more designed for beginners while another, Snowman, is only recommended for more advanced users who want to write they own functionality. Story Format Differences \u00b6 There are many. Harlowe and Chapbook were created to be more user-friendly in many ways. However, this also means that more advanced functionality is much harder or nearly impossible. SugarCube follows many of the patterns started with Twine 1 with a large, expanded set of functionality, but also expects some knowledge on the part of the author. Snowman comes with very little built-in functionality and expects the author to write or otherwise supply their own. Macros \u00b6 The main differences between story formats come in how they handle macros . SugarCube, for example, supplies a large number of macros for doing many different things. Harlowe has less macros for authors to use, but is also aimed at a different, more general audience. Chapbook also uses macros but calls them inserts and modifiers. Style Markup \u00b6 The rules for styling text are often very different between story formats. The \"Style Markup\" examples show a great breakdown of the different options per story format ( Chapbook , Harlowe , SugarCube , and Snowman ).","title":"Story Formats"},{"location":"introduction/story_formats.html#story-formats","text":"While using passages are a part of all Twine authoring, there are different collections of rules and styling options called story formats . In Twine 2, they are accessed as part of the Story Menu. Clicking on Change Story Format opens up the options for picking different story formats and, in most cases, also have links to their externally-hosted documentation.","title":"Story Formats"},{"location":"introduction/story_formats.html#story-format-dialects","text":"In Twine 1, story formats were different visual layouts. Instead of content appearing one way, it could be changed using a different story format. That changed with Twine 2. Now, story formats are more like dialects of the overall language of Twine along with their own visual changes. Some, like Harlowe, are much more designed for beginners while another, Snowman, is only recommended for more advanced users who want to write they own functionality.","title":"Story Format: Dialects"},{"location":"introduction/story_formats.html#story-format-differences","text":"There are many. Harlowe and Chapbook were created to be more user-friendly in many ways. However, this also means that more advanced functionality is much harder or nearly impossible. SugarCube follows many of the patterns started with Twine 1 with a large, expanded set of functionality, but also expects some knowledge on the part of the author. Snowman comes with very little built-in functionality and expects the author to write or otherwise supply their own.","title":"Story Format Differences"},{"location":"introduction/story_formats.html#macros","text":"The main differences between story formats come in how they handle macros . SugarCube, for example, supplies a large number of macros for doing many different things. Harlowe has less macros for authors to use, but is also aimed at a different, more general audience. Chapbook also uses macros but calls them inserts and modifiers.","title":"Macros"},{"location":"introduction/story_formats.html#style-markup","text":"The rules for styling text are often very different between story formats. The \"Style Markup\" examples show a great breakdown of the different options per story format ( Chapbook , Harlowe , SugarCube , and Snowman ).","title":"Style Markup"},{"location":"introduction/twine2_editor.html","text":"Twine 2 Editor \u00b6 The Twine 2 editor has two main modes. Story Listing \u00b6 Showing the current stories stories in the browser (online) or on the computer (desktop application), the Story Listing mode is the first encountered in Twine. Passages View \u00b6 When opening and changing content in a story, the Passages View shows the passages, any connections between them, and allows for testing and playing the story.","title":"Twine 2 Editor"},{"location":"introduction/twine2_editor.html#twine-2-editor","text":"The Twine 2 editor has two main modes.","title":"Twine 2 Editor"},{"location":"introduction/twine2_editor.html#story-listing","text":"Showing the current stories stories in the browser (online) or on the computer (desktop application), the Story Listing mode is the first encountered in Twine.","title":"Story Listing"},{"location":"introduction/twine2_editor.html#passages-view","text":"When opening and changing content in a story, the Passages View shows the passages, any connections between them, and allows for testing and playing the story.","title":"Passages View"},{"location":"introduction/twine2_passages_view.html","text":"Using the Editor: Passages View \u00b6 At the bottom of the Passages View is a menu with access to different functionality. Return to Story Listing \u00b6 Return to the Story List. Story Menu \u00b6 The Story Menu gives access to different functionality about the story itself. Edit Story JavaScript \u00b6 The Edit Story JavaScript screen allows for adding or changing JavaScript code that will be included in the story when run or published in a HTML file. Edit Story Stylesheet \u00b6 The Edit Story Stylesheet screen allows for adding or changing CSS rules that will be included in the story when run or published in a HTML file. Change Story Format \u00b6 The Story Format screens allows for changing the story format in use when running and publishing the story in HTML. Rename Story \u00b6 The Rename Story option allows for changing the name of the story. Select All Passages \u00b6 The Select All Passages places all passages into a single selection for moving or rearranging them as a group Snap to Grid \u00b6 The Snap to Grid option turns off or on if passages should move to the closest grid position when moved. Story Statistics \u00b6 The Story Statistics screen shows data on the story including the number of characters and words. View Proofing Copy \u00b6 The View Proofing Copy of a story is the text of all passages except for the Story JavaScript and Story Stylesheet. Publish to File \u00b6 The Publish to File option compiles the current story and any Story JavaScript and Story Stylesheet code into a single HTML file. Quick Find \u00b6 The Quick Find functionality is used for searching for words or longer phrases across all passages. Find and Replace \u00b6 The Find and Replace functionality search for words, phrases, or certain expresses for the purpose of replacing them, if found, with other words or longer phrases. Story Structure \u00b6 The Story Structure view shows the connection between passages only. Passage Titles \u00b6 The Passage Tiles view shows simply that: passage titles. Titles and Excerpts \u00b6 The Titles and Excerpts view shows passages, their contents, and excerpts of their contents. Play Story in Test Mode \u00b6 The \"Play Story in Text Mode\" button starts turns on debugging functionality and starts the story. Play Story \u00b6 The \"Play Story\" button starts the story in a new tab or window. Create New Passage \u00b6 The \"Create New Passage\" button creates a new, unconnected passage in the Passage View.","title":"Passages View"},{"location":"introduction/twine2_passages_view.html#using-the-editor-passages-view","text":"At the bottom of the Passages View is a menu with access to different functionality.","title":"Using the Editor: Passages View"},{"location":"introduction/twine2_passages_view.html#return-to-story-listing","text":"Return to the Story List.","title":"Return to Story Listing"},{"location":"introduction/twine2_passages_view.html#story-menu","text":"The Story Menu gives access to different functionality about the story itself.","title":"Story Menu"},{"location":"introduction/twine2_passages_view.html#edit-story-javascript","text":"The Edit Story JavaScript screen allows for adding or changing JavaScript code that will be included in the story when run or published in a HTML file.","title":"Edit Story JavaScript"},{"location":"introduction/twine2_passages_view.html#edit-story-stylesheet","text":"The Edit Story Stylesheet screen allows for adding or changing CSS rules that will be included in the story when run or published in a HTML file.","title":"Edit Story Stylesheet"},{"location":"introduction/twine2_passages_view.html#change-story-format","text":"The Story Format screens allows for changing the story format in use when running and publishing the story in HTML.","title":"Change Story Format"},{"location":"introduction/twine2_passages_view.html#rename-story","text":"The Rename Story option allows for changing the name of the story.","title":"Rename Story"},{"location":"introduction/twine2_passages_view.html#select-all-passages","text":"The Select All Passages places all passages into a single selection for moving or rearranging them as a group","title":"Select All Passages"},{"location":"introduction/twine2_passages_view.html#snap-to-grid","text":"The Snap to Grid option turns off or on if passages should move to the closest grid position when moved.","title":"Snap to Grid"},{"location":"introduction/twine2_passages_view.html#story-statistics","text":"The Story Statistics screen shows data on the story including the number of characters and words.","title":"Story Statistics"},{"location":"introduction/twine2_passages_view.html#view-proofing-copy","text":"The View Proofing Copy of a story is the text of all passages except for the Story JavaScript and Story Stylesheet.","title":"View Proofing Copy"},{"location":"introduction/twine2_passages_view.html#publish-to-file","text":"The Publish to File option compiles the current story and any Story JavaScript and Story Stylesheet code into a single HTML file.","title":"Publish to File"},{"location":"introduction/twine2_passages_view.html#quick-find","text":"The Quick Find functionality is used for searching for words or longer phrases across all passages.","title":"Quick Find"},{"location":"introduction/twine2_passages_view.html#find-and-replace","text":"The Find and Replace functionality search for words, phrases, or certain expresses for the purpose of replacing them, if found, with other words or longer phrases.","title":"Find and Replace"},{"location":"introduction/twine2_passages_view.html#story-structure","text":"The Story Structure view shows the connection between passages only.","title":"Story Structure"},{"location":"introduction/twine2_passages_view.html#passage-titles","text":"The Passage Tiles view shows simply that: passage titles.","title":"Passage Titles"},{"location":"introduction/twine2_passages_view.html#titles-and-excerpts","text":"The Titles and Excerpts view shows passages, their contents, and excerpts of their contents.","title":"Titles and Excerpts"},{"location":"introduction/twine2_passages_view.html#play-story-in-test-mode","text":"The \"Play Story in Text Mode\" button starts turns on debugging functionality and starts the story.","title":"Play Story in Test Mode"},{"location":"introduction/twine2_passages_view.html#play-story","text":"The \"Play Story\" button starts the story in a new tab or window.","title":"Play Story"},{"location":"introduction/twine2_passages_view.html#create-new-passage","text":"The \"Create New Passage\" button creates a new, unconnected passage in the Passage View.","title":"Create New Passage"},{"location":"introduction/twine2_story_listing.html","text":"Using the Editor: Story Listing \u00b6 The very first screen upon opening Twine 2 in the desktop or online version is the story view or story listing. This shows all of the stories loaded in this version that can be opened and edited. Side Menu \u00b6 On the right-hand side is a menu for accessing different options in the editor. +Story \u00b6 Using the \"+Story\" allows the user to name and create a new story that will be added to the story listing. Import From File \u00b6 Using the \"Import from File\" functionality opens a dialog window to select a file and import it into the story listing. All files published with Twine 1 (starting with 1.4.2) are compatible and can be imported. However, major versions of the editor can only publish files matching its number. Archive \u00b6 Using the \"Archive\" button will produce a ZIP'd file containing all of the stories currently listed in the view. Formats \u00b6 \"Formats\" allows for adding to the current listing or changing the current default story format when creating new stories. Story Formats \u00b6 Opened by default, this tab shows all of the current story formats loaded in Twine 2. Proofing Formats \u00b6 A listing of all of the current Proofing Formats loaded in Twine 2 as well as which one (if multiple are loaded) is the default for creating a \"Proof Copy\" of a story. Add a New Format \u00b6 Through pasting or typing out the URL of a new story format and using the \"Add\" button, other story formats can be loaded and used. Depending on if the loaded format was story or proof, it will appear as an option on those tabs once loaded and ready for use. Language \u00b6 Twine 2 supports over a dozen languages for named entries in its user interface. Selecting one of them will change the current language of the editor and its menus. Help \u00b6 Clicking on \"Help\" opens a new tab or window in the default browser on the \"Twine 2 Guide\" of the wiki. Theme Options \u00b6 Twine 2 comes with two themes: dark and light. Clicking on either icon switches the interface to that theme. Current Storage (Online-version only) \u00b6 When used online, the editor will keep track of how much local storage usage remains for creating and saving stories in Twine 2. Depending on the browser, system, and other settings, this amount can be different. Version Information and Bug Reporting \u00b6 At the bottom of the menu is the current version of Twine 2 and a link to the Issues page of the GitHub repository.","title":"Story Listing"},{"location":"introduction/twine2_story_listing.html#using-the-editor-story-listing","text":"The very first screen upon opening Twine 2 in the desktop or online version is the story view or story listing. This shows all of the stories loaded in this version that can be opened and edited.","title":"Using the Editor: Story Listing"},{"location":"introduction/twine2_story_listing.html#side-menu","text":"On the right-hand side is a menu for accessing different options in the editor.","title":"Side Menu"},{"location":"introduction/twine2_story_listing.html#story","text":"Using the \"+Story\" allows the user to name and create a new story that will be added to the story listing.","title":"+Story"},{"location":"introduction/twine2_story_listing.html#import-from-file","text":"Using the \"Import from File\" functionality opens a dialog window to select a file and import it into the story listing. All files published with Twine 1 (starting with 1.4.2) are compatible and can be imported. However, major versions of the editor can only publish files matching its number.","title":"Import From File"},{"location":"introduction/twine2_story_listing.html#archive","text":"Using the \"Archive\" button will produce a ZIP'd file containing all of the stories currently listed in the view.","title":"Archive"},{"location":"introduction/twine2_story_listing.html#formats","text":"\"Formats\" allows for adding to the current listing or changing the current default story format when creating new stories.","title":"Formats"},{"location":"introduction/twine2_story_listing.html#story-formats","text":"Opened by default, this tab shows all of the current story formats loaded in Twine 2.","title":"Story Formats"},{"location":"introduction/twine2_story_listing.html#proofing-formats","text":"A listing of all of the current Proofing Formats loaded in Twine 2 as well as which one (if multiple are loaded) is the default for creating a \"Proof Copy\" of a story.","title":"Proofing Formats"},{"location":"introduction/twine2_story_listing.html#add-a-new-format","text":"Through pasting or typing out the URL of a new story format and using the \"Add\" button, other story formats can be loaded and used. Depending on if the loaded format was story or proof, it will appear as an option on those tabs once loaded and ready for use.","title":"Add a New Format"},{"location":"introduction/twine2_story_listing.html#language","text":"Twine 2 supports over a dozen languages for named entries in its user interface. Selecting one of them will change the current language of the editor and its menus.","title":"Language"},{"location":"introduction/twine2_story_listing.html#help","text":"Clicking on \"Help\" opens a new tab or window in the default browser on the \"Twine 2 Guide\" of the wiki.","title":"Help"},{"location":"introduction/twine2_story_listing.html#theme-options","text":"Twine 2 comes with two themes: dark and light. Clicking on either icon switches the interface to that theme.","title":"Theme Options"},{"location":"introduction/twine2_story_listing.html#current-storage-online-version-only","text":"When used online, the editor will keep track of how much local storage usage remains for creating and saving stories in Twine 2. Depending on the browser, system, and other settings, this amount can be different.","title":"Current Storage (Online-version only)"},{"location":"introduction/twine2_story_listing.html#version-information-and-bug-reporting","text":"At the bottom of the menu is the current version of Twine 2 and a link to the Issues page of the GitHub repository.","title":"Version Information and Bug Reporting"},{"location":"keyboard/chapbook/chapbook_keyboard.html","text":"\"Keyboard Events\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 \"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses addEventListener() to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Keyboard :: UserScript[script] (function () { document.addEventListener('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Download: Twee Code","title":"Chapbook"},{"location":"keyboard/chapbook/chapbook_keyboard.html#keyboard-events-chapbook-v100","text":"","title":"\"Keyboard Events\": Chapbook (v1.0.0)"},{"location":"keyboard/chapbook/chapbook_keyboard.html#summary","text":"\"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses addEventListener() to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers.","title":"Summary"},{"location":"keyboard/chapbook/chapbook_keyboard.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"keyboard/chapbook/chapbook_keyboard.html#twee-code","text":":: StoryTitle Chapbook: Keyboard :: UserScript[script] (function () { document.addEventListener('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Download: Twee Code","title":"Twee Code"},{"location":"keyboard/harlowe/harlowe_keyboard.html","text":"\"Keyboard Events\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all keyup events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Download: Twee Code","title":"Harlowe"},{"location":"keyboard/harlowe/harlowe_keyboard.html#keyboard-events-harlowe-v20","text":"","title":"\"Keyboard Events\": Harlowe (v2.0)"},{"location":"keyboard/harlowe/harlowe_keyboard.html#summary","text":"\"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all keyup events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers.","title":"Summary"},{"location":"keyboard/harlowe/harlowe_keyboard.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"keyboard/harlowe/harlowe_keyboard.html#twee-code","text":":: StoryTitle Harlowe: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Download: Twee Code","title":"Twee Code"},{"location":"keyboard/snowman/snowman_keyboard.html","text":"\"Keyboard Events\": Snowman (v1.3.0) \u00b6 Summary \u00b6 \"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Download: Twee Code","title":"Snowman"},{"location":"keyboard/snowman/snowman_keyboard.html#keyboard-events-snowman-v130","text":"","title":"\"Keyboard Events\": Snowman (v1.3.0)"},{"location":"keyboard/snowman/snowman_keyboard.html#summary","text":"\"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers.","title":"Summary"},{"location":"keyboard/snowman/snowman_keyboard.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"keyboard/snowman/snowman_keyboard.html#twee-code","text":":: StoryTitle Snowman: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Download: Twee Code","title":"Twee Code"},{"location":"keyboard/sugarcube/sugarcube_keyboard.html","text":"\"Keyboard Events\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { UI.alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Download: Twee Code","title":"SugarCube"},{"location":"keyboard/sugarcube/sugarcube_keyboard.html#keyboard-events-sugarcube-v218","text":"","title":"\"Keyboard Events\": SugarCube (v2.18)"},{"location":"keyboard/sugarcube/sugarcube_keyboard.html#summary","text":"\"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers.","title":"Summary"},{"location":"keyboard/sugarcube/sugarcube_keyboard.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"keyboard/sugarcube/sugarcube_keyboard.html#twee-code","text":":: StoryTitle SugarCube: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { UI.alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Download: Twee Code","title":"Twee Code"},{"location":"loadscreen/sugarcube/sugarcube_loadscreen.html","text":"\"Loading Screen\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Loading Screen\" demonstrates how the LockScreen.lock() and LockScreen.unlock() functions work in SugarCube. (This example also uses the setTimeout() JavaScript function.) Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Loading Screen in SugarCube :: UserScript[script] // Lock the screen and save the ID var lockID = LoadScreen.lock(); // Pause for 5 second before unlocking the screen setTimeout(function(){ LoadScreen.unlock(lockID); }, 5000); :: Start You can now see this after the long pause! Download: Twee Code","title":"SugarCube"},{"location":"loadscreen/sugarcube/sugarcube_loadscreen.html#loading-screen-sugarcube-v218","text":"","title":"\"Loading Screen\": SugarCube (v2.18)"},{"location":"loadscreen/sugarcube/sugarcube_loadscreen.html#summary","text":"\"Loading Screen\" demonstrates how the LockScreen.lock() and LockScreen.unlock() functions work in SugarCube. (This example also uses the setTimeout() JavaScript function.)","title":"Summary"},{"location":"loadscreen/sugarcube/sugarcube_loadscreen.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"loadscreen/sugarcube/sugarcube_loadscreen.html#twee-code","text":":: StoryTitle Loading Screen in SugarCube :: UserScript[script] // Lock the screen and save the ID var lockID = LoadScreen.lock(); // Pause for 5 second before unlocking the screen setTimeout(function(){ LoadScreen.unlock(lockID); }, 5000); :: Start You can now see this after the long pause! Download: Twee Code","title":"Twee Code"},{"location":"lockandkey_variable/chapbook/chapbook_lockandkey_variable.html","text":"\"Lock and Key: Variable\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 \"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( key ) and is initially set to the value \"false\" in the Start passage. When the link \"Pick up key\" is clicked in the \"Back Room\" passage, key is changed to the value \"true\" via embedding the passage \"Key\". When the passage is visited and key is set to the value of \"true\", door link changes from its initial response of \"Locked Door\" to \"Unlock the door\". Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Lock and Key: Variable :: Start key: false -- Rooms: [[Front Room]] [[Back Room]] :: Front Room [if key == true] [[Unlock the door->Exit]] [else] *Locked Door* [continued] Rooms: [[Back Room]] :: Back Room [if key == false] Items: {reveal link: 'Pick up key', passage: 'Key'} [else] There is nothing here. [continued] Rooms: [[Front Room]] :: Exit You found the key and went through the door! :: Key key: true -- You picked up the key! Download: Twee Code","title":"Chapbook"},{"location":"lockandkey_variable/chapbook/chapbook_lockandkey_variable.html#lock-and-key-variable-chapbook-v100","text":"","title":"\"Lock and Key: Variable\": Chapbook (v1.0.0)"},{"location":"lockandkey_variable/chapbook/chapbook_lockandkey_variable.html#summary","text":"\"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( key ) and is initially set to the value \"false\" in the Start passage. When the link \"Pick up key\" is clicked in the \"Back Room\" passage, key is changed to the value \"true\" via embedding the passage \"Key\". When the passage is visited and key is set to the value of \"true\", door link changes from its initial response of \"Locked Door\" to \"Unlock the door\".","title":"Summary"},{"location":"lockandkey_variable/chapbook/chapbook_lockandkey_variable.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"lockandkey_variable/chapbook/chapbook_lockandkey_variable.html#twee-code","text":":: StoryTitle Chapbook: Lock and Key: Variable :: Start key: false -- Rooms: [[Front Room]] [[Back Room]] :: Front Room [if key == true] [[Unlock the door->Exit]] [else] *Locked Door* [continued] Rooms: [[Back Room]] :: Back Room [if key == false] Items: {reveal link: 'Pick up key', passage: 'Key'} [else] There is nothing here. [continued] Rooms: [[Front Room]] :: Exit You found the key and went through the door! :: Key key: true -- You picked up the key! Download: Twee Code","title":"Twee Code"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html","text":"\"Lock and Key: Variable\": Harlowe (v2.0) \u00b6 Note: This recipe is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values. Summary \u00b6 \"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( $key ) and is initially set to the value \"false\" in the Start passage. When the link \"Pick up the key\" is clicked, $key is changed to the value \"true\" and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Lock and Key: Variable in Harlowe :: Start (set: $key to false) Rooms: [[Front Room]] [[Back Room]] :: Front Room (if: $key is true)[ [[Exit]] ] (else:)[ *Locked Door* ] Rooms: [[Back Room]] :: Back Room (if: $key is false)[ Items: (link: \"Pick up key\")[(set: $key to true)You have a key.] ] (else:)[ There is nothing here. ] Rooms: [[Front Room]] :: Exit You found the key and went through the door! Download: Twee Code See Also \u00b6 Setting and Showing Variables","title":"Harlowe"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html#lock-and-key-variable-harlowe-v20","text":"Note: This recipe is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values.","title":"\"Lock and Key: Variable\": Harlowe (v2.0)"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html#summary","text":"\"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( $key ) and is initially set to the value \"false\" in the Start passage. When the link \"Pick up the key\" is clicked, $key is changed to the value \"true\" and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit.","title":"Summary"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html#twee-code","text":":: StoryTitle Lock and Key: Variable in Harlowe :: Start (set: $key to false) Rooms: [[Front Room]] [[Back Room]] :: Front Room (if: $key is true)[ [[Exit]] ] (else:)[ *Locked Door* ] Rooms: [[Back Room]] :: Back Room (if: $key is false)[ Items: (link: \"Pick up key\")[(set: $key to true)You have a key.] ] (else:)[ There is nothing here. ] Rooms: [[Front Room]] :: Exit You found the key and went through the door! Download: Twee Code","title":"Twee Code"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html","text":"\"Lock and Key: Variable\": Snowman (v1.3) \u00b6 Summary \u00b6 \"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( s.key ) and does not initially exist in the Start passage. When the link \"Pick up the key\" is clicked, s.key is changed to the value \"true\" and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Lock and Key: Variable in Snowman :: Start Rooms: - [[Front Room]] - [[Back Room]] :: Front Room <% if (s.key) { %> [[Exit]] <% } else { %> *Locked Door* <% } %> Rooms: - [[Back Room]] :: Back Room <% if (!s.key) { %> Items: - <a href=\"javascript:void(0)\" class=\"key-item\">Pick up key</a> <% } else { %> There is nothing here. <% } %> <% $(function() { $('.key-item').click(function() { s.key = true; $(this).replaceWith('<span>You have a key.</span>'); }); }); %> Rooms: - [[Front Room]] :: Exit You found the key and went through the door! Download: Twee Code See Also \u00b6 Setting and Showing Variables","title":"Snowman"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html#lock-and-key-variable-snowman-v13","text":"","title":"\"Lock and Key: Variable\": Snowman (v1.3)"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html#summary","text":"\"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( s.key ) and does not initially exist in the Start passage. When the link \"Pick up the key\" is clicked, s.key is changed to the value \"true\" and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit.","title":"Summary"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html#twee-code","text":":: StoryTitle Lock and Key: Variable in Snowman :: Start Rooms: - [[Front Room]] - [[Back Room]] :: Front Room <% if (s.key) { %> [[Exit]] <% } else { %> *Locked Door* <% } %> Rooms: - [[Back Room]] :: Back Room <% if (!s.key) { %> Items: - <a href=\"javascript:void(0)\" class=\"key-item\">Pick up key</a> <% } else { %> There is nothing here. <% } %> <% $(function() { $('.key-item').click(function() { s.key = true; $(this).replaceWith('<span>You have a key.</span>'); }); }); %> Rooms: - [[Front Room]] :: Exit You found the key and went through the door! Download: Twee Code","title":"Twee Code"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html","text":"\"Lock and Key: Variable\": SugarCube (v2.18) \u00b6 Note: This recipe is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values. Summary \u00b6 \"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( $key ) and is initially set to the value false in the Start passage. When the link (created using a <<linkreplace>> macro) \"Pick up the key\" is clicked, $key is changed to the value true and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Lock and Key: Variable in SugarCube :: Start <<set $key to false>> Rooms: [[Back Room]] [[Front Room]] :: Back Room <<if $key is false>> Items: <<linkreplace \"Pick up the key\">><<set $key to true>>You have a key.<</linkreplace>> <<else>> There is nothing here. <</if>> Rooms: [[Front Room]] :: Front Room <<if $key is true>> [[Exit]] <<else>> Locked Door <</if>> Rooms: [[Back Room]] :: Exit You found the key and went through the door! Download: Twee Code See Also \u00b6 Setting and Showing Variables","title":"SugarCube"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html#lock-and-key-variable-sugarcube-v218","text":"Note: This recipe is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values.","title":"\"Lock and Key: Variable\": SugarCube (v2.18)"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html#summary","text":"\"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( $key ) and is initially set to the value false in the Start passage. When the link (created using a <<linkreplace>> macro) \"Pick up the key\" is clicked, $key is changed to the value true and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit.","title":"Summary"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html#twee-code","text":":: StoryTitle Lock and Key: Variable in SugarCube :: Start <<set $key to false>> Rooms: [[Back Room]] [[Front Room]] :: Back Room <<if $key is false>> Items: <<linkreplace \"Pick up the key\">><<set $key to true>>You have a key.<</linkreplace>> <<else>> There is nothing here. <</if>> Rooms: [[Front Room]] :: Front Room <<if $key is true>> [[Exit]] <<else>> Locked Door <</if>> Rooms: [[Back Room]] :: Exit You found the key and went through the door! Download: Twee Code","title":"Twee Code"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"looping/chapbook/chapbook_looping.html","text":"\"Looping\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In Chapbook, the modifier [JavaScript] allows for using JavaScript inside a passage. Through using the forEach() function of Arrays and the write() function supplied by Chapbook, each entry within an array can be shown. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Looping :: Start exampleArray: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61] -- The values of the array are: <ul> [JavaScript] exampleArray.forEach(function(value, index){ write(\"<li>\" + value + \"</li>\"); }); [continued] </ul> Download: Twee Code","title":"Chapbook"},{"location":"looping/chapbook/chapbook_looping.html#looping-chapbook-v100","text":"","title":"\"Looping\": Chapbook (v1.0.0)"},{"location":"looping/chapbook/chapbook_looping.html#summary","text":"In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In Chapbook, the modifier [JavaScript] allows for using JavaScript inside a passage. Through using the forEach() function of Arrays and the write() function supplied by Chapbook, each entry within an array can be shown.","title":"Summary"},{"location":"looping/chapbook/chapbook_looping.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"looping/chapbook/chapbook_looping.html#twee-code","text":":: StoryTitle Chapbook: Looping :: Start exampleArray: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61] -- The values of the array are: <ul> [JavaScript] exampleArray.forEach(function(value, index){ write(\"<li>\" + value + \"</li>\"); }); [continued] </ul> Download: Twee Code","title":"Twee Code"},{"location":"looping/harlowe/harlowe_looping.html","text":"\"Looping\": Harlowe (v2.0) \u00b6 Summary \u00b6 In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In Harlowe, the macros (loop:) and (for:) provide this functionality. Combined with the keywords each , to move through all entries, or \"where,\" to specify some condition, they allow for \"looping\" through data structures like arrays or datamaps. In this example, the variable arrayInventory is set to the value of an array containing the strings \"Bread\", \"Pan\", and \"Book\". The (for:) macro is used with the keyword each to set the values contained in the array to the temporary variable _temp for each value of the spread out array. The text contained in the associated hook to the (for:) macro is shown each loop with the value of _temp changed for each value in the array. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Looping in Harlowe :: Start <!-- Create an array of the strings \"Bread\", \"Pan\", \"Book\" --> (set: $arrayInventory to (a: \"Bread\", \"Pan\", \"Book\") ) <!-- For each entry in the expanded array in turn, --> <!-- set the entry to the temporary variable _temp --> (for: each _temp, ...$arrayInventory)[ You have _temp.] Download: Twee Code","title":"Harlowe"},{"location":"looping/harlowe/harlowe_looping.html#looping-harlowe-v20","text":"","title":"\"Looping\": Harlowe (v2.0)"},{"location":"looping/harlowe/harlowe_looping.html#summary","text":"In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In Harlowe, the macros (loop:) and (for:) provide this functionality. Combined with the keywords each , to move through all entries, or \"where,\" to specify some condition, they allow for \"looping\" through data structures like arrays or datamaps. In this example, the variable arrayInventory is set to the value of an array containing the strings \"Bread\", \"Pan\", and \"Book\". The (for:) macro is used with the keyword each to set the values contained in the array to the temporary variable _temp for each value of the spread out array. The text contained in the associated hook to the (for:) macro is shown each loop with the value of _temp changed for each value in the array.","title":"Summary"},{"location":"looping/harlowe/harlowe_looping.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"looping/harlowe/harlowe_looping.html#twee-code","text":":: StoryTitle Looping in Harlowe :: Start <!-- Create an array of the strings \"Bread\", \"Pan\", \"Book\" --> (set: $arrayInventory to (a: \"Bread\", \"Pan\", \"Book\") ) <!-- For each entry in the expanded array in turn, --> <!-- set the entry to the temporary variable _temp --> (for: each _temp, ...$arrayInventory)[ You have _temp.] Download: Twee Code","title":"Twee Code"},{"location":"looping/snowman/snowman_looping.html","text":"\"Looping\": Snowman (v1.3.0) \u00b6 Summary \u00b6 In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. Because Snowman does not provide macros, the existing JavaScript for keyword can be used to create loops. Since Snowman also includes the Underscore.js and jQuery libraries, the _.each() and jQuery.each() functions can also be used. In this example, the s global shortcut to the window.story.state variable used. A new property called \"arrayInventory\" is set to the series of values \"Bread\", \"Pan\", and \"Book\". The first example uses the JavaScript for keyword to move through the values. The second example uses the _.each() function in Underscore.js, and the third uses the jQuery.each() function for the same purpose. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Looping in Snowman :: Start <% // An array of the strings \"Bread\", \"Pan\", \"Book\" s.arrayInventory = [\"Bread\", \"Pan\", \"Book\"]; // An example using JavaScript for (var i = 0; i < s.arrayInventory.length; i++){ %>You have <%= s.arrayInventory[i] %>.<br> <% } %> <hr> <% // An example using Underscore.js _.each(s.arrayInventory, function(item) { %>You have <%= item %>.<br> <% }); %> <hr> <% // An example using jQuery jQuery.each(s.arrayInventory, function( index, value ) { %>You have <%= value %>.<br> <% }); %> Download: Twee Code","title":"Snowman"},{"location":"looping/snowman/snowman_looping.html#looping-snowman-v130","text":"","title":"\"Looping\": Snowman (v1.3.0)"},{"location":"looping/snowman/snowman_looping.html#summary","text":"In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. Because Snowman does not provide macros, the existing JavaScript for keyword can be used to create loops. Since Snowman also includes the Underscore.js and jQuery libraries, the _.each() and jQuery.each() functions can also be used. In this example, the s global shortcut to the window.story.state variable used. A new property called \"arrayInventory\" is set to the series of values \"Bread\", \"Pan\", and \"Book\". The first example uses the JavaScript for keyword to move through the values. The second example uses the _.each() function in Underscore.js, and the third uses the jQuery.each() function for the same purpose.","title":"Summary"},{"location":"looping/snowman/snowman_looping.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"looping/snowman/snowman_looping.html#twee-code","text":":: StoryTitle Looping in Snowman :: Start <% // An array of the strings \"Bread\", \"Pan\", \"Book\" s.arrayInventory = [\"Bread\", \"Pan\", \"Book\"]; // An example using JavaScript for (var i = 0; i < s.arrayInventory.length; i++){ %>You have <%= s.arrayInventory[i] %>.<br> <% } %> <hr> <% // An example using Underscore.js _.each(s.arrayInventory, function(item) { %>You have <%= item %>.<br> <% }); %> <hr> <% // An example using jQuery jQuery.each(s.arrayInventory, function( index, value ) { %>You have <%= value %>.<br> <% }); %> Download: Twee Code","title":"Twee Code"},{"location":"looping/sugarcube/sugarcube_looping.html","text":"\"Looping\": SugarCube (v2.18) \u00b6 Summary \u00b6 In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In SugarCube, the control macro <<for>> provides this functionality. It acts like the for keyword in JavaScript and its usage works in a similar way. In this example, the array arrayInventory is set to the series of strings \"Bread\", \"Pan\", and \"Book\". Using the <<for>> macro, a temporary variable is set to 0 and increased for each loop until its value is no longer less than the length (number of entries) in the array. Inside the macro, the text is shown each time with the value of the entry matching the position of the value of _i in the array substituted. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Looping in SugarCube :: Start <!-- Set the variable $arrayInventory to the array containing \"Bread\", \"Pan\", \"Book\" --> <<set $arrayInventory to [\"Bread\", \"Pan\", \"Book\"]>> <!-- Set the temporary variable _l to 0 and increase it until it is greater than the length of the array $arrayInventory --> <<for _i to 0; _i lt $arrayInventory.length; _i++>> You have $arrayInventory[_i] <</for>> Download: Twee Code","title":"SugarCube"},{"location":"looping/sugarcube/sugarcube_looping.html#looping-sugarcube-v218","text":"","title":"\"Looping\": SugarCube (v2.18)"},{"location":"looping/sugarcube/sugarcube_looping.html#summary","text":"In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In SugarCube, the control macro <<for>> provides this functionality. It acts like the for keyword in JavaScript and its usage works in a similar way. In this example, the array arrayInventory is set to the series of strings \"Bread\", \"Pan\", and \"Book\". Using the <<for>> macro, a temporary variable is set to 0 and increased for each loop until its value is no longer less than the length (number of entries) in the array. Inside the macro, the text is shown each time with the value of the entry matching the position of the value of _i in the array substituted.","title":"Summary"},{"location":"looping/sugarcube/sugarcube_looping.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"looping/sugarcube/sugarcube_looping.html#twee-code","text":":: StoryTitle Looping in SugarCube :: Start <!-- Set the variable $arrayInventory to the array containing \"Bread\", \"Pan\", \"Book\" --> <<set $arrayInventory to [\"Bread\", \"Pan\", \"Book\"]>> <!-- Set the temporary variable _l to 0 and increase it until it is greater than the length of the array $arrayInventory --> <<for _i to 0; _i lt $arrayInventory.length; _i++>> You have $arrayInventory[_i] <</for>> Download: Twee Code","title":"Twee Code"},{"location":"markup/chapbook/chapbook_markup.html","text":"\"Style Markup\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Chapbook uses a customized sub-set of Markdown to support its style formatting. Notes: The Text Formatting section of the Chapbook Guide states you can also use a # character to indicate a Numbered List item. This currently (as of v1.0.0-beta) isn't correct, as that character actually results in a Level 1 Header . Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Style Markup in Chapbook :: Start *Emphasis (aka Italics)* or _using single underscores_ <br> **Strong Emphasis (aka Bold)** or __using double underscores__ <br> Combined Emphasis with **asterisks and _underscores_** <br> <del>Strikethrough text</del> <br> Super<sup>script</sup> <br> Sub<sub>script</sub> <br> `Monospaced Type (aka Code Block)` <br> ~~Small Caps~~ <blockquote>Quote</blockquote> * A Bulleted list item (using asterisk) * Another Bulleted list item (using asterisk) - A Bulleted list item (using minus) - Another Bulleted list item (using minus) + A Bulleted list item (using plus) + Another Bulleted list item (using plus) 1. A Numbered list item 2. Another Numbered list item [align left] Text is left-aligned. [align center] Text is centered / centred. [align right] Text is right-aligned. [Continue] Text-alignment has been reset to the default. Ignoring of \\*Formatting\\* Characters <br> More ignoring of \\_\\_Formatting\\_\\_ Characters Above Section Break is Chapbook specific or standard HTML... *** Below Section Break is supported Markdown extras... # Level 1 Heading ## Level 2 Heading ### Level 3 Heading #### Level 4 Heading ##### Level 5 Heading ###### Level 6 Heading Alternative Level 1 Heading ====== Alternative Level 2 Heading ------ | Table mark-up | with | alignment | | --- | :---: | ---: | | column 1 is | left-aligned | 1 | | col 2 is | centered | 10 | | col 3 is | right-aligned | 100 | Download: Twee Code","title":"Chapbook"},{"location":"markup/chapbook/chapbook_markup.html#style-markup-chapbook-v100","text":"","title":"\"Style Markup\": Chapbook (v1.0.0)"},{"location":"markup/chapbook/chapbook_markup.html#summary","text":"Chapbook uses a customized sub-set of Markdown to support its style formatting. Notes: The Text Formatting section of the Chapbook Guide states you can also use a # character to indicate a Numbered List item. This currently (as of v1.0.0-beta) isn't correct, as that character actually results in a Level 1 Header .","title":"Summary"},{"location":"markup/chapbook/chapbook_markup.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"markup/chapbook/chapbook_markup.html#twee-code","text":":: StoryTitle Style Markup in Chapbook :: Start *Emphasis (aka Italics)* or _using single underscores_ <br> **Strong Emphasis (aka Bold)** or __using double underscores__ <br> Combined Emphasis with **asterisks and _underscores_** <br> <del>Strikethrough text</del> <br> Super<sup>script</sup> <br> Sub<sub>script</sub> <br> `Monospaced Type (aka Code Block)` <br> ~~Small Caps~~ <blockquote>Quote</blockquote> * A Bulleted list item (using asterisk) * Another Bulleted list item (using asterisk) - A Bulleted list item (using minus) - Another Bulleted list item (using minus) + A Bulleted list item (using plus) + Another Bulleted list item (using plus) 1. A Numbered list item 2. Another Numbered list item [align left] Text is left-aligned. [align center] Text is centered / centred. [align right] Text is right-aligned. [Continue] Text-alignment has been reset to the default. Ignoring of \\*Formatting\\* Characters <br> More ignoring of \\_\\_Formatting\\_\\_ Characters Above Section Break is Chapbook specific or standard HTML... *** Below Section Break is supported Markdown extras... # Level 1 Heading ## Level 2 Heading ### Level 3 Heading #### Level 4 Heading ##### Level 5 Heading ###### Level 6 Heading Alternative Level 1 Heading ====== Alternative Level 2 Heading ------ | Table mark-up | with | alignment | | --- | :---: | ---: | | column 1 is | left-aligned | 1 | | col 2 is | centered | 10 | | col 3 is | right-aligned | 100 | Download: Twee Code","title":"Twee Code"},{"location":"markup/harlowe/harlowe_markup.html","text":"\"Style Markup\": Harlowe (v2.0) \u00b6 Summary \u00b6 In Harlowe , style markup can take many forms. Covering italics and boldface as basic examples, Harlowe also provides markup for creating alignment and columns as well. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Style Markup in Harlowe :: Start //Italics// ''Boldface'' ~~Strikethrough text~~ *Emphasis* **Strong emphasis** Super^^script^^ ``[[Escaped double square brackets]]`` #Level 1 heading ##Level 2 heading ###Level 3 heading ####Level 4 heading #####Level 5 heading ######Level 6 heading * Bulleted item * Bulleted item 2 ** Indented bulleted item 0. Numbered item 0. Numbered item 2 0.0. Indented numbered item ==> This is right-aligned =><= This is centered <==> This is justified <== This is left-aligned (undoes the above) ===><= This has margins 3/4 left, 1/4 right =><===== This has margins 1/6 left, 5/6 right. |== This is in the leftmost column, which has a right margin of about 2 letters wide. =|||= This is in the next column, which has margins of 1 letter wide. It is three times as wide as the left column. =====|| This is in the right column, which has a right margin of about 5 letters wide. It is twice as wide as the left column. |==| This text is not in columns, but takes up the entire width, as usual. Download: Twee Code","title":"Harlowe"},{"location":"markup/harlowe/harlowe_markup.html#style-markup-harlowe-v20","text":"","title":"\"Style Markup\": Harlowe (v2.0)"},{"location":"markup/harlowe/harlowe_markup.html#summary","text":"In Harlowe , style markup can take many forms. Covering italics and boldface as basic examples, Harlowe also provides markup for creating alignment and columns as well.","title":"Summary"},{"location":"markup/harlowe/harlowe_markup.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"markup/harlowe/harlowe_markup.html#twee-code","text":":: StoryTitle Style Markup in Harlowe :: Start //Italics// ''Boldface'' ~~Strikethrough text~~ *Emphasis* **Strong emphasis** Super^^script^^ ``[[Escaped double square brackets]]`` #Level 1 heading ##Level 2 heading ###Level 3 heading ####Level 4 heading #####Level 5 heading ######Level 6 heading * Bulleted item * Bulleted item 2 ** Indented bulleted item 0. Numbered item 0. Numbered item 2 0.0. Indented numbered item ==> This is right-aligned =><= This is centered <==> This is justified <== This is left-aligned (undoes the above) ===><= This has margins 3/4 left, 1/4 right =><===== This has margins 1/6 left, 5/6 right. |== This is in the leftmost column, which has a right margin of about 2 letters wide. =|||= This is in the next column, which has margins of 1 letter wide. It is three times as wide as the left column. =====|| This is in the right column, which has a right margin of about 5 letters wide. It is twice as wide as the left column. |==| This text is not in columns, but takes up the entire width, as usual. Download: Twee Code","title":"Twee Code"},{"location":"markup/snowman/snowman_markup.html","text":"\"Style Markup\": Snowman (v1.3.0) \u00b6 Summary \u00b6 Snowman uses a sub-set of markdown for in-line styling. Snowman does not support multi-line markdown variations. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Style Markup in Snowman :: Start *Emphasis* or _Emphasis_. **Strong emphasis** or __Strong emphasis__. ~~Strikethrough~~ 1. First ordered list item 2. Another item # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Escaped code line. Another line of code. | Tables | Are | Cool | | ------------- |:-------------:| -------------:| | col 3 | is | right-aligned | | col 2 | is | centered | | col 1 | is | left-aligned | > Blockquotes are useful. > This line is part of the same quote. Download: Twee Code","title":"Snowman"},{"location":"markup/snowman/snowman_markup.html#style-markup-snowman-v130","text":"","title":"\"Style Markup\": Snowman (v1.3.0)"},{"location":"markup/snowman/snowman_markup.html#summary","text":"Snowman uses a sub-set of markdown for in-line styling. Snowman does not support multi-line markdown variations.","title":"Summary"},{"location":"markup/snowman/snowman_markup.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"markup/snowman/snowman_markup.html#twee-code","text":":: StoryTitle Style Markup in Snowman :: Start *Emphasis* or _Emphasis_. **Strong emphasis** or __Strong emphasis__. ~~Strikethrough~~ 1. First ordered list item 2. Another item # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Escaped code line. Another line of code. | Tables | Are | Cool | | ------------- |:-------------:| -------------:| | col 3 | is | right-aligned | | col 2 | is | centered | | col 1 | is | left-aligned | > Blockquotes are useful. > This line is part of the same quote. Download: Twee Code","title":"Twee Code"},{"location":"markup/sugarcane/sugarcane_markup.html","text":"\"Style Markup\": Sugarcane (v1.4.2) \u00b6 Note: The following example is designed for Twine 1.4.2. Summary \u00b6 Style formatting in Twine 1.4.2 is supported across all story formats and includes both more basic markup such as italics and bolds and the more advanced construction of HTML tables. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: Start Italics: //text// Boldface: ''text'' Underline: __text__ Strikethrough: ==text== Subscript: H~~2~~O Superscript: meters/second^^2^^ Comment: /%a comment%/ Error: @@error@@ Inline styling: @@font-weight:bold;text@@ Bulleted list: * one * two Numbered list: # one # two !Heading 1 !!Heading 2 !!!Heading 3 !!!!Heading 4 !!!!!Heading 5 !!!!!!Heading 6 |!table header |!table header |!table header | |row 1|row 1|row 1| |row 2|row 2|row 2| |>|row 3|row 3| |>|>|row 4| |rows 5 and 6|row 5|row 5| |~|row 6|row 6| |rows 7, 8 and 9|>|row 7| |~|>|row 8| |~|row 9|row 9| |table caption|c :: StoryTitle Style Markup :: StoryAuthor Videlais Download: Twee Code","title":"Sugarcane (1.4.2)"},{"location":"markup/sugarcane/sugarcane_markup.html#style-markup-sugarcane-v142","text":"Note: The following example is designed for Twine 1.4.2.","title":"\"Style Markup\": Sugarcane (v1.4.2)"},{"location":"markup/sugarcane/sugarcane_markup.html#summary","text":"Style formatting in Twine 1.4.2 is supported across all story formats and includes both more basic markup such as italics and bolds and the more advanced construction of HTML tables.","title":"Summary"},{"location":"markup/sugarcane/sugarcane_markup.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"markup/sugarcane/sugarcane_markup.html#twee-code","text":":: Start Italics: //text// Boldface: ''text'' Underline: __text__ Strikethrough: ==text== Subscript: H~~2~~O Superscript: meters/second^^2^^ Comment: /%a comment%/ Error: @@error@@ Inline styling: @@font-weight:bold;text@@ Bulleted list: * one * two Numbered list: # one # two !Heading 1 !!Heading 2 !!!Heading 3 !!!!Heading 4 !!!!!Heading 5 !!!!!!Heading 6 |!table header |!table header |!table header | |row 1|row 1|row 1| |row 2|row 2|row 2| |>|row 3|row 3| |>|>|row 4| |rows 5 and 6|row 5|row 5| |~|row 6|row 6| |rows 7, 8 and 9|>|row 7| |~|>|row 8| |~|row 9|row 9| |table caption|c :: StoryTitle Style Markup :: StoryAuthor Videlais Download: Twee Code","title":"Twee Code"},{"location":"markup/sugarcube/sugarcube_markup.html","text":"\"Style Markup\": SugarCube (v2.18) \u00b6 Summary \u00b6 In SugarCube , style markup follows initial rules established in earlier versions of Twine while also adding many new ones. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Style Markup in SugarCube :: Start //Emphasis// ''Strong Emphasis'' ==Strikethrough== Super^^script^^ Sub~~script~~ > Quote >> Nested quote * A list item * Another list item # A list item # Another list item \"\"\"No //format//\"\"\" @@Highlight Inline@@ !Level 1 Heading !!Level 2 Heading !!!Level 3 Heading !!!!Level 4 Heading !!!!!Level 5 Heading !!!!!!Level 6 Heading Download: Twee Code","title":"SugarCube"},{"location":"markup/sugarcube/sugarcube_markup.html#style-markup-sugarcube-v218","text":"","title":"\"Style Markup\": SugarCube (v2.18)"},{"location":"markup/sugarcube/sugarcube_markup.html#summary","text":"In SugarCube , style markup follows initial rules established in earlier versions of Twine while also adding many new ones.","title":"Summary"},{"location":"markup/sugarcube/sugarcube_markup.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"markup/sugarcube/sugarcube_markup.html#twee-code","text":":: StoryTitle Style Markup in SugarCube :: Start //Emphasis// ''Strong Emphasis'' ==Strikethrough== Super^^script^^ Sub~~script~~ > Quote >> Nested quote * A list item * Another list item # A list item # Another list item \"\"\"No //format//\"\"\" @@Highlight Inline@@ !Level 1 Heading !!Level 2 Heading !!!Level 3 Heading !!!!Level 4 Heading !!!!!Level 5 Heading !!!!!!Level 6 Heading Download: Twee Code","title":"Twee Code"},{"location":"modal/harlowe/harlowe_modal.html","text":"\"Modal (Pop-up Window)\": Harlowe (v2.0) \u00b6 Summary \u00b6 This example creates a re-usable modal window . It can be opened using the combination of (link-repeat:) and (replace:) to create the window in an existing hook, and be 'closed' using the same macros to remove the window. CSS rules are applied with (css:) to style the modal, and to change an enclosing hook into a \"dimmer\" which obscures the rest of the page. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Modal :: Header[header] |modalhooks>[] :: Modal code (replace: ?modalhooks)[{ (css:\" position: fixed; display:block; z-index: 1; left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgba(0,0,0,0.4); \")[ (css:\" display:block; margin: 15% auto; padding: 20px; width: 80%; border: 1px solid white; \")|modal>[ (css:\"float:right\")+(link-repeat:\"\u00d7\")[(replace: ?modalhooks)[]] ] ] }] :: Start (link-repeat:\"Open Modal!\")[(display:\"Modal code\")(append:?modal)[Some text in the modal...]] Download: Twee Code","title":"Harlowe"},{"location":"modal/harlowe/harlowe_modal.html#modal-pop-up-window-harlowe-v20","text":"","title":"\"Modal (Pop-up Window)\": Harlowe (v2.0)"},{"location":"modal/harlowe/harlowe_modal.html#summary","text":"This example creates a re-usable modal window . It can be opened using the combination of (link-repeat:) and (replace:) to create the window in an existing hook, and be 'closed' using the same macros to remove the window. CSS rules are applied with (css:) to style the modal, and to change an enclosing hook into a \"dimmer\" which obscures the rest of the page.","title":"Summary"},{"location":"modal/harlowe/harlowe_modal.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"modal/harlowe/harlowe_modal.html#twee-code","text":":: StoryTitle Harlowe: Modal :: Header[header] |modalhooks>[] :: Modal code (replace: ?modalhooks)[{ (css:\" position: fixed; display:block; z-index: 1; left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgba(0,0,0,0.4); \")[ (css:\" display:block; margin: 15% auto; padding: 20px; width: 80%; border: 1px solid white; \")|modal>[ (css:\"float:right\")+(link-repeat:\"\u00d7\")[(replace: ?modalhooks)[]] ] ] }] :: Start (link-repeat:\"Open Modal!\")[(display:\"Modal code\")(append:?modal)[Some text in the modal...]] Download: Twee Code","title":"Twee Code"},{"location":"modal/snowman/snowman_modal.html","text":"\"Modal (Pop-up Window)\": Snowman (1.3.0) \u00b6 Summary \u00b6 This example uses the jQuery click() and show()/hide() functions to watch for the user clicking on a button (to open) or \"X\" (to close). Additional CSS rules are used to create the effect of having the content 'behind' the modal window be darkened and unusable until the modal itself is closed. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Modal :: UserScript[script] $(function(){ // When the user clicks the button, open the modal $(\"#myBtn\").click(function() { $(\"#myModal\").show(); }); // When the user clicks on <span> (x), close the modal $(\".close\").click(function() { $(\"#myModal\").hide(); }); }); :: UserStylesheet[stylesheet] /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ padding-top: 100px; /* Location of the box */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ } /* Modal Content */ .modal-content { background-color: #fefefe; margin: auto; padding: 20px; border: 1px solid #888; width: 80%; } /* The Close Button */ .close { color: #aaaaaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: #000; text-decoration: none; cursor: pointer; } :: Start <button id=\"myBtn\">Open Modal</button> <div id=\"myModal\" class=\"modal\"> <div class=\"modal-content\"> <span class=\"close\">\u00d7</span> <p>Example text in the modal</p> </div> </div> Download: Twee Code","title":"Snowman"},{"location":"modal/snowman/snowman_modal.html#modal-pop-up-window-snowman-130","text":"","title":"\"Modal (Pop-up Window)\": Snowman (1.3.0)"},{"location":"modal/snowman/snowman_modal.html#summary","text":"This example uses the jQuery click() and show()/hide() functions to watch for the user clicking on a button (to open) or \"X\" (to close). Additional CSS rules are used to create the effect of having the content 'behind' the modal window be darkened and unusable until the modal itself is closed.","title":"Summary"},{"location":"modal/snowman/snowman_modal.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"modal/snowman/snowman_modal.html#twee-code","text":":: StoryTitle Snowman: Modal :: UserScript[script] $(function(){ // When the user clicks the button, open the modal $(\"#myBtn\").click(function() { $(\"#myModal\").show(); }); // When the user clicks on <span> (x), close the modal $(\".close\").click(function() { $(\"#myModal\").hide(); }); }); :: UserStylesheet[stylesheet] /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ padding-top: 100px; /* Location of the box */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ } /* Modal Content */ .modal-content { background-color: #fefefe; margin: auto; padding: 20px; border: 1px solid #888; width: 80%; } /* The Close Button */ .close { color: #aaaaaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: #000; text-decoration: none; cursor: pointer; } :: Start <button id=\"myBtn\">Open Modal</button> <div id=\"myModal\" class=\"modal\"> <div class=\"modal-content\"> <span class=\"close\">\u00d7</span> <p>Example text in the modal</p> </div> </div> Download: Twee Code","title":"Twee Code"},{"location":"modal/sugarcube/sugarcube_modal.html","text":"\"Modal (Pop-up Window)\": SugarCube (v2.18) \u00b6 Summary \u00b6 This example uses the built-in Dialog object to setup() , add content ( wiki() ), and finally open() the dialog window. SugarCube also comes with additional functionality to adjust other settings. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Modal :: Start <<link \"Open dialog!\">> <<script>> Dialog.setup(\"Dialog\"); Dialog.wiki(\"Text within the dialog window\"); Dialog.open(); <</script>> <</link>> Download: Twee Code","title":"SugarCube"},{"location":"modal/sugarcube/sugarcube_modal.html#modal-pop-up-window-sugarcube-v218","text":"","title":"\"Modal (Pop-up Window)\": SugarCube (v2.18)"},{"location":"modal/sugarcube/sugarcube_modal.html#summary","text":"This example uses the built-in Dialog object to setup() , add content ( wiki() ), and finally open() the dialog window. SugarCube also comes with additional functionality to adjust other settings.","title":"Summary"},{"location":"modal/sugarcube/sugarcube_modal.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"modal/sugarcube/sugarcube_modal.html#twee-code","text":":: StoryTitle SugarCube: Modal :: Start <<link \"Open dialog!\">> <<script>> Dialog.setup(\"Dialog\"); Dialog.wiki(\"Text within the dialog window\"); Dialog.open(); <</script>> <</link>> Download: Twee Code","title":"Twee Code"},{"location":"modularity/harlowe/harlowe_modularity.html","text":"\"Modularity\": Harlowe (v2.0) \u00b6 Summary \u00b6 In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In Harlowe, this technique can be used through the (display:) macro to print the contents of one passage in another. Parts of a story can often be re-used in this way. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Modularity in Harlowe :: Start (set: $lineOne to \"Give us a verse\") (set: $lineTwo to \"Drop some knowledge\") (display: \"showLineOne\") (display: \"showLineTwo\") :: showLineOne $lineOne :: showLineTwo $lineTwo Download: Twee Code","title":"Harlowe"},{"location":"modularity/harlowe/harlowe_modularity.html#modularity-harlowe-v20","text":"","title":"\"Modularity\": Harlowe (v2.0)"},{"location":"modularity/harlowe/harlowe_modularity.html#summary","text":"In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In Harlowe, this technique can be used through the (display:) macro to print the contents of one passage in another. Parts of a story can often be re-used in this way.","title":"Summary"},{"location":"modularity/harlowe/harlowe_modularity.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"modularity/harlowe/harlowe_modularity.html#twee-code","text":":: StoryTitle Modularity in Harlowe :: Start (set: $lineOne to \"Give us a verse\") (set: $lineTwo to \"Drop some knowledge\") (display: \"showLineOne\") (display: \"showLineTwo\") :: showLineOne $lineOne :: showLineTwo $lineTwo Download: Twee Code","title":"Twee Code"},{"location":"modularity/snowman/snowman_modularity.html","text":"\"Modularity\": Snowman (v1.3.0) \u00b6 Summary \u00b6 In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In Snowman, this technique can be used through the window.story.render() function to print the contents of one passage in another. Parts of a story can often be re-used in this way. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Modularity in Snowman :: Start <% s.lineOne = \"Give us a verse\"; s.lineTwo = \"Drop some knowledge\"; %> <%= window.story.render(\"showLineOne\") %> <%= window.story.render(\"showLineTwo\") %> :: showLineOne <%= s.lineOne %> :: showLineTwo <%= s.lineTwo %> Download: Twee Code","title":"Snowman"},{"location":"modularity/snowman/snowman_modularity.html#modularity-snowman-v130","text":"","title":"\"Modularity\": Snowman (v1.3.0)"},{"location":"modularity/snowman/snowman_modularity.html#summary","text":"In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In Snowman, this technique can be used through the window.story.render() function to print the contents of one passage in another. Parts of a story can often be re-used in this way.","title":"Summary"},{"location":"modularity/snowman/snowman_modularity.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"modularity/snowman/snowman_modularity.html#twee-code","text":":: StoryTitle Modularity in Snowman :: Start <% s.lineOne = \"Give us a verse\"; s.lineTwo = \"Drop some knowledge\"; %> <%= window.story.render(\"showLineOne\") %> <%= window.story.render(\"showLineTwo\") %> :: showLineOne <%= s.lineOne %> :: showLineTwo <%= s.lineTwo %> Download: Twee Code","title":"Twee Code"},{"location":"modularity/sugarcube/sugarcube_modularity.html","text":"\"Modularity\": SugarCube (v2.18) \u00b6 Summary \u00b6 In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In SugarCube, this technique can be used through the <<include>> macro to print the contents of one passage in another. Parts of a story can often be re-used in this way. The <<widget>> macro offers a simplified way of creating new, custom macros using other SugarCube macros and TwineScript instead of JavaScript. When compared to <<include>> , widgets have the advantage of accepting arguments and expressions similar to the way other SugarCube macros can. New widgets must be added through passages with the tag widget . Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Modularity in SugarCube :: Start <<set $lineOne to \"Give us a verse\">> <<set $lineTwo to \"Drop some knowledge\">> <<include \"showLineOne\">> <<include \"showLineTwo\">> <<showLine 1>> <<showLine 2>> :: showLineWidget [widget] <<widget 'showLine'>>\\ <<nobr>> <<if $args[0] is 1>> $lineOne <<elseif $args[0] is 2>> $lineTwo <</if>> <</nobr>>\\ <</widget>> :: showLineOne $lineOne :: showLineTwo $lineTwo Download: Twee Code","title":"SugarCube"},{"location":"modularity/sugarcube/sugarcube_modularity.html#modularity-sugarcube-v218","text":"","title":"\"Modularity\": SugarCube (v2.18)"},{"location":"modularity/sugarcube/sugarcube_modularity.html#summary","text":"In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In SugarCube, this technique can be used through the <<include>> macro to print the contents of one passage in another. Parts of a story can often be re-used in this way. The <<widget>> macro offers a simplified way of creating new, custom macros using other SugarCube macros and TwineScript instead of JavaScript. When compared to <<include>> , widgets have the advantage of accepting arguments and expressions similar to the way other SugarCube macros can. New widgets must be added through passages with the tag widget .","title":"Summary"},{"location":"modularity/sugarcube/sugarcube_modularity.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"modularity/sugarcube/sugarcube_modularity.html#twee-code","text":":: StoryTitle Modularity in SugarCube :: Start <<set $lineOne to \"Give us a verse\">> <<set $lineTwo to \"Drop some knowledge\">> <<include \"showLineOne\">> <<include \"showLineTwo\">> <<showLine 1>> <<showLine 2>> :: showLineWidget [widget] <<widget 'showLine'>>\\ <<nobr>> <<if $args[0] is 1>> $lineOne <<elseif $args[0] is 2>> $lineTwo <</if>> <</nobr>>\\ <</widget>> :: showLineOne $lineOne :: showLineTwo $lineTwo Download: Twee Code","title":"Twee Code"},{"location":"passageevents/snowman/snowman_passage_events.html","text":"\"Passage Events\": Snowman (v1.4.0) \u00b6 Summary \u00b6 Snowman triggers different events as they happen to passages . In this example, a header and footer is created by listening for the 'shown.sm.passage' event with a jQuery event handle and then prepending the content of the passage \"Header\" and appending the content of the passage \"Footer\" to the current passage after it has been initially rendered. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Passage Events :: UserScript[script] /* Prepend the content of the passage \"Header\" to every passage. Append the content of the passage \"Footer\" to every passage. */ $(window).on('shown.sm.passage', function (eventObject, passageObject) { var headerContent = window.story.render(\"Header\"); var currentContent = passageObject.passage.render(); var footerContent = window.story.render(\"Footer\"); $('#main').html(headerContent + currentContent + footerContent); }); :: Start [[Another Passage]] :: Another Passage [[Back to Beginning|Start]] :: Header This is the header! :: Footer This is the footer! Download: Twee Code See Also \u00b6 Headers and Footers","title":"Snowman"},{"location":"passageevents/snowman/snowman_passage_events.html#passage-events-snowman-v140","text":"","title":"\"Passage Events\": Snowman (v1.4.0)"},{"location":"passageevents/snowman/snowman_passage_events.html#summary","text":"Snowman triggers different events as they happen to passages . In this example, a header and footer is created by listening for the 'shown.sm.passage' event with a jQuery event handle and then prepending the content of the passage \"Header\" and appending the content of the passage \"Footer\" to the current passage after it has been initially rendered.","title":"Summary"},{"location":"passageevents/snowman/snowman_passage_events.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passageevents/snowman/snowman_passage_events.html#twee-code","text":":: StoryTitle Snowman: Passage Events :: UserScript[script] /* Prepend the content of the passage \"Header\" to every passage. Append the content of the passage \"Footer\" to every passage. */ $(window).on('shown.sm.passage', function (eventObject, passageObject) { var headerContent = window.story.render(\"Header\"); var currentContent = passageObject.passage.render(); var footerContent = window.story.render(\"Footer\"); $('#main').html(headerContent + currentContent + footerContent); }); :: Start [[Another Passage]] :: Another Passage [[Back to Beginning|Start]] :: Header This is the header! :: Footer This is the footer! Download: Twee Code","title":"Twee Code"},{"location":"passageevents/snowman/snowman_passage_events.html#see-also","text":"Headers and Footers","title":"See Also"},{"location":"passageevents/snowman_2/snowman_passage_events.html","text":"\"Passage Events\": Snowman (v2.0.0) \u00b6 Summary \u00b6 Snowman triggers different events as they happen to passages . In this example, a header and footer is created by listening for the 'sm.passage.shown' event with a jQuery event handle and then prepending the content of the passage \"Header\" and appending the content of the passage \"Footer\" to the current passage after it has been initially rendered. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman 2: Passage Events :: UserScript[script] /* Prepend the content of the passage \"Header\" to every passage. Append the content of the passage \"Footer\" to every passage. */ $(window).on('sm.passage.shown', function (eventObject, passageObject) { var headerContent = window.story.render(\"Header\"); var currentContent = passageObject.passage.render(); var footerContent = window.story.render(\"Footer\"); $('tw-passage').html(headerContent + currentContent + footerContent); }); :: Start <p>[[Another Passage]]</p> :: Another Passage [[Back to beginning->Start]] :: Header This is the header! :: Footer This is the footer! Download: Twee Code See Also \u00b6 Headers and Footers","title":"Snowman (v2.0.2 or later)"},{"location":"passageevents/snowman_2/snowman_passage_events.html#passage-events-snowman-v200","text":"","title":"\"Passage Events\": Snowman (v2.0.0)"},{"location":"passageevents/snowman_2/snowman_passage_events.html#summary","text":"Snowman triggers different events as they happen to passages . In this example, a header and footer is created by listening for the 'sm.passage.shown' event with a jQuery event handle and then prepending the content of the passage \"Header\" and appending the content of the passage \"Footer\" to the current passage after it has been initially rendered.","title":"Summary"},{"location":"passageevents/snowman_2/snowman_passage_events.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passageevents/snowman_2/snowman_passage_events.html#twee-code","text":":: StoryTitle Snowman 2: Passage Events :: UserScript[script] /* Prepend the content of the passage \"Header\" to every passage. Append the content of the passage \"Footer\" to every passage. */ $(window).on('sm.passage.shown', function (eventObject, passageObject) { var headerContent = window.story.render(\"Header\"); var currentContent = passageObject.passage.render(); var footerContent = window.story.render(\"Footer\"); $('tw-passage').html(headerContent + currentContent + footerContent); }); :: Start <p>[[Another Passage]]</p> :: Another Passage [[Back to beginning->Start]] :: Header This is the header! :: Footer This is the footer! Download: Twee Code","title":"Twee Code"},{"location":"passageevents/snowman_2/snowman_passage_events.html#see-also","text":"Headers and Footers","title":"See Also"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html","text":"\"Passage Events\": SugarCube (v2.18) \u00b6 Summary \u00b6 SugarCube triggers different events as they happen to passages . Through using jQuery and its own JavaScript event handling , code can be added to work with other, existing functionality. In this example, the \"passagestart\" and \"passagerender\" events are shown. In the event progression, the 'passagestart' event occurs before the PassageHeader prepending its content and the 'passagerender' happens after the PassageFooter . Through using event handling, content is added before the PassageHeader and after the PassageFooter as an example of when events occur in presenting passages. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Passage Events in SugarCube :: UserScript[script] /* Prepend the content of the passage \"New Header\" to every passage. This demonstrates that the 'passagestart' event comes before the PassageHeader prepending. */ $(document).on(':passagestart', function (eventObject) { var headerContent = Story.get(\"New Header\").processText(); $(eventObject.content).wiki(headerContent); }); /* Append the content of the passage \"New Footer\" to every passage. This demonstrates that the 'passagerender' event comes after the PassageFooter appending. */ $(document).on(':passagerender', function (eventObject) { var footerContent = Story.get(\"New Footer\").processText(); $(eventObject.content).wiki(footerContent); }); :: Start [[Another passage]] :: Another passage [[Back to beginning|Start]] :: New Header This is added before the PassageHeader! :: PassageHeader This is the PassageHeader. :: PassageFooter This is the PassageFooter! :: New Footer This is added after the PassageFooter! Download: Twee Code See Also \u00b6 Headers and Footers","title":"SugarCube"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html#passage-events-sugarcube-v218","text":"","title":"\"Passage Events\": SugarCube (v2.18)"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html#summary","text":"SugarCube triggers different events as they happen to passages . Through using jQuery and its own JavaScript event handling , code can be added to work with other, existing functionality. In this example, the \"passagestart\" and \"passagerender\" events are shown. In the event progression, the 'passagestart' event occurs before the PassageHeader prepending its content and the 'passagerender' happens after the PassageFooter . Through using event handling, content is added before the PassageHeader and after the PassageFooter as an example of when events occur in presenting passages.","title":"Summary"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html#twee-code","text":":: StoryTitle Passage Events in SugarCube :: UserScript[script] /* Prepend the content of the passage \"New Header\" to every passage. This demonstrates that the 'passagestart' event comes before the PassageHeader prepending. */ $(document).on(':passagestart', function (eventObject) { var headerContent = Story.get(\"New Header\").processText(); $(eventObject.content).wiki(headerContent); }); /* Append the content of the passage \"New Footer\" to every passage. This demonstrates that the 'passagerender' event comes after the PassageFooter appending. */ $(document).on(':passagerender', function (eventObject) { var footerContent = Story.get(\"New Footer\").processText(); $(eventObject.content).wiki(footerContent); }); :: Start [[Another passage]] :: Another passage [[Back to beginning|Start]] :: New Header This is added before the PassageHeader! :: PassageHeader This is the PassageHeader. :: PassageFooter This is the PassageFooter! :: New Footer This is added after the PassageFooter! Download: Twee Code","title":"Twee Code"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html#see-also","text":"Headers and Footers","title":"See Also"},{"location":"passagesinpassages/chapbook/chapbook_passagesinpassages.html","text":"\"Passages in Passages\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Using the insert {embed passage: } , Chapbook can include one passage in another. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Passages in Passages :: Start This is the Start passage! {embed passage: 'Another'} :: Another And this is another passage! Download: Twee Code","title":"Chapbook"},{"location":"passagesinpassages/chapbook/chapbook_passagesinpassages.html#passages-in-passages-chapbook-v100","text":"","title":"\"Passages in Passages\": Chapbook (v1.0.0)"},{"location":"passagesinpassages/chapbook/chapbook_passagesinpassages.html#summary","text":"Using the insert {embed passage: } , Chapbook can include one passage in another.","title":"Summary"},{"location":"passagesinpassages/chapbook/chapbook_passagesinpassages.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagesinpassages/chapbook/chapbook_passagesinpassages.html#twee-code","text":":: StoryTitle Chapbook: Passages in Passages :: Start This is the Start passage! {embed passage: 'Another'} :: Another And this is another passage! Download: Twee Code","title":"Twee Code"},{"location":"passagesinpassages/harlowe/harlowe_passagesinpassages.html","text":"\"Passages in Passages\": Harlowe (v1.0) \u00b6 Summary \u00b6 The Harlowe story format allows for content in one passage to be displayed in another through the use of the (display:) macro. Given the name of an existing passage, its contents will added wherever the macro is called. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Passages in Passages :: Start This is the Start passage! (display: \"Another\") :: Another And this is another passage! Download: Twee Code","title":"Harlowe"},{"location":"passagesinpassages/harlowe/harlowe_passagesinpassages.html#passages-in-passages-harlowe-v10","text":"","title":"\"Passages in Passages\": Harlowe (v1.0)"},{"location":"passagesinpassages/harlowe/harlowe_passagesinpassages.html#summary","text":"The Harlowe story format allows for content in one passage to be displayed in another through the use of the (display:) macro. Given the name of an existing passage, its contents will added wherever the macro is called.","title":"Summary"},{"location":"passagesinpassages/harlowe/harlowe_passagesinpassages.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagesinpassages/harlowe/harlowe_passagesinpassages.html#twee-code","text":":: StoryTitle Harlowe: Passages in Passages :: Start This is the Start passage! (display: \"Another\") :: Another And this is another passage! Download: Twee Code","title":"Twee Code"},{"location":"passagesinpassages/snowman/snowman_passagesinpassages.html","text":"\"Passages in Passages: Snowman (v1.3) \u00b6 Summary \u00b6 In Snowman, the contents of one passage can be included in another through using the window.story.render() function. This will find and return the source of an existing passage in the story. Combined with the use of Underscore's template system , the returned value can be included directly where the function is used in a passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Passages in Passages :: Start This is the Start passage! <%= window.story.render(\"Another\") %> :: Another And this is Another passage! Download: Twee Code","title":"Snowman"},{"location":"passagesinpassages/snowman/snowman_passagesinpassages.html#passages-in-passages-snowman-v13","text":"","title":"\"Passages in Passages: Snowman (v1.3)"},{"location":"passagesinpassages/snowman/snowman_passagesinpassages.html#summary","text":"In Snowman, the contents of one passage can be included in another through using the window.story.render() function. This will find and return the source of an existing passage in the story. Combined with the use of Underscore's template system , the returned value can be included directly where the function is used in a passage.","title":"Summary"},{"location":"passagesinpassages/snowman/snowman_passagesinpassages.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagesinpassages/snowman/snowman_passagesinpassages.html#twee-code","text":":: StoryTitle Snowman: Passages in Passages :: Start This is the Start passage! <%= window.story.render(\"Another\") %> :: Another And this is Another passage! Download: Twee Code","title":"Twee Code"},{"location":"passagesinpassages/sugarcube/sugarcube_passagesinpassages.html","text":"\"Passages in Passages\": SugarCube (v2.2) \u00b6 Summary \u00b6 In SugarCube, the contents of a passage can be shown in another through the use of the <<include>> macro. Through using the name of an existing passage, its contents will be included where the macro is called. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Passages in Passages :: Start This is the Start passage! <<include \"Another\">> :: Another And this is Another passage! Download: Twee Code","title":"SugarCube"},{"location":"passagesinpassages/sugarcube/sugarcube_passagesinpassages.html#passages-in-passages-sugarcube-v22","text":"","title":"\"Passages in Passages\": SugarCube (v2.2)"},{"location":"passagesinpassages/sugarcube/sugarcube_passagesinpassages.html#summary","text":"In SugarCube, the contents of a passage can be shown in another through the use of the <<include>> macro. Through using the name of an existing passage, its contents will be included where the macro is called.","title":"Summary"},{"location":"passagesinpassages/sugarcube/sugarcube_passagesinpassages.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagesinpassages/sugarcube/sugarcube_passagesinpassages.html#twee-code","text":":: StoryTitle SugarCube: Passages in Passages :: Start This is the Start passage! <<include \"Another\">> :: Another And this is Another passage! Download: Twee Code","title":"Twee Code"},{"location":"passagetags/chapbook/chapbook_passagetags.html","text":"\"CSS and Passage Tags\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Using the built-in global variable config , text colors and other CSS properties can be programmatically adjusted using the [JavaScript] modifier in Chapbook. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: CSS and Passage Tags :: Start config.style.page.color: \"yellow-4\" -- This is one color! [JavaScript] // Overwrite the default text color config.style.page.color = \"violet-6\"; [continued] And this is the same color! Download: Twee Code","title":"Chapbook"},{"location":"passagetags/chapbook/chapbook_passagetags.html#css-and-passage-tags-chapbook-v100","text":"","title":"\"CSS and Passage Tags\": Chapbook (v1.0.0)"},{"location":"passagetags/chapbook/chapbook_passagetags.html#summary","text":"Using the built-in global variable config , text colors and other CSS properties can be programmatically adjusted using the [JavaScript] modifier in Chapbook.","title":"Summary"},{"location":"passagetags/chapbook/chapbook_passagetags.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetags/chapbook/chapbook_passagetags.html#twee-code","text":":: StoryTitle Chapbook: CSS and Passage Tags :: Start config.style.page.color: \"yellow-4\" -- This is one color! [JavaScript] // Overwrite the default text color config.style.page.color = \"violet-6\"; [continued] And this is the same color! Download: Twee Code","title":"Twee Code"},{"location":"passagetags/harlowe/harlowe_passagetags.html","text":"\"CSS and Passage Tags\": Harlowe (v2.0) \u00b6 Note: The following example is designed for use in Harlowe 2.x and later Summary \u00b6 This example shows how to use CSS selectors to selectively style different passages based on how they are tagged. In Harlowe, the \"tags\" attribute can be used to create different sets of styles and apply them when shown. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle CSS and Passage Tags in Harlowe :: UserStylesheet[stylesheet] [tags=\"grey\"] { background: grey; } [tags=\"yellow\"] { background: yellow; color: black; } :: Start[grey] This passage has a grey background and (default) white text. [[Second]] :: Second[yellow] This passage has a yellow background and black text. Download: Twee Code","title":"Harlowe"},{"location":"passagetags/harlowe/harlowe_passagetags.html#css-and-passage-tags-harlowe-v20","text":"Note: The following example is designed for use in Harlowe 2.x and later","title":"\"CSS and Passage Tags\": Harlowe (v2.0)"},{"location":"passagetags/harlowe/harlowe_passagetags.html#summary","text":"This example shows how to use CSS selectors to selectively style different passages based on how they are tagged. In Harlowe, the \"tags\" attribute can be used to create different sets of styles and apply them when shown.","title":"Summary"},{"location":"passagetags/harlowe/harlowe_passagetags.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetags/harlowe/harlowe_passagetags.html#twee-code","text":":: StoryTitle CSS and Passage Tags in Harlowe :: UserStylesheet[stylesheet] [tags=\"grey\"] { background: grey; } [tags=\"yellow\"] { background: yellow; color: black; } :: Start[grey] This passage has a grey background and (default) white text. [[Second]] :: Second[yellow] This passage has a yellow background and black text. Download: Twee Code","title":"Twee Code"},{"location":"passagetags/snowman/snowman_passagetags.html","text":"\"CSS and Passage Tags\": Snowman (v1.3) \u00b6 Summary \u00b6 This example shows how to use CSS selectors to style different passages. Snowman does not support tags in passages. However, the effect can be implemented through using jQuery and the toggleClass() function to switch between different pre-defined classes. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle CSS and Passage Tags in Snowman :: UserStylesheet[stylesheet] .grey { background: grey; color: white; } .yellow { background: yellow; color: black; } :: Start[grey] <% $(\"body\").toggleClass(\"grey\") %> This passage has a grey background and white text. [[Second]] :: Second[yellow] <% $(\"body\").toggleClass(\"yellow\") %> This passage has a yellow background and black text. Download: Twee Code","title":"Snowman"},{"location":"passagetags/snowman/snowman_passagetags.html#css-and-passage-tags-snowman-v13","text":"","title":"\"CSS and Passage Tags\": Snowman (v1.3)"},{"location":"passagetags/snowman/snowman_passagetags.html#summary","text":"This example shows how to use CSS selectors to style different passages. Snowman does not support tags in passages. However, the effect can be implemented through using jQuery and the toggleClass() function to switch between different pre-defined classes.","title":"Summary"},{"location":"passagetags/snowman/snowman_passagetags.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetags/snowman/snowman_passagetags.html#twee-code","text":":: StoryTitle CSS and Passage Tags in Snowman :: UserStylesheet[stylesheet] .grey { background: grey; color: white; } .yellow { background: yellow; color: black; } :: Start[grey] <% $(\"body\").toggleClass(\"grey\") %> This passage has a grey background and white text. [[Second]] :: Second[yellow] <% $(\"body\").toggleClass(\"yellow\") %> This passage has a yellow background and black text. Download: Twee Code","title":"Twee Code"},{"location":"passagetags/sugarcane/sugarcane_passagetags.html","text":"\"CSS and Passage Tags\": Sugarcane (v1.4.2) \u00b6 Note: The following example is designed for Twine 1.4.2. Summary \u00b6 This example shows how to use CSS selectors to selectively style different passages based on how they are tagged. In Sugarcane, the \"data-tags\" attribute can be used to create different sets of styles and apply them when shown. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: Start [grey] This passage has a grey background and white text. [[Second]] :: Second [yellow] This passage has a yellow background and black text. :: StoryTitle CSS and Passage Tags in Twine 1.4.2 :: Stylesheet [stylesheet] [data-tags=\"grey\"] { background: grey; color: white; } [data-tags=\"yellow\"] { background: yellow; color: black; } :: StoryAuthor Videlais Download: Twee Code","title":"Sugarcane (1.4.2)"},{"location":"passagetags/sugarcane/sugarcane_passagetags.html#css-and-passage-tags-sugarcane-v142","text":"Note: The following example is designed for Twine 1.4.2.","title":"\"CSS and Passage Tags\": Sugarcane (v1.4.2)"},{"location":"passagetags/sugarcane/sugarcane_passagetags.html#summary","text":"This example shows how to use CSS selectors to selectively style different passages based on how they are tagged. In Sugarcane, the \"data-tags\" attribute can be used to create different sets of styles and apply them when shown.","title":"Summary"},{"location":"passagetags/sugarcane/sugarcane_passagetags.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetags/sugarcane/sugarcane_passagetags.html#twee-code","text":":: Start [grey] This passage has a grey background and white text. [[Second]] :: Second [yellow] This passage has a yellow background and black text. :: StoryTitle CSS and Passage Tags in Twine 1.4.2 :: Stylesheet [stylesheet] [data-tags=\"grey\"] { background: grey; color: white; } [data-tags=\"yellow\"] { background: yellow; color: black; } :: StoryAuthor Videlais Download: Twee Code","title":"Twee Code"},{"location":"passagetags/sugarcube/sugarcube_passagetags.html","text":"\"CSS and Passage Tags\": SugarCube (v2.18) \u00b6 Summary \u00b6 This example shows how to use CSS selectors to style different passages based on how they are tagged. In SugarCube , the tag name is applied to both the body and the passage shown. To style different parts, use either the \"body\" selector or a combination of \"passage\" and the tag name. SugarCube 2.x and later also applies a \"data-tags\" attribute to the <html> , <body> , and elements with the class \".passage\". These can also be used to style the page at different levels. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle CSS and Passage Tags in SugarCube :: UserStylesheet[stylesheet] /* Style the entire body when showing passage tagged with grey */ body.grey { color: green; } /* Style only the inner part of the passage tagged with \"grey\" */ .passage.grey { background: grey; } /* Style only the inner part of the passage tagged with \"yellow\" */ .passage.yellow { background: yellow; color: black; } :: Start[grey] This passage has a grey background and green text. [[Second]] :: Second[yellow] This passage has a yellow background and black text. Download: Twee Code","title":"SugarCube"},{"location":"passagetags/sugarcube/sugarcube_passagetags.html#css-and-passage-tags-sugarcube-v218","text":"","title":"\"CSS and Passage Tags\": SugarCube (v2.18)"},{"location":"passagetags/sugarcube/sugarcube_passagetags.html#summary","text":"This example shows how to use CSS selectors to style different passages based on how they are tagged. In SugarCube , the tag name is applied to both the body and the passage shown. To style different parts, use either the \"body\" selector or a combination of \"passage\" and the tag name. SugarCube 2.x and later also applies a \"data-tags\" attribute to the <html> , <body> , and elements with the class \".passage\". These can also be used to style the page at different levels.","title":"Summary"},{"location":"passagetags/sugarcube/sugarcube_passagetags.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetags/sugarcube/sugarcube_passagetags.html#twee-code","text":":: StoryTitle CSS and Passage Tags in SugarCube :: UserStylesheet[stylesheet] /* Style the entire body when showing passage tagged with grey */ body.grey { color: green; } /* Style only the inner part of the passage tagged with \"grey\" */ .passage.grey { background: grey; } /* Style only the inner part of the passage tagged with \"yellow\" */ .passage.yellow { background: yellow; color: black; } :: Start[grey] This passage has a grey background and green text. [[Second]] :: Second[yellow] This passage has a yellow background and black text. Download: Twee Code","title":"Twee Code"},{"location":"passagetoelement/snowman/snowman_passagetoelement.html","text":"\"Render Passage to Element\": Snowman (v2.0.0) \u00b6 Summary \u00b6 In Snowman, the function renderToSelector() renders the contents of a passage into an element based on its jQuery selector . The event \"sm.passage.shown\" is used in this example to guarantee that the passage has been rendered before acting. Calling the function renderToSelector() inside the jQuery event listener then renders another passage into an existing element. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Render to Element :: Start <div id=\"hudID\"></div> <script> $(document).one('sm.passage.shown', function (ev) { // Render the passage named HUD into the element with id of \"hudID\" renderToSelector(\"#hudID\", \"HUD\"); }); </script> :: HUD <h1>This is the HUD!</h1> Download: Twee Code","title":"Snowman (2.0 or later)"},{"location":"passagetoelement/snowman/snowman_passagetoelement.html#render-passage-to-element-snowman-v200","text":"","title":"\"Render Passage to Element\": Snowman (v2.0.0)"},{"location":"passagetoelement/snowman/snowman_passagetoelement.html#summary","text":"In Snowman, the function renderToSelector() renders the contents of a passage into an element based on its jQuery selector . The event \"sm.passage.shown\" is used in this example to guarantee that the passage has been rendered before acting. Calling the function renderToSelector() inside the jQuery event listener then renders another passage into an existing element.","title":"Summary"},{"location":"passagetoelement/snowman/snowman_passagetoelement.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetoelement/snowman/snowman_passagetoelement.html#twee-code","text":":: StoryTitle Snowman: Render to Element :: Start <div id=\"hudID\"></div> <script> $(document).one('sm.passage.shown', function (ev) { // Render the passage named HUD into the element with id of \"hudID\" renderToSelector(\"#hudID\", \"HUD\"); }); </script> :: HUD <h1>This is the HUD!</h1> Download: Twee Code","title":"Twee Code"},{"location":"passagetoelement/sugarcube/sugarcube_passagetoelement.html","text":"\"Render Passage to Element\": SugarCube (v2.0.0) \u00b6 Summary \u00b6 In SugarCube, the function setPageElement() renders the contents of a passage into an element based on its id . The event \":passagedisplay\" is used in this example to guarantee that the passage has been rendered before acting. Calling the function setPageElement() inside the jQuery event listener then renders another passage into an existing element. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Render Passage to Element :: Start <div id=\"hudID\"></div> <<script>> // Wait for the passage to be displayed $(document).one(':passagedisplay', function (ev) { // Render the passage named HUD into the element with id of \"hudID\" setPageElement(\"hudID\", \"HUD\"); }); <</script>> :: HUD <h1>This is the heads-up display!</h1> Download: Twee Code","title":"SugarCube"},{"location":"passagetoelement/sugarcube/sugarcube_passagetoelement.html#render-passage-to-element-sugarcube-v200","text":"","title":"\"Render Passage to Element\": SugarCube (v2.0.0)"},{"location":"passagetoelement/sugarcube/sugarcube_passagetoelement.html#summary","text":"In SugarCube, the function setPageElement() renders the contents of a passage into an element based on its id . The event \":passagedisplay\" is used in this example to guarantee that the passage has been rendered before acting. Calling the function setPageElement() inside the jQuery event listener then renders another passage into an existing element.","title":"Summary"},{"location":"passagetoelement/sugarcube/sugarcube_passagetoelement.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetoelement/sugarcube/sugarcube_passagetoelement.html#twee-code","text":":: StoryTitle SugarCube: Render Passage to Element :: Start <div id=\"hudID\"></div> <<script>> // Wait for the passage to be displayed $(document).one(':passagedisplay', function (ev) { // Render the passage named HUD into the element with id of \"hudID\" setPageElement(\"hudID\", \"HUD\"); }); <</script>> :: HUD <h1>This is the heads-up display!</h1> Download: Twee Code","title":"Twee Code"},{"location":"passagetransitions/harlowe/harlowe_passagetransitions.html","text":"\"Passage Transitions\": Harlowe (v3.0) \u00b6 Summary \u00b6 When using the (transition-arrive:) or (transition-depart:) macros with links, the resulting transition effect will be shown to the player upon activating the link (depart) or as it is shown (arrive). Possible transition effects include: \"instant\" (causes the passage to instantly vanish) \"dissolve\" (causes the passage to gently fade out) \"flicker\" (causes the passage to roughly flicker in - don't use with a long (transition-time:))) \"shudder\" (causes the passage to disappear while shaking back and forth) \"rumble\" (causes the passage to instantly appear while shaking up and down) \"slide-right\" (causes the passage to slide in from the right) \"slide-left\" (causes the passage to slide in from the left) \"pulse\" (causes the passage to disappear while pulsating rapidly) Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe 3: Passage Transitions :: Start (transition-depart: \"dissolve\")[[Dissolve Passage]] :: Dissolve Passage (transition-arrive: \"slide-right\")[[Slide-right Passage]] :: Slide-right Passage Double-click this passage to edit it. Download: Twee Code","title":"Harlowe (v3.0.1 or later)"},{"location":"passagetransitions/harlowe/harlowe_passagetransitions.html#passage-transitions-harlowe-v30","text":"","title":"\"Passage Transitions\": Harlowe (v3.0)"},{"location":"passagetransitions/harlowe/harlowe_passagetransitions.html#summary","text":"When using the (transition-arrive:) or (transition-depart:) macros with links, the resulting transition effect will be shown to the player upon activating the link (depart) or as it is shown (arrive). Possible transition effects include: \"instant\" (causes the passage to instantly vanish) \"dissolve\" (causes the passage to gently fade out) \"flicker\" (causes the passage to roughly flicker in - don't use with a long (transition-time:))) \"shudder\" (causes the passage to disappear while shaking back and forth) \"rumble\" (causes the passage to instantly appear while shaking up and down) \"slide-right\" (causes the passage to slide in from the right) \"slide-left\" (causes the passage to slide in from the left) \"pulse\" (causes the passage to disappear while pulsating rapidly)","title":"Summary"},{"location":"passagetransitions/harlowe/harlowe_passagetransitions.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetransitions/harlowe/harlowe_passagetransitions.html#twee-code","text":":: StoryTitle Harlowe 3: Passage Transitions :: Start (transition-depart: \"dissolve\")[[Dissolve Passage]] :: Dissolve Passage (transition-arrive: \"slide-right\")[[Slide-right Passage]] :: Slide-right Passage Double-click this passage to edit it. Download: Twee Code","title":"Twee Code"},{"location":"passagetransitions/snowman/snowman_passagetransitions.html","text":"\"Passage Transitions\": Snowman (v1.3) \u00b6 Summary \u00b6 In Snowman, the \"showpassage\" event is triggered once a passage is loaded. By listening for this event, jQuery effects can be applied to the passage element to produce a transition. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Passage Transitions :: UserScript[script] $(document).on('showpassage', function(event, passage) { $(\"#passage\").hide(0).fadeIn(2000); }); :: Start [[Another Passage]] :: Another Passage [[A Third Passage]] :: A Third Passage Double-click this passage to edit it. Download: Twee Code","title":"Snowman"},{"location":"passagetransitions/snowman/snowman_passagetransitions.html#passage-transitions-snowman-v13","text":"","title":"\"Passage Transitions\": Snowman (v1.3)"},{"location":"passagetransitions/snowman/snowman_passagetransitions.html#summary","text":"In Snowman, the \"showpassage\" event is triggered once a passage is loaded. By listening for this event, jQuery effects can be applied to the passage element to produce a transition.","title":"Summary"},{"location":"passagetransitions/snowman/snowman_passagetransitions.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetransitions/snowman/snowman_passagetransitions.html#twee-code","text":":: StoryTitle Snowman: Passage Transitions :: UserScript[script] $(document).on('showpassage', function(event, passage) { $(\"#passage\").hide(0).fadeIn(2000); }); :: Start [[Another Passage]] :: Another Passage [[A Third Passage]] :: A Third Passage Double-click this passage to edit it. Download: Twee Code","title":"Twee Code"},{"location":"passagetransitions/snowman_2/snowman_2_passagetransitions.html","text":"\"Passage Transitions\": Snowman (v2.0) \u00b6 Summary \u00b6 In Snowman 2.X, the sm.passage.showing event is triggered once a passage is loaded . By listening for this event, jQuery effects can be applied to the passage element to produce a transition. (In Snowman 2.X, the passage is the tw-passage element .) Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman 2: Passage Transitions :: UserScript[script] $(document).on('sm.passage.showing', function(event, passage) { $(\"tw-passage\").hide(0).fadeIn(2000); }); :: Start [[Another Passage]] :: Another Passage [[A Third Passage]] :: A Third Passage Double-click this passage to edit it. Download: Twee Code","title":"Snowman (v2.0 and later)"},{"location":"passagetransitions/snowman_2/snowman_2_passagetransitions.html#passage-transitions-snowman-v20","text":"","title":"\"Passage Transitions\": Snowman (v2.0)"},{"location":"passagetransitions/snowman_2/snowman_2_passagetransitions.html#summary","text":"In Snowman 2.X, the sm.passage.showing event is triggered once a passage is loaded . By listening for this event, jQuery effects can be applied to the passage element to produce a transition. (In Snowman 2.X, the passage is the tw-passage element .)","title":"Summary"},{"location":"passagetransitions/snowman_2/snowman_2_passagetransitions.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetransitions/snowman_2/snowman_2_passagetransitions.html#twee-code","text":":: StoryTitle Snowman 2: Passage Transitions :: UserScript[script] $(document).on('sm.passage.showing', function(event, passage) { $(\"tw-passage\").hide(0).fadeIn(2000); }); :: Start [[Another Passage]] :: Another Passage [[A Third Passage]] :: A Third Passage Double-click this passage to edit it. Download: Twee Code","title":"Twee Code"},{"location":"passagetransitions/sugarcube/sugarcube_passagetransitions.html","text":"\"Passage Transitions\": SugarCube (v2.18) \u00b6 Summary \u00b6 SugarCube provides multiple ways to address passage transitions. To work with the existing functionality, the Config.passages.transitionOut variable can be set to change the property (height, width, opacity, etc) of the passage element or the amount of time to retain the outgoing passage before removing it with the default transition effect. Through using jQuery event listeners , different functionality can be triggered as part of normal passage events such as rendering or displaying content. Acting on the \":passagerender\" event, for example, could be used to apply a jQuery effect on the passage element after it has been loaded and rendered. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Passage Transitions :: UserScript[script] // Fade in content using jQuery Effects // Hide and then fade in the content over 2000ms (2s) $(document).on(':passagerender', function (event) { $(\".passage\").hide(0).fadeIn(2000); }); :: Start [[Another passage]] :: A third passage No more content! :: Another passage [[A third passage]] Download: Twee Code","title":"SugarCube"},{"location":"passagetransitions/sugarcube/sugarcube_passagetransitions.html#passage-transitions-sugarcube-v218","text":"","title":"\"Passage Transitions\": SugarCube (v2.18)"},{"location":"passagetransitions/sugarcube/sugarcube_passagetransitions.html#summary","text":"SugarCube provides multiple ways to address passage transitions. To work with the existing functionality, the Config.passages.transitionOut variable can be set to change the property (height, width, opacity, etc) of the passage element or the amount of time to retain the outgoing passage before removing it with the default transition effect. Through using jQuery event listeners , different functionality can be triggered as part of normal passage events such as rendering or displaying content. Acting on the \":passagerender\" event, for example, could be used to apply a jQuery effect on the passage element after it has been loaded and rendered.","title":"Summary"},{"location":"passagetransitions/sugarcube/sugarcube_passagetransitions.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagetransitions/sugarcube/sugarcube_passagetransitions.html#twee-code","text":":: StoryTitle SugarCube: Passage Transitions :: UserScript[script] // Fade in content using jQuery Effects // Hide and then fade in the content over 2000ms (2s) $(document).on(':passagerender', function (event) { $(\".passage\").hide(0).fadeIn(2000); }); :: Start [[Another passage]] :: A third passage No more content! :: Another passage [[A third passage]] Download: Twee Code","title":"Twee Code"},{"location":"passagevisits/chapbook/chapbook_passagevisits.html","text":"\"Passage Visits\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 In Chapbook, the lookup passage.visits variable contains the number of times the current passages has been visited by the user. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Passage Visits :: Start [[Another Passage]] :: Another Passage How many times has the current passage been visited? {passage.visits} [[Start]] Download: Twee Code","title":"Chapbook"},{"location":"passagevisits/chapbook/chapbook_passagevisits.html#passage-visits-chapbook-v100","text":"","title":"\"Passage Visits\": Chapbook (v1.0.0)"},{"location":"passagevisits/chapbook/chapbook_passagevisits.html#summary","text":"In Chapbook, the lookup passage.visits variable contains the number of times the current passages has been visited by the user.","title":"Summary"},{"location":"passagevisits/chapbook/chapbook_passagevisits.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagevisits/chapbook/chapbook_passagevisits.html#twee-code","text":":: StoryTitle Chapbook: Passage Visits :: Start [[Another Passage]] :: Another Passage How many times has the current passage been visited? {passage.visits} [[Start]] Download: Twee Code","title":"Twee Code"},{"location":"passagevisits/harlowe/harlowe_passagevisits.html","text":"\"Passage Visits\": Harlowe (v1.0) \u00b6 Summary \u00b6 In Harlowe, the macro (count:) returns the number of times a value appears in an array. The macro (history:) returns an array of any passages visited as part of the story. Combined together, the macro (count:) with the (history:) can return the number of times a certain passage has been visited during the course of the story. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? (count: (history: ), \"Another Passage\") [[Another Passage]] :: Another Passage [[Start]] Download: Twee Code","title":"Harlowe"},{"location":"passagevisits/harlowe/harlowe_passagevisits.html#passage-visits-harlowe-v10","text":"","title":"\"Passage Visits\": Harlowe (v1.0)"},{"location":"passagevisits/harlowe/harlowe_passagevisits.html#summary","text":"In Harlowe, the macro (count:) returns the number of times a value appears in an array. The macro (history:) returns an array of any passages visited as part of the story. Combined together, the macro (count:) with the (history:) can return the number of times a certain passage has been visited during the course of the story.","title":"Summary"},{"location":"passagevisits/harlowe/harlowe_passagevisits.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagevisits/harlowe/harlowe_passagevisits.html#twee-code","text":":: StoryTitle Harlowe: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? (count: (history: ), \"Another Passage\") [[Another Passage]] :: Another Passage [[Start]] Download: Twee Code","title":"Twee Code"},{"location":"passagevisits/snowman/snowman_passagevisits.html","text":"\"Passage Visits\": Snowman (v2.0) \u00b6 Summary \u00b6 Starting with Snowman 2.0, the global function visited() returns the number of times one or more passages have been visited during the course of the story. Combined with the use of Underscore template interpolation , the result of a function can be written to a passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Snowman: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? <%= visited(\"Another Passage\") %> [[Another Passage]] :: Another Passage [[Start]] Download: Twee Code","title":"Snowman (v2.0.2 and later)"},{"location":"passagevisits/snowman/snowman_passagevisits.html#passage-visits-snowman-v20","text":"","title":"\"Passage Visits\": Snowman (v2.0)"},{"location":"passagevisits/snowman/snowman_passagevisits.html#summary","text":"Starting with Snowman 2.0, the global function visited() returns the number of times one or more passages have been visited during the course of the story. Combined with the use of Underscore template interpolation , the result of a function can be written to a passage.","title":"Summary"},{"location":"passagevisits/snowman/snowman_passagevisits.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagevisits/snowman/snowman_passagevisits.html#twee-code","text":":: StoryTitle Snowman: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? <%= visited(\"Another Passage\") %> [[Another Passage]] :: Another Passage [[Start]] Download: Twee Code","title":"Twee Code"},{"location":"passagevisits/sugarcube/sugarcube_passagevisits.html","text":"\"Passage Visits\": SugarCube (v2.2) \u00b6 Summary \u00b6 In SugarCube, the global function visited() returns the number of times a passage has been visited during the course of the story. Combined with the <<= >> macro expression, the result of a global function can be written to a passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? <<= visited(\"Another Passage\")>> [[Another Passage]] :: Another Passage [[Start]] Download: Twee Code","title":"SugarCube"},{"location":"passagevisits/sugarcube/sugarcube_passagevisits.html#passage-visits-sugarcube-v22","text":"","title":"\"Passage Visits\": SugarCube (v2.2)"},{"location":"passagevisits/sugarcube/sugarcube_passagevisits.html#summary","text":"In SugarCube, the global function visited() returns the number of times a passage has been visited during the course of the story. Combined with the <<= >> macro expression, the result of a global function can be written to a passage.","title":"Summary"},{"location":"passagevisits/sugarcube/sugarcube_passagevisits.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"passagevisits/sugarcube/sugarcube_passagevisits.html#twee-code","text":":: StoryTitle SugarCube: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? <<= visited(\"Another Passage\")>> [[Another Passage]] :: Another Passage [[Start]] Download: Twee Code","title":"Twee Code"},{"location":"playerstatistics/chapbook/chapbook_player_statistics.html","text":"\"Player Statistics\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In Chapbook, the values of variables can only be changed as part of the Vars Section or using JavaScript . This example combines the two and uses the {embed passage} modifier to use different passages as sections of code and adjust values based on user interactions. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Player Statistics :: Start {embed passage: \"Setup\"} {embed passage: \"Statistics\"} :: IncreaseEmpathy empathy: empathy + 1 points: points - 1 -- {embed passage: \"Statistics\"} :: DecreaseEmpathy empathy: empathy - 1 points: points + 1 -- {embed passage: \"Statistics\"} :: IncreaseIntelligence intelligence: intelligence + 1 points: points - 1 -- {embed passage: \"Statistics\"} :: DecreaseIntelligence intelligence: intelligence - 1 points: points + 1 -- {embed passage: \"Statistics\"} :: Setup empathy: 10 intelligence: 10 points: 5 -- :: Statistics {embed passage: \"CheckValues\"} [if points > 0 && empathy > 0] Empathy: [[[+]->IncreaseEmpathy]] [[[-]->DecreaseEmpathy]] [continued] [if points > 0 && intelligence > 0] Intelligence: [[[+]->IncreaseIntelligence]] [[[-]->DecreaseIntelligence]] [continued] Empathy: {empathy} Intelligence: {intelligence} Remaining Points: {points} [[Reset Points->Start]] :: CheckValues [JavaScript] let empathy = engine.state.get('empathy'); let intelligence = engine.state.get('intelligence'); let points = engine.state.get('points'); if(empathy > 20){empathy = 20;} if(intelligence > 20){intelligence = 20;} if(points < 0){points = 0;} if(points > 25){points = 25;} engine.state.set('empathy', empathy); engine.state.set('intelligence', intelligence); engine.state.set('points', points); Download: Twee Code","title":"Chapbook"},{"location":"playerstatistics/chapbook/chapbook_player_statistics.html#player-statistics-chapbook-v100","text":"","title":"\"Player Statistics\": Chapbook (v1.0.0)"},{"location":"playerstatistics/chapbook/chapbook_player_statistics.html#summary","text":"One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In Chapbook, the values of variables can only be changed as part of the Vars Section or using JavaScript . This example combines the two and uses the {embed passage} modifier to use different passages as sections of code and adjust values based on user interactions.","title":"Summary"},{"location":"playerstatistics/chapbook/chapbook_player_statistics.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"playerstatistics/chapbook/chapbook_player_statistics.html#twee-code","text":":: StoryTitle Chapbook: Player Statistics :: Start {embed passage: \"Setup\"} {embed passage: \"Statistics\"} :: IncreaseEmpathy empathy: empathy + 1 points: points - 1 -- {embed passage: \"Statistics\"} :: DecreaseEmpathy empathy: empathy - 1 points: points + 1 -- {embed passage: \"Statistics\"} :: IncreaseIntelligence intelligence: intelligence + 1 points: points - 1 -- {embed passage: \"Statistics\"} :: DecreaseIntelligence intelligence: intelligence - 1 points: points + 1 -- {embed passage: \"Statistics\"} :: Setup empathy: 10 intelligence: 10 points: 5 -- :: Statistics {embed passage: \"CheckValues\"} [if points > 0 && empathy > 0] Empathy: [[[+]->IncreaseEmpathy]] [[[-]->DecreaseEmpathy]] [continued] [if points > 0 && intelligence > 0] Intelligence: [[[+]->IncreaseIntelligence]] [[[-]->DecreaseIntelligence]] [continued] Empathy: {empathy} Intelligence: {intelligence} Remaining Points: {points} [[Reset Points->Start]] :: CheckValues [JavaScript] let empathy = engine.state.get('empathy'); let intelligence = engine.state.get('intelligence'); let points = engine.state.get('points'); if(empathy > 20){empathy = 20;} if(intelligence > 20){intelligence = 20;} if(points < 0){points = 0;} if(points > 25){points = 25;} engine.state.set('empathy', empathy); engine.state.set('intelligence', intelligence); engine.state.set('points', points); Download: Twee Code","title":"Twee Code"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html","text":"\"Player Statistics\": Harlowe (v2.0) \u00b6 Summary \u00b6 One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the (link-repeat:) macro is used multiple times with (replace:) and (set:) macros based on if they are higher than a target value. In a second passage, these values are used in combination with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Player Statistics in Harlowe :: Start Empathy: { (link-repeat: \"|+|\")[ (if: $totalPoints > 0)[ (set: $empathy to it + 1) (set: $totalPoints to it - 1) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] (link-repeat: \"|-|\")[ (if: $empathy > 0)[ (set: $empathy to it - 1) (set: $totalPoints to it + 1) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] } Intelligence: { (link-repeat: \"|+|\")[ (if: $totalPoints > 0)[ (set: $intelligence to it + 1) (set: $totalPoints to it - 1) (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] (link-repeat: \"|-|\")[ (if: $intelligence > 0)[ (set: $intelligence to it - 1) (set: $totalPoints to it + 1) (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] } { (link-repeat: \"|Reset Points|\")[ (set: $empathy to 10) (set: $intelligence to 10) (set: $totalPoints to 5) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] } Empathy: |empathyStat>[10] Intelligence: |intelligenceStat>[10] Remaining Points: |pointsStat>[5] [[Test Stats]] :: Test Stats (link: \"Make an intelligence check?\")[ (set: _result to (random: 1, 6) + $intelligence) (if: _result >= 15)[ Intelligence Success! (_result >= 15) ](else:)[ Intelligence Failure! (_result < 15) ] ] (link: \"Make an empathy check?\")[ (set: _result to (random: 1, 6) + $empathy) (if: _result >= 15)[ Empathy Success! (_result >= 15) ](else:)[ Empathy Failure! (_result < 15) ] ] :: Startup[startup] (set: $empathy to 10) (set: $intelligence to 10) (set: $totalPoints to 5) Download: Twee Code See Also \u00b6 Conditional Statements , Setting and Showing","title":"Harlowe"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html#player-statistics-harlowe-v20","text":"","title":"\"Player Statistics\": Harlowe (v2.0)"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html#summary","text":"One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the (link-repeat:) macro is used multiple times with (replace:) and (set:) macros based on if they are higher than a target value. In a second passage, these values are used in combination with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number.","title":"Summary"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html#twee-code","text":":: StoryTitle Player Statistics in Harlowe :: Start Empathy: { (link-repeat: \"|+|\")[ (if: $totalPoints > 0)[ (set: $empathy to it + 1) (set: $totalPoints to it - 1) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] (link-repeat: \"|-|\")[ (if: $empathy > 0)[ (set: $empathy to it - 1) (set: $totalPoints to it + 1) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] } Intelligence: { (link-repeat: \"|+|\")[ (if: $totalPoints > 0)[ (set: $intelligence to it + 1) (set: $totalPoints to it - 1) (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] (link-repeat: \"|-|\")[ (if: $intelligence > 0)[ (set: $intelligence to it - 1) (set: $totalPoints to it + 1) (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] } { (link-repeat: \"|Reset Points|\")[ (set: $empathy to 10) (set: $intelligence to 10) (set: $totalPoints to 5) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] } Empathy: |empathyStat>[10] Intelligence: |intelligenceStat>[10] Remaining Points: |pointsStat>[5] [[Test Stats]] :: Test Stats (link: \"Make an intelligence check?\")[ (set: _result to (random: 1, 6) + $intelligence) (if: _result >= 15)[ Intelligence Success! (_result >= 15) ](else:)[ Intelligence Failure! (_result < 15) ] ] (link: \"Make an empathy check?\")[ (set: _result to (random: 1, 6) + $empathy) (if: _result >= 15)[ Empathy Success! (_result >= 15) ](else:)[ Empathy Failure! (_result < 15) ] ] :: Startup[startup] (set: $empathy to 10) (set: $intelligence to 10) (set: $totalPoints to 5) Download: Twee Code","title":"Twee Code"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html#see-also","text":"Conditional Statements , Setting and Showing","title":"See Also"},{"location":"playerstatistics/snowman/snowman_player_statistics.html","text":"\"Player Statistics\": Snowman (v1.3.0) \u00b6 Summary \u00b6 One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the jQuery event handler click() is used to bind to multiple buttons. Depending on what was clicked, the content is replaced or values adjusted based on if a conditional statement is true. Values are then tested when combined with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number. Note: Elements must exist before the attempt to bind to them in order to be successful. This example uses the ready() function to achieve this with the first, starting passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Player Statistics in Snowman :: UserScript[script] $(function() { // Create a global setup object window.setup = window.setup || {}; // Create a global propety on the setup object window.setup.stats = {}; // Create (and overwrite) the use of 's' var s = window.setup.stats; s.empathy = 10; s.intelligence = 10; s.totalPoints = 5; $(\"#empathyIncrease\").click(function(){ if(s.totalPoints > 0) { setup.stats.empathy++; s.totalPoints--; $(\"#empathyStat\").text(s.empathy); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#empathyDecrease\").click(function(){ if(s.empathy > 0) { s.empathy--; s.totalPoints++; $(\"#empathyStat\").text(s.empathy); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#intelligenceIncrease\").click(function(){ if(s.totalPoints > 0) { s.intelligence++; s.totalPoints--; $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#intelligenceDecrease\").click(function(){ if(s.intelligence > 0) { s.intelligence--; s.totalPoints++; $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#pointsReset\").click(function(){ s.empathy = 10; s.intelligence = 10; s.totalPoints = 5; $(\"#empathyStat\").text(s.empathy); $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); }); // Add a randomInt function to the Math global Math.randomInt = function(min, max) { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min)) + min; }; $(\"#testIntelligence\").click(function() { var result = s.intelligence + Math.randomInt(1,6); if(result >= 15) { $(\"#intelligenceResult\").text(\"Success! (\" + result + \" >= 15)\"); } else { $(\"#intelligenceResult\").text(\"Failure! (\" + result + \" < 15)\"); } console.log(\"Test!\"); }); $(\"#testEmpathy\").click(function() { var result = s.empathy + Math.randomInt(1,6); if(result >= 15) { $(\"#empathyResult\").text(\"Success! (\" + result + \" >= 15)\"); } else { $(\"#empathyResult\").text(\"Failure! (\" + result + \" < 15)\"); } }); }); :: Start Empathy: <button id=\"empathyIncrease\">[+]</button> <button id=\"empathyDecrease\">[-]</button> Intelligence: <button id=\"intelligenceIncrease\">[+]</button> <button id=\"intelligenceDecrease\">[-]</button> <button id=\"pointsReset\">[Reset Points]</button> Empathy: <span id=\"empathyStat\">10</span> Intelligence: <span id=\"intelligenceStat\">10</span> Remaining Points: <span id=\"pointsStat\">5</span> <button id=\"testIntelligence\">Make an intelligence check?</button> <div id=\"intelligenceResult\"></div> <button id=\"testEmpathy\">Make an empathy check?</button> <div id=\"empathyResult\"></div> Download: Twee Code See Also \u00b6 Conditional Statements , Setting and Showing","title":"Snowman"},{"location":"playerstatistics/snowman/snowman_player_statistics.html#player-statistics-snowman-v130","text":"","title":"\"Player Statistics\": Snowman (v1.3.0)"},{"location":"playerstatistics/snowman/snowman_player_statistics.html#summary","text":"One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the jQuery event handler click() is used to bind to multiple buttons. Depending on what was clicked, the content is replaced or values adjusted based on if a conditional statement is true. Values are then tested when combined with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number. Note: Elements must exist before the attempt to bind to them in order to be successful. This example uses the ready() function to achieve this with the first, starting passage.","title":"Summary"},{"location":"playerstatistics/snowman/snowman_player_statistics.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"playerstatistics/snowman/snowman_player_statistics.html#twee-code","text":":: StoryTitle Player Statistics in Snowman :: UserScript[script] $(function() { // Create a global setup object window.setup = window.setup || {}; // Create a global propety on the setup object window.setup.stats = {}; // Create (and overwrite) the use of 's' var s = window.setup.stats; s.empathy = 10; s.intelligence = 10; s.totalPoints = 5; $(\"#empathyIncrease\").click(function(){ if(s.totalPoints > 0) { setup.stats.empathy++; s.totalPoints--; $(\"#empathyStat\").text(s.empathy); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#empathyDecrease\").click(function(){ if(s.empathy > 0) { s.empathy--; s.totalPoints++; $(\"#empathyStat\").text(s.empathy); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#intelligenceIncrease\").click(function(){ if(s.totalPoints > 0) { s.intelligence++; s.totalPoints--; $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#intelligenceDecrease\").click(function(){ if(s.intelligence > 0) { s.intelligence--; s.totalPoints++; $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#pointsReset\").click(function(){ s.empathy = 10; s.intelligence = 10; s.totalPoints = 5; $(\"#empathyStat\").text(s.empathy); $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); }); // Add a randomInt function to the Math global Math.randomInt = function(min, max) { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min)) + min; }; $(\"#testIntelligence\").click(function() { var result = s.intelligence + Math.randomInt(1,6); if(result >= 15) { $(\"#intelligenceResult\").text(\"Success! (\" + result + \" >= 15)\"); } else { $(\"#intelligenceResult\").text(\"Failure! (\" + result + \" < 15)\"); } console.log(\"Test!\"); }); $(\"#testEmpathy\").click(function() { var result = s.empathy + Math.randomInt(1,6); if(result >= 15) { $(\"#empathyResult\").text(\"Success! (\" + result + \" >= 15)\"); } else { $(\"#empathyResult\").text(\"Failure! (\" + result + \" < 15)\"); } }); }); :: Start Empathy: <button id=\"empathyIncrease\">[+]</button> <button id=\"empathyDecrease\">[-]</button> Intelligence: <button id=\"intelligenceIncrease\">[+]</button> <button id=\"intelligenceDecrease\">[-]</button> <button id=\"pointsReset\">[Reset Points]</button> Empathy: <span id=\"empathyStat\">10</span> Intelligence: <span id=\"intelligenceStat\">10</span> Remaining Points: <span id=\"pointsStat\">5</span> <button id=\"testIntelligence\">Make an intelligence check?</button> <div id=\"intelligenceResult\"></div> <button id=\"testEmpathy\">Make an empathy check?</button> <div id=\"empathyResult\"></div> Download: Twee Code","title":"Twee Code"},{"location":"playerstatistics/snowman/snowman_player_statistics.html#see-also","text":"Conditional Statements , Setting and Showing","title":"See Also"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html","text":"\"Player Statistics\": SugarCube (v2.18) \u00b6 Summary \u00b6 One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the <<link>> macro is used multiple times to replace content and adjust values based on <<if>> they are greater than a target number. In a second passage, these values are used in combination with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Player Statistics in SugarCube :: Start Empathy: \\ <<link \"[+]\">> <<if $totalPoints gt 0>> <<set $empathy++>> <<set $totalPoints-->> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>>\\ <<link \"[-]\">> <<if $empathy gt 0>> <<set $empathy-->> <<set $totalPoints++>> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>> Intelligence: \\ <<link \"[+]\">> <<if $totalPoints gt 0>> <<set $intelligence++>> <<set $totalPoints-->> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>>\\ <<link \"[-]\">> <<if $intelligence gt 0>> <<set $intelligence-->> <<set $totalPoints++>> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>> <<link \"[Reset Points]\">> <<set $empathy to 10>> <<set $intelligence to 10>> <<set $totalPoints to 5>> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</link>> Empathy: <span id=\"empathyStat\">10</span> Intelligence: <span id=\"intelligenceStat\">10</span> Remaining Points: <span id=\"pointsStat\">5</span> [[Test Stats]] :: StoryInit <<set $empathy to 10>> <<set $intelligence to 10>> <<set $totalPoints to 5>> :: Test Stats <<linkreplace \"Make an intelligence check?\">> <<set _result to random(1, 6) + $intelligence >> <<if _result gte 15>> Intelligence Success! (_result >= 15) <<else>> Intelligence Failure! (_result < 15) <</if>> <</linkreplace>> <<linkreplace \"Make an empathy check?\">> <<set _result to random(1, 6) + $empathy >> <<if _result gte 15>> Emaphy Success! (_result >= 15) <<else>> Empathy Failure! (_result < 15) <</if>> <</linkreplace>> Download: Twee Code See Also \u00b6 Conditional Statements , Setting and Showing","title":"SugarCube"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html#player-statistics-sugarcube-v218","text":"","title":"\"Player Statistics\": SugarCube (v2.18)"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html#summary","text":"One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the <<link>> macro is used multiple times to replace content and adjust values based on <<if>> they are greater than a target number. In a second passage, these values are used in combination with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number.","title":"Summary"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html#twee-code","text":":: StoryTitle Player Statistics in SugarCube :: Start Empathy: \\ <<link \"[+]\">> <<if $totalPoints gt 0>> <<set $empathy++>> <<set $totalPoints-->> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>>\\ <<link \"[-]\">> <<if $empathy gt 0>> <<set $empathy-->> <<set $totalPoints++>> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>> Intelligence: \\ <<link \"[+]\">> <<if $totalPoints gt 0>> <<set $intelligence++>> <<set $totalPoints-->> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>>\\ <<link \"[-]\">> <<if $intelligence gt 0>> <<set $intelligence-->> <<set $totalPoints++>> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>> <<link \"[Reset Points]\">> <<set $empathy to 10>> <<set $intelligence to 10>> <<set $totalPoints to 5>> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</link>> Empathy: <span id=\"empathyStat\">10</span> Intelligence: <span id=\"intelligenceStat\">10</span> Remaining Points: <span id=\"pointsStat\">5</span> [[Test Stats]] :: StoryInit <<set $empathy to 10>> <<set $intelligence to 10>> <<set $totalPoints to 5>> :: Test Stats <<linkreplace \"Make an intelligence check?\">> <<set _result to random(1, 6) + $intelligence >> <<if _result gte 15>> Intelligence Success! (_result >= 15) <<else>> Intelligence Failure! (_result < 15) <</if>> <</linkreplace>> <<linkreplace \"Make an empathy check?\">> <<set _result to random(1, 6) + $empathy >> <<if _result gte 15>> Emaphy Success! (_result >= 15) <<else>> Empathy Failure! (_result < 15) <</if>> <</linkreplace>> Download: Twee Code","title":"Twee Code"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html#see-also","text":"Conditional Statements , Setting and Showing","title":"See Also"},{"location":"programmaticundo/harlowe/harlowe_programmaticundo.html","text":"\"Programmatic Undo\": Harlowe (v2.0) \u00b6 Summary \u00b6 While Harlowe supports allowing the user to undo and redo moves, the \"undo\" operation can also be accessed through the (undo:) macro. Through its use, changes from the most current action can be \"undone.\" Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Programmatic Undo in Harlowe :: Start [[Enter the darkness]] :: Enter the darkness (link: \"You are not ready. Go back!\")[(undo:)] Download: Twee Code","title":"Harlowe"},{"location":"programmaticundo/harlowe/harlowe_programmaticundo.html#programmatic-undo-harlowe-v20","text":"","title":"\"Programmatic Undo\": Harlowe (v2.0)"},{"location":"programmaticundo/harlowe/harlowe_programmaticundo.html#summary","text":"While Harlowe supports allowing the user to undo and redo moves, the \"undo\" operation can also be accessed through the (undo:) macro. Through its use, changes from the most current action can be \"undone.\"","title":"Summary"},{"location":"programmaticundo/harlowe/harlowe_programmaticundo.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"programmaticundo/harlowe/harlowe_programmaticundo.html#twee-code","text":":: StoryTitle Programmatic Undo in Harlowe :: Start [[Enter the darkness]] :: Enter the darkness (link: \"You are not ready. Go back!\")[(undo:)] Download: Twee Code","title":"Twee Code"},{"location":"programmaticundo/snowman/snowman_programmaticundo.html","text":"\"Programmatic Undo\": Snowman (v1.3.0) \u00b6 Summary \u00b6 Snowman comes with no user-facing functionality for undoing and re-doing actions. However, though using jQuery and a combination of the window.story.checkpoint() and window.history.back()* functions, this can be emulated. Note: Checkpoints will only affect properties of the 's' (state) global variable. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Programmatic Undo in Snowman :: UserScript[script] $(window).on('showpassage:after', function (e, data) { window.story.checkpoint(data.passage.name); }); :: Start [[Enter the Darkness]] :: Enter the Darkness <a href=\"javascript: window.history.back();\">You are not ready! Go back!</a> Download: Twee Code","title":"Snowman"},{"location":"programmaticundo/snowman/snowman_programmaticundo.html#programmatic-undo-snowman-v130","text":"","title":"\"Programmatic Undo\": Snowman (v1.3.0)"},{"location":"programmaticundo/snowman/snowman_programmaticundo.html#summary","text":"Snowman comes with no user-facing functionality for undoing and re-doing actions. However, though using jQuery and a combination of the window.story.checkpoint() and window.history.back()* functions, this can be emulated. Note: Checkpoints will only affect properties of the 's' (state) global variable.","title":"Summary"},{"location":"programmaticundo/snowman/snowman_programmaticundo.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"programmaticundo/snowman/snowman_programmaticundo.html#twee-code","text":":: StoryTitle Programmatic Undo in Snowman :: UserScript[script] $(window).on('showpassage:after', function (e, data) { window.story.checkpoint(data.passage.name); }); :: Start [[Enter the Darkness]] :: Enter the Darkness <a href=\"javascript: window.history.back();\">You are not ready! Go back!</a> Download: Twee Code","title":"Twee Code"},{"location":"programmaticundo/sugarcube/sugarcube_programmaticundo.html","text":"\"Programmatic Undo\": SugarCube (v2.18) \u00b6 Summary \u00b6 While SugarCube supports allowing the user to undo and redo moves, the \"undo\" operation can also be accessed through the <<back>> macro. Through its use, changes from the most current action can be \"undone.\" Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Programmatic Undo in SugarCube :: Start [[Enter the Darkness]] :: Enter the Darkness <<back \"You are not ready! Go back!\">> Download: Twee Code","title":"SugarCube"},{"location":"programmaticundo/sugarcube/sugarcube_programmaticundo.html#programmatic-undo-sugarcube-v218","text":"","title":"\"Programmatic Undo\": SugarCube (v2.18)"},{"location":"programmaticundo/sugarcube/sugarcube_programmaticundo.html#summary","text":"While SugarCube supports allowing the user to undo and redo moves, the \"undo\" operation can also be accessed through the <<back>> macro. Through its use, changes from the most current action can be \"undone.\"","title":"Summary"},{"location":"programmaticundo/sugarcube/sugarcube_programmaticundo.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"programmaticundo/sugarcube/sugarcube_programmaticundo.html#twee-code","text":":: StoryTitle Programmatic Undo in SugarCube :: Start [[Enter the Darkness]] :: Enter the Darkness <<back \"You are not ready! Go back!\">> Download: Twee Code","title":"Twee Code"},{"location":"questions/getting_started.html","text":"Getting Started \u00b6 Online \u00b6 Twine 2 can be accessed online . Offline \u00b6 Twine 2 can also be downloaded and run on Windows, MacOS X, and Linux systems. The latest releases on GitHub has a listing of the current versions per operating system. Twine 1 \u00b6 Twine 1 is only a desktop application. While it can still be used, it is not currently maintained or under active development. The current version is 1.4.2. Windows MacOS X","title":"How do I get started?"},{"location":"questions/getting_started.html#getting-started","text":"","title":"Getting Started"},{"location":"questions/getting_started.html#online","text":"Twine 2 can be accessed online .","title":"Online"},{"location":"questions/getting_started.html#offline","text":"Twine 2 can also be downloaded and run on Windows, MacOS X, and Linux systems. The latest releases on GitHub has a listing of the current versions per operating system.","title":"Offline"},{"location":"questions/getting_started.html#twine-1","text":"Twine 1 is only a desktop application. While it can still be used, it is not currently maintained or under active development. The current version is 1.4.2. Windows MacOS X","title":"Twine 1"},{"location":"questions/links.html","text":"Links \u00b6 A link is a connection between one passage and another, both visually in Twine 2 and as a hyperlink a user can click to navigate to a passage of the same name in the published HTML. Passage Link \u00b6 When something is enclosed within the two sets of opening and closing square brackets, this \"links\" one passage to another of that exact word or phrase. The \"link\" is the name of that other passage. For example, the code below links to the passage named \"Example\": [[Example]] When using Twine 2, it will automatically create the passage if it does not exist when linked from another passage. The Passages View shows the links between them. Routing Links \u00b6 It is also possible to \"route\" links to different passages. Arrows, -> or <- , can be used to point to the destination of the link and \"away\" from the word or phrase used as the link text. [[Link to another passage->Different Passage Name]] [[Different Passage Name<-Link to another passage]] The pipe character, | , can also be used to route a user to a different passage than shown in the hyperlink. For example, the code below routes to the passage \"Another\" rather than \"Example\" as it would show: [[Example|Another]]","title":"How do I make links?"},{"location":"questions/links.html#links","text":"A link is a connection between one passage and another, both visually in Twine 2 and as a hyperlink a user can click to navigate to a passage of the same name in the published HTML.","title":"Links"},{"location":"questions/links.html#passage-link","text":"When something is enclosed within the two sets of opening and closing square brackets, this \"links\" one passage to another of that exact word or phrase. The \"link\" is the name of that other passage. For example, the code below links to the passage named \"Example\": [[Example]] When using Twine 2, it will automatically create the passage if it does not exist when linked from another passage. The Passages View shows the links between them.","title":"Passage Link"},{"location":"questions/links.html#routing-links","text":"It is also possible to \"route\" links to different passages. Arrows, -> or <- , can be used to point to the destination of the link and \"away\" from the word or phrase used as the link text. [[Link to another passage->Different Passage Name]] [[Different Passage Name<-Link to another passage]] The pipe character, | , can also be used to route a user to a different passage than shown in the hyperlink. For example, the code below routes to the passage \"Another\" rather than \"Example\" as it would show: [[Example|Another]]","title":"Routing Links"},{"location":"questions/making.html","text":"Making with Twine \u00b6 At its heart, Twine is a tool for creating hypertext . The difference between hypertext and a linear story, the kind found in books and magazines, is that it allows the reader to have some measure of control. In other words, the reader has some ability over what they interact with next. In a story about a haunted house, for example, the reader might be able to tell the protagonist to \"Turn around and run\" or \"Venture deeper into the mausoleum\". In a nonfiction piece, the reader might ask to learn more about my aunt, who went missing. The convention that has emerged over the past three decades is that readers navigate hypertexts by clicking links. In this sense, you're already a seasoned hypertext reader by reading this very page! You clicked several links to reach this text, after all, and you've probably clicked an uncountable number of links in your life so far. Because hypertext branches so much, it's easy to get lost in your own work. Much of Twine is dedicated to helping you keep track of your work's structure visually with a Passages View , so you can see what your readers' experience will be like. Making Games with Twine \u00b6 Can I make games with Twine? Of course! However, things a little more complicated than they initial appear. Twine itself can be thought of as more of an editor that helps package up Stories . What provides the underlining conditional logic, variables, and other trappings of game programming are Story Formats .","title":"What can I make with Twine?"},{"location":"questions/making.html#making-with-twine","text":"At its heart, Twine is a tool for creating hypertext . The difference between hypertext and a linear story, the kind found in books and magazines, is that it allows the reader to have some measure of control. In other words, the reader has some ability over what they interact with next. In a story about a haunted house, for example, the reader might be able to tell the protagonist to \"Turn around and run\" or \"Venture deeper into the mausoleum\". In a nonfiction piece, the reader might ask to learn more about my aunt, who went missing. The convention that has emerged over the past three decades is that readers navigate hypertexts by clicking links. In this sense, you're already a seasoned hypertext reader by reading this very page! You clicked several links to reach this text, after all, and you've probably clicked an uncountable number of links in your life so far. Because hypertext branches so much, it's easy to get lost in your own work. Much of Twine is dedicated to helping you keep track of your work's structure visually with a Passages View , so you can see what your readers' experience will be like.","title":"Making with Twine"},{"location":"questions/making.html#making-games-with-twine","text":"Can I make games with Twine? Of course! However, things a little more complicated than they initial appear. Twine itself can be thought of as more of an editor that helps package up Stories . What provides the underlining conditional logic, variables, and other trappings of game programming are Story Formats .","title":"Making Games with Twine"},{"location":"questions/need_to_know.html","text":"Need to Know \u00b6 What do I need to know? Nothing! You can make a game, interactive project, or experimental essay without knowing programming or anything other than how to navigate a program and publish HTML using Twine 2! However, getting the most out of Twine 2 can often require some knowledge of HTML, CSS, or JavaScript. All story formats also use markup to style text. HTML, CSS, and JavaScript \u00b6 This Cookbook has entries on HTML , CSS , and JavaScript as they are used in connection with Twine 2. Markup \u00b6 All built-in story formats use different ways of marking up text to add some visual emphasize or otherwise style text . These differ between story formats, and it is highly recommended to consult the individual documentation of the story format for more information and examples.","title":"What do I need to know?"},{"location":"questions/need_to_know.html#need-to-know","text":"What do I need to know? Nothing! You can make a game, interactive project, or experimental essay without knowing programming or anything other than how to navigate a program and publish HTML using Twine 2! However, getting the most out of Twine 2 can often require some knowledge of HTML, CSS, or JavaScript. All story formats also use markup to style text.","title":"Need to Know"},{"location":"questions/need_to_know.html#html-css-and-javascript","text":"This Cookbook has entries on HTML , CSS , and JavaScript as they are used in connection with Twine 2.","title":"HTML, CSS, and JavaScript"},{"location":"questions/need_to_know.html#markup","text":"All built-in story formats use different ways of marking up text to add some visual emphasize or otherwise style text . These differ between story formats, and it is highly recommended to consult the individual documentation of the story format for more information and examples.","title":"Markup"},{"location":"questions/stories_saved.html","text":"Saving Stories \u00b6 Twine 2 \u00b6 Online \u00b6 Stories are saved in the local storage of a web browser. This is isolated between a browser and its use of incognito or private windows. Clearing sessions and cookies in a browser may also clear the storage of Twine 2. Using a different browser also means accessing different local storage. Desktop \u00b6 When used as a desktop application, Twine 2 stores its files under the current user's files. The current collection of Stories can be accessed through the View -> Show Story Library menu option. Twine 1 \u00b6 As a desktop application, it stores its files in either HTML or as Twee source code on the local computer. It can import and export both HTML and Twee source code ( .twee or .tw ).","title":"Where are my stories saved?"},{"location":"questions/stories_saved.html#saving-stories","text":"","title":"Saving Stories"},{"location":"questions/stories_saved.html#twine-2","text":"","title":"Twine 2"},{"location":"questions/stories_saved.html#online","text":"Stories are saved in the local storage of a web browser. This is isolated between a browser and its use of incognito or private windows. Clearing sessions and cookies in a browser may also clear the storage of Twine 2. Using a different browser also means accessing different local storage.","title":"Online"},{"location":"questions/stories_saved.html#desktop","text":"When used as a desktop application, Twine 2 stores its files under the current user's files. The current collection of Stories can be accessed through the View -> Show Story Library menu option.","title":"Desktop"},{"location":"questions/stories_saved.html#twine-1","text":"As a desktop application, it stores its files in either HTML or as Twee source code on the local computer. It can import and export both HTML and Twee source code ( .twee or .tw ).","title":"Twine 1"},{"location":"questions/style_text.html","text":"Styling Text \u00b6 Each Story Format uses their own markdown and special characters to format text. Some common examples are included below. Bold (Strong Emphasis) \u00b6 Harlowe \u00b6 **Bold** or ''Bold'' SugarCube \u00b6 ''Bold'' Snowman \u00b6 **Bold** Chapbook \u00b6 __Bold__ or **Bold** Italics (Emphasis) \u00b6 Harlowe \u00b6 *Italics* or //Italics// SugarCube \u00b6 //Italics// Snowman \u00b6 *Italics* Chapbook \u00b6 *Italics* or _Italics_ Verbatim Text \u00b6 Harlowe \u00b6 Verbatim SugarCube \u00b6 \"\"\"Verbatim\"\"\" or <nowiki>Verbatim</nowiki> Snowman \u00b6 Any text following a new line and four spaces or a tab until the end of the line. Chapbook \u00b6 Any text following a new line and four spaces or a tab until the end of the line.","title":"How do I style text?"},{"location":"questions/style_text.html#styling-text","text":"Each Story Format uses their own markdown and special characters to format text. Some common examples are included below.","title":"Styling Text"},{"location":"questions/style_text.html#bold-strong-emphasis","text":"","title":"Bold (Strong Emphasis)"},{"location":"questions/style_text.html#harlowe","text":"**Bold** or ''Bold''","title":"Harlowe"},{"location":"questions/style_text.html#sugarcube","text":"''Bold''","title":"SugarCube"},{"location":"questions/style_text.html#snowman","text":"**Bold**","title":"Snowman"},{"location":"questions/style_text.html#chapbook","text":"__Bold__ or **Bold**","title":"Chapbook"},{"location":"questions/style_text.html#italics-emphasis","text":"","title":"Italics (Emphasis)"},{"location":"questions/style_text.html#harlowe_1","text":"*Italics* or //Italics//","title":"Harlowe"},{"location":"questions/style_text.html#sugarcube_1","text":"//Italics//","title":"SugarCube"},{"location":"questions/style_text.html#snowman_1","text":"*Italics*","title":"Snowman"},{"location":"questions/style_text.html#chapbook_1","text":"*Italics* or _Italics_","title":"Chapbook"},{"location":"questions/style_text.html#verbatim-text","text":"","title":"Verbatim Text"},{"location":"questions/style_text.html#harlowe_2","text":"Verbatim","title":"Harlowe"},{"location":"questions/style_text.html#sugarcube_2","text":"\"\"\"Verbatim\"\"\" or <nowiki>Verbatim</nowiki>","title":"SugarCube"},{"location":"questions/style_text.html#snowman_2","text":"Any text following a new line and four spaces or a tab until the end of the line.","title":"Snowman"},{"location":"questions/style_text.html#chapbook_2","text":"Any text following a new line and four spaces or a tab until the end of the line.","title":"Chapbook"},{"location":"savinggames/harlowe/harlowe_savinggames.html","text":"\"Saving Games\": Harlowe (v2.0) \u00b6 Summary \u00b6 Harlowe provides macros like (save-game:) and (load-game:) to store and retrieve game \"saves\" of the variables and current passage. (saved-games:) can also be used to check if a certain game save exists. Game saves are stored as cookies in the user's browser. If cookies cannot be stored for some reason, game saves will fail. It is recommended to always check if the game save was stored before trying to retrieve it later. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Saving Games in Harlowe :: Start (link:\"Save game?\")[ (if:(save-game:\"Slot A\"))[ (if: (saved-games:) contains \"Slot A\")[ Slot A is in the saved-games datamap! ] (link: \"Load Slot A?\" )[ (load-game: \"Slot A\") ] ](else: )[ Sorry, I couldn't save your game. ] ] Download: Twee Code","title":"Harlowe"},{"location":"savinggames/harlowe/harlowe_savinggames.html#saving-games-harlowe-v20","text":"","title":"\"Saving Games\": Harlowe (v2.0)"},{"location":"savinggames/harlowe/harlowe_savinggames.html#summary","text":"Harlowe provides macros like (save-game:) and (load-game:) to store and retrieve game \"saves\" of the variables and current passage. (saved-games:) can also be used to check if a certain game save exists. Game saves are stored as cookies in the user's browser. If cookies cannot be stored for some reason, game saves will fail. It is recommended to always check if the game save was stored before trying to retrieve it later.","title":"Summary"},{"location":"savinggames/harlowe/harlowe_savinggames.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"savinggames/harlowe/harlowe_savinggames.html#twee-code","text":":: StoryTitle Saving Games in Harlowe :: Start (link:\"Save game?\")[ (if:(save-game:\"Slot A\"))[ (if: (saved-games:) contains \"Slot A\")[ Slot A is in the saved-games datamap! ] (link: \"Load Slot A?\" )[ (load-game: \"Slot A\") ] ](else: )[ Sorry, I couldn't save your game. ] ] Download: Twee Code","title":"Twee Code"},{"location":"savinggames/snowman/snowman_savinggames.html","text":"\"Saving Games\": Snowman (v1.3.0) \u00b6 Summary \u00b6 Snowman provides the window.story.saveHash() and window.story.restore() functions to produce a hash of the current story state and then recover it. However, it does not provide a mechanism for saving the hash between sessions. Through using the window.localStorage global variable, this can be accomplished. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Saving Games in Snowman :: UserScript[script] window.storage = { ok: function() { try { var storage = window[\"localStorage\"], x = '__storage_test__'; storage.setItem(x, x); storage.removeItem(x); return true; } catch(e) { return e instanceof DOMException && ( // everything except Firefox e.code === 22 || // Firefox e.code === 1014 || // test name field too, because code might not be present // everything except Firefox e.name === 'QuotaExceededError' || // Firefox e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored storage.length !== 0; } }, save: function(hash) { window.localStorage.setItem('hash', hash); }, restore: function() { return window.localStorage.getItem('hash'); }, delete: function() { window.localStorage.removeItem(\"hash\"); } } :: Start <% if(window.storage.ok()) { %> Window storage works! <% } %> <% if(window.storage.restore()) { %> There is a session saved! <% } %> [[Save the session hash?]] [[Restore from previous session?]] [[Delete previous session?]] :: Save the session hash? The hash is <%= window.story.saveHash() %>. It has been saved! <% if(window.storage.ok()) { window.storage.save(window.story.saveHash()) }%> [[Go back?|Start]] :: Restore from previous session? <% if(window.storage.ok()) { if(window.story.restore(window.storage.restore()) ) { %> The restore was successful! <% } } %> [[Go back?|Start]] :: Delete previous session? <% window.storage.delete() %> [[Go back?|Start]] Download: Twee Code","title":"Snowman"},{"location":"savinggames/snowman/snowman_savinggames.html#saving-games-snowman-v130","text":"","title":"\"Saving Games\": Snowman (v1.3.0)"},{"location":"savinggames/snowman/snowman_savinggames.html#summary","text":"Snowman provides the window.story.saveHash() and window.story.restore() functions to produce a hash of the current story state and then recover it. However, it does not provide a mechanism for saving the hash between sessions. Through using the window.localStorage global variable, this can be accomplished.","title":"Summary"},{"location":"savinggames/snowman/snowman_savinggames.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"savinggames/snowman/snowman_savinggames.html#twee-code","text":":: StoryTitle Saving Games in Snowman :: UserScript[script] window.storage = { ok: function() { try { var storage = window[\"localStorage\"], x = '__storage_test__'; storage.setItem(x, x); storage.removeItem(x); return true; } catch(e) { return e instanceof DOMException && ( // everything except Firefox e.code === 22 || // Firefox e.code === 1014 || // test name field too, because code might not be present // everything except Firefox e.name === 'QuotaExceededError' || // Firefox e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored storage.length !== 0; } }, save: function(hash) { window.localStorage.setItem('hash', hash); }, restore: function() { return window.localStorage.getItem('hash'); }, delete: function() { window.localStorage.removeItem(\"hash\"); } } :: Start <% if(window.storage.ok()) { %> Window storage works! <% } %> <% if(window.storage.restore()) { %> There is a session saved! <% } %> [[Save the session hash?]] [[Restore from previous session?]] [[Delete previous session?]] :: Save the session hash? The hash is <%= window.story.saveHash() %>. It has been saved! <% if(window.storage.ok()) { window.storage.save(window.story.saveHash()) }%> [[Go back?|Start]] :: Restore from previous session? <% if(window.storage.ok()) { if(window.story.restore(window.storage.restore()) ) { %> The restore was successful! <% } } %> [[Go back?|Start]] :: Delete previous session? <% window.storage.delete() %> [[Go back?|Start]] Download: Twee Code","title":"Twee Code"},{"location":"savinggames/sugarcube/sugarcube_savinggames.html","text":"\"Saving Games\": SugarCube (v2.18) \u00b6 Summary \u00b6 SugarCube provides built-in functionality for saving, viewing, and deleting game saves through its sidebar. However, the Save API also provides programmable access for re-creating this for users through functions like Save.slots.has()* , Save.slots.save() , and *Save.slots.load() . This example also demonstrates the use of the State.variables object to access variables in JavaScript and use them. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Saving Games in SugarCube :: Start <<script>> if (Save.slots.has(0)) { State.variables.slotA = true; } else { State.variables.slotA = false; } <</script>> <<if $slotA is true>> The first game slot exists! (This session was most likely reloaded from a game save.) <</if>> <<link \"Save to the first slot?\">> <<script>> if (Save.slots.ok()) { Save.slots.save(0); } <</script>> <</link>> <<link \"Load from the first slot?\">> <<script>> if (Save.slots.has(0)) { Save.slots.load(0); } <</script>> <</link>> <<link \"Delete first slot and restart story?\">> <<script>> if (Save.slots.has(0)) { Save.slots.delete(0); Engine.restart(); } <</script>> <</link>> Download: Twee Code","title":"SugarCube"},{"location":"savinggames/sugarcube/sugarcube_savinggames.html#saving-games-sugarcube-v218","text":"","title":"\"Saving Games\": SugarCube (v2.18)"},{"location":"savinggames/sugarcube/sugarcube_savinggames.html#summary","text":"SugarCube provides built-in functionality for saving, viewing, and deleting game saves through its sidebar. However, the Save API also provides programmable access for re-creating this for users through functions like Save.slots.has()* , Save.slots.save() , and *Save.slots.load() . This example also demonstrates the use of the State.variables object to access variables in JavaScript and use them.","title":"Summary"},{"location":"savinggames/sugarcube/sugarcube_savinggames.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"savinggames/sugarcube/sugarcube_savinggames.html#twee-code","text":":: StoryTitle Saving Games in SugarCube :: Start <<script>> if (Save.slots.has(0)) { State.variables.slotA = true; } else { State.variables.slotA = false; } <</script>> <<if $slotA is true>> The first game slot exists! (This session was most likely reloaded from a game save.) <</if>> <<link \"Save to the first slot?\">> <<script>> if (Save.slots.ok()) { Save.slots.save(0); } <</script>> <</link>> <<link \"Load from the first slot?\">> <<script>> if (Save.slots.has(0)) { Save.slots.load(0); } <</script>> <</link>> <<link \"Delete first slot and restart story?\">> <<script>> if (Save.slots.has(0)) { Save.slots.delete(0); Engine.restart(); } <</script>> <</link>> Download: Twee Code","title":"Twee Code"},{"location":"settingandshowing/chapbook/chapbook_settingandshowing.html","text":"\"Setting and Showing Variables\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 In Chapbook all variables are initialised and updated within the Vars Section of a passage, this section is always added at the beginning of the passage and there can only be one such section per passage. The Vars Section is separated from the passage's normal text by two dashes ( -- ); The value of a variable can be displayed using the {insert} insert. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Setting and Showing Variables in Chapbook :: Start numberVariable: 5 wordVariable: \"five\" phraseVariable: \"The value\" -- {phraseVariable} is {numberVariable} and {wordVariable}. {embed passage: \"Increment number\"} The number variable was incremented by one to {numberVariable}. :: Increment number numberVariable: numberVariable + 1 -- Download: Twee Code","title":"Chapbook"},{"location":"settingandshowing/chapbook/chapbook_settingandshowing.html#setting-and-showing-variables-chapbook-v100","text":"","title":"\"Setting and Showing Variables\": Chapbook (v1.0.0)"},{"location":"settingandshowing/chapbook/chapbook_settingandshowing.html#summary","text":"In Chapbook all variables are initialised and updated within the Vars Section of a passage, this section is always added at the beginning of the passage and there can only be one such section per passage. The Vars Section is separated from the passage's normal text by two dashes ( -- ); The value of a variable can be displayed using the {insert} insert.","title":"Summary"},{"location":"settingandshowing/chapbook/chapbook_settingandshowing.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"settingandshowing/chapbook/chapbook_settingandshowing.html#twee-code","text":":: StoryTitle Setting and Showing Variables in Chapbook :: Start numberVariable: 5 wordVariable: \"five\" phraseVariable: \"The value\" -- {phraseVariable} is {numberVariable} and {wordVariable}. {embed passage: \"Increment number\"} The number variable was incremented by one to {numberVariable}. :: Increment number numberVariable: numberVariable + 1 -- Download: Twee Code","title":"Twee Code"},{"location":"settingandshowing/harlowe/harlowe_settingandshowing.html","text":"\"Setting and Showing Variables\": Harlowe (v2.0) \u00b6 Summary \u00b6 Variables, symbols starting with $ (for story-wide) or _ (for temporary), can be \"set\" using the (set:) macro in Harlowe. $ is used for storing data throughout the story, and _ should be used for data only needed in the current passage. Using _ is useful for not wanting to accidentally overwrite variables elsewhere in the story. They can also help with debugging through not cluttering up the variables list of future passages. In Harlowe, the keyword it can also be used as a shortcut for changing and saving a value in reference to itself. The it refers to the first variable named in the macro. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Setting and Showing Variables in Harlowe :: Start (set: $numberVariable to 5) (set: $textVariable to \"five\") (set: _textVariable to \"The values\") _textVariable are $numberVariable and $textVariable. (set: $numberVariable to it + 1) _textVariable are $numberVariable and $textVariable. Download: Twee Code","title":"Harlowe"},{"location":"settingandshowing/harlowe/harlowe_settingandshowing.html#setting-and-showing-variables-harlowe-v20","text":"","title":"\"Setting and Showing Variables\": Harlowe (v2.0)"},{"location":"settingandshowing/harlowe/harlowe_settingandshowing.html#summary","text":"Variables, symbols starting with $ (for story-wide) or _ (for temporary), can be \"set\" using the (set:) macro in Harlowe. $ is used for storing data throughout the story, and _ should be used for data only needed in the current passage. Using _ is useful for not wanting to accidentally overwrite variables elsewhere in the story. They can also help with debugging through not cluttering up the variables list of future passages. In Harlowe, the keyword it can also be used as a shortcut for changing and saving a value in reference to itself. The it refers to the first variable named in the macro.","title":"Summary"},{"location":"settingandshowing/harlowe/harlowe_settingandshowing.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"settingandshowing/harlowe/harlowe_settingandshowing.html#twee-code","text":":: StoryTitle Setting and Showing Variables in Harlowe :: Start (set: $numberVariable to 5) (set: $textVariable to \"five\") (set: _textVariable to \"The values\") _textVariable are $numberVariable and $textVariable. (set: $numberVariable to it + 1) _textVariable are $numberVariable and $textVariable. Download: Twee Code","title":"Twee Code"},{"location":"settingandshowing/snowman/snowman_settingandshowing.html","text":"\"Setting and Showing Variables\": Snowman (v1.3.0) \u00b6 Summary \u00b6 In Snowman, the s global variable can be used to store and retrieve values. Properties can be created and assigned freely. The Underscore template functionality can be used to define, change, and show the values of variables. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Setting and Showing Variables in Snowman :: Start <% s.numberVariable = 5; s.wordVariable = \"five\"; s.phraseVariable = \"The value\"; %> <%= s.phraseVariable %> is <%= s.numberVariable %> and <%= s.wordVariable %>. <% s.numberVariable++; %> <%= s.phraseVariable %> is <%= s.numberVariable %> and <%= s.wordVariable%>. Download: Twee Code","title":"Snowman"},{"location":"settingandshowing/snowman/snowman_settingandshowing.html#setting-and-showing-variables-snowman-v130","text":"","title":"\"Setting and Showing Variables\": Snowman (v1.3.0)"},{"location":"settingandshowing/snowman/snowman_settingandshowing.html#summary","text":"In Snowman, the s global variable can be used to store and retrieve values. Properties can be created and assigned freely. The Underscore template functionality can be used to define, change, and show the values of variables.","title":"Summary"},{"location":"settingandshowing/snowman/snowman_settingandshowing.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"settingandshowing/snowman/snowman_settingandshowing.html#twee-code","text":":: StoryTitle Setting and Showing Variables in Snowman :: Start <% s.numberVariable = 5; s.wordVariable = \"five\"; s.phraseVariable = \"The value\"; %> <%= s.phraseVariable %> is <%= s.numberVariable %> and <%= s.wordVariable %>. <% s.numberVariable++; %> <%= s.phraseVariable %> is <%= s.numberVariable %> and <%= s.wordVariable%>. Download: Twee Code","title":"Twee Code"},{"location":"settingandshowing/sugarcube/sugarcube_settingandshowing.html","text":"\"Setting and Showing Variables\": SugarCube (v2.18) \u00b6 Summary \u00b6 Variables, symbols starting with $ (for normal) or _ (for temporary), can be \"set\" using the <<set>> macro in SugarCube. $ is used for storing data throughout the story, and _ should be used for data only needed in the current passage. Using _ is useful for not wanting to accidentally overwrite variables elsewhere in the story. They can also help with debugging through not cluttering up the variables list of future passages. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Setting and Showing Variables in SugarCube :: Start <<set $numberVariable to 5>> <<set $wordVariable to \"five\">> <<set $phraseVariable to \"The value\">> $phraseVariable is $numberVariable and $wordVariable. <<set $numberVariable to $numberVariable + 1>> $phraseVariable is $numberVariable and $wordVariable. Download: Twee Code","title":"SugarCube"},{"location":"settingandshowing/sugarcube/sugarcube_settingandshowing.html#setting-and-showing-variables-sugarcube-v218","text":"","title":"\"Setting and Showing Variables\": SugarCube (v2.18)"},{"location":"settingandshowing/sugarcube/sugarcube_settingandshowing.html#summary","text":"Variables, symbols starting with $ (for normal) or _ (for temporary), can be \"set\" using the <<set>> macro in SugarCube. $ is used for storing data throughout the story, and _ should be used for data only needed in the current passage. Using _ is useful for not wanting to accidentally overwrite variables elsewhere in the story. They can also help with debugging through not cluttering up the variables list of future passages.","title":"Summary"},{"location":"settingandshowing/sugarcube/sugarcube_settingandshowing.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"settingandshowing/sugarcube/sugarcube_settingandshowing.html#twee-code","text":":: StoryTitle Setting and Showing Variables in SugarCube :: Start <<set $numberVariable to 5>> <<set $wordVariable to \"five\">> <<set $phraseVariable to \"The value\">> $phraseVariable is $numberVariable and $wordVariable. <<set $numberVariable to $numberVariable + 1>> $phraseVariable is $numberVariable and $wordVariable. Download: Twee Code","title":"Twee Code"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html","text":"\"Left Sidebar\": Harlowe (both v1.x and v2.x series) \u00b6 Summary \u00b6 Harlowe has a built-in left sidebar. Before v2.1.0, however, there was no functionality to add dynamic content. It is possible to re-purpose a \"footer\" tagged passage to act as a custom sidebar to display dynamic content below Harlowe's own sidebar. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Left Sidebar in Harlowe :: UserStylesheet [stylesheet] /* Reposition the Sidebar 'footer' tagged passage. */ tw-include[title=\"Sidebar\"] { position: fixed; top: 0; left: 0; width: 20%; /* padding-right of the tw-story element. */ max-height: 100%; margin-top: calc(5% + 171px); /* padding-top of the tw-story element plus computed height of the tw-sidebar element. */ padding: 0.5em; background-color: transparent; text-align: right; } :: Start (set: $name to \"Jane Doe\", $location to \"Work\")\\ [[Another passage]] :: Sidebar [footer] Name: $name Location: $location :: Another passage (set: $name to \"John Smith\", $location to \"Shop\")\\ [[Start]] Download: Twee Code See Also \u00b6 CSS and Passage Tags","title":"Harlowe (both v1.x and v2.x series)"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html#left-sidebar-harlowe-both-v1x-and-v2x-series","text":"","title":"\"Left Sidebar\": Harlowe (both v1.x and v2.x series)"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html#summary","text":"Harlowe has a built-in left sidebar. Before v2.1.0, however, there was no functionality to add dynamic content. It is possible to re-purpose a \"footer\" tagged passage to act as a custom sidebar to display dynamic content below Harlowe's own sidebar.","title":"Summary"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html#twee-code","text":":: StoryTitle Left Sidebar in Harlowe :: UserStylesheet [stylesheet] /* Reposition the Sidebar 'footer' tagged passage. */ tw-include[title=\"Sidebar\"] { position: fixed; top: 0; left: 0; width: 20%; /* padding-right of the tw-story element. */ max-height: 100%; margin-top: calc(5% + 171px); /* padding-top of the tw-story element plus computed height of the tw-sidebar element. */ padding: 0.5em; background-color: transparent; text-align: right; } :: Start (set: $name to \"Jane Doe\", $location to \"Work\")\\ [[Another passage]] :: Sidebar [footer] Name: $name Location: $location :: Another passage (set: $name to \"John Smith\", $location to \"Shop\")\\ [[Start]] Download: Twee Code","title":"Twee Code"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html#see-also","text":"CSS and Passage Tags","title":"See Also"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html","text":"\"Left Sidebar\": Harlowe (only v2.1.0 or later) \u00b6 Summary \u00b6 Harlowe v2.1.0 or later includes a built-in named hook named ?Sidebar . When combined with the (append:) macro, dynamic content can be added to the left, blank area containing the default Undo and Redo links. A \"footer\" tagged passage is used to update the dynamic content after each passage transition, and CSS is used to resize and position the existing <tw-sidebar> element. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Left Sidebar in Harlowe (v2.1.0 or later) :: UserStylesheet [stylesheet] /* Reposition the Sidebar 'footer' tagged passage. */ tw-sidebar { position: fixed; top: 0; left: 0; width: 20%; /* padding-right of the tw-story element. */ max-height: 100%; margin-top: 5%; /* padding-top of the tw-story element. */ padding: 0 0.5em 0.5em 0.5em; text-align: right; background-color: transparent; } tw-icon { text-align: right; padding-right: 0.75em; } :: Start (set: $name to \"Jane Doe\", $location to \"Work\")\\ [[Another passage]] :: Sidebar [footer] (append: ?SideBar)[\\ Name: $name Location: $location ] :: Another passage (set: $name to \"John Smith\", $location to \"Shop\")\\ [[Start]] Download: Twee Code See Also \u00b6 CSS and Passage Tags","title":"Harlowe (v2.1.0 or later)"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html#left-sidebar-harlowe-only-v210-or-later","text":"","title":"\"Left Sidebar\": Harlowe (only v2.1.0 or later)"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html#summary","text":"Harlowe v2.1.0 or later includes a built-in named hook named ?Sidebar . When combined with the (append:) macro, dynamic content can be added to the left, blank area containing the default Undo and Redo links. A \"footer\" tagged passage is used to update the dynamic content after each passage transition, and CSS is used to resize and position the existing <tw-sidebar> element.","title":"Summary"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html#twee-code","text":":: StoryTitle Left Sidebar in Harlowe (v2.1.0 or later) :: UserStylesheet [stylesheet] /* Reposition the Sidebar 'footer' tagged passage. */ tw-sidebar { position: fixed; top: 0; left: 0; width: 20%; /* padding-right of the tw-story element. */ max-height: 100%; margin-top: 5%; /* padding-top of the tw-story element. */ padding: 0 0.5em 0.5em 0.5em; text-align: right; background-color: transparent; } tw-icon { text-align: right; padding-right: 0.75em; } :: Start (set: $name to \"Jane Doe\", $location to \"Work\")\\ [[Another passage]] :: Sidebar [footer] (append: ?SideBar)[\\ Name: $name Location: $location ] :: Another passage (set: $name to \"John Smith\", $location to \"Shop\")\\ [[Start]] Download: Twee Code","title":"Twee Code"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html#see-also","text":"CSS and Passage Tags","title":"See Also"},{"location":"sidebar_left/snowman/snowman_sidebar_left.html","text":"\"Left Sidebar\": Snowman (v1.3.0) \u00b6 Summary \u00b6 Snowman does not have a built-in sidebar, but one can be created using JavaScript, jQuery , and CSS. The createElement() function is used to create a new DIV element into which the generated output of the Sidebar passage will later be added. This new DIV is assigned an ID of \"sidebar\" using the attr() function and then inserted into the story's Document Object Model (DOM) using the insertBefore() function. Snowman triggers a \"showpassage:after\" event after each passage is shown. The on() function can be used to monitor for this event. Once it has occurred, a combination of the html() and window.story.render() functions can be used to display the dynamic contents of the Sidebar passage within the \"sidebar\" DIV element. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Left Sidebar in Snowman :: UserScript [script] /* Create the element to display the contents of the Sidebar passage in. */ $(document.createElement('div')) .attr('id', 'sidebar') .insertBefore('#passage'); /* Monitor for the event that is triggered after the current Passage has been shown. */ $(window).on('showpassage:after', function () { $('#sidebar').html(window.story.render(\"Sidebar\")); }); :: UserStylesheet[stylesheet] #passage { margin-left: 20%; } #sidebar { position: fixed; top: 0; left: 0; width: 18%; height: 100%; margin: 0; padding: 0.5em; background-color: black; color: white; } :: Start <% s.name = \"Jane Doe\"; s.location = \"Work\" %> [[Another passage]] :: Sidebar Name: <%= s.name %><br> Location: <%= s.location %> :: Another passage <% s.name = \"John Smith\"; s.location = \"Shop\" %> [[Start]] Download: Twee Code","title":"Snowman"},{"location":"sidebar_left/snowman/snowman_sidebar_left.html#left-sidebar-snowman-v130","text":"","title":"\"Left Sidebar\": Snowman (v1.3.0)"},{"location":"sidebar_left/snowman/snowman_sidebar_left.html#summary","text":"Snowman does not have a built-in sidebar, but one can be created using JavaScript, jQuery , and CSS. The createElement() function is used to create a new DIV element into which the generated output of the Sidebar passage will later be added. This new DIV is assigned an ID of \"sidebar\" using the attr() function and then inserted into the story's Document Object Model (DOM) using the insertBefore() function. Snowman triggers a \"showpassage:after\" event after each passage is shown. The on() function can be used to monitor for this event. Once it has occurred, a combination of the html() and window.story.render() functions can be used to display the dynamic contents of the Sidebar passage within the \"sidebar\" DIV element.","title":"Summary"},{"location":"sidebar_left/snowman/snowman_sidebar_left.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"sidebar_left/snowman/snowman_sidebar_left.html#twee-code","text":":: StoryTitle Left Sidebar in Snowman :: UserScript [script] /* Create the element to display the contents of the Sidebar passage in. */ $(document.createElement('div')) .attr('id', 'sidebar') .insertBefore('#passage'); /* Monitor for the event that is triggered after the current Passage has been shown. */ $(window).on('showpassage:after', function () { $('#sidebar').html(window.story.render(\"Sidebar\")); }); :: UserStylesheet[stylesheet] #passage { margin-left: 20%; } #sidebar { position: fixed; top: 0; left: 0; width: 18%; height: 100%; margin: 0; padding: 0.5em; background-color: black; color: white; } :: Start <% s.name = \"Jane Doe\"; s.location = \"Work\" %> [[Another passage]] :: Sidebar Name: <%= s.name %><br> Location: <%= s.location %> :: Another passage <% s.name = \"John Smith\"; s.location = \"Shop\" %> [[Start]] Download: Twee Code","title":"Twee Code"},{"location":"sidebar_left/sugarcube/sugarcube_sidebar_left.html","text":"\"Left Sidebar\": SugarCube (v2.18) \u00b6 Summary \u00b6 SugarCube has a built-in left sidebar whose contents can be changed by adding one of several special passages to your story. The following list describes each of the special passages in the order that they appear vertically within the sidebar: StoryBanner appears directly above the story's Title. One use is to show the story's icon/image. StorySubtitle appears directly below the story's Title. One use is to show the story's version information. StoryAuthor is used to show the Author's information. StoryCaption is generally used to show dynamic information about the main character or the story's progress. StoryMenu appears directly above the Save button and is used to show custom menu items. StoryShare appears directly below the Restart button and is used to access a dialog containing Author's social media or web-site links. The sidebar can be manually stowed (hidden) and unstowed (revealed) by selecting the < or > icon in the sidebar's top right corner. The same effect can be achieved programmatically by using the UIBar global object and its UIBar.stow() and UIBar.unstow() functions. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Left Sidebar in SugarCube :: Start <<set $name to \"Jane Doe\", $location to \"Work\">>\\ [[Another passage]] <<link \"Stow the sidebar!\">> <<run UIBar.stow() >> <</link>> <<link \"Unstow the sidebar!\">> <<run UIBar.unstow() >> <</link>> :: StoryBanner <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"64\" height=\"64\"> :: StorySubtitle Version: 0.2.1 :: StoryAuthor by Anonymous :: StoryCaption Name: $name Location: $location :: StoryMenu [[New story link!|Start]] :: StoryShare [[Twinery|https://twinery.org/]] :: Another passage <<set $name to \"John Smith\", $location to \"Shop\">>\\ [[Start]] Download: Twee Code","title":"SugarCube"},{"location":"sidebar_left/sugarcube/sugarcube_sidebar_left.html#left-sidebar-sugarcube-v218","text":"","title":"\"Left Sidebar\": SugarCube (v2.18)"},{"location":"sidebar_left/sugarcube/sugarcube_sidebar_left.html#summary","text":"SugarCube has a built-in left sidebar whose contents can be changed by adding one of several special passages to your story. The following list describes each of the special passages in the order that they appear vertically within the sidebar: StoryBanner appears directly above the story's Title. One use is to show the story's icon/image. StorySubtitle appears directly below the story's Title. One use is to show the story's version information. StoryAuthor is used to show the Author's information. StoryCaption is generally used to show dynamic information about the main character or the story's progress. StoryMenu appears directly above the Save button and is used to show custom menu items. StoryShare appears directly below the Restart button and is used to access a dialog containing Author's social media or web-site links. The sidebar can be manually stowed (hidden) and unstowed (revealed) by selecting the < or > icon in the sidebar's top right corner. The same effect can be achieved programmatically by using the UIBar global object and its UIBar.stow() and UIBar.unstow() functions.","title":"Summary"},{"location":"sidebar_left/sugarcube/sugarcube_sidebar_left.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"sidebar_left/sugarcube/sugarcube_sidebar_left.html#twee-code","text":":: StoryTitle Left Sidebar in SugarCube :: Start <<set $name to \"Jane Doe\", $location to \"Work\">>\\ [[Another passage]] <<link \"Stow the sidebar!\">> <<run UIBar.stow() >> <</link>> <<link \"Unstow the sidebar!\">> <<run UIBar.unstow() >> <</link>> :: StoryBanner <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"64\" height=\"64\"> :: StorySubtitle Version: 0.2.1 :: StoryAuthor by Anonymous :: StoryCaption Name: $name Location: $location :: StoryMenu [[New story link!|Start]] :: StoryShare [[Twinery|https://twinery.org/]] :: Another passage <<set $name to \"John Smith\", $location to \"Shop\">>\\ [[Start]] Download: Twee Code","title":"Twee Code"},{"location":"spaceexploration/chapbook/chapbook_space_exploration.html","text":"\"Space Exploration\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example generates a system of four planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can \"Scan System\" and then choose to visit these planets for different outcomes based on a series of choices and the use of the Math.random() function. At the same time, the player must also balance the health of the ship, the number of jumps left, and the current fuel. These are displayed when visiting the \"Statistics\" passage. If any of them drop below 0, the game ends with an ending matching that statistic. This example uses a complex combination of the Vars Section , [JavaScript] modifier, and internal JavaScript functionality in Chapbook, including the use of the function window.go() . Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Space Exploration :: UserScript[script] // Add a randomRange // Used from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random Math.randomRange = (min, max) => { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min)) + min; }; :: Start health: 20 fuel: 4 system: [] numberOfJumpsLeft: 10 -- {embed passage: 'GenerateSystem'} [[Explore Space]] :: Explore Space {embed passage: \"CheckStatus\"} Current System: {embed passage: 'DisplaySystem'} <hr> [[Hyperjump]] [[Statistics]] :: GenerateSystem [JavaScript] // There will always be four (4) planets let planets = 4; // Reset global system let system = engine.state.get('system'); system = []; // Add 0 (Red) or 1 (Green) planets for(let i = 0; i < planets; i++) { // Get a random number from 0 to 2 // 0 = RED // 1 = GREEN // 2 = EMPTY system.push(Math.randomRange(0,3)); } // Update the new 'system' engine.state.set('system', system); :: CheckStatus [JavaScript] let health = engine.state.get(\"health\"); let fuel = engine.state.get(\"fuel\"); let numberOfJumpsLeft = engine.state.get(\"numberOfJumpsLeft\"); if(health <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Destroyed\"); }, 10); } if(fuel <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Lost in Space\"); }, 10); } if(numberOfJumpsLeft <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Safe\"); }, 10); } :: Destroyed The ship exploded in flight. Game Over. :: Lost in Space Without fuel, the ship tumbled and spun in the endless black. Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. Success! :: Hyperjump fuel: fuel - 1 numberOfJumpsLeft: numberOfJumpsLeft - 1 -- {embed passage: \"CheckStatus\"} {embed passage: \"GenerateSystem\"} [[Scan System->Explore Space]] :: DisplaySystem [if system[0] == 0] {reveal link: 'RED', passage: 'RED'} [if system[0] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[0] == 2] <br> [if system[1] == 0] {reveal link: 'RED', passage: 'RED'} [if system[1] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[1] == 2] <br> [if system[2] == 0] {reveal link: 'RED', passage: 'RED'} [if system[2] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[2] == 2] <br> [if system[3] == 0] {reveal link: 'RED', passage: 'RED'} [if system[3] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[3] == 2] <br> :: RED REPORT [JavaScript] let percentage = Math.randomRange(0, 11); let foundHealth; let foundFuel; let health = engine.state.get('health'); let fuel = engine.state.get('fuel'); if(percentage >= 6) { foundHealth = Math.randomRange(1, 6); foundFuel = Math.randomRange(1, 3); write(`The hostile environment damaged the ship, but extra fuel was found. (-${foundHealth} to health and +${foundFuel} to fuel.)`); health -= foundHealth; fuel += foundFuel; } if(percentage >= 3 && percentage < 6) { foundHealth = Math.randomRange(2, 8); write(`A hostile ship attacked. (-${foundHealth} to health)`); health -= foundHealth; } if(percentage < 3) { write(\"Nothing happened.\"); } engine.state.set('health', health); engine.state.set('fuel', fuel); [continued] {embed passage: \"CheckStatus\"} :: GREEN REPORT [JavaScript] let percentage = Math.randomRange(0, 11); let foundFuel = 0; let foundHealth = 0; let fuel = engine.state.get('fuel'); let health = engine.state.get('health'); if(percentage < 2) { foundFuel = Math.randomRange(1,3); write(`Fuel was found in some wreckage. (+${foundFuel} to fuel)`); fuel += foundFuel; } if(percentage > 6) { foundHealth = Math.randomRange(1,4); write(`During a brief pause, the ship was able to be repaired. (+${foundHealth} to health)`); health += foundHealth; } if(percentage > 2 && percentage < 6) { write(`Nothing happened.`); } engine.state.set('health', health); engine.state.set('fuel', fuel); [continued] {embed passage: \"CheckStatus\"} :: Statistics Health: {health} Fuel: {fuel} Number of Jumps Left: {numberOfJumpsLeft} {reveal link: 'Statistics', passage: 'Statistics'} Download: Twee Code","title":"Chapbook"},{"location":"spaceexploration/chapbook/chapbook_space_exploration.html#space-exploration-chapbook-v100","text":"","title":"\"Space Exploration\": Chapbook (v1.0.0)"},{"location":"spaceexploration/chapbook/chapbook_space_exploration.html#summary","text":"Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example generates a system of four planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can \"Scan System\" and then choose to visit these planets for different outcomes based on a series of choices and the use of the Math.random() function. At the same time, the player must also balance the health of the ship, the number of jumps left, and the current fuel. These are displayed when visiting the \"Statistics\" passage. If any of them drop below 0, the game ends with an ending matching that statistic. This example uses a complex combination of the Vars Section , [JavaScript] modifier, and internal JavaScript functionality in Chapbook, including the use of the function window.go() .","title":"Summary"},{"location":"spaceexploration/chapbook/chapbook_space_exploration.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"spaceexploration/chapbook/chapbook_space_exploration.html#twee-code","text":":: StoryTitle Chapbook: Space Exploration :: UserScript[script] // Add a randomRange // Used from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random Math.randomRange = (min, max) => { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min)) + min; }; :: Start health: 20 fuel: 4 system: [] numberOfJumpsLeft: 10 -- {embed passage: 'GenerateSystem'} [[Explore Space]] :: Explore Space {embed passage: \"CheckStatus\"} Current System: {embed passage: 'DisplaySystem'} <hr> [[Hyperjump]] [[Statistics]] :: GenerateSystem [JavaScript] // There will always be four (4) planets let planets = 4; // Reset global system let system = engine.state.get('system'); system = []; // Add 0 (Red) or 1 (Green) planets for(let i = 0; i < planets; i++) { // Get a random number from 0 to 2 // 0 = RED // 1 = GREEN // 2 = EMPTY system.push(Math.randomRange(0,3)); } // Update the new 'system' engine.state.set('system', system); :: CheckStatus [JavaScript] let health = engine.state.get(\"health\"); let fuel = engine.state.get(\"fuel\"); let numberOfJumpsLeft = engine.state.get(\"numberOfJumpsLeft\"); if(health <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Destroyed\"); }, 10); } if(fuel <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Lost in Space\"); }, 10); } if(numberOfJumpsLeft <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Safe\"); }, 10); } :: Destroyed The ship exploded in flight. Game Over. :: Lost in Space Without fuel, the ship tumbled and spun in the endless black. Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. Success! :: Hyperjump fuel: fuel - 1 numberOfJumpsLeft: numberOfJumpsLeft - 1 -- {embed passage: \"CheckStatus\"} {embed passage: \"GenerateSystem\"} [[Scan System->Explore Space]] :: DisplaySystem [if system[0] == 0] {reveal link: 'RED', passage: 'RED'} [if system[0] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[0] == 2] <br> [if system[1] == 0] {reveal link: 'RED', passage: 'RED'} [if system[1] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[1] == 2] <br> [if system[2] == 0] {reveal link: 'RED', passage: 'RED'} [if system[2] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[2] == 2] <br> [if system[3] == 0] {reveal link: 'RED', passage: 'RED'} [if system[3] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[3] == 2] <br> :: RED REPORT [JavaScript] let percentage = Math.randomRange(0, 11); let foundHealth; let foundFuel; let health = engine.state.get('health'); let fuel = engine.state.get('fuel'); if(percentage >= 6) { foundHealth = Math.randomRange(1, 6); foundFuel = Math.randomRange(1, 3); write(`The hostile environment damaged the ship, but extra fuel was found. (-${foundHealth} to health and +${foundFuel} to fuel.)`); health -= foundHealth; fuel += foundFuel; } if(percentage >= 3 && percentage < 6) { foundHealth = Math.randomRange(2, 8); write(`A hostile ship attacked. (-${foundHealth} to health)`); health -= foundHealth; } if(percentage < 3) { write(\"Nothing happened.\"); } engine.state.set('health', health); engine.state.set('fuel', fuel); [continued] {embed passage: \"CheckStatus\"} :: GREEN REPORT [JavaScript] let percentage = Math.randomRange(0, 11); let foundFuel = 0; let foundHealth = 0; let fuel = engine.state.get('fuel'); let health = engine.state.get('health'); if(percentage < 2) { foundFuel = Math.randomRange(1,3); write(`Fuel was found in some wreckage. (+${foundFuel} to fuel)`); fuel += foundFuel; } if(percentage > 6) { foundHealth = Math.randomRange(1,4); write(`During a brief pause, the ship was able to be repaired. (+${foundHealth} to health)`); health += foundHealth; } if(percentage > 2 && percentage < 6) { write(`Nothing happened.`); } engine.state.set('health', health); engine.state.set('fuel', fuel); [continued] {embed passage: \"CheckStatus\"} :: Statistics Health: {health} Fuel: {fuel} Number of Jumps Left: {numberOfJumpsLeft} {reveal link: 'Statistics', passage: 'Statistics'} Download: Twee Code","title":"Twee Code"},{"location":"spaceexploration/harlowe/harlowe_space_exploration.html","text":"\"Space Exploration\": Harlowe (v2.0) \u00b6 Summary \u00b6 Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the (random:) macro to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the (random:) macro. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the (display:) macro. Finally, to capture the permanence of many rogue-like games, the (go-to:) macro is used to prevent the use of the normal undo/redo operations in Harlowe. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Space Exploration in Harlowe :: Start [[Explore Space!|Explore Space 1]] :: Startup[startup] (set: $health to 20) (set: $fuel to 3) (set: $system to (a:) ) (set: $numberOfJumpsLeft to 10) :: Generate System { <!-- Save a range from 0 to a max of 3 (total of max 4) --> (set: _planets to (range: 0, (random: 1, 3) ) ) <!-- Reset system --> (set: $system to (a:) ) <!-- Create a new system based on the previous random range --> (for: each _i, ..._planets )[ <!-- Add to the new system, setting either RED or GREEN planets --> (set: $system to it + (a: (either: \"RED\", \"GREEN\") ) ) ] } :: HUD Health: $health Fuel: $fuel Number of Jumps Left: $numberOfJumpsLeft (display: \"Check Status\") :: Display System { (for: each _planet, ...$system)[ (if: _planet is \"RED\")[ (link: _planet)[ (display: \"Show Outcome - Red\") ] ] (if: _planet is \"GREEN\")[ (link: _planet)[ (display: \"Show Outcome - Green\") ] ] <br> ] } :: Explore Space 1 (link: \"Hyperjump\")[ (set: $fuel to it - 1) (set: $numberOfJumpsLeft to it - 1) (goto: \"Explore Space 2\") ] [(display: \"HUD\")]<HUD| (display: \"Generate System\") (display: \"Display System\") :: Show Outcome - Green { (set: _percentage to (random: 1, 10) ) (if: _percentage is 1)[ (set: _foundFuel to (random: 1, 2) ) Fuel was found in some wreckage. (+_foundFuel to fuel) (set: $fuel to it + _foundFuel) ] (else-if: _percentage is >= 6)[ (set: _foundHealth to (random: 1, 3) ) During a brief pause, the ship was able to be repaired. (+_foundHealth to health) (set: $health to it + _foundHealth ) ] (else:) [ Nothing happened. ] (replace: ?HUD)[(display: \"HUD\")] } :: Show Outcome - Red { (set: _percentage to (random: 1, 10) ) (if: _percentage is >= 6)[ (set: _foundHealth to (random: 1, 5) ) (set: _foundFuel to (random: 1, 3) ) The hostile environment damaged the ship, but extra fuel was found. (-_foundHealth to health and +_foundFuel to fuel) (set: $health to it - _foundHealth ) (set: $fuel to it + _foundFuel ) ] (else-if: _percentage <= 3)[ (set: _foundHealth to (random: 2, 7) ) A hostile ship attacked. (-_foundHealth to health) (set: $health to it - _foundHealth ) ] (else:)[ Nothing happened. ] (replace: ?HUD)[(display: \"HUD\")] } :: Explore Space 2 (link: \"Hyperjump\")[ (set: $fuel to it - 1) (set: $numberOfJumpsLeft to it - 1) (goto: \"Explore Space 1\") ] [(display: \"HUD\")]<HUD| (display: \"Generate System\") (display: \"Display System\") :: Check Status { (if: $health <= 0)[ (goto: \"Destroyed\") ] (if: $fuel <= 0)[ (goto: \"Lost in space\") ] (if: $numberOfJumpsLeft <= 0)[ (goto: \"Safe\") ] } :: Destroyed The ship exploded in flight. ###Game Over. :: Lost in space Without fuel, the ship tumbled and spun in the endless black. ###Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. ###Success! Download: Twee Code","title":"Harlowe"},{"location":"spaceexploration/harlowe/harlowe_space_exploration.html#space-exploration-harlowe-v20","text":"","title":"\"Space Exploration\": Harlowe (v2.0)"},{"location":"spaceexploration/harlowe/harlowe_space_exploration.html#summary","text":"Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the (random:) macro to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the (random:) macro. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the (display:) macro. Finally, to capture the permanence of many rogue-like games, the (go-to:) macro is used to prevent the use of the normal undo/redo operations in Harlowe.","title":"Summary"},{"location":"spaceexploration/harlowe/harlowe_space_exploration.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"spaceexploration/harlowe/harlowe_space_exploration.html#twee-code","text":":: StoryTitle Space Exploration in Harlowe :: Start [[Explore Space!|Explore Space 1]] :: Startup[startup] (set: $health to 20) (set: $fuel to 3) (set: $system to (a:) ) (set: $numberOfJumpsLeft to 10) :: Generate System { <!-- Save a range from 0 to a max of 3 (total of max 4) --> (set: _planets to (range: 0, (random: 1, 3) ) ) <!-- Reset system --> (set: $system to (a:) ) <!-- Create a new system based on the previous random range --> (for: each _i, ..._planets )[ <!-- Add to the new system, setting either RED or GREEN planets --> (set: $system to it + (a: (either: \"RED\", \"GREEN\") ) ) ] } :: HUD Health: $health Fuel: $fuel Number of Jumps Left: $numberOfJumpsLeft (display: \"Check Status\") :: Display System { (for: each _planet, ...$system)[ (if: _planet is \"RED\")[ (link: _planet)[ (display: \"Show Outcome - Red\") ] ] (if: _planet is \"GREEN\")[ (link: _planet)[ (display: \"Show Outcome - Green\") ] ] <br> ] } :: Explore Space 1 (link: \"Hyperjump\")[ (set: $fuel to it - 1) (set: $numberOfJumpsLeft to it - 1) (goto: \"Explore Space 2\") ] [(display: \"HUD\")]<HUD| (display: \"Generate System\") (display: \"Display System\") :: Show Outcome - Green { (set: _percentage to (random: 1, 10) ) (if: _percentage is 1)[ (set: _foundFuel to (random: 1, 2) ) Fuel was found in some wreckage. (+_foundFuel to fuel) (set: $fuel to it + _foundFuel) ] (else-if: _percentage is >= 6)[ (set: _foundHealth to (random: 1, 3) ) During a brief pause, the ship was able to be repaired. (+_foundHealth to health) (set: $health to it + _foundHealth ) ] (else:) [ Nothing happened. ] (replace: ?HUD)[(display: \"HUD\")] } :: Show Outcome - Red { (set: _percentage to (random: 1, 10) ) (if: _percentage is >= 6)[ (set: _foundHealth to (random: 1, 5) ) (set: _foundFuel to (random: 1, 3) ) The hostile environment damaged the ship, but extra fuel was found. (-_foundHealth to health and +_foundFuel to fuel) (set: $health to it - _foundHealth ) (set: $fuel to it + _foundFuel ) ] (else-if: _percentage <= 3)[ (set: _foundHealth to (random: 2, 7) ) A hostile ship attacked. (-_foundHealth to health) (set: $health to it - _foundHealth ) ] (else:)[ Nothing happened. ] (replace: ?HUD)[(display: \"HUD\")] } :: Explore Space 2 (link: \"Hyperjump\")[ (set: $fuel to it - 1) (set: $numberOfJumpsLeft to it - 1) (goto: \"Explore Space 1\") ] [(display: \"HUD\")]<HUD| (display: \"Generate System\") (display: \"Display System\") :: Check Status { (if: $health <= 0)[ (goto: \"Destroyed\") ] (if: $fuel <= 0)[ (goto: \"Lost in space\") ] (if: $numberOfJumpsLeft <= 0)[ (goto: \"Safe\") ] } :: Destroyed The ship exploded in flight. ###Game Over. :: Lost in space Without fuel, the ship tumbled and spun in the endless black. ###Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. ###Success! Download: Twee Code","title":"Twee Code"},{"location":"spaceexploration/snowman/snowman_space_exploration.html","text":"\"Space Exploration\": Snowman (v1.3.0) \u00b6 Summary \u00b6 Games in the roguelike genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the _ .random() function to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the _ .random() function. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the window.story.render() function in combination with Underscore.js templating . Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Space Exploration in Snowman :: UserScript[script] // Create a global setup object window.setup = window.setup || {}; // Add 'variables' object to setup window.setup.variables = {}; var _vars = window.setup.variables; _vars.health = 20; _vars.fuel = 4; _vars.system = []; _vars.numberOfJumpsLeft = 10; // Create global functions window.setup.functions = {}; var _functions = window.setup.functions; _functions.redOutcome = function() { var _vars = window.setup.variables; var _percentage = _.random(1, 10); var response = \"\"; if( _percentage >= 6) { var _foundHealth = _.random( 1, 5); var _foundFuel = _.random( 1, 3); response = \"The hostile environment damaged the ship, but extra fuel was found. -\" + _foundHealth + \" to health and +\" + _foundFuel + \" to fuel.\"; _vars.health -= _foundHealth; _vars.fuel += _foundFuel; } else { if( _percentage <= 3) { var _foundHealth = _.random(2, 7); response = \"A hostile ship attacked. -\" + _foundHealth + \" to health\"; _vars.health -= _foundHealth; } else { response = \"Nothing happened.\" } } return response; }; _functions.greenOutcome = function() { var _vars = window.setup.variables; var _percentage = _.random(1, 10); var response = \"\"; if( _percentage == 1) { var _foundFuel = _.random( 1, 2); response = \"Fuel was found in some wreckage. + \" + _foundFuel + \"to fuel\"; _vars.fuel += _foundFuel; } else { if( _percentage >= 6) { var _foundHealth = _.random(1, 3); response = \"During a brief pause, the ship was able to be repaired. +\" + _foundHealth + \" to health\"; _vars.health += _foundHealth; } else { response = \"Nothing happened.\" } } return response; }; :: Start [[Explore Space|Explore Space 1]] :: Explore Space 1 <div class=\"gameScreen\"> <% var _vars = window.setup.variables; %> <% _vars.fuel-- %> <% _vars.numberOfJumpsLeft-- %> [[ Hyperjump |Explore Space 2]] <div id=\"HUD\"> <%= window.story.render(\"HUD\") %> </div> <%= window.story.render(\"Generate System\") %> <div id=\"display\"></div> <%= window.story.render(\"Display System\") %> <%= window.story.render(\"Check Status\") %> </div> :: Explore Space 2 <div class=\"gameScreen\"> <% var _vars = window.setup.variables; %> <% _vars.fuel-- %> <% _vars.numberOfJumpsLeft-- %> [[ Hyperjump |Explore Space 1]] <div id=\"HUD\"> <%= window.story.render(\"HUD\") %> </div> <%= window.story.render(\"Generate System\") %> <div id=\"display\"></div> <%= window.story.render(\"Display System\") %> <%= window.story.render(\"Check Status\") %> </div> :: Generate System <script> var _vars = window.setup.variables; var planets =_.random(1, 4); _vars.system = new Array(planets); for(var i = 0; i < _vars.system.length; i++) { _vars.system[i] = _.sample([\"RED\", \"GREEN\"]); } </script> :: Display System <script> var _vars = window.setup.variables; // Wipe out current contents $(\"#display\").html(\"\"); for(var i = 0; i < _vars.system.length; i++) { if(_vars.system[i] == \"RED\") { var link = $(\"<a href='#'>RED</a>\") .click(function(e) { $( this ) .replaceWith( window.story.render(\"Show Outcome - Red\") ); return false; }); $(\"#display\").append( link ); $(\"#display\").append( \"<br>\" ); } if(_vars.system[i] == \"GREEN\") { var link = $(\"<a href='#'>GREEN</a>\") .click(function(e) { $( this ) .replaceWith( window.story.render(\"Show Outcome - Green\") ); return false; }); $(\"#display\").append( link ); $(\"#display\").append( \"<br>\" ); } } </script> :: Show Outcome - Red <%= window.setup.functions.redOutcome() %> <% $(\"#HUD\").html(window.story.render(\"HUD\")) %> <%= window.story.render(\"Check Status\") %> :: Show Outcome - Green <%= window.setup.functions.greenOutcome() %> <% $(\"#HUD\").html(window.story.render(\"HUD\")) %> <%= window.story.render(\"Check Status\") %> :: HUD Health: <%= window.setup.variables.health %> <br> Fuel: <%= window.setup.variables.fuel %> <br> Number of Jumps Left: <%= setup.variables.numberOfJumpsLeft %> <br> :: Destroyed The ship exploded in flight. <h3>Game Over</h3> :: Lost in space Without fuel, the ship tumbled and spun in the endless black. <h3>Game Over</h3> :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. <h3>Success!</h3> :: Check Status <script> var _vars = window.setup.variables; var status = \"\"; if(_vars.health <= 0) { status = window.story.render(\"Destroyed\"); } if(_vars.fuel <= 0) { status = window.story.render(\"Lost in space\"); } if(_vars.numberOfJumpsLeft <= 0) { status = window.story.render(\"Safe\"); } if(status != \"\") { $(\".gameScreen\").html(status); } </script> Download: Twee Code","title":"Snowman"},{"location":"spaceexploration/snowman/snowman_space_exploration.html#space-exploration-snowman-v130","text":"","title":"\"Space Exploration\": Snowman (v1.3.0)"},{"location":"spaceexploration/snowman/snowman_space_exploration.html#summary","text":"Games in the roguelike genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the _ .random() function to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the _ .random() function. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the window.story.render() function in combination with Underscore.js templating .","title":"Summary"},{"location":"spaceexploration/snowman/snowman_space_exploration.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"spaceexploration/snowman/snowman_space_exploration.html#twee-code","text":":: StoryTitle Space Exploration in Snowman :: UserScript[script] // Create a global setup object window.setup = window.setup || {}; // Add 'variables' object to setup window.setup.variables = {}; var _vars = window.setup.variables; _vars.health = 20; _vars.fuel = 4; _vars.system = []; _vars.numberOfJumpsLeft = 10; // Create global functions window.setup.functions = {}; var _functions = window.setup.functions; _functions.redOutcome = function() { var _vars = window.setup.variables; var _percentage = _.random(1, 10); var response = \"\"; if( _percentage >= 6) { var _foundHealth = _.random( 1, 5); var _foundFuel = _.random( 1, 3); response = \"The hostile environment damaged the ship, but extra fuel was found. -\" + _foundHealth + \" to health and +\" + _foundFuel + \" to fuel.\"; _vars.health -= _foundHealth; _vars.fuel += _foundFuel; } else { if( _percentage <= 3) { var _foundHealth = _.random(2, 7); response = \"A hostile ship attacked. -\" + _foundHealth + \" to health\"; _vars.health -= _foundHealth; } else { response = \"Nothing happened.\" } } return response; }; _functions.greenOutcome = function() { var _vars = window.setup.variables; var _percentage = _.random(1, 10); var response = \"\"; if( _percentage == 1) { var _foundFuel = _.random( 1, 2); response = \"Fuel was found in some wreckage. + \" + _foundFuel + \"to fuel\"; _vars.fuel += _foundFuel; } else { if( _percentage >= 6) { var _foundHealth = _.random(1, 3); response = \"During a brief pause, the ship was able to be repaired. +\" + _foundHealth + \" to health\"; _vars.health += _foundHealth; } else { response = \"Nothing happened.\" } } return response; }; :: Start [[Explore Space|Explore Space 1]] :: Explore Space 1 <div class=\"gameScreen\"> <% var _vars = window.setup.variables; %> <% _vars.fuel-- %> <% _vars.numberOfJumpsLeft-- %> [[ Hyperjump |Explore Space 2]] <div id=\"HUD\"> <%= window.story.render(\"HUD\") %> </div> <%= window.story.render(\"Generate System\") %> <div id=\"display\"></div> <%= window.story.render(\"Display System\") %> <%= window.story.render(\"Check Status\") %> </div> :: Explore Space 2 <div class=\"gameScreen\"> <% var _vars = window.setup.variables; %> <% _vars.fuel-- %> <% _vars.numberOfJumpsLeft-- %> [[ Hyperjump |Explore Space 1]] <div id=\"HUD\"> <%= window.story.render(\"HUD\") %> </div> <%= window.story.render(\"Generate System\") %> <div id=\"display\"></div> <%= window.story.render(\"Display System\") %> <%= window.story.render(\"Check Status\") %> </div> :: Generate System <script> var _vars = window.setup.variables; var planets =_.random(1, 4); _vars.system = new Array(planets); for(var i = 0; i < _vars.system.length; i++) { _vars.system[i] = _.sample([\"RED\", \"GREEN\"]); } </script> :: Display System <script> var _vars = window.setup.variables; // Wipe out current contents $(\"#display\").html(\"\"); for(var i = 0; i < _vars.system.length; i++) { if(_vars.system[i] == \"RED\") { var link = $(\"<a href='#'>RED</a>\") .click(function(e) { $( this ) .replaceWith( window.story.render(\"Show Outcome - Red\") ); return false; }); $(\"#display\").append( link ); $(\"#display\").append( \"<br>\" ); } if(_vars.system[i] == \"GREEN\") { var link = $(\"<a href='#'>GREEN</a>\") .click(function(e) { $( this ) .replaceWith( window.story.render(\"Show Outcome - Green\") ); return false; }); $(\"#display\").append( link ); $(\"#display\").append( \"<br>\" ); } } </script> :: Show Outcome - Red <%= window.setup.functions.redOutcome() %> <% $(\"#HUD\").html(window.story.render(\"HUD\")) %> <%= window.story.render(\"Check Status\") %> :: Show Outcome - Green <%= window.setup.functions.greenOutcome() %> <% $(\"#HUD\").html(window.story.render(\"HUD\")) %> <%= window.story.render(\"Check Status\") %> :: HUD Health: <%= window.setup.variables.health %> <br> Fuel: <%= window.setup.variables.fuel %> <br> Number of Jumps Left: <%= setup.variables.numberOfJumpsLeft %> <br> :: Destroyed The ship exploded in flight. <h3>Game Over</h3> :: Lost in space Without fuel, the ship tumbled and spun in the endless black. <h3>Game Over</h3> :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. <h3>Success!</h3> :: Check Status <script> var _vars = window.setup.variables; var status = \"\"; if(_vars.health <= 0) { status = window.story.render(\"Destroyed\"); } if(_vars.fuel <= 0) { status = window.story.render(\"Lost in space\"); } if(_vars.numberOfJumpsLeft <= 0) { status = window.story.render(\"Safe\"); } if(status != \"\") { $(\".gameScreen\").html(status); } </script> Download: Twee Code","title":"Twee Code"},{"location":"spaceexploration/sugarcube/sugarcube_space_exploration.html","text":"\"Space Exploration\": SugarCube (v2.18) \u00b6 Summary \u00b6 Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the random() function to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the random() function. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the <<include>> macro. Finally, to capture the permanence of many roguelike games, the <<goto>> macro is used to prevent the use of the normal undo/redo in SugarCube. To cleanly present the text, this example also uses both the <<silently>> macro, to disregard all output, and <<nobr>> macro, to collapse the whitespace. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Space Exploration in SugarCube :: Start [[Explore Space|Explore Space 1]] :: StoryInit <<set $health to 20>> <<set $fuel to 4>> <<set $system to [] >> <<set $numberOfJumpsLeft to 10>> :: Explore Space 1 <<link \"Hyperjump\">> <<set $fuel to $fuel - 1>> <<set $numberOfJumpsLeft to $numberOfJumpsLeft - 1>> <<goto \"Explore Space 2\">> <</link>> <div id=\"HUD\"> <<include \"HUD\">> </div> <<include \"Generate System\">> <<include \"Display System\">> :: Explore Space 2 <<link \"Hyperjump\">> <<set $fuel to $fuel - 1>> <<set $numberOfJumpsLeft to $numberOfJumpsLeft - 1>> <<goto \"Explore Space 1\">> <</link>> <div id=\"HUD\"> <<include \"HUD\">> </div> <<include \"Generate System\">> <<include \"Display System\">> :: Generate System <<silently>> <<set _planets to random(1, 4) >> <<set $system to new Array(_planets) >> <<for _i to 0; _i lt _planets; _i++>> <<set $system[_i] to either(\"RED\", \"GREEN\") >> <</for>> <</silently>> :: Display System <<nobr>> <<for _i to 0; _i lt $system.length; _i++>> <<if $system[_i] eq \"RED\">> <<linkreplace $system[_i]>> <<include \"Show Outcome - Red\">> <</linkreplace>> <</if>> <<if $system[_i] eq \"GREEN\">> <<linkreplace $system[_i]>> <<include \"Show Outcome - Green\">> <</linkreplace>> <</if>> <br> <</for>> <</nobr>> :: Show Outcome - Red <<nobr>> <<set _percentage to random(1, 10) >> <<if _percentage gte 6>> <<set _foundHealth to random( 1, 5) >> <<set _foundFuel to random( 1, 3) >> The hostile environment damaged the ship, but extra fuel was found. (-_foundHealth to health and +_foundFuel to fuel) <<set $health to $health - _foundHealth >> <<set $fuel to $fuel + _foundFuel >> <<elseif _percentage lte 3>> <<set _foundHealth to random(2, 7) >> A hostile ship attacked. (-_foundHealth to health) <<set $health to $health - _foundHealth >> <<else>> Nothing happened. <</if>> <<replace \"#HUD\">> <<include \"HUD\">> <</replace>> <</nobr>> :: Show Outcome - Green <<nobr>> <<set _percentage to random(1, 10)>> <<if _percentage eq 1>> <<set _foundFuel to random( 1, 2)>> Fuel was found in some wreckage. (+_foundFuel to fuel) <<set $fuel to $fuel + _foundFuel>> <<elseif _percentage gte 6>> <<set _foundHealth to random( 1, 3) >> During a brief pause, the ship was able to be repaired. (+_foundHealth to health) <<set $health to $health + _foundHealth>> <<else>> Nothing happened. <</if>> <<replace \"#HUD\">> <<include \"HUD\">> <</replace>> <</nobr>> :: HUD Health: $health Fuel: $fuel Number of Jumps Left: $numberOfJumpsLeft <<include \"Check Status\">> :: Destroyed The ship exploded in flight. !!!Game Over. :: Lost in space Without fuel, the ship tumbled and spun in the endless black. !!!Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. !!!Success! :: Check Status <<nobr>> <<if $health lte 0>> <<goto \"Destroyed\">> <</if>> <<if $fuel lte 0>> <<goto \"Lost in space\">> <</if>> <<if $numberOfJumpsLeft lte 0>> <<goto \"Safe\">> <</if>> <</nobr>> Download: Twee Code","title":"SugarCube"},{"location":"spaceexploration/sugarcube/sugarcube_space_exploration.html#space-exploration-sugarcube-v218","text":"","title":"\"Space Exploration\": SugarCube (v2.18)"},{"location":"spaceexploration/sugarcube/sugarcube_space_exploration.html#summary","text":"Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the random() function to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the random() function. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the <<include>> macro. Finally, to capture the permanence of many roguelike games, the <<goto>> macro is used to prevent the use of the normal undo/redo in SugarCube. To cleanly present the text, this example also uses both the <<silently>> macro, to disregard all output, and <<nobr>> macro, to collapse the whitespace.","title":"Summary"},{"location":"spaceexploration/sugarcube/sugarcube_space_exploration.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"spaceexploration/sugarcube/sugarcube_space_exploration.html#twee-code","text":":: StoryTitle Space Exploration in SugarCube :: Start [[Explore Space|Explore Space 1]] :: StoryInit <<set $health to 20>> <<set $fuel to 4>> <<set $system to [] >> <<set $numberOfJumpsLeft to 10>> :: Explore Space 1 <<link \"Hyperjump\">> <<set $fuel to $fuel - 1>> <<set $numberOfJumpsLeft to $numberOfJumpsLeft - 1>> <<goto \"Explore Space 2\">> <</link>> <div id=\"HUD\"> <<include \"HUD\">> </div> <<include \"Generate System\">> <<include \"Display System\">> :: Explore Space 2 <<link \"Hyperjump\">> <<set $fuel to $fuel - 1>> <<set $numberOfJumpsLeft to $numberOfJumpsLeft - 1>> <<goto \"Explore Space 1\">> <</link>> <div id=\"HUD\"> <<include \"HUD\">> </div> <<include \"Generate System\">> <<include \"Display System\">> :: Generate System <<silently>> <<set _planets to random(1, 4) >> <<set $system to new Array(_planets) >> <<for _i to 0; _i lt _planets; _i++>> <<set $system[_i] to either(\"RED\", \"GREEN\") >> <</for>> <</silently>> :: Display System <<nobr>> <<for _i to 0; _i lt $system.length; _i++>> <<if $system[_i] eq \"RED\">> <<linkreplace $system[_i]>> <<include \"Show Outcome - Red\">> <</linkreplace>> <</if>> <<if $system[_i] eq \"GREEN\">> <<linkreplace $system[_i]>> <<include \"Show Outcome - Green\">> <</linkreplace>> <</if>> <br> <</for>> <</nobr>> :: Show Outcome - Red <<nobr>> <<set _percentage to random(1, 10) >> <<if _percentage gte 6>> <<set _foundHealth to random( 1, 5) >> <<set _foundFuel to random( 1, 3) >> The hostile environment damaged the ship, but extra fuel was found. (-_foundHealth to health and +_foundFuel to fuel) <<set $health to $health - _foundHealth >> <<set $fuel to $fuel + _foundFuel >> <<elseif _percentage lte 3>> <<set _foundHealth to random(2, 7) >> A hostile ship attacked. (-_foundHealth to health) <<set $health to $health - _foundHealth >> <<else>> Nothing happened. <</if>> <<replace \"#HUD\">> <<include \"HUD\">> <</replace>> <</nobr>> :: Show Outcome - Green <<nobr>> <<set _percentage to random(1, 10)>> <<if _percentage eq 1>> <<set _foundFuel to random( 1, 2)>> Fuel was found in some wreckage. (+_foundFuel to fuel) <<set $fuel to $fuel + _foundFuel>> <<elseif _percentage gte 6>> <<set _foundHealth to random( 1, 3) >> During a brief pause, the ship was able to be repaired. (+_foundHealth to health) <<set $health to $health + _foundHealth>> <<else>> Nothing happened. <</if>> <<replace \"#HUD\">> <<include \"HUD\">> <</replace>> <</nobr>> :: HUD Health: $health Fuel: $fuel Number of Jumps Left: $numberOfJumpsLeft <<include \"Check Status\">> :: Destroyed The ship exploded in flight. !!!Game Over. :: Lost in space Without fuel, the ship tumbled and spun in the endless black. !!!Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. !!!Success! :: Check Status <<nobr>> <<if $health lte 0>> <<goto \"Destroyed\">> <</if>> <<if $fuel lte 0>> <<goto \"Lost in space\">> <</if>> <<if $numberOfJumpsLeft lte 0>> <<goto \"Safe\">> <</if>> <</nobr>> Download: Twee Code","title":"Twee Code"},{"location":"statichealthbars/chapbook/chapbook_statichealthbars.html","text":"\"Static Healthbars\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 \"Static Healthbars\" demonstrates how to write HTML elements using JavaScript in Chapbook. Through the [JavaScript] can be included in a passage. Chapbook also provides the engine.state.get() and engine.state.set() functions for getting and setting story variables. Using these and the write() function, dynamic values can be created, accessed, and combined to produce static \"healthbars\" using the <progress> and <meter> HTML elements. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Static Healthbars :: Start [JavaScript] // Create a global variable, health engine.state.set('health', 80); // Get the current value of 'health' let health = engine.state.get('health'); // Write description write(\"Show a healthbar using a Progress element:<br>\"); // Write the progress element with dynamic value write('<progress value=\"' + health + '\" max=\"100\"></progress><br>'); // Write description write(\"Show a healthbar using a Meter element:<br>\"); // Write the meter element with dynamic value write('<meter value=\"' + health + '\" min=\"0\" max=\"100\"></meter>'); Download: Twee Code","title":"Chapbook"},{"location":"statichealthbars/chapbook/chapbook_statichealthbars.html#static-healthbars-chapbook-v100","text":"","title":"\"Static Healthbars\": Chapbook (v1.0.0)"},{"location":"statichealthbars/chapbook/chapbook_statichealthbars.html#summary","text":"\"Static Healthbars\" demonstrates how to write HTML elements using JavaScript in Chapbook. Through the [JavaScript] can be included in a passage. Chapbook also provides the engine.state.get() and engine.state.set() functions for getting and setting story variables. Using these and the write() function, dynamic values can be created, accessed, and combined to produce static \"healthbars\" using the <progress> and <meter> HTML elements.","title":"Summary"},{"location":"statichealthbars/chapbook/chapbook_statichealthbars.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"statichealthbars/chapbook/chapbook_statichealthbars.html#twee-code","text":":: StoryTitle Chapbook: Static Healthbars :: Start [JavaScript] // Create a global variable, health engine.state.set('health', 80); // Get the current value of 'health' let health = engine.state.get('health'); // Write description write(\"Show a healthbar using a Progress element:<br>\"); // Write the progress element with dynamic value write('<progress value=\"' + health + '\" max=\"100\"></progress><br>'); // Write description write(\"Show a healthbar using a Meter element:<br>\"); // Write the meter element with dynamic value write('<meter value=\"' + health + '\" min=\"0\" max=\"100\"></meter>'); Download: Twee Code","title":"Twee Code"},{"location":"statichealthbars/harlowe/harlowe_statichealthbars.html","text":"\"Static Healthbars\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, the (print:) macro is used to create <progress> and <meter> elements. A (text:) macro is also used to temporarily convert the current Numeric value of the $heath story variable into a String value. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Static Healthbars for Harlowe :: Start (set: $health to 80) Show a healthbar using a Progress element: (print: '<progress value=\"' + (text: $health) + '\" max=\"100\"></progress>') Show a healthbar using a Meter element: (print: '<meter value=\"' + (text: $health) + '\" min=\"0\" max=\"100\"></meter>') Download: Twee Code","title":"Harlowe"},{"location":"statichealthbars/harlowe/harlowe_statichealthbars.html#static-healthbars-harlowe-v20","text":"","title":"\"Static Healthbars\": Harlowe (v2.0)"},{"location":"statichealthbars/harlowe/harlowe_statichealthbars.html#summary","text":"\"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, the (print:) macro is used to create <progress> and <meter> elements. A (text:) macro is also used to temporarily convert the current Numeric value of the $heath story variable into a String value.","title":"Summary"},{"location":"statichealthbars/harlowe/harlowe_statichealthbars.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"statichealthbars/harlowe/harlowe_statichealthbars.html#twee-code","text":":: StoryTitle Static Healthbars for Harlowe :: Start (set: $health to 80) Show a healthbar using a Progress element: (print: '<progress value=\"' + (text: $health) + '\" max=\"100\"></progress>') Show a healthbar using a Meter element: (print: '<meter value=\"' + (text: $health) + '\" min=\"0\" max=\"100\"></meter>') Download: Twee Code","title":"Twee Code"},{"location":"statichealthbars/snowman/snowman_statichealthbars.html","text":"\"Static Healthbars\": Snowman (v1.3) \u00b6 Summary \u00b6 \"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, Underscore template functionality is used to create <progress> and <meter> elements. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Static Healthbars in Snowman :: Start <% window.setup = {}; window.setup.health = 80; %> Show a healthbar using a Progress element: <%= '<progress value=\"' + window.setup.health + '\" max=\"100\"></progress>' %> Show a healthbar using a Meter element: <%= '<meter value=\"' + window.setup.health + '\" min=\"0\" max=\"100\"></meter>' %> Download: Twee Code","title":"Snowman"},{"location":"statichealthbars/snowman/snowman_statichealthbars.html#static-healthbars-snowman-v13","text":"","title":"\"Static Healthbars\": Snowman (v1.3)"},{"location":"statichealthbars/snowman/snowman_statichealthbars.html#summary","text":"\"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, Underscore template functionality is used to create <progress> and <meter> elements.","title":"Summary"},{"location":"statichealthbars/snowman/snowman_statichealthbars.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"statichealthbars/snowman/snowman_statichealthbars.html#twee-code","text":":: StoryTitle Static Healthbars in Snowman :: Start <% window.setup = {}; window.setup.health = 80; %> Show a healthbar using a Progress element: <%= '<progress value=\"' + window.setup.health + '\" max=\"100\"></progress>' %> Show a healthbar using a Meter element: <%= '<meter value=\"' + window.setup.health + '\" min=\"0\" max=\"100\"></meter>' %> Download: Twee Code","title":"Twee Code"},{"location":"statichealthbars/sugarcube/sugarcube_statichealthbars.html","text":"\"Static Healthbars\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, Attribute Directive markup is used to inject the current value of the $heath story variable into the <progress> and <meter> elements. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Static Healthbars for SugarCube :: Start <<set $health to 80>> Show a healthbar using a Progress element: <progress @value=\"$health\" max=\"100\"></progress> Show a healthbar using a Meter element: <meter @value=\"$health\" min=\"0\" max=\"100\"></meter> Download: Twee Code","title":"SugarCube"},{"location":"statichealthbars/sugarcube/sugarcube_statichealthbars.html#static-healthbars-sugarcube-v218","text":"","title":"\"Static Healthbars\": SugarCube (v2.18)"},{"location":"statichealthbars/sugarcube/sugarcube_statichealthbars.html#summary","text":"\"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, Attribute Directive markup is used to inject the current value of the $heath story variable into the <progress> and <meter> elements.","title":"Summary"},{"location":"statichealthbars/sugarcube/sugarcube_statichealthbars.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"statichealthbars/sugarcube/sugarcube_statichealthbars.html#twee-code","text":":: StoryTitle Static Healthbars for SugarCube :: Start <<set $health to 80>> Show a healthbar using a Progress element: <progress @value=\"$health\" max=\"100\"></progress> Show a healthbar using a Meter element: <meter @value=\"$health\" min=\"0\" max=\"100\"></meter> Download: Twee Code","title":"Twee Code"},{"location":"storyandpassage/chapbook/chapbook_storyandpassage.html","text":"\"Story and Passage API\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Often, it can be useful to access information about the story or other passages while it is running. In Chapbook, the engine.story object provides two functions, passageNamed() and passageWithId() , for accessing other passages. Combined with the [JavaScript] modifier, these functions and values they return when given existing passage names, can be used to show the name and source of one passage in another. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Story and Passage API :: Start The title of this story is \"{story.name}\". The title of this passage is \"{passage.name}\". [JavaScript] // Find a passage by name let storagePassage = engine.story.passageNamed(\"Storage\"); // Write the name write('The name of the passage is \"' + storagePassage.name + '\".<br>'); // Write the source write('The name of the passage is \"' + storagePassage.source + '\".<br>'); :: Storage This is content in the storage passage! Download: Twee Code","title":"Chapbook"},{"location":"storyandpassage/chapbook/chapbook_storyandpassage.html#story-and-passage-api-chapbook-v100","text":"","title":"\"Story and Passage API\": Chapbook (v1.0.0)"},{"location":"storyandpassage/chapbook/chapbook_storyandpassage.html#summary","text":"Often, it can be useful to access information about the story or other passages while it is running. In Chapbook, the engine.story object provides two functions, passageNamed() and passageWithId() , for accessing other passages. Combined with the [JavaScript] modifier, these functions and values they return when given existing passage names, can be used to show the name and source of one passage in another.","title":"Summary"},{"location":"storyandpassage/chapbook/chapbook_storyandpassage.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"storyandpassage/chapbook/chapbook_storyandpassage.html#twee-code","text":":: StoryTitle Chapbook: Story and Passage API :: Start The title of this story is \"{story.name}\". The title of this passage is \"{passage.name}\". [JavaScript] // Find a passage by name let storagePassage = engine.story.passageNamed(\"Storage\"); // Write the name write('The name of the passage is \"' + storagePassage.name + '\".<br>'); // Write the source write('The name of the passage is \"' + storagePassage.source + '\".<br>'); :: Storage This is content in the storage passage! Download: Twee Code","title":"Twee Code"},{"location":"storyandpassage/snowman/snowman_storyandpassage.html","text":"\"Story and Passage API\": Snowman (v1.4) \u00b6 Summary \u00b6 Often, it can be useful to access information about the story or other passages while it is running. The window.story.passage() function and window.passage.name property in Snowman allow for getting this type of information. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Story and Passage API in Snowman :: Start The title of this story is \"<%= window.story.name %>.\" <% window.setup = {}; window.setup.passage = window.story.passage(\"Storage\"); %> The name of the passage is \"<%= setup.passage.name %>.\" The source of the passage is \"<%= setup.passage.source %>\" :: Storage This is content in the storage passage! Download: Twee Code","title":"Snowman"},{"location":"storyandpassage/snowman/snowman_storyandpassage.html#story-and-passage-api-snowman-v14","text":"","title":"\"Story and Passage API\": Snowman (v1.4)"},{"location":"storyandpassage/snowman/snowman_storyandpassage.html#summary","text":"Often, it can be useful to access information about the story or other passages while it is running. The window.story.passage() function and window.passage.name property in Snowman allow for getting this type of information.","title":"Summary"},{"location":"storyandpassage/snowman/snowman_storyandpassage.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"storyandpassage/snowman/snowman_storyandpassage.html#twee-code","text":":: StoryTitle Story and Passage API in Snowman :: Start The title of this story is \"<%= window.story.name %>.\" <% window.setup = {}; window.setup.passage = window.story.passage(\"Storage\"); %> The name of the passage is \"<%= setup.passage.name %>.\" The source of the passage is \"<%= setup.passage.source %>\" :: Storage This is content in the storage passage! Download: Twee Code","title":"Twee Code"},{"location":"storyandpassage/sugarcube/sugarcube_storyandpassage.html","text":"\"Story and Passage API\": SugarCube (v2.18) \u00b6 Summary \u00b6 Often, it can be useful to access information about the story or other passages while it is running. The Story and Passage APIs in SugarCube allow for getting this type of information. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Story and Passage API in SugarCube :: Start The title of this story is \"<<print Story.title >>.\" <<set $passage to Story.get(\"Storage\")>> The title of the passage is \"<<print $passage.title>>.\" The text of the passage is \"<<print $passage.text >>\" :: Storage This is content in the storage passage! Download: Twee Code","title":"SugarCube"},{"location":"storyandpassage/sugarcube/sugarcube_storyandpassage.html#story-and-passage-api-sugarcube-v218","text":"","title":"\"Story and Passage API\": SugarCube (v2.18)"},{"location":"storyandpassage/sugarcube/sugarcube_storyandpassage.html#summary","text":"Often, it can be useful to access information about the story or other passages while it is running. The Story and Passage APIs in SugarCube allow for getting this type of information.","title":"Summary"},{"location":"storyandpassage/sugarcube/sugarcube_storyandpassage.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"storyandpassage/sugarcube/sugarcube_storyandpassage.html#twee-code","text":":: StoryTitle Story and Passage API in SugarCube :: Start The title of this story is \"<<print Story.title >>.\" <<set $passage to Story.get(\"Storage\")>> The title of the passage is \"<<print $passage.title>>.\" The text of the passage is \"<<print $passage.text >>\" :: Storage This is content in the storage passage! Download: Twee Code","title":"Twee Code"},{"location":"storystyling/chapbook/chapbook_storystyling.html","text":"\"Variable Story Styling\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Using the [CSS] modifier in Chapbook, it is possible to combine expressions with variables and change the text and background colors dynamically. This examples creates a variable color and changes its value in the Vars Section of two passages. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Variable Story Styling :: Start color: \"green\" -- [CSS] #page article { color: {color}; } [continued] This text will be in green. [[Switch to red text]] :: Switch to red text color: \"red\" -- [CSS] #page article { color: {color}; } [continued] This text will be in red. [[Switch to green text->Start]] Download: Twee Code","title":"Chapbook"},{"location":"storystyling/chapbook/chapbook_storystyling.html#variable-story-styling-chapbook-v100","text":"","title":"\"Variable Story Styling\": Chapbook (v1.0.0)"},{"location":"storystyling/chapbook/chapbook_storystyling.html#summary","text":"Using the [CSS] modifier in Chapbook, it is possible to combine expressions with variables and change the text and background colors dynamically. This examples creates a variable color and changes its value in the Vars Section of two passages.","title":"Summary"},{"location":"storystyling/chapbook/chapbook_storystyling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"storystyling/chapbook/chapbook_storystyling.html#twee-code","text":":: StoryTitle Chapbook: Variable Story Styling :: Start color: \"green\" -- [CSS] #page article { color: {color}; } [continued] This text will be in green. [[Switch to red text]] :: Switch to red text color: \"red\" -- [CSS] #page article { color: {color}; } [continued] This text will be in red. [[Switch to green text->Start]] Download: Twee Code","title":"Twee Code"},{"location":"storystyling/harlowe/harlowe_storystyling.html","text":"\"Variable Story Styling\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Variable Story Styling\" demonstrates how to combine the (background:) and (color:) macros as storied in a variable. Combined with the (enchant:) macro, the named hook ?Page is used to select the entire page for the application of the background and color changes in each passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Variable Story Styling in Harlowe :: Start (set: $storyStyle to (background: white) + (color: green) ) (enchant: ?Page, $storyStyle) This text is green on a white background. [[Next Passage]] :: Next Passage (set: $storyStyle to (background: black) + (color: white) ) (enchant: ?Page, $storyStyle) This text is white on a black background. Download: Twee Code","title":"Harlowe"},{"location":"storystyling/harlowe/harlowe_storystyling.html#variable-story-styling-harlowe-v20","text":"","title":"\"Variable Story Styling\": Harlowe (v2.0)"},{"location":"storystyling/harlowe/harlowe_storystyling.html#summary","text":"\"Variable Story Styling\" demonstrates how to combine the (background:) and (color:) macros as storied in a variable. Combined with the (enchant:) macro, the named hook ?Page is used to select the entire page for the application of the background and color changes in each passage.","title":"Summary"},{"location":"storystyling/harlowe/harlowe_storystyling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"storystyling/harlowe/harlowe_storystyling.html#twee-code","text":":: StoryTitle Variable Story Styling in Harlowe :: Start (set: $storyStyle to (background: white) + (color: green) ) (enchant: ?Page, $storyStyle) This text is green on a white background. [[Next Passage]] :: Next Passage (set: $storyStyle to (background: black) + (color: white) ) (enchant: ?Page, $storyStyle) This text is white on a black background. Download: Twee Code","title":"Twee Code"},{"location":"storystyling/snowman/snowman_storystyling.html","text":"\"Variable Story Styling\": Snowman (v1.3.0) \u00b6 Summary \u00b6 \"Variable Story Styling\" demonstrates how to use the toggleClass() jQuery function to switch between two pre-defined style rule-sets. Used with the \u201cbody\u201d selector, the entire page is selected and the classes toggled when the function is called. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Variable Story Styling in Snowman :: UserStylesheet[stylesheet] .green { background: white; color: green; } .white { background: black; color: white; } :: Start This text is green on a white background. <% s.styling = \"green\"; $(\"body\").toggleClass(s.styling); %> [[Next Passage]] :: Next Passage This text is white on a black background. <% s.styling = \"white\"; $(\"body\").toggleClass(s.styling); %> Download: Twee Code","title":"Snowman"},{"location":"storystyling/snowman/snowman_storystyling.html#variable-story-styling-snowman-v130","text":"","title":"\"Variable Story Styling\": Snowman (v1.3.0)"},{"location":"storystyling/snowman/snowman_storystyling.html#summary","text":"\"Variable Story Styling\" demonstrates how to use the toggleClass() jQuery function to switch between two pre-defined style rule-sets. Used with the \u201cbody\u201d selector, the entire page is selected and the classes toggled when the function is called.","title":"Summary"},{"location":"storystyling/snowman/snowman_storystyling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"storystyling/snowman/snowman_storystyling.html#twee-code","text":":: StoryTitle Variable Story Styling in Snowman :: UserStylesheet[stylesheet] .green { background: white; color: green; } .white { background: black; color: white; } :: Start This text is green on a white background. <% s.styling = \"green\"; $(\"body\").toggleClass(s.styling); %> [[Next Passage]] :: Next Passage This text is white on a black background. <% s.styling = \"white\"; $(\"body\").toggleClass(s.styling); %> Download: Twee Code","title":"Twee Code"},{"location":"storystyling/sugarcube/sugarcube_storystyling.html","text":"\"Variable Story Styling\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Variable Story Styling\" demonstrates how to use the <<toggleClass>> macro to switch between two pre-defined style rule-sets. Combined with the \"body\" selector, the entire page is selected and the classes are switched when the macro is used. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Variable Story Styling in SugarCube :: UserStylesheet[stylesheet] .green { background: white; color: green; } .white { background: black; color: white; } :: Start <<set $classToShow to \"green\">> This text is green on a white background. <<toggleclass \"body\" $classToShow>> [[Next Passage]] :: Next Passage <<set $classToShow to \"white\">> This text is white on a black background. <<toggleclass \"body\" $classToShow>> Download: Twee Code","title":"SugarCube"},{"location":"storystyling/sugarcube/sugarcube_storystyling.html#variable-story-styling-sugarcube-v218","text":"","title":"\"Variable Story Styling\": SugarCube (v2.18)"},{"location":"storystyling/sugarcube/sugarcube_storystyling.html#summary","text":"\"Variable Story Styling\" demonstrates how to use the <<toggleClass>> macro to switch between two pre-defined style rule-sets. Combined with the \"body\" selector, the entire page is selected and the classes are switched when the macro is used.","title":"Summary"},{"location":"storystyling/sugarcube/sugarcube_storystyling.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"storystyling/sugarcube/sugarcube_storystyling.html#twee-code","text":":: StoryTitle Variable Story Styling in SugarCube :: UserStylesheet[stylesheet] .green { background: white; color: green; } .white { background: black; color: white; } :: Start <<set $classToShow to \"green\">> This text is green on a white background. <<toggleclass \"body\" $classToShow>> [[Next Passage]] :: Next Passage <<set $classToShow to \"white\">> This text is white on a black background. <<toggleclass \"body\" $classToShow>> Download: Twee Code","title":"Twee Code"},{"location":"terms/terms_cookbook.html","text":"Cookbook \u00b6 The idea for a Twine Cookbook was heavily inspired by the Inform Recipe Book , a collection of examples to learn Inform. Compiling some of the most requested code solutions across multiple versions, histories, and even years of development, the original editorial team sought to create the same project for Twine. After publishing the first version in August 2017, the Twine Cookbook was born. What this is \u00b6 The Twine Cookbook is a living document. It has rolling deadlines and is often updated multiple times a year as new requests and solutions to old problems are found and submitted. It is driven by the Twine community and finds inspiration in what others create and share online.","title":"Cookbook"},{"location":"terms/terms_cookbook.html#cookbook","text":"The idea for a Twine Cookbook was heavily inspired by the Inform Recipe Book , a collection of examples to learn Inform. Compiling some of the most requested code solutions across multiple versions, histories, and even years of development, the original editorial team sought to create the same project for Twine. After publishing the first version in August 2017, the Twine Cookbook was born.","title":"Cookbook"},{"location":"terms/terms_cookbook.html#what-this-is","text":"The Twine Cookbook is a living document. It has rolling deadlines and is often updated multiple times a year as new requests and solutions to old problems are found and submitted. It is driven by the Twine community and finds inspiration in what others create and share online.","title":"What this is"},{"location":"terms/terms_css.html","text":"CSS \u00b6 Cascading Style Sheets (CSS) is programming language for describing the presentation of HTML elements ( i.e. the colors, fonts, spacing, and general layout of a web page). \"Cascading\" means rules move from a parent element to any children. Any specific rules also overrule any general ones. CSS styles are associated with HTML elements using the element's (tag)name, id, classes, and/or other, possibly custom, attributes . Each built-in story format in Twine 2 uses different, sometimes custom, HTML elements to organize the story and then applies its own CSS rules. Story Stylesheet \u00b6 When using Twine, additional CSS rules can be added through the Story Stylesheet screen. This CSS is inserted into the final story and provides an opportunity to override the color and formatting choices expressed in the story format's own stylesheet. (When using Twee, styles can be added using one or more passages tagged \"stylesheet\".) Considering the complex nature of CSS cascading, it is always highly recommended to use a story format's own macros where possible to change the presentation or layout of a story. Common areas involved in story format styling include the full page or window, a sidebar (if present), and the current passage as a sub-area of the page. Often, there is also a mechanism to style passages according to their tags (as assigned in Twine 2). See the CSS Selectors recipes for more details.","title":"CSS"},{"location":"terms/terms_css.html#css","text":"Cascading Style Sheets (CSS) is programming language for describing the presentation of HTML elements ( i.e. the colors, fonts, spacing, and general layout of a web page). \"Cascading\" means rules move from a parent element to any children. Any specific rules also overrule any general ones. CSS styles are associated with HTML elements using the element's (tag)name, id, classes, and/or other, possibly custom, attributes . Each built-in story format in Twine 2 uses different, sometimes custom, HTML elements to organize the story and then applies its own CSS rules.","title":"CSS"},{"location":"terms/terms_css.html#story-stylesheet","text":"When using Twine, additional CSS rules can be added through the Story Stylesheet screen. This CSS is inserted into the final story and provides an opportunity to override the color and formatting choices expressed in the story format's own stylesheet. (When using Twee, styles can be added using one or more passages tagged \"stylesheet\".) Considering the complex nature of CSS cascading, it is always highly recommended to use a story format's own macros where possible to change the presentation or layout of a story. Common areas involved in story format styling include the full page or window, a sidebar (if present), and the current passage as a sub-area of the page. Often, there is also a mechanism to style passages according to their tags (as assigned in Twine 2). See the CSS Selectors recipes for more details.","title":"Story Stylesheet"},{"location":"terms/terms_html.html","text":"HTML \u00b6 The HyperText Markup Language ( HTML ) is the standard for all documents designed for a web browser. It consists of a series of elements defining its structure and the layout of its content. Story Format Layout \u00b6 Each story format handles its own layout and HTML structure. While CSS can be used to style its elements, it is often recommended to use any exisitng macros for this purpose in a story format, if available. Harlowe: Named Hooks SugarCube: CSS Selectors Snowman: HTML Elements Chapbook: Customization Twine 2 HTML \u00b6 All data of a Twine 2 story is stored as a series of HTML elements within a page according to the HTML Output Specification . Example: < tw-storydata > < style role = \"stylesheet\" id = \"twine-user-stylesheet\" type = \"text/twine-css\" > </ style > < script role = \"script\" id = \"twine-user-script\" type = \"text/twine-javascript\" > </ script > < tw-tag name = \"tagName\" color = \"orange\" > </ tw-tag > < tw-passagedata pid = \"1\" name = \"Start\" tags = \"tag1 tag2\" position = \"102,99\" size = \"100,100\" > Some content </ tw-passagedata > </ tw-storydata >","title":"HTML"},{"location":"terms/terms_html.html#html","text":"The HyperText Markup Language ( HTML ) is the standard for all documents designed for a web browser. It consists of a series of elements defining its structure and the layout of its content.","title":"HTML"},{"location":"terms/terms_html.html#story-format-layout","text":"Each story format handles its own layout and HTML structure. While CSS can be used to style its elements, it is often recommended to use any exisitng macros for this purpose in a story format, if available. Harlowe: Named Hooks SugarCube: CSS Selectors Snowman: HTML Elements Chapbook: Customization","title":"Story Format Layout"},{"location":"terms/terms_html.html#twine-2-html","text":"All data of a Twine 2 story is stored as a series of HTML elements within a page according to the HTML Output Specification . Example: < tw-storydata > < style role = \"stylesheet\" id = \"twine-user-stylesheet\" type = \"text/twine-css\" > </ style > < script role = \"script\" id = \"twine-user-script\" type = \"text/twine-javascript\" > </ script > < tw-tag name = \"tagName\" color = \"orange\" > </ tw-tag > < tw-passagedata pid = \"1\" name = \"Start\" tags = \"tag1 tag2\" position = \"102,99\" size = \"100,100\" > Some content </ tw-passagedata > </ tw-storydata >","title":"Twine 2 HTML"},{"location":"terms/terms_javascript.html","text":"JavaScript \u00b6 The programming language JavaScript is embedded in all modern web browsers and is a foundational part of how Twine works. Knowledge of JavaScript is not required to create stories using Twine. However, understanding how JavaScript works and the expectations of how things are structured in the language can be helpful when using advanced functionality in SugarCube and when using Snowman. Story JavaScript \u00b6 When using Twine, extra functionality can be added through the Story JavaScript screen. This is run before the Story is run and provides an opportunity to write specialized code or include external libraries and files. Some story formats, like SugarCube, provide the ability to translate between JavaScript and macro usage in Twine. Others, like Snowman, expect this to be used when creating more complex projects. window.setup \u00b6 Based on the object provided by SugarCube of the same name , this cookbook suggests using or creating a window.setup global object when working with Story JavaScript in Twine for greater portability between story formats. window.setup Example window . setup = window . setup || {};","title":"JavaScript"},{"location":"terms/terms_javascript.html#javascript","text":"The programming language JavaScript is embedded in all modern web browsers and is a foundational part of how Twine works. Knowledge of JavaScript is not required to create stories using Twine. However, understanding how JavaScript works and the expectations of how things are structured in the language can be helpful when using advanced functionality in SugarCube and when using Snowman.","title":"JavaScript"},{"location":"terms/terms_javascript.html#story-javascript","text":"When using Twine, extra functionality can be added through the Story JavaScript screen. This is run before the Story is run and provides an opportunity to write specialized code or include external libraries and files. Some story formats, like SugarCube, provide the ability to translate between JavaScript and macro usage in Twine. Others, like Snowman, expect this to be used when creating more complex projects.","title":"Story JavaScript"},{"location":"terms/terms_javascript.html#windowsetup","text":"Based on the object provided by SugarCube of the same name , this cookbook suggests using or creating a window.setup global object when working with Story JavaScript in Twine for greater portability between story formats. window.setup Example window . setup = window . setup || {};","title":"window.setup"},{"location":"terms/terms_macros.html","text":"Macros \u00b6 Macros allow programming code to be intermixed with text shown onscreen. They allow a wide variety of functionality to be added to a story, from changing the appearance of text to reacting to mouse and touch events. Story Formats are often chosen based on the macros they provide and how they can be used together. Twine 1 and SugarCube \u00b6 In Twine 1, macros were written with two less-than ( << ) and two-greater-than signs ( >> ) around code. ( SugarCube , as a successor of this form, follows the same syntax.) Example: <<display \"Another Passage\">> Harlowe \u00b6 The Harlowe story format uses a different syntax for macros. They are wrapped in a single open ( and close parenthesis ) , and use brackets, [] , to indicate which text or sections are associated or acted upon by the macro. Example: (font: \"Arial\")[This text will be in Arial.] Snowman \u00b6 Snowman does not provide macros in the same sense that SugarCube and Harlowe do, but allow mixing JavaScript code in text with <% and %> , with <%= and %> displaying the result on the page. Example: The chalkboard reads 2 + 2 = <%= 2 + 2 %>. Chapbook \u00b6 Chapbook provides inserts and modifiers to work with variables and other values. However, any variable testing must be done within the vars section itself. Example: largeFamily: cousins > 10 --","title":"Macros"},{"location":"terms/terms_macros.html#macros","text":"Macros allow programming code to be intermixed with text shown onscreen. They allow a wide variety of functionality to be added to a story, from changing the appearance of text to reacting to mouse and touch events. Story Formats are often chosen based on the macros they provide and how they can be used together.","title":"Macros"},{"location":"terms/terms_macros.html#twine-1-and-sugarcube","text":"In Twine 1, macros were written with two less-than ( << ) and two-greater-than signs ( >> ) around code. ( SugarCube , as a successor of this form, follows the same syntax.) Example: <<display \"Another Passage\">>","title":"Twine 1 and SugarCube"},{"location":"terms/terms_macros.html#harlowe","text":"The Harlowe story format uses a different syntax for macros. They are wrapped in a single open ( and close parenthesis ) , and use brackets, [] , to indicate which text or sections are associated or acted upon by the macro. Example: (font: \"Arial\")[This text will be in Arial.]","title":"Harlowe"},{"location":"terms/terms_macros.html#snowman","text":"Snowman does not provide macros in the same sense that SugarCube and Harlowe do, but allow mixing JavaScript code in text with <% and %> , with <%= and %> displaying the result on the page. Example: The chalkboard reads 2 + 2 = <%= 2 + 2 %>.","title":"Snowman"},{"location":"terms/terms_macros.html#chapbook","text":"Chapbook provides inserts and modifiers to work with variables and other values. However, any variable testing must be done within the vars section itself. Example: largeFamily: cousins > 10 --","title":"Chapbook"},{"location":"terms/terms_markdown_and_markup.html","text":"Markdown / Markup \u00b6 All built-in story formats use a form of markdown or markup. Markdown \u00b6 John Gruber and Aaron Swartz created Markdown in 2004 with the goal to create a way of adding some extra symbols to text to easily convert it into HTML. Since then, it has become very popular with sites like GitHub supporting it for text input. Snowman and Chapbook use a modified version of Markdown for styling text. Markup \u00b6 Harlowe and SugarCube use what is known as markup . To change the presentation of text, extra symbols are added to create visual effects like emphasis and a stronger emphasis . Most wiki software and sites like Wikipedia use markup to style text. Differences \u00b6 Markdown is markup. It is a way of changing the presentation of text through adding extra symbols that have special meaning when other programs read it and convert it into a different format like HTML. The only real difference is that Markdown has a name whereas \"markup\" is a category of all languages that perform the same actions.","title":"Markdown / Markup"},{"location":"terms/terms_markdown_and_markup.html#markdown-markup","text":"All built-in story formats use a form of markdown or markup.","title":"Markdown / Markup"},{"location":"terms/terms_markdown_and_markup.html#markdown","text":"John Gruber and Aaron Swartz created Markdown in 2004 with the goal to create a way of adding some extra symbols to text to easily convert it into HTML. Since then, it has become very popular with sites like GitHub supporting it for text input. Snowman and Chapbook use a modified version of Markdown for styling text.","title":"Markdown"},{"location":"terms/terms_markdown_and_markup.html#markup","text":"Harlowe and SugarCube use what is known as markup . To change the presentation of text, extra symbols are added to create visual effects like emphasis and a stronger emphasis . Most wiki software and sites like Wikipedia use markup to style text.","title":"Markup"},{"location":"terms/terms_markdown_and_markup.html#differences","text":"Markdown is markup. It is a way of changing the presentation of text through adding extra symbols that have special meaning when other programs read it and convert it into a different format like HTML. The only real difference is that Markdown has a name whereas \"markup\" is a category of all languages that perform the same actions.","title":"Differences"},{"location":"terms/terms_passages.html","text":"Passages \u00b6 Passages can be thought of as divisions of time, space, or combinations of the two. They can also be thought of as blocks of dialogue, sections of code, or simply ways to break up a complicated project into more easily understood parts. In Twine, passages are at the core of any story . Connecting Passages \u00b6 The simplest way to connect passages is through adding two opening and closing brackets around any collection of letters, numbers, or punctuation. If a passage exists with those exact characters in the same ordering and combination, the passages will be linked together. When viewing the compiled HTML version, there will now be a link to navigate between the two. By default, passage links are one-way. Navigating the link means moving away from one to another. Link to Another Passage named \"Link to another passage\" \u00b6 [[Link to another passage]] Link to Another Passage Named \"Different Passage\" \u00b6 The pipe, \" | \", can be used to rename a link from its original to some other name for the same purpose. [[Link to another passage|Different Passage]] Link to Another Passage Named \"Different Passage\" Using Routing \u00b6 Starting in Twine 2, to route links, arrows, \"->\" or \"<-\", can be used to point to the destination of the link. [[Link to another passage->Different Passage]] [[Different Passage<-Link to another passage]]","title":"Passages"},{"location":"terms/terms_passages.html#passages","text":"Passages can be thought of as divisions of time, space, or combinations of the two. They can also be thought of as blocks of dialogue, sections of code, or simply ways to break up a complicated project into more easily understood parts. In Twine, passages are at the core of any story .","title":"Passages"},{"location":"terms/terms_passages.html#connecting-passages","text":"The simplest way to connect passages is through adding two opening and closing brackets around any collection of letters, numbers, or punctuation. If a passage exists with those exact characters in the same ordering and combination, the passages will be linked together. When viewing the compiled HTML version, there will now be a link to navigate between the two. By default, passage links are one-way. Navigating the link means moving away from one to another.","title":"Connecting Passages"},{"location":"terms/terms_passages.html#link-to-another-passage-named-link-to-another-passage","text":"[[Link to another passage]]","title":"Link to Another Passage named \"Link to another passage\""},{"location":"terms/terms_passages.html#link-to-another-passage-named-different-passage","text":"The pipe, \" | \", can be used to rename a link from its original to some other name for the same purpose. [[Link to another passage|Different Passage]]","title":"Link to Another Passage Named \"Different Passage\""},{"location":"terms/terms_passages.html#link-to-another-passage-named-different-passage-using-routing","text":"Starting in Twine 2, to route links, arrows, \"->\" or \"<-\", can be used to point to the destination of the link. [[Link to another passage->Different Passage]] [[Different Passage<-Link to another passage]]","title":"Link to Another Passage Named \"Different Passage\" Using Routing"},{"location":"terms/terms_stories.html","text":"Stories \u00b6 Anything made using Twine can be called by any name. They are no rules on naming conventions and everything from experimental games to more traditional novels can be created in Twine. Everything is welcome. In general, the Twine editor calls individual projects Stories. Stories can be published to HTML and are readable in a web browser without Twine. In their published form, they can also be imported into Twine for further editing. IFID \u00b6 When created, each Story is each given a series of letters and numbers called an Interactive Fiction IDentifier ( IFID ). The IFID is always retained when importing or publishing Stories. This helps authors track their projects on different platforms, or if other authors have copied or tried to claim it as their own without their knowledge or consent.","title":"Stories"},{"location":"terms/terms_stories.html#stories","text":"Anything made using Twine can be called by any name. They are no rules on naming conventions and everything from experimental games to more traditional novels can be created in Twine. Everything is welcome. In general, the Twine editor calls individual projects Stories. Stories can be published to HTML and are readable in a web browser without Twine. In their published form, they can also be imported into Twine for further editing.","title":"Stories"},{"location":"terms/terms_stories.html#ifid","text":"When created, each Story is each given a series of letters and numbers called an Interactive Fiction IDentifier ( IFID ). The IFID is always retained when importing or publishing Stories. This helps authors track their projects on different platforms, or if other authors have copied or tried to claim it as their own without their knowledge or consent.","title":"IFID"},{"location":"terms/terms_storyformats.html","text":"Story Formats \u00b6 Each story format provides a different visual layout, set of macros , and internal JavaScript functionality. Harlowe \u00b6 Harlowe is the default story format in Twine 2. It is designed for ease-of-use and for those using Twine 2 for the first time. Harlowe Example: (if: $hasKey)[It looks like the key will open the door.] (else:)[No way forward!] SugarCube \u00b6 SugarCube continues the traditions of Twine 1 while also expanding the available macros. It has more functionality than Harlowe, but can sometimes require greater knowledge of programming techniques and development patterns for more advanced usage. SugarCube Example: <<if $hasKey>> It looks like the key will open the door. <<else>> No way forward! <</if>> Snowman \u00b6 Snowman is designed to be written with custom JavaScript and CSS. It has no built-in macros, but includes the Underscore.js , Marked , and jQuery JavaScript libraries. Snowman Example: <% if (s.hasKey) { %> It looks like the key will open the door. <% } else { %> No way forward! <% } %> Chapbook \u00b6 Chapbook is a \"second-generation\" Twine 2 story format that seperates its functionality into \"inserts\" , which cause text to appear, and \"modifiers\" , functionality that affect text in some way. Chapbook Example: [if hasKey] It looks like the key will open the door. [else] No way forward!","title":"Story Formats"},{"location":"terms/terms_storyformats.html#story-formats","text":"Each story format provides a different visual layout, set of macros , and internal JavaScript functionality.","title":"Story Formats"},{"location":"terms/terms_storyformats.html#harlowe","text":"Harlowe is the default story format in Twine 2. It is designed for ease-of-use and for those using Twine 2 for the first time. Harlowe Example: (if: $hasKey)[It looks like the key will open the door.] (else:)[No way forward!]","title":"Harlowe"},{"location":"terms/terms_storyformats.html#sugarcube","text":"SugarCube continues the traditions of Twine 1 while also expanding the available macros. It has more functionality than Harlowe, but can sometimes require greater knowledge of programming techniques and development patterns for more advanced usage. SugarCube Example: <<if $hasKey>> It looks like the key will open the door. <<else>> No way forward! <</if>>","title":"SugarCube"},{"location":"terms/terms_storyformats.html#snowman","text":"Snowman is designed to be written with custom JavaScript and CSS. It has no built-in macros, but includes the Underscore.js , Marked , and jQuery JavaScript libraries. Snowman Example: <% if (s.hasKey) { %> It looks like the key will open the door. <% } else { %> No way forward! <% } %>","title":"Snowman"},{"location":"terms/terms_storyformats.html#chapbook","text":"Chapbook is a \"second-generation\" Twine 2 story format that seperates its functionality into \"inserts\" , which cause text to appear, and \"modifiers\" , functionality that affect text in some way. Chapbook Example: [if hasKey] It looks like the key will open the door. [else] No way forward!","title":"Chapbook"},{"location":"terms/terms_twee.html","text":"Twee \u00b6 Twee is the source code of a Twine story . In Twine 1, stories could be exported into its source, changed, and imported again. Twine 2 has moved away from this functionality, but has been heavily influenced through having sections (passages in Twine 1) where the user can add CSS (Story Stylesheet) and JavaScript (Story JavaScript). Notation \u00b6 Starting with Twee 3, there is a standard for reading and writing Twee when working with Twine 2 passages. Twee 3 notation is written as a series of four parts for the header of each passage: Sigil: (Required) Two colons (\":\") followed by a space Passage Name: (Required) The name of the passage Tags: (Optional) Optional tags Metadata: (Optional) Information about the passage The content of a passage continues until the next header of a passage is found or the input ends with at least a single empty line between passage headers. Example Twee Notation: :: Snoopy [dog peanuts] Snoopy is a dog in the comic Peanuts. :: Charlie Brown [person peanuts] {\"position\":\"600,400\",\"size\":\"100,200\"} Charlie Brown is a person in the comic Peanuts Special Passage Names \u00b6 Some compilers understand and process certain keywords differently. The following is a common set of case-sensitive reserved passage names across Twine 1 and Twee 3. Start (Twine 1 and Twee 3) \u00b6 The first passage. :: Start A beginning! StoryTitle (Twine 1 and Twee 3) \u00b6 The title of the story. :: StoryTitle A Named Story StorySubtitle (Twine 1) \u00b6 The subtitle of the story. :: StorySubtitle The subtitle of this story StoryAuthor (Twine 1) \u00b6 The author of the story. :: StoryAuthor John Smith StoryMenu (Twine 1) \u00b6 Corresponds to the menu that hovers in the upper-right corner of the page in the Jonah story format, or on the left side of the page in the Sugarcane story format. :: StoryMenu Content of the story menu! StorySettings (Twine 1) \u00b6 Used to specify certain options and settings. Undo: enables the player to \"undo moves.\" In Sugarcane, this means being able to use the Back button in the browser. In Jonah, this means being able to use the \u201cRewind to here\u201d link, and being able to click links in previous passages. Bookmark: enables the player to use the \u201cBookmark\u201d link in Sugarcane and Jonah. On by default. Hash updates: this causes the current passage's bookmark URL to be automatically placed in the player's browser address bar whenever they change passages. This is off by default because the URLs can become very long and ugly quickly. Prompt before closing: If the player tries to reload or close the page, the browser will prompt for confirmation. This is useful for long games - it would be unfortunate if the player lost a lot of progress due to an idle key-press. Don't use default CSS: This removes most of the CSS used by the story format, allowing CSS programmers to write their own stylesheet redesigns more easily. Off by default - but including the text \u201cblank stylesheet\u201d in a stylesheet will set it on automatically. ROT13: obfuscates the story's HTML source to dissuade people from spoiling themselves by reading it. Off by default. jQuery: include the library or not Modernizr: include the the library or not :: StorySettings undo:on bookmark:on hash:on exitprompt:on blankcss:on obfuscate:rot13 jquery:on modernizr:on StoryIncludes (Twine 1) \u00b6 Includes, \"imports\", other local or remote files during the HTML compilation process. In Twine 1.4.2, both Twine Story (.tws) and Twine Source (.twee) files can be used. :: StoryIncludes localfile.tws StoryData (Twee 3) \u00b6 A JSON chunk encapsulating various Twine 2-compatible details about the story. ifid: (Required) IFID of the story format: (Optional) Story format format-version: (Optional) Story format version start: (Optional) PID of starting passage tag-colors: (Optional) Pairs of tags and colors zoom: (Optional) Decimal zoom level :: StoryData { \"ifid\": \"D674C58C-DEFA-4F70-B7A2-27742230C0FC\", \"format\": \"SugarCube\", \"format-version\": \"2.28.2\", \"start\": \"My Starting Passage\", \"tag-colors\": { \"bar\": \"green\", \"foo\": \"red\", \"qaz\": \"blue\" }, \"zoom\": 0.25 } Special Tag Names \u00b6 Twee 3 defines two special case-sensitive lowercase passage tags: stylesheet and script . (Passages are also loaded according to alphabetical order if others exist with the same special passage tags.) Stylesheet \u00b6 Any additional or overriding CSS rules for the story. :: UserStylesheet[stylesheet] Script \u00b6 Any additional or overriding JavaScript code for the story. :: UserScript[script]","title":"Twee"},{"location":"terms/terms_twee.html#twee","text":"Twee is the source code of a Twine story . In Twine 1, stories could be exported into its source, changed, and imported again. Twine 2 has moved away from this functionality, but has been heavily influenced through having sections (passages in Twine 1) where the user can add CSS (Story Stylesheet) and JavaScript (Story JavaScript).","title":"Twee"},{"location":"terms/terms_twee.html#notation","text":"Starting with Twee 3, there is a standard for reading and writing Twee when working with Twine 2 passages. Twee 3 notation is written as a series of four parts for the header of each passage: Sigil: (Required) Two colons (\":\") followed by a space Passage Name: (Required) The name of the passage Tags: (Optional) Optional tags Metadata: (Optional) Information about the passage The content of a passage continues until the next header of a passage is found or the input ends with at least a single empty line between passage headers. Example Twee Notation: :: Snoopy [dog peanuts] Snoopy is a dog in the comic Peanuts. :: Charlie Brown [person peanuts] {\"position\":\"600,400\",\"size\":\"100,200\"} Charlie Brown is a person in the comic Peanuts","title":"Notation"},{"location":"terms/terms_twee.html#special-passage-names","text":"Some compilers understand and process certain keywords differently. The following is a common set of case-sensitive reserved passage names across Twine 1 and Twee 3.","title":"Special Passage Names"},{"location":"terms/terms_twee.html#start-twine-1-and-twee-3","text":"The first passage. :: Start A beginning!","title":"Start (Twine 1 and Twee 3)"},{"location":"terms/terms_twee.html#storytitle-twine-1-and-twee-3","text":"The title of the story. :: StoryTitle A Named Story","title":"StoryTitle (Twine 1 and Twee 3)"},{"location":"terms/terms_twee.html#storysubtitle-twine-1","text":"The subtitle of the story. :: StorySubtitle The subtitle of this story","title":"StorySubtitle (Twine 1)"},{"location":"terms/terms_twee.html#storyauthor-twine-1","text":"The author of the story. :: StoryAuthor John Smith","title":"StoryAuthor (Twine 1)"},{"location":"terms/terms_twee.html#storymenu-twine-1","text":"Corresponds to the menu that hovers in the upper-right corner of the page in the Jonah story format, or on the left side of the page in the Sugarcane story format. :: StoryMenu Content of the story menu!","title":"StoryMenu (Twine 1)"},{"location":"terms/terms_twee.html#storysettings-twine-1","text":"Used to specify certain options and settings. Undo: enables the player to \"undo moves.\" In Sugarcane, this means being able to use the Back button in the browser. In Jonah, this means being able to use the \u201cRewind to here\u201d link, and being able to click links in previous passages. Bookmark: enables the player to use the \u201cBookmark\u201d link in Sugarcane and Jonah. On by default. Hash updates: this causes the current passage's bookmark URL to be automatically placed in the player's browser address bar whenever they change passages. This is off by default because the URLs can become very long and ugly quickly. Prompt before closing: If the player tries to reload or close the page, the browser will prompt for confirmation. This is useful for long games - it would be unfortunate if the player lost a lot of progress due to an idle key-press. Don't use default CSS: This removes most of the CSS used by the story format, allowing CSS programmers to write their own stylesheet redesigns more easily. Off by default - but including the text \u201cblank stylesheet\u201d in a stylesheet will set it on automatically. ROT13: obfuscates the story's HTML source to dissuade people from spoiling themselves by reading it. Off by default. jQuery: include the library or not Modernizr: include the the library or not :: StorySettings undo:on bookmark:on hash:on exitprompt:on blankcss:on obfuscate:rot13 jquery:on modernizr:on","title":"StorySettings (Twine 1)"},{"location":"terms/terms_twee.html#storyincludes-twine-1","text":"Includes, \"imports\", other local or remote files during the HTML compilation process. In Twine 1.4.2, both Twine Story (.tws) and Twine Source (.twee) files can be used. :: StoryIncludes localfile.tws","title":"StoryIncludes (Twine 1)"},{"location":"terms/terms_twee.html#storydata-twee-3","text":"A JSON chunk encapsulating various Twine 2-compatible details about the story. ifid: (Required) IFID of the story format: (Optional) Story format format-version: (Optional) Story format version start: (Optional) PID of starting passage tag-colors: (Optional) Pairs of tags and colors zoom: (Optional) Decimal zoom level :: StoryData { \"ifid\": \"D674C58C-DEFA-4F70-B7A2-27742230C0FC\", \"format\": \"SugarCube\", \"format-version\": \"2.28.2\", \"start\": \"My Starting Passage\", \"tag-colors\": { \"bar\": \"green\", \"foo\": \"red\", \"qaz\": \"blue\" }, \"zoom\": 0.25 }","title":"StoryData (Twee 3)"},{"location":"terms/terms_twee.html#special-tag-names","text":"Twee 3 defines two special case-sensitive lowercase passage tags: stylesheet and script . (Passages are also loaded according to alphabetical order if others exist with the same special passage tags.)","title":"Special Tag Names"},{"location":"terms/terms_twee.html#stylesheet","text":"Any additional or overriding CSS rules for the story. :: UserStylesheet[stylesheet]","title":"Stylesheet"},{"location":"terms/terms_twee.html#script","text":"Any additional or overriding JavaScript code for the story. :: UserScript[script]","title":"Script"},{"location":"terms/terms_twine.html","text":"Twine \u00b6 Twine is an open-source tool for telling interactive, nonlinear stories. Navigation works by clicking (or, on mobile devices, tapping) links to change old, refresh current, or even load new content. Making with Twine \u00b6 Because Twine produces HTML that web browsers can read, the limitations on Twine are not in what can be developed with the tool, but in the web browsers that run it. Anything that can be done in a web browser can be done in Twine.","title":"Twine"},{"location":"terms/terms_twine.html#twine","text":"Twine is an open-source tool for telling interactive, nonlinear stories. Navigation works by clicking (or, on mobile devices, tapping) links to change old, refresh current, or even load new content.","title":"Twine"},{"location":"terms/terms_twine.html#making-with-twine","text":"Because Twine produces HTML that web browsers can read, the limitations on Twine are not in what can be developed with the tool, but in the web browsers that run it. Anything that can be done in a web browser can be done in Twine.","title":"Making with Twine"},{"location":"terms/terms_variables.html","text":"Variables \u00b6 In programming terminology, a variable is a container for a value that can change. In Twine, a variable is a way of storing and acting on data of some sort. Anything from a number to a series of characters can be stored in a variable. Unlike other code or text in a Passage , variables most commonly start with either the dollar sign ($) or the underscore ( _ ) in the Harlowe and SugarCube story formats. (In Chapbook, variables are part of a 'vars section' .) Story Variables (Harlowe and SugarCube) \u00b6 Once created, story variables in Twine can be accessed from any passage at any time. They are globally accessible to all functionality everywhere. Example: $numberVariable Variables are translated into their values when used by themselves in a Passage. To display their value, they can simply be included as part of any other text. Example: The value of the variable is $numberVariable. Temporary Variables (Harlowe and SugarCube) \u00b6 It can often be useful to work with values in a more controlled manner. For this purpose, temporary variables can be used. They are locally accessible. They only exist while the current passage is shown. They start with an underscore ( _ ). Example: _tempVariable Temporary variables can also be used to display their values with other text like Story Variables. Example: The value of the variable is _numberVariable. Differences in Chapbook \u00b6 Chapbook handles variables differently. Instead of variables needing to start with the dollar sign $ or an underscore, _ , Chapbook also allows variable names to start with upper or lowercase letters as well. Example: strength: 18 $dexterity: 7 _constitution: 14 Differences in Snowman \u00b6 Snowman uses JavaScript variables . It provides three global variables: window.story (for working with the story), window.passage (for working with the current passage), and s (as a way to access values across passages). Example: s.strength = 14;","title":"Variables"},{"location":"terms/terms_variables.html#variables","text":"In programming terminology, a variable is a container for a value that can change. In Twine, a variable is a way of storing and acting on data of some sort. Anything from a number to a series of characters can be stored in a variable. Unlike other code or text in a Passage , variables most commonly start with either the dollar sign ($) or the underscore ( _ ) in the Harlowe and SugarCube story formats. (In Chapbook, variables are part of a 'vars section' .)","title":"Variables"},{"location":"terms/terms_variables.html#story-variables-harlowe-and-sugarcube","text":"Once created, story variables in Twine can be accessed from any passage at any time. They are globally accessible to all functionality everywhere. Example: $numberVariable Variables are translated into their values when used by themselves in a Passage. To display their value, they can simply be included as part of any other text. Example: The value of the variable is $numberVariable.","title":"Story Variables (Harlowe and SugarCube)"},{"location":"terms/terms_variables.html#temporary-variables-harlowe-and-sugarcube","text":"It can often be useful to work with values in a more controlled manner. For this purpose, temporary variables can be used. They are locally accessible. They only exist while the current passage is shown. They start with an underscore ( _ ). Example: _tempVariable Temporary variables can also be used to display their values with other text like Story Variables. Example: The value of the variable is _numberVariable.","title":"Temporary Variables (Harlowe and SugarCube)"},{"location":"terms/terms_variables.html#differences-in-chapbook","text":"Chapbook handles variables differently. Instead of variables needing to start with the dollar sign $ or an underscore, _ , Chapbook also allows variable names to start with upper or lowercase letters as well. Example: strength: 18 $dexterity: 7 _constitution: 14","title":"Differences in Chapbook"},{"location":"terms/terms_variables.html#differences-in-snowman","text":"Snowman uses JavaScript variables . It provides three global variables: window.story (for working with the story), window.passage (for working with the current passage), and s (as a way to access values across passages). Example: s.strength = 14;","title":"Differences in Snowman"},{"location":"timedpassages/chapbook/chapbook_timedpassages.html","text":"\"Timed Passages\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the JavaScript function setTimeout() and Chapbook's internal go() function to reload a passage every second. It combines the use of the Vars Section with multiple modifiers . Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Timed Passages :: Start timeLeft: 11 -- [[Start->Timer]] :: World End The world ended. :: Timer timeLeft: timeLeft - 1 -- [if timeLeft > 0] There are {timeLeft} seconds left. [else] {embed passage: 'World End'} [JavaScript] window.setTimeout(() => go('Timer'), 1000); Download: Twee Code","title":"Chapbook"},{"location":"timedpassages/chapbook/chapbook_timedpassages.html#timed-passages-chapbook-v100","text":"","title":"\"Timed Passages\": Chapbook (v1.0.0)"},{"location":"timedpassages/chapbook/chapbook_timedpassages.html#summary","text":"Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the JavaScript function setTimeout() and Chapbook's internal go() function to reload a passage every second. It combines the use of the Vars Section with multiple modifiers .","title":"Summary"},{"location":"timedpassages/chapbook/chapbook_timedpassages.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"timedpassages/chapbook/chapbook_timedpassages.html#twee-code","text":":: StoryTitle Chapbook: Timed Passages :: Start timeLeft: 11 -- [[Start->Timer]] :: World End The world ended. :: Timer timeLeft: timeLeft - 1 -- [if timeLeft > 0] There are {timeLeft} seconds left. [else] {embed passage: 'World End'} [JavaScript] window.setTimeout(() => go('Timer'), 1000); Download: Twee Code","title":"Twee Code"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html","text":"\"Timed Passages\": Harlowe (v2.0) \u00b6 Summary \u00b6 Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the (live:) macro to count seconds while checking if the timer has reached zero. If so, the (goto:) macro will immediately go to another passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Harlowe: Timed Passages :: StoryStylesheet[stylesheet] tw-include[type=\"startup\"]{ display: none; } tw-sidebar { display:none; } :: Start [[Start Timer|First Passage]] :: World End The world ended. :: First Passage (display: \"Timer\") [[Second Passage]] :: Timer { (live: 1s)[ (if: $timer is 0)[ (stop:) (goto: \"World End\") ] (else: )[ (set: $timer to it - 1) The world will end in $timer seconds ] ] } :: Second Passage (display: \"Timer\") [[First Passage]] :: Startup[startup] (set: $timer to 10) Download: Twee Code See Also \u00b6 Delayed Text , Typewriter Effect","title":"Harlowe"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html#timed-passages-harlowe-v20","text":"","title":"\"Timed Passages\": Harlowe (v2.0)"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html#summary","text":"Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the (live:) macro to count seconds while checking if the timer has reached zero. If so, the (goto:) macro will immediately go to another passage.","title":"Summary"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html#twee-code","text":":: StoryTitle Harlowe: Timed Passages :: StoryStylesheet[stylesheet] tw-include[type=\"startup\"]{ display: none; } tw-sidebar { display:none; } :: Start [[Start Timer|First Passage]] :: World End The world ended. :: First Passage (display: \"Timer\") [[Second Passage]] :: Timer { (live: 1s)[ (if: $timer is 0)[ (stop:) (goto: \"World End\") ] (else: )[ (set: $timer to it - 1) The world will end in $timer seconds ] ] } :: Second Passage (display: \"Timer\") [[First Passage]] :: Startup[startup] (set: $timer to 10) Download: Twee Code","title":"Twee Code"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html#see-also","text":"Delayed Text , Typewriter Effect","title":"See Also"},{"location":"timedpassages/snowman/snowman_timedpassages.html","text":"\"Timed Passages\": Snowman (1.4) \u00b6 Summary \u00b6 Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the _ .delay() function to count seconds while checking if the timer has reached zero. If so, the window.story.show() function will immediately transition to another passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: Start There are <span class=\"time-left\">10</span> seconds left. <% $(function() { var timeLeft = parseInt($('.time-left').text()); function tick() { if (--timeLeft === 0) { story.show('World End'); } else { $('.time-left').text(timeLeft); } _.delay(tick, 1000); } /* Start ticking. */ _.delay(tick, 1000); }); %> :: World End The world ended. Download: Twee Code See Also \u00b6 Delayed Text , Typewriter Effect","title":"Snowman"},{"location":"timedpassages/snowman/snowman_timedpassages.html#timed-passages-snowman-14","text":"","title":"\"Timed Passages\": Snowman (1.4)"},{"location":"timedpassages/snowman/snowman_timedpassages.html#summary","text":"Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the _ .delay() function to count seconds while checking if the timer has reached zero. If so, the window.story.show() function will immediately transition to another passage.","title":"Summary"},{"location":"timedpassages/snowman/snowman_timedpassages.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"timedpassages/snowman/snowman_timedpassages.html#twee-code","text":":: Start There are <span class=\"time-left\">10</span> seconds left. <% $(function() { var timeLeft = parseInt($('.time-left').text()); function tick() { if (--timeLeft === 0) { story.show('World End'); } else { $('.time-left').text(timeLeft); } _.delay(tick, 1000); } /* Start ticking. */ _.delay(tick, 1000); }); %> :: World End The world ended. Download: Twee Code","title":"Twee Code"},{"location":"timedpassages/snowman/snowman_timedpassages.html#see-also","text":"Delayed Text , Typewriter Effect","title":"See Also"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html","text":"\"Timed Passages\": SugarCube (v2.18) \u00b6 Summary \u00b6 Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the <<repeat>> macro to repeat while checking if the timer has reached zero. If so, the <<goto>> macro will immediately transition to another passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Timed Passages :: StoryJavaScript[script] UIBar.destroy(); :: Start [[Start Timer|First Passage]] :: Timer <span id=\"countdown\">The world will end in $seconds seconds.</span> <<silently>> <<repeat 1s>> <<set $seconds to $seconds - 1>> <<if $seconds gt 0>> <<replace \"#countdown\">>The world will end in $seconds seconds.<</replace>> <<else>> <<replace \"#countdown\">><</replace>> <<goto \"World End\">> <<stop>> <</if>> <</repeat>> <</silently>> :: First Passage <<include \"Timer\">> [[Second Passage]] :: Second Passage <<include \"Timer\">> [[First Passage]] :: World End The world has ended. :: StoryInit <<set $seconds to 10>> Download: Twee Code See Also \u00b6 Delayed Text , Typewriter Effect","title":"SugarCube"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html#timed-passages-sugarcube-v218","text":"","title":"\"Timed Passages\": SugarCube (v2.18)"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html#summary","text":"Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the <<repeat>> macro to repeat while checking if the timer has reached zero. If so, the <<goto>> macro will immediately transition to another passage.","title":"Summary"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html#twee-code","text":":: StoryTitle SugarCube: Timed Passages :: StoryJavaScript[script] UIBar.destroy(); :: Start [[Start Timer|First Passage]] :: Timer <span id=\"countdown\">The world will end in $seconds seconds.</span> <<silently>> <<repeat 1s>> <<set $seconds to $seconds - 1>> <<if $seconds gt 0>> <<replace \"#countdown\">>The world will end in $seconds seconds.<</replace>> <<else>> <<replace \"#countdown\">><</replace>> <<goto \"World End\">> <<stop>> <</if>> <</repeat>> <</silently>> :: First Passage <<include \"Timer\">> [[Second Passage]] :: Second Passage <<include \"Timer\">> [[First Passage]] :: World End The world has ended. :: StoryInit <<set $seconds to 10>> Download: Twee Code","title":"Twee Code"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html#see-also","text":"Delayed Text , Typewriter Effect","title":"See Also"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html","text":"\"Timed Progress Bars\": Snowman (v1.3.0) \u00b6 Summary \u00b6 \"Timed Progress Bars\" creates a global window.setup object and function, timedprogressbars() . Using jQuery within the definition, the function creates outer and inner <div> elements with CSS classes defined in the Story Stylesheet. Using a combination of setInterval() and setTimeout() , a timer is created. The length and color of an inner <div> element is adjusted based on the remaining time each loop. When the timer runs out, the function argument is run and the length of the inner <div> element is reduced to 0. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Timed Progress Bars in Snowman :: UserScript[script] // Use or create window.setup window.setup = window.setup || {}; /* Description: Show a dynamically-created \"progress bar\" that changes colors as its timer runs down. Arguments: duration: time in seconds width: CSS width functionToRun: the function to execute when the timer runs out */ setup.timedprogressbars = function(duration, width, functionToRun) { // Save or generate a default duration var duration = (Number(duration) || 60) * 1000; // Save or generate a width var width = width || \"100%\"; // Generate a unique hash var hash = Math.floor(Math.random() * 0x100000000).toString(16); // Create an outer ID var outerId = \"outer_\" + hash; // Create an inner ID var innerId = \"inner_\" + hash; // Create an outer div, // add an ID, // add a class, // change the CSS width, and // append to the output var progressbar = $(\"<div>\") .attr(\"id\", outerId) .addClass(\"progress-bar\") .css('width', width) .appendTo(\"#passage\"); // Create an inner div, // add an ID, // add a class, // change the CSS width, and // append to the progressbar var progressvalue = $(\"<div>\") .attr(\"id\", innerId) .addClass(\"progress-value\") .css('width', \"100%\") .appendTo(progressbar); // Create a function to convert into hexadecimal var toHex = function(num) { var res = Math.round(Number(num)).toString(16); return (res.length === 1 ? \"0\" + res : res); }; // Watch for the :passagedisplay event once jQuery(document).one(\"showpassage:after\", function() { // Get the current time var timeStarted = (new Date()).getTime(); // Save a reference to the setInterval function var workFunction = setInterval(function() { // Check if the element is still 'connected' if(! progressbar.prop(\"isConnected\") ) { // Navigated away from the passage clearInterval(workFunction); return; } // Figure out how much time has passed var timePassed = (new Date()).getTime() - timeStarted; // Check if the timer has run out if(timePassed >= duration) { // Reduce the inner width to 0 progressvalue.css('width', \"0\"); // Clear interval clearInterval(workFunction); // Run the inner function (if set) setTimeout(functionToRun, 40); return; } // Update the progress percentage var percentage = 100 - 100 * timePassed / duration; // Save the new color var color = \"#\" + toHex(Math.min(255, 510 - 5.1 * percentage)) + toHex(Math.min(255, 5.1 * percentage)) + \"00\"; // Update the background color of the inner div progressvalue.css(\"backgroundColor\", color); // Update the inner div width progressvalue.css(\"width\", (100 - 100 * timePassed / duration) + \"%\"); }, 40); }); }; :: UserStylesheet[stylesheet] .progress-bar { position: relative; border: 1px solid #777; background: black; height: 1em; } .progress-value { position: absolute; top: 0; left: 0; height: 100%; background: #00ff00; } :: Start <script> setup.timedprogressbars(5, \"20em\", function(){ // Hide the progress bar $(\".progress-bar\").css(\"display\", \"none\"); // Display the result $(\"#results\").text(\"Too late!\"); }); </script> <div id=\"results\"></div> Download: Twee Code See Also \u00b6 Adding Functionality","title":"Snowman"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html#timed-progress-bars-snowman-v130","text":"","title":"\"Timed Progress Bars\": Snowman (v1.3.0)"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html#summary","text":"\"Timed Progress Bars\" creates a global window.setup object and function, timedprogressbars() . Using jQuery within the definition, the function creates outer and inner <div> elements with CSS classes defined in the Story Stylesheet. Using a combination of setInterval() and setTimeout() , a timer is created. The length and color of an inner <div> element is adjusted based on the remaining time each loop. When the timer runs out, the function argument is run and the length of the inner <div> element is reduced to 0.","title":"Summary"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html#twee-code","text":":: StoryTitle Timed Progress Bars in Snowman :: UserScript[script] // Use or create window.setup window.setup = window.setup || {}; /* Description: Show a dynamically-created \"progress bar\" that changes colors as its timer runs down. Arguments: duration: time in seconds width: CSS width functionToRun: the function to execute when the timer runs out */ setup.timedprogressbars = function(duration, width, functionToRun) { // Save or generate a default duration var duration = (Number(duration) || 60) * 1000; // Save or generate a width var width = width || \"100%\"; // Generate a unique hash var hash = Math.floor(Math.random() * 0x100000000).toString(16); // Create an outer ID var outerId = \"outer_\" + hash; // Create an inner ID var innerId = \"inner_\" + hash; // Create an outer div, // add an ID, // add a class, // change the CSS width, and // append to the output var progressbar = $(\"<div>\") .attr(\"id\", outerId) .addClass(\"progress-bar\") .css('width', width) .appendTo(\"#passage\"); // Create an inner div, // add an ID, // add a class, // change the CSS width, and // append to the progressbar var progressvalue = $(\"<div>\") .attr(\"id\", innerId) .addClass(\"progress-value\") .css('width', \"100%\") .appendTo(progressbar); // Create a function to convert into hexadecimal var toHex = function(num) { var res = Math.round(Number(num)).toString(16); return (res.length === 1 ? \"0\" + res : res); }; // Watch for the :passagedisplay event once jQuery(document).one(\"showpassage:after\", function() { // Get the current time var timeStarted = (new Date()).getTime(); // Save a reference to the setInterval function var workFunction = setInterval(function() { // Check if the element is still 'connected' if(! progressbar.prop(\"isConnected\") ) { // Navigated away from the passage clearInterval(workFunction); return; } // Figure out how much time has passed var timePassed = (new Date()).getTime() - timeStarted; // Check if the timer has run out if(timePassed >= duration) { // Reduce the inner width to 0 progressvalue.css('width', \"0\"); // Clear interval clearInterval(workFunction); // Run the inner function (if set) setTimeout(functionToRun, 40); return; } // Update the progress percentage var percentage = 100 - 100 * timePassed / duration; // Save the new color var color = \"#\" + toHex(Math.min(255, 510 - 5.1 * percentage)) + toHex(Math.min(255, 5.1 * percentage)) + \"00\"; // Update the background color of the inner div progressvalue.css(\"backgroundColor\", color); // Update the inner div width progressvalue.css(\"width\", (100 - 100 * timePassed / duration) + \"%\"); }, 40); }); }; :: UserStylesheet[stylesheet] .progress-bar { position: relative; border: 1px solid #777; background: black; height: 1em; } .progress-value { position: absolute; top: 0; left: 0; height: 100%; background: #00ff00; } :: Start <script> setup.timedprogressbars(5, \"20em\", function(){ // Hide the progress bar $(\".progress-bar\").css(\"display\", \"none\"); // Display the result $(\"#results\").text(\"Too late!\"); }); </script> <div id=\"results\"></div> Download: Twee Code","title":"Twee Code"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html#see-also","text":"Adding Functionality","title":"See Also"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html","text":"\"Timed Progress Bars\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Timed Progress Bars\" uses the Macro.Add() function in SugarCube to introduce a new macro. Using jQuery within the definition, the new macro records arguments passed to it and creates outer and inner <div> elements with classes defined in the Story Stylesheet. Using a combination of setInterval() and setTimeout() , a timer is created based on the argument passed to the macro. The length and color of an inner <div> element is adjusted based on the remaining time each loop. When the timer runs out, the payload of the macro is run and the length of the inner <div> element is reduced to 0. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Timed Progress Bars in SugarCube :: UserScript[script] /* Macro: timedprogressbar Description: Show a dynamically-created \"progress bar\" that changes colors as its timer runs down. Original design: Akjosch (https://github.com/Akjosch) Arguments: [0]: The time to run in seconds [1]: The length of the progress bar in CSS units (px, em, or %) */ Macro.add(\"timedprogressbar\", { isAsync : true, tags: null, handler: function() { // Filter the payload for newlines and save it for later execution var payload = this.payload[0].contents.replace(/\\n$/, '').trim(); // Save or generate a default duration var duration = (Number(this.args[0]) || 60) * 1000; // Save or generate a width var width = this.args[1] || \"100%\"; // Generate a unique hash var hash = Math.floor(Math.random() * 0x100000000).toString(16); // Create an outer ID var outerId = \"outer_\" + hash; // Create an inner ID var innerId = \"inner_\" + hash; // Create an outer div, // add an ID, // add a class, // change the CSS width, and // append to the output var progressbar = $(\"<div>\") .attr(\"id\", outerId) .addClass(\"progress-bar\") .css('width', width) .appendTo(this.output); // Create an inner div, // add an ID, // add a class, // change the CSS width, and // append to the progressbar var progressvalue = $(\"<div>\") .attr(\"id\", innerId) .addClass(\"progress-value\") .css('width', \"100%\") .appendTo(progressbar); // Create a function to convert into hexadecimal var toHex = function(num) { var res = Math.round(Number(num)).toString(16); return (res.length === 1 ? \"0\" + res : res); }; // Save a reference to possible payload content var functionToRun = this.createShadowWrapper( payload ? function() { Wikifier.wikifyEval(payload); } : null ); // Watch for the :passagedisplay event once jQuery(document).one(\":passagedisplay\", function() { // Get the current time var timeStarted = (new Date()).getTime(); // Save a reference to the setInterval function var workFunction = setInterval(function() { // Check if the element is still 'connected' if(! progressbar.prop(\"isConnected\") ) { // Navigated away from the passage clearInterval(workFunction); return; } // Figure out how much time has passed var timePassed = (new Date()).getTime() - timeStarted; // Check if the timer has run out if(timePassed >= duration) { // Reduce the inner width to 0 progressvalue.css('width', \"0\"); // Clear interval clearInterval(workFunction); // Run the inner function (if set) setTimeout(functionToRun, 40); return; } // Update the progress percentage var percentage = 100 - 100 * timePassed / duration; // Save the new color var color = \"#\" + toHex(Math.min(255, 510 - 5.1 * percentage)) + toHex(Math.min(255, 5.1 * percentage)) + \"00\"; // Update the background color of the inner div progressvalue.css(\"backgroundColor\", color); // Update the inner div width progressvalue.css(\"width\", (100 - 100 * timePassed / duration) + \"%\"); }, 40); }); }, }); :: UserStylesheet[stylesheet] .progress-bar { position: relative; border: 1px solid #777; background: black; height: 1em; } .progress-value { position: absolute; top: 0; left: 0; height: 100%; background: #00ff00; } :: Start <<timedprogressbar 5 20em>> <<run UI.alert(\"Too late!\")>> <</timedprogressbar>> Download: Twee Code See Also \u00b6 Adding Functionality","title":"SugarCube"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html#timed-progress-bars-sugarcube-v218","text":"","title":"\"Timed Progress Bars\": SugarCube (v2.18)"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html#summary","text":"\"Timed Progress Bars\" uses the Macro.Add() function in SugarCube to introduce a new macro. Using jQuery within the definition, the new macro records arguments passed to it and creates outer and inner <div> elements with classes defined in the Story Stylesheet. Using a combination of setInterval() and setTimeout() , a timer is created based on the argument passed to the macro. The length and color of an inner <div> element is adjusted based on the remaining time each loop. When the timer runs out, the payload of the macro is run and the length of the inner <div> element is reduced to 0.","title":"Summary"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html#twee-code","text":":: StoryTitle Timed Progress Bars in SugarCube :: UserScript[script] /* Macro: timedprogressbar Description: Show a dynamically-created \"progress bar\" that changes colors as its timer runs down. Original design: Akjosch (https://github.com/Akjosch) Arguments: [0]: The time to run in seconds [1]: The length of the progress bar in CSS units (px, em, or %) */ Macro.add(\"timedprogressbar\", { isAsync : true, tags: null, handler: function() { // Filter the payload for newlines and save it for later execution var payload = this.payload[0].contents.replace(/\\n$/, '').trim(); // Save or generate a default duration var duration = (Number(this.args[0]) || 60) * 1000; // Save or generate a width var width = this.args[1] || \"100%\"; // Generate a unique hash var hash = Math.floor(Math.random() * 0x100000000).toString(16); // Create an outer ID var outerId = \"outer_\" + hash; // Create an inner ID var innerId = \"inner_\" + hash; // Create an outer div, // add an ID, // add a class, // change the CSS width, and // append to the output var progressbar = $(\"<div>\") .attr(\"id\", outerId) .addClass(\"progress-bar\") .css('width', width) .appendTo(this.output); // Create an inner div, // add an ID, // add a class, // change the CSS width, and // append to the progressbar var progressvalue = $(\"<div>\") .attr(\"id\", innerId) .addClass(\"progress-value\") .css('width', \"100%\") .appendTo(progressbar); // Create a function to convert into hexadecimal var toHex = function(num) { var res = Math.round(Number(num)).toString(16); return (res.length === 1 ? \"0\" + res : res); }; // Save a reference to possible payload content var functionToRun = this.createShadowWrapper( payload ? function() { Wikifier.wikifyEval(payload); } : null ); // Watch for the :passagedisplay event once jQuery(document).one(\":passagedisplay\", function() { // Get the current time var timeStarted = (new Date()).getTime(); // Save a reference to the setInterval function var workFunction = setInterval(function() { // Check if the element is still 'connected' if(! progressbar.prop(\"isConnected\") ) { // Navigated away from the passage clearInterval(workFunction); return; } // Figure out how much time has passed var timePassed = (new Date()).getTime() - timeStarted; // Check if the timer has run out if(timePassed >= duration) { // Reduce the inner width to 0 progressvalue.css('width', \"0\"); // Clear interval clearInterval(workFunction); // Run the inner function (if set) setTimeout(functionToRun, 40); return; } // Update the progress percentage var percentage = 100 - 100 * timePassed / duration; // Save the new color var color = \"#\" + toHex(Math.min(255, 510 - 5.1 * percentage)) + toHex(Math.min(255, 5.1 * percentage)) + \"00\"; // Update the background color of the inner div progressvalue.css(\"backgroundColor\", color); // Update the inner div width progressvalue.css(\"width\", (100 - 100 * timePassed / duration) + \"%\"); }, 40); }); }, }); :: UserStylesheet[stylesheet] .progress-bar { position: relative; border: 1px solid #777; background: black; height: 1em; } .progress-value { position: absolute; top: 0; left: 0; height: 100%; background: #00ff00; } :: Start <<timedprogressbar 5 20em>> <<run UI.alert(\"Too late!\")>> <</timedprogressbar>> Download: Twee Code","title":"Twee Code"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html#see-also","text":"Adding Functionality","title":"See Also"},{"location":"turncounter/chapbook/chapbook_turncounter.html","text":"\"Turn Counter\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 In Chapbook, the global variable trail stores all of the passages visited as an increasing array. For each passage visited, a new entry is added. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (number of passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Turn Counter :: Start hour: trail.length % 24 -- {embed passage: \"Turn Counter\"} Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room {embed passage: \"Turn Counter\"} Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room {embed passage: \"Turn Counter\"} Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room {embed passage: \"Turn Counter\"} Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: Turn Counter hour: trail.length % 24 -- [if hour <= 8] It is morning. [if hour > 8 && hour <= 12] It is mid-morning. [if hour > 12 && hour <= 16] It is afternoon. [if hour > 16] It is night. Download: Twee Code","title":"Chapbook"},{"location":"turncounter/chapbook/chapbook_turncounter.html#turn-counter-chapbook-v100","text":"","title":"\"Turn Counter\": Chapbook (v1.0.0)"},{"location":"turncounter/chapbook/chapbook_turncounter.html#summary","text":"In Chapbook, the global variable trail stores all of the passages visited as an increasing array. For each passage visited, a new entry is added. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (number of passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again.","title":"Summary"},{"location":"turncounter/chapbook/chapbook_turncounter.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"turncounter/chapbook/chapbook_turncounter.html#twee-code","text":":: StoryTitle Chapbook: Turn Counter :: Start hour: trail.length % 24 -- {embed passage: \"Turn Counter\"} Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room {embed passage: \"Turn Counter\"} Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room {embed passage: \"Turn Counter\"} Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room {embed passage: \"Turn Counter\"} Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: Turn Counter hour: trail.length % 24 -- [if hour <= 8] It is morning. [if hour > 8 && hour <= 12] It is mid-morning. [if hour > 12 && hour <= 16] It is afternoon. [if hour > 16] It is night. Download: Twee Code","title":"Twee Code"},{"location":"turncounter/harlowe/harlowe_turncounter.html","text":"\"Turn Counter\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Turn Counter\" demonstrates the use of the (history:) macro in keeping track of \"turns\" (number of passages visited). In this example, the length of the array returned by using the (history:) macro is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Turn Counter in Harlowe :: Start Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Turn Counter[header] { (set: $hour to (history:)'s length % 24 ) (if: $hour <= 8)[It is morning.] (if: $hour > 8 and $hour <= 12)[It is mid-morning.] (if: $hour > 12 and $hour <= 16)[It is afternoon.] (if: $hour > 16)[It is night.] } :: Back Room Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] Download: Twee Code","title":"Harlowe"},{"location":"turncounter/harlowe/harlowe_turncounter.html#turn-counter-harlowe-v20","text":"","title":"\"Turn Counter\": Harlowe (v2.0)"},{"location":"turncounter/harlowe/harlowe_turncounter.html#summary","text":"\"Turn Counter\" demonstrates the use of the (history:) macro in keeping track of \"turns\" (number of passages visited). In this example, the length of the array returned by using the (history:) macro is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again.","title":"Summary"},{"location":"turncounter/harlowe/harlowe_turncounter.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"turncounter/harlowe/harlowe_turncounter.html#twee-code","text":":: StoryTitle Turn Counter in Harlowe :: Start Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Turn Counter[header] { (set: $hour to (history:)'s length % 24 ) (if: $hour <= 8)[It is morning.] (if: $hour > 8 and $hour <= 12)[It is mid-morning.] (if: $hour > 12 and $hour <= 16)[It is afternoon.] (if: $hour > 16)[It is night.] } :: Back Room Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] Download: Twee Code","title":"Twee Code"},{"location":"turncounter/snowman/snowman_turncounter.html","text":"\"Turn Counter\": Snowman (v1.3.0) \u00b6 Summary \u00b6 \"Turn Counter\" demonstrates the use of the window.story.history array in keeping track of \"turns\" (number of passages visited). The window.story.render() function is used to \"display\" or otherwise include another passage at the start of each. In this example, the length of the array window.story.history is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Turn Counter in Snowman :: Start <%= window.story.render(\"Turn Counter\") %> Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: Turn Counter <% var hour = window.story.history.length % 24; if(hour <= 8){%> It is morning. <%} if(hour > 8 && hour <= 12){%> It is mid-morning. <%} if(hour > 12 && hour <= 16){%> It is afternoon. <%} if(hour > 16){%> It is night. <%} %> Download: Twee Code","title":"Snowman"},{"location":"turncounter/snowman/snowman_turncounter.html#turn-counter-snowman-v130","text":"","title":"\"Turn Counter\": Snowman (v1.3.0)"},{"location":"turncounter/snowman/snowman_turncounter.html#summary","text":"\"Turn Counter\" demonstrates the use of the window.story.history array in keeping track of \"turns\" (number of passages visited). The window.story.render() function is used to \"display\" or otherwise include another passage at the start of each. In this example, the length of the array window.story.history is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again.","title":"Summary"},{"location":"turncounter/snowman/snowman_turncounter.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"turncounter/snowman/snowman_turncounter.html#twee-code","text":":: StoryTitle Turn Counter in Snowman :: Start <%= window.story.render(\"Turn Counter\") %> Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: Turn Counter <% var hour = window.story.history.length % 24; if(hour <= 8){%> It is morning. <%} if(hour > 8 && hour <= 12){%> It is mid-morning. <%} if(hour > 12 && hour <= 16){%> It is afternoon. <%} if(hour > 16){%> It is night. <%} %> Download: Twee Code","title":"Twee Code"},{"location":"turncounter/sugarcube/sugarcube_turncounter.html","text":"\"Turn Counter\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Turn Counter\" demonstrates the use of the State.turns attribute of the State object to keep track of the \"turns\" (moments within the story). In this example, the State.turns property is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (moments) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" This example also uses the special name \" PassageHeader \" as a named passage that is prepended to each passage in the story. The results of the modulo 24 calculation and clock string is displayed on every passage. By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle SugarCube: Turn Counter :: Start Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: PassageHeader <<set $hour to State.turns % 24>> <<if $hour <= 8>>It is morning.<</if>> <<if $hour > 8 and $hour <= 12>>It is mid-morning.<</if>> <<if $hour > 12 and $hour <= 16>>It is afternoon.<</if>> <<if $hour > 16>>It is night.<</if>> Download: Twee Code","title":"SugarCube"},{"location":"turncounter/sugarcube/sugarcube_turncounter.html#turn-counter-sugarcube-v218","text":"","title":"\"Turn Counter\": SugarCube (v2.18)"},{"location":"turncounter/sugarcube/sugarcube_turncounter.html#summary","text":"\"Turn Counter\" demonstrates the use of the State.turns attribute of the State object to keep track of the \"turns\" (moments within the story). In this example, the State.turns property is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (moments) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" This example also uses the special name \" PassageHeader \" as a named passage that is prepended to each passage in the story. The results of the modulo 24 calculation and clock string is displayed on every passage. By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again.","title":"Summary"},{"location":"turncounter/sugarcube/sugarcube_turncounter.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"turncounter/sugarcube/sugarcube_turncounter.html#twee-code","text":":: StoryTitle SugarCube: Turn Counter :: Start Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: PassageHeader <<set $hour to State.turns % 24>> <<if $hour <= 8>>It is morning.<</if>> <<if $hour > 8 and $hour <= 12>>It is mid-morning.<</if>> <<if $hour > 12 and $hour <= 16>>It is afternoon.<</if>> <<if $hour > 16>>It is night.<</if>> Download: Twee Code","title":"Twee Code"},{"location":"twine1documentation/formatting.html","text":"Formatting \u00b6 Warning You are reading documentation for Twine 1. The latest version is Twine 2, and very little functionality is backwards compatible. Sometimes you'd like to apply styles to your text -- to italicize a book title, for example. You can do this with simple formatting codes that are similar to the double brackets of a link. Here is what's available to you:","title":"Formatting"},{"location":"twine1documentation/formatting.html#formatting","text":"Warning You are reading documentation for Twine 1. The latest version is Twine 2, and very little functionality is backwards compatible. Sometimes you'd like to apply styles to your text -- to italicize a book title, for example. You can do this with simple formatting codes that are similar to the double brackets of a link. Here is what's available to you:","title":"Formatting"},{"location":"twine1documentation/links.html","text":"Links \u00b6 Warning You are reading documentation for Twine 1. The latest version is Twine 2, and very little functionality is backwards compatible. Links are the player's means of moving between passages and affecting the story. They are the equivalent of being told to turn to another page in a nonlinear book; in gamebooks, for example, you do this to make decisions for the main character. But this isn't the only possible kind of link. Usage \u00b6 Links are marked like so: [[displayed text|title of passage]] The two square brackets enclose the whole link, and the pipe symbol separates the displayed text from the passage title. There is also a shorter form of the link syntax -- [[passage title]] -- where the displayed link text matches the title of the passage it links to. If a story has a broken link in it, it is displayed with a red background in your story, and clicking it shows this message: The passage 'The newspaper' doesn't exist. External links \u00b6 You may also add links to external sites. These links look like this: [[DuckDuckGo|http://www.duckduckgo.com/]] [[http://www.duckduckgo.com/]] You may link to any address that a reader's web browser will understand. Setting variables with Setter-Links \u00b6 When you develop more complex stories that use variables, it can be very useful to make certain variables be altered by the act of clicking a link. You can accomplish this by inserting an additional square bracket pair into the syntax like so: [[displayed text|title of passage][$variable = expression]] The 'code' portion of the link syntax is treated as if it was a <<set>> macro - consult that page to learn about the syntax to use. A link with a piece of code attached like this is called a setter link, and the attached code is called its tail. Much like the <<set>> macro, you can chain together multiple variable-settings by separating them with either commas or semicolons: * I choose the [[Garb of the Hawk][$hat = \"beak\"; $shoes = \"talons\"]] * I choose the [[Attire of the Mire][$hat = \"mud\"; $shoes = \"gumboots\"]] Clicking either of the above links will set both variables simultaneously. Printing Links \u00b6 With very complex stories you may come across an issue with setter-links that occurs when you refer to a variable for any reason other than to set its value. The problem arises because the setter statement is executed with the current values of the variables at the end of the passage - not the values they had when the link statement occurred. <<set $actor to \"Fred\">> <if $location[$actor] is passage()>> [[Talk to <<$actor>>|Talk_Fred][$chat = $actor]] <<endif>> <<set $actor to \"Ginger\">> <<if $location[$actor] is passage()>> [[Talk to <<$actor>>|Talk_Ginger][$chat = $actor]] <<endif>> In this case, regardless of which link you picked, $chat would end up getting set to \"Ginger\" - the value of $actor at the end of the passage. Although there is a trivial fix that could be used in this example (simply hard code the actors names), the general solution is to use a print macro to write the link statement with the resolved values of the variables: <<set $actor to \"Fred\">> <<if $location[$actor] is passage()>> <<print \"[[Talk to \" + $actor + \"|Talk_\" + $actor + \"][$chat to '\" + $actor + \"']]\">> <<endif>> <<set $actor to \"Ginger\">> <<if $location[$actor] is passage()>> <<print \"[[Talk to \" + $actor + \"|Talk_\" + $actor + \"][$chat to '\" + $actor + \"']]\">> <<endif>>","title":"Links"},{"location":"twine1documentation/links.html#links","text":"Warning You are reading documentation for Twine 1. The latest version is Twine 2, and very little functionality is backwards compatible. Links are the player's means of moving between passages and affecting the story. They are the equivalent of being told to turn to another page in a nonlinear book; in gamebooks, for example, you do this to make decisions for the main character. But this isn't the only possible kind of link.","title":"Links"},{"location":"twine1documentation/links.html#usage","text":"Links are marked like so: [[displayed text|title of passage]] The two square brackets enclose the whole link, and the pipe symbol separates the displayed text from the passage title. There is also a shorter form of the link syntax -- [[passage title]] -- where the displayed link text matches the title of the passage it links to. If a story has a broken link in it, it is displayed with a red background in your story, and clicking it shows this message: The passage 'The newspaper' doesn't exist.","title":"Usage"},{"location":"twine1documentation/links.html#external-links","text":"You may also add links to external sites. These links look like this: [[DuckDuckGo|http://www.duckduckgo.com/]] [[http://www.duckduckgo.com/]] You may link to any address that a reader's web browser will understand.","title":"External links"},{"location":"twine1documentation/links.html#setting-variables-with-setter-links","text":"When you develop more complex stories that use variables, it can be very useful to make certain variables be altered by the act of clicking a link. You can accomplish this by inserting an additional square bracket pair into the syntax like so: [[displayed text|title of passage][$variable = expression]] The 'code' portion of the link syntax is treated as if it was a <<set>> macro - consult that page to learn about the syntax to use. A link with a piece of code attached like this is called a setter link, and the attached code is called its tail. Much like the <<set>> macro, you can chain together multiple variable-settings by separating them with either commas or semicolons: * I choose the [[Garb of the Hawk][$hat = \"beak\"; $shoes = \"talons\"]] * I choose the [[Attire of the Mire][$hat = \"mud\"; $shoes = \"gumboots\"]] Clicking either of the above links will set both variables simultaneously.","title":"Setting variables with Setter-Links"},{"location":"twine1documentation/links.html#printing-links","text":"With very complex stories you may come across an issue with setter-links that occurs when you refer to a variable for any reason other than to set its value. The problem arises because the setter statement is executed with the current values of the variables at the end of the passage - not the values they had when the link statement occurred. <<set $actor to \"Fred\">> <if $location[$actor] is passage()>> [[Talk to <<$actor>>|Talk_Fred][$chat = $actor]] <<endif>> <<set $actor to \"Ginger\">> <<if $location[$actor] is passage()>> [[Talk to <<$actor>>|Talk_Ginger][$chat = $actor]] <<endif>> In this case, regardless of which link you picked, $chat would end up getting set to \"Ginger\" - the value of $actor at the end of the passage. Although there is a trivial fix that could be used in this example (simply hard code the actors names), the general solution is to use a print macro to write the link statement with the resolved values of the variables: <<set $actor to \"Fred\">> <<if $location[$actor] is passage()>> <<print \"[[Talk to \" + $actor + \"|Talk_\" + $actor + \"][$chat to '\" + $actor + \"']]\">> <<endif>> <<set $actor to \"Ginger\">> <<if $location[$actor] is passage()>> <<print \"[[Talk to \" + $actor + \"|Talk_\" + $actor + \"][$chat to '\" + $actor + \"']]\">> <<endif>>","title":"Printing Links"},{"location":"twine1documentation/passages.html","text":"Passages \u00b6 Warning You are reading documentation for Twine 1. The latest version is Twine 2, and very little functionality is backwards compatible. Introduction \u00b6 The basic narrative unit of a book is a chapter. Although there are books that don't divide themselves up into chapters, most do, and it's a useful way for writers and readers to keep track of a book's structure. The corresponding unit for hypertext is a choice and the text that leads to it. In Choose Your Own Adventure books, this unit was a single printed page: If you decide to explore the ledge where the Seeker has come to rest, turn to page 6. If you decide to cut loose from the Maray and dive with the Seeker into the canyon in the ocean floor, turn to page 4. (R. A. Montgomery, Journey Under the Sea) As these books became more complex, more pages were required \u2013 and some of these pages didn't need to be terribly long. Gamebooks like the Fighting Fantasy series began to use numbered passages, several of which might be printed on a single page: You hear the sound of running feet approaching rapidly; you cannot yet see who or what is coming. Will you run through the nearest archway (turn to 17), or hold your ground and draw your sword (turn to 30)? (Steve Jackson, Talisman of Death) Using numbers to keep track of what to read next made sense for readers who had to locate the next part of the story themselves. But when hypertext leapt onto computer screens, choices could be made just by clicking underlined text: Scholar and showman, Urquhart knew in all his most sensitive bones that this was the time . There was a furious logic to this day-after-the-day, a logic he would have recognized even without Tate's nudge and a wink and \"my friends around the Beltway\" over lunch. He could feel the timing. He could feel a lot of things. Something had been at work in the world, some wavefront of rapid change only dimly felt but no less powerful for that. The waves passed through everything and everyone, transforming as they went. You only had to check the mirror. (Stuart Moulthrop, Victory Garden) There have been many names for these individual parts of text that readers navigate through. In Twine, they are known as passages, a word that both means a section of a written work as well as a route one might pass through. Details \u00b6 In Twine, passages are distinguished by their title. Passage titles are case-sensitive, which means that \u201cThis door\u201d and \u201cTHIS DOOR\u201d are two different passages. They also cannot contain the \u201c]\u201d and \u201c|\u201d symbols, or any line breaks. Passage titles must also be unique - trying to give two passages the same name will, usually, fail. Passages may also possess one or more tags. Consult the tags article to learn more about them. Passages are usually drawn in the Story Map with blue title bars. Terminus passages - passages which contain no links leading out of them - are drawn with a darker title. The Start passage is drawn with a green bar.","title":"Passages"},{"location":"twine1documentation/passages.html#passages","text":"Warning You are reading documentation for Twine 1. The latest version is Twine 2, and very little functionality is backwards compatible.","title":"Passages"},{"location":"twine1documentation/passages.html#introduction","text":"The basic narrative unit of a book is a chapter. Although there are books that don't divide themselves up into chapters, most do, and it's a useful way for writers and readers to keep track of a book's structure. The corresponding unit for hypertext is a choice and the text that leads to it. In Choose Your Own Adventure books, this unit was a single printed page: If you decide to explore the ledge where the Seeker has come to rest, turn to page 6. If you decide to cut loose from the Maray and dive with the Seeker into the canyon in the ocean floor, turn to page 4. (R. A. Montgomery, Journey Under the Sea) As these books became more complex, more pages were required \u2013 and some of these pages didn't need to be terribly long. Gamebooks like the Fighting Fantasy series began to use numbered passages, several of which might be printed on a single page: You hear the sound of running feet approaching rapidly; you cannot yet see who or what is coming. Will you run through the nearest archway (turn to 17), or hold your ground and draw your sword (turn to 30)? (Steve Jackson, Talisman of Death) Using numbers to keep track of what to read next made sense for readers who had to locate the next part of the story themselves. But when hypertext leapt onto computer screens, choices could be made just by clicking underlined text: Scholar and showman, Urquhart knew in all his most sensitive bones that this was the time . There was a furious logic to this day-after-the-day, a logic he would have recognized even without Tate's nudge and a wink and \"my friends around the Beltway\" over lunch. He could feel the timing. He could feel a lot of things. Something had been at work in the world, some wavefront of rapid change only dimly felt but no less powerful for that. The waves passed through everything and everyone, transforming as they went. You only had to check the mirror. (Stuart Moulthrop, Victory Garden) There have been many names for these individual parts of text that readers navigate through. In Twine, they are known as passages, a word that both means a section of a written work as well as a route one might pass through.","title":"Introduction"},{"location":"twine1documentation/passages.html#details","text":"In Twine, passages are distinguished by their title. Passage titles are case-sensitive, which means that \u201cThis door\u201d and \u201cTHIS DOOR\u201d are two different passages. They also cannot contain the \u201c]\u201d and \u201c|\u201d symbols, or any line breaks. Passage titles must also be unique - trying to give two passages the same name will, usually, fail. Passages may also possess one or more tags. Consult the tags article to learn more about them. Passages are usually drawn in the Story Map with blue title bars. Terminus passages - passages which contain no links leading out of them - are drawn with a darker title. The Start passage is drawn with a green bar.","title":"Details"},{"location":"twine1documentation/specialpassages.html","text":"Special Passages \u00b6 There are certain passage names that have special meaning, and let you make your stories look more polished. The most important is Start. It is the first passage displayed when your story is first loaded by a reader. StoryTitle, StorySubtitle, StoryAuthor \u00b6 StoryTitle is where you set your story's title. StorySubtitle lets you enter a brief subheading under the story, and StoryAuthor lets you credit yourself. Note that if you insert macro tags in these passages, they will be re-run every time the player changes passages. StoryMenu \u00b6 The StoryMenu passage lets you add items to the the menu that hovers in the upper-right corner of the page in the Jonah story format, or on the left side of the page in the Sugarcane story format. You can link directly to passages in your story from this menu. You might, for instance, put an \"About the author\" link in the menu that links to a passage containing a personal blurb. Take care with the length of your menu items. A link will be displayed on a single line, even if it means that it will overlap your story's text. Again, if you put macro tags in this passages, it will be re-run every time the player changes passages. This lets you make a \"dynamic menu\" that alters itself depending on the player's progress in the story. StorySettings \u00b6 The StorySettings passage enables a number of special story options to be set. Undo: enables the player to \"undo moves\". In Sugarcane, this means being able to use the Back button in the browser. In Jonah, this means being able to use the \"Rewind to here\" link, and being able to click links in previous passages. Bookmark: enables the player to use the \"Bookmark\" link in Sugarcane and Jonah. On by default. Hash updates: this causes the current passage's bookmark URL to be automatically placed in the player's browser address bar whenever they change passages. This is off by default because the URLs can become very long and ugly quickly - but if you opt against including the sidebar's \"Bookmark\" link, this may provide a useful alternative. Prompt before closing: If the player tries to reload or close the page, the browser will prompt for confirmation. This is useful for long games - it would be unfortunate if the player lost a lot of progress due to an idle key-press. Don't use default CSS: This removes most of the CSS used by the story format, allowing CSS programmers to write their own stylesheet redesigns more easily. Off by default - but including the text \"blank stylesheet\" in a stylesheet will set it on automatically. ROT13: obfuscates the story's HTML source to dissuade people from spoiling themselves by reading it. Off by default. jQuery: set this on if you are using custom scripts that rely on the jQuery library. Otherwise, leave off. Note: Twine 1.4 does not use the \"$\" variable, so jQuery can use it without $.noConflict(). Modernizr: set this on if you are using custom scripts or stylesheets that rely on the Modernizr library. Otherwise, leave off. StoryIncludes \u00b6 This passage is inspired by the \"import\" feature of various programming languages. It allows you to merge the passages from other .tws or .twee files into your story's HTML file at build time. This lets you work on a Twine project split into multiple files, each being edited independently of the other, but which are built into a single story. It also lets you import a Twine file from a web URL without having to personally download it. List the file paths and URLs that you want to include, line by line, in the StoryIncludes passage. If an included file contains a passage with the same name as another included file's passage, an error will be raised when you build.","title":"Special Passages"},{"location":"twine1documentation/specialpassages.html#special-passages","text":"There are certain passage names that have special meaning, and let you make your stories look more polished. The most important is Start. It is the first passage displayed when your story is first loaded by a reader.","title":"Special Passages"},{"location":"twine1documentation/specialpassages.html#storytitle-storysubtitle-storyauthor","text":"StoryTitle is where you set your story's title. StorySubtitle lets you enter a brief subheading under the story, and StoryAuthor lets you credit yourself. Note that if you insert macro tags in these passages, they will be re-run every time the player changes passages.","title":"StoryTitle, StorySubtitle, StoryAuthor"},{"location":"twine1documentation/specialpassages.html#storymenu","text":"The StoryMenu passage lets you add items to the the menu that hovers in the upper-right corner of the page in the Jonah story format, or on the left side of the page in the Sugarcane story format. You can link directly to passages in your story from this menu. You might, for instance, put an \"About the author\" link in the menu that links to a passage containing a personal blurb. Take care with the length of your menu items. A link will be displayed on a single line, even if it means that it will overlap your story's text. Again, if you put macro tags in this passages, it will be re-run every time the player changes passages. This lets you make a \"dynamic menu\" that alters itself depending on the player's progress in the story.","title":"StoryMenu"},{"location":"twine1documentation/specialpassages.html#storysettings","text":"The StorySettings passage enables a number of special story options to be set. Undo: enables the player to \"undo moves\". In Sugarcane, this means being able to use the Back button in the browser. In Jonah, this means being able to use the \"Rewind to here\" link, and being able to click links in previous passages. Bookmark: enables the player to use the \"Bookmark\" link in Sugarcane and Jonah. On by default. Hash updates: this causes the current passage's bookmark URL to be automatically placed in the player's browser address bar whenever they change passages. This is off by default because the URLs can become very long and ugly quickly - but if you opt against including the sidebar's \"Bookmark\" link, this may provide a useful alternative. Prompt before closing: If the player tries to reload or close the page, the browser will prompt for confirmation. This is useful for long games - it would be unfortunate if the player lost a lot of progress due to an idle key-press. Don't use default CSS: This removes most of the CSS used by the story format, allowing CSS programmers to write their own stylesheet redesigns more easily. Off by default - but including the text \"blank stylesheet\" in a stylesheet will set it on automatically. ROT13: obfuscates the story's HTML source to dissuade people from spoiling themselves by reading it. Off by default. jQuery: set this on if you are using custom scripts that rely on the jQuery library. Otherwise, leave off. Note: Twine 1.4 does not use the \"$\" variable, so jQuery can use it without $.noConflict(). Modernizr: set this on if you are using custom scripts or stylesheets that rely on the Modernizr library. Otherwise, leave off.","title":"StorySettings"},{"location":"twine1documentation/specialpassages.html#storyincludes","text":"This passage is inspired by the \"import\" feature of various programming languages. It allows you to merge the passages from other .tws or .twee files into your story's HTML file at build time. This lets you work on a Twine project split into multiple files, each being edited independently of the other, but which are built into a single story. It also lets you import a Twine file from a web URL without having to personally download it. List the file paths and URLs that you want to include, line by line, in the StoryIncludes passage. If an included file contains a passage with the same name as another included file's passage, an error will be raised when you build.","title":"StoryIncludes"},{"location":"twine1documentation/storyformats.html","text":"Story Formats \u00b6 When you publish your story to an HTML file, you can choose between story formats. These story formats control both the basic appearance and behavior of your story, though you can customize both of these via individual changes you make to your story. There are two main story formats to choose from: Sugarcane and Jonah. Adding Formats \u00b6 People have shared several story formats to date, the most famous being SugarCube. These can easily be added to become accessible from inside Twine. On Windows \u00b6 Locate the \"targets\" folder in Twine's installation folder. Inside \"targets\", create a folder with a header.html file here. For example, Program Files(x86)/Twine/targets/sugarcube/header.html After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu. Once you restart, from the menu choose Story and then Story Format and select the folder name you created (i.e. sugarcube) On MacOS \u00b6 Locate Twine.app where you installed it, most likely the Applications folder. Right-click/control-click on Twine.app and click \"Show Package Contents\". Navigate to the \"targets\" folder (in Contents > Resources) Inside \"targets\", create a folder with a header.html file here. After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu. On MacOS X \u00b6 Locate Twine.app where you installed it, most likely the Applications folder. Create a folder called \"targets\" in the same folder. Inside \"targets\", create a folder with a header.html file here. After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu.","title":"Story Formats"},{"location":"twine1documentation/storyformats.html#story-formats","text":"When you publish your story to an HTML file, you can choose between story formats. These story formats control both the basic appearance and behavior of your story, though you can customize both of these via individual changes you make to your story. There are two main story formats to choose from: Sugarcane and Jonah.","title":"Story Formats"},{"location":"twine1documentation/storyformats.html#adding-formats","text":"People have shared several story formats to date, the most famous being SugarCube. These can easily be added to become accessible from inside Twine.","title":"Adding Formats"},{"location":"twine1documentation/storyformats.html#on-windows","text":"Locate the \"targets\" folder in Twine's installation folder. Inside \"targets\", create a folder with a header.html file here. For example, Program Files(x86)/Twine/targets/sugarcube/header.html After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu. Once you restart, from the menu choose Story and then Story Format and select the folder name you created (i.e. sugarcube)","title":"On Windows"},{"location":"twine1documentation/storyformats.html#on-macos","text":"Locate Twine.app where you installed it, most likely the Applications folder. Right-click/control-click on Twine.app and click \"Show Package Contents\". Navigate to the \"targets\" folder (in Contents > Resources) Inside \"targets\", create a folder with a header.html file here. After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu.","title":"On MacOS"},{"location":"twine1documentation/storyformats.html#on-macos-x","text":"Locate Twine.app where you installed it, most likely the Applications folder. Create a folder called \"targets\" in the same folder. Inside \"targets\", create a folder with a header.html file here. After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu.","title":"On MacOS X"},{"location":"twine1documentation/tags.html","text":"Tags \u00b6 Warning You are reading documentation for Twine 1. The latest version is Twine 2, and very little functionality is backwards compatible. Sometimes, it can be useful to add information about a passage that isn't visible to readers. Tags are a way to do this \u2013 they function as labels stuck on the side of a passage, visible to you while you are writing your story, but they cannot be seen in the published version of your story. A tag can be any series of letters, numbers, or punctuation without spaces. You can assign as many tags as you like to a passage, as well. Special tags \u00b6 There are some tags that have special meaning to Twine, and change how your story behaves or appears to your readers. These special tags are described below. annotation : An annotation stylesheet : A CSS stylesheet. Additional tags (excluding transition) can be applied to restrict this stylesheet to specific passages. transition : Signifies that the stylesheet defines a CSS transition. Should only appear alongside the stylesheet tag. Has no particular meaning when applied to an ordinary passage. script : A Javascript script that will be run before the story starts. Used primarily to install custom scripts or macros. bookmark : A passage that will appear in Sugarcane's Rewind menu nobr : Causes all of the line breaks in the passage to be removed, as if the entire passage was contained in a <<nobr>> macro. Useful if you use a lot of macros. Twine.private : A passage which will not be included at all in the compiled HTML file startup : Signifies that the passage can be used to initialize variables. Currently a feature only on Harlowe","title":"Tags"},{"location":"twine1documentation/tags.html#tags","text":"Warning You are reading documentation for Twine 1. The latest version is Twine 2, and very little functionality is backwards compatible. Sometimes, it can be useful to add information about a passage that isn't visible to readers. Tags are a way to do this \u2013 they function as labels stuck on the side of a passage, visible to you while you are writing your story, but they cannot be seen in the published version of your story. A tag can be any series of letters, numbers, or punctuation without spaces. You can assign as many tags as you like to a passage, as well.","title":"Tags"},{"location":"twine1documentation/tags.html#special-tags","text":"There are some tags that have special meaning to Twine, and change how your story behaves or appears to your readers. These special tags are described below. annotation : An annotation stylesheet : A CSS stylesheet. Additional tags (excluding transition) can be applied to restrict this stylesheet to specific passages. transition : Signifies that the stylesheet defines a CSS transition. Should only appear alongside the stylesheet tag. Has no particular meaning when applied to an ordinary passage. script : A Javascript script that will be run before the story starts. Used primarily to install custom scripts or macros. bookmark : A passage that will appear in Sugarcane's Rewind menu nobr : Causes all of the line breaks in the passage to be removed, as if the entire passage was contained in a <<nobr>> macro. Useful if you use a lot of macros. Twine.private : A passage which will not be included at all in the compiled HTML file startup : Signifies that the passage can be used to initialize variables. Currently a feature only on Harlowe","title":"Special tags"},{"location":"twine1documentation/functions/alert.html","text":"alert(string) \u00b6 Displays an alert box, with the given text string displayed. This is a browser built-in. It has no value - feel free to use it by simply writing <<set alert(\"message\")>> .","title":"alert"},{"location":"twine1documentation/functions/alert.html#alertstring","text":"Displays an alert box, with the given text string displayed. This is a browser built-in. It has no value - feel free to use it by simply writing <<set alert(\"message\")>> .","title":"alert(string)"},{"location":"twine1documentation/functions/confirm.html","text":"confirm(string) \u00b6 Displays a yes/no dialog box. If you click Yes, the function's value is true. Otherwise, it is false. The provided string is the question shown to the player. This is a browser built-in.","title":"confirm"},{"location":"twine1documentation/functions/confirm.html#confirmstring","text":"Displays a yes/no dialog box. If you click Yes, the function's value is true. Otherwise, it is false. The provided string is the question shown to the player. This is a browser built-in.","title":"confirm(string)"},{"location":"twine1documentation/functions/either.html","text":"either(value, value, ...) \u00b6 Give the either() function several string or number values, separated by commas, and it will pick one of them randomly. This allows a good degree of randomness to be inserted into the story, while still being fairly readable. You can use either() with <<print>> to print a random message or phrase... \"I sentence you to be buried alive in <<print either(\"rhinoceros\",\"buffalo\",\"triceratops\")>> <<print either(\"vomit\", \"sweat\", \"snot\")>>!\" the JudgeBot crackles noisily. You can also use either() with <<set>> to set variables to random values: <<set $playerMoxie to either(2, 4, 6)>> <<set $playerAttire to either(\"green\", \"black\", \"rainbow\")>> You have <<print $playerMoxie>> moxie points, and <<print $playerAttire>> armour. And, in addition to macros, you can use either() with the link syntax to make a link that goes to a random passage: You plunge into the [[glowing vortex|either(\"12000 BC\",\"The Future\",\"2AM Yesterday\")]]","title":"either"},{"location":"twine1documentation/functions/either.html#eithervalue-value","text":"Give the either() function several string or number values, separated by commas, and it will pick one of them randomly. This allows a good degree of randomness to be inserted into the story, while still being fairly readable. You can use either() with <<print>> to print a random message or phrase... \"I sentence you to be buried alive in <<print either(\"rhinoceros\",\"buffalo\",\"triceratops\")>> <<print either(\"vomit\", \"sweat\", \"snot\")>>!\" the JudgeBot crackles noisily. You can also use either() with <<set>> to set variables to random values: <<set $playerMoxie to either(2, 4, 6)>> <<set $playerAttire to either(\"green\", \"black\", \"rainbow\")>> You have <<print $playerMoxie>> moxie points, and <<print $playerAttire>> armour. And, in addition to macros, you can use either() with the link syntax to make a link that goes to a random passage: You plunge into the [[glowing vortex|either(\"12000 BC\",\"The Future\",\"2AM Yesterday\")]]","title":"either(value, value, ...)"},{"location":"twine1documentation/functions/open.html","text":"open(string) \u00b6 When given a URL in string form, it opens a new browser tab containing that web page. This is a browser built-in. It has no value - feel free to use it by simply writing <<set open(\"url\")>> .","title":"open"},{"location":"twine1documentation/functions/open.html#openstring","text":"When given a URL in string form, it opens a new browser tab containing that web page. This is a browser built-in. It has no value - feel free to use it by simply writing <<set open(\"url\")>> .","title":"open(string)"},{"location":"twine1documentation/functions/parameter.html","text":"parameter(number) \u00b6 This is an interesting one. Suppose you're <<display>> ing a passage using the shorthand, and you include some extra values at the end of the tag: <<CaramelCanoe \"oars\" \"satchel\">> With parameter() , you can access these extra values and use them inside the displayed passage: ::CaramelCanoe You're canoeing down the caramel river, rowing with <<print parameter(0)>>, your <<print parameter(1)>> by your side. Running the aforementioned <<display>> will show \"You're canoeing down the caramel river, rowing with oars, your satchel by your side.\" This allows you to subtly alter a passage depending on where and how it's <<display>> ed, without using variables. You can, for instance, make a passage that describes the character's clothes, and you can supply different adjectives to the passage, just by including them in the shorthand <<display>> .","title":"parameter"},{"location":"twine1documentation/functions/parameter.html#parameternumber","text":"This is an interesting one. Suppose you're <<display>> ing a passage using the shorthand, and you include some extra values at the end of the tag: <<CaramelCanoe \"oars\" \"satchel\">> With parameter() , you can access these extra values and use them inside the displayed passage: ::CaramelCanoe You're canoeing down the caramel river, rowing with <<print parameter(0)>>, your <<print parameter(1)>> by your side. Running the aforementioned <<display>> will show \"You're canoeing down the caramel river, rowing with oars, your satchel by your side.\" This allows you to subtly alter a passage depending on where and how it's <<display>> ed, without using variables. You can, for instance, make a passage that describes the character's clothes, and you can supply different adjectives to the passage, just by including them in the shorthand <<display>> .","title":"parameter(number)"},{"location":"twine1documentation/functions/passage.html","text":"passage() \u00b6 Has a value equal to the current passage's name. If used inside a <<display>> ed passage, then it will be the name of the \"top\" passage - the one that is causing it to be displayed.","title":"passage"},{"location":"twine1documentation/functions/passage.html#passage","text":"Has a value equal to the current passage's name. If used inside a <<display>> ed passage, then it will be the name of the \"top\" passage - the one that is causing it to be displayed.","title":"passage()"},{"location":"twine1documentation/functions/previous.html","text":"previous() \u00b6 Has a value equal to the name of the last passage the player visited. You can use this with the link syntax to make a link that goes back to the previous passage: The snowballs are useless against this lava beast! Undo! [[Undo!|previous()]]","title":"previous"},{"location":"twine1documentation/functions/previous.html#previous","text":"Has a value equal to the name of the last passage the player visited. You can use this with the link syntax to make a link that goes back to the previous passage: The snowballs are useless against this lava beast! Undo! [[Undo!|previous()]]","title":"previous()"},{"location":"twine1documentation/functions/prompt.html","text":"prompt(string, string) \u00b6 Displays a text input dialog box. The text entered here will be the value of the function. The first string you give it is the message to display to the player. The second is the default value for the text input. This is a browser built-in. <<set $name to prompt(\"What's your name?\",\"Alyssa P. Hacker\")>> As an alternative to a browser dialog box, you can instead use the <<textinput>> macro.","title":"prompt"},{"location":"twine1documentation/functions/prompt.html#promptstring-string","text":"Displays a text input dialog box. The text entered here will be the value of the function. The first string you give it is the message to display to the player. The second is the default value for the text input. This is a browser built-in. <<set $name to prompt(\"What's your name?\",\"Alyssa P. Hacker\")>> As an alternative to a browser dialog box, you can instead use the <<textinput>> macro.","title":"prompt(string, string)"},{"location":"twine1documentation/functions/random.html","text":"random(value, value) \u00b6 When given two positive numbers, this produces a positive whole number randomly selected between the two, inclusive. This function can (and should only) be used to generate random numbers within a wide range - such as 1 to 100. Prior to version 1.4.2, you had to use the cumbersome Math.random(value)*value idiom to do this, which wasn't that memorable or succinct. You have a <<print random(1,99)>> percent chance of complete and utter defeat!","title":"random"},{"location":"twine1documentation/functions/random.html#randomvalue-value","text":"When given two positive numbers, this produces a positive whole number randomly selected between the two, inclusive. This function can (and should only) be used to generate random numbers within a wide range - such as 1 to 100. Prior to version 1.4.2, you had to use the cumbersome Math.random(value)*value idiom to do this, which wasn't that memorable or succinct. You have a <<print random(1,99)>> percent chance of complete and utter defeat!","title":"random(value, value)"},{"location":"twine1documentation/functions/rot13.html","text":"rot13(string) \u00b6 When given a string, it performs the ROT13 transformation on it, which simultaneously encodes normal text and decodes ROT13 text. (This is not expected to be a widely used function, but is available anyway.)","title":"rot13"},{"location":"twine1documentation/functions/rot13.html#rot13string","text":"When given a string, it performs the ROT13 transformation on it, which simultaneously encodes normal text and decodes ROT13 text. (This is not expected to be a widely used function, but is available anyway.)","title":"rot13(string)"},{"location":"twine1documentation/functions/tags.html","text":"tags() \u00b6 Has a value equal to an array containing the current passage's tags. The meaning of \"current passage\" is the same as it is for passage() . Since this is a Javascript array, you will need to use built-in array functions to obtain values from it. Usually, you'd simply want to do something like this: <<if tags().indexOf(\"thunder\") > -1>>\\ Thunder is crackling above! <<endif>>\\","title":"tags"},{"location":"twine1documentation/functions/tags.html#tags","text":"Has a value equal to an array containing the current passage's tags. The meaning of \"current passage\" is the same as it is for passage() . Since this is a Javascript array, you will need to use built-in array functions to obtain values from it. Usually, you'd simply want to do something like this: <<if tags().indexOf(\"thunder\") > -1>>\\ Thunder is crackling above! <<endif>>\\","title":"tags()"},{"location":"twine1documentation/functions/turns.html","text":"turns() \u00b6 Has a value equal to the number of moves the player has made - that is, the number of times a link to another passage has been followed by the player.","title":"turns"},{"location":"twine1documentation/functions/turns.html#turns","text":"Has a value equal to the number of moves the player has made - that is, the number of times a link to another passage has been followed by the player.","title":"turns()"},{"location":"twine1documentation/functions/visited.html","text":"visited(string, string...) \u00b6 Has a value equal to the number of times you've visited the named passage. It's fairly useful - this can eliminate or greatly reduce the need to use \"counter variables\" to keep track of the player's actions. If the passage name is omitted, as in visited() , then its value is for the current passage. If multiple strings are supplied to it, then it will return the value for the passage that was visited the least. You've visited this passage <<print visited()>> times. You've visited the Pond <<print visited(\"Pond\")>> times. Since visited() returns the value for the passage visited the least, then if the below result is greater than 0 (i.e. not false), then both passages must have been visited at least once. <<if visited(\"Armoury\", \"Haberdasher\")>>\\ With your sword and hat, nothing can stop you! <<endif>>\\ Advanced use: if you want to display something on every third time you visit a passage (no matter if you visit it 3 times, 10 times, or 100 times), then you can use the modulo operator % to transform the number: <<if visited() % 3 is 0>>\\ \"Every 3 visits to this passage, I walk the Earth again,\" croons Count Dracula. <<endif>>\\ Feel free to modify the \"3\" to any number you wish, to make something happen on every four visits, every ten visits, etc.","title":"visited"},{"location":"twine1documentation/functions/visited.html#visitedstring-string","text":"Has a value equal to the number of times you've visited the named passage. It's fairly useful - this can eliminate or greatly reduce the need to use \"counter variables\" to keep track of the player's actions. If the passage name is omitted, as in visited() , then its value is for the current passage. If multiple strings are supplied to it, then it will return the value for the passage that was visited the least. You've visited this passage <<print visited()>> times. You've visited the Pond <<print visited(\"Pond\")>> times. Since visited() returns the value for the passage visited the least, then if the below result is greater than 0 (i.e. not false), then both passages must have been visited at least once. <<if visited(\"Armoury\", \"Haberdasher\")>>\\ With your sword and hat, nothing can stop you! <<endif>>\\ Advanced use: if you want to display something on every third time you visit a passage (no matter if you visit it 3 times, 10 times, or 100 times), then you can use the modulo operator % to transform the number: <<if visited() % 3 is 0>>\\ \"Every 3 visits to this passage, I walk the Earth again,\" croons Count Dracula. <<endif>>\\ Feel free to modify the \"3\" to any number you wish, to make something happen on every four visits, every ten visits, etc.","title":"visited(string, string...)"},{"location":"twine1documentation/functions/visitedtag.html","text":"visitedTag(string, string...) \u00b6 Has a value equal to the number of times you've visited passages with the given tags. If you use tags to delineate parts of your story, this can be a useful variant of visited() . Hard to believe you spent <<print visitedTag(\"Swamp\")>> turns inside the swamp! <<if visitedTag(\"church\",\"death\")>>\\ You died in the church, for some reason. <<endif>>\\","title":"visitedtag"},{"location":"twine1documentation/functions/visitedtag.html#visitedtagstring-string","text":"Has a value equal to the number of times you've visited passages with the given tags. If you use tags to delineate parts of your story, this can be a useful variant of visited() . Hard to believe you spent <<print visitedTag(\"Swamp\")>> turns inside the swamp! <<if visitedTag(\"church\",\"death\")>>\\ You died in the church, for some reason. <<endif>>\\","title":"visitedTag(string, string...)"},{"location":"twine1documentation/macros/back.html","text":"<<back>> \u00b6 The <<back>> macro provides a \"\u2190 back\" link and will, upon being clicked, either move backward one passage in the history of the story or, when given a parameter, will go back to that exact passage in the history of the story. (See also: <<return>> macro ) Previous Passage Example \u00b6 <<back>> Going back to \"Start\" Passage Example: <<back \"Start\">>","title":"back"},{"location":"twine1documentation/macros/back.html#ltltbackgtgt","text":"The <<back>> macro provides a \"\u2190 back\" link and will, upon being clicked, either move backward one passage in the history of the story or, when given a parameter, will go back to that exact passage in the history of the story. (See also: <<return>> macro )","title":"&amp;lt;&amp;lt;back&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/back.html#previous-passage-example","text":"<<back>> Going back to \"Start\" Passage Example: <<back \"Start\">>","title":"Previous Passage Example"},{"location":"twine1documentation/macros/button.html","text":"<<button>> \u00b6 The <<button>> macro creates a button, a special type of link that, when clicked, sets the data entered into other form macros in the passage ( <<textinput>> , <<radio>> , <<checkbox>> ), and moves to another passage. Usage \u00b6 The <<button>> macro should be provided with the familiar link syntax: <<button [[displayed text|passage name]]>> The resulting button behaves identically to a normal link, but, when clicked, additionally causes the data entered into <<textinput>> , <<radio>> and <<checkbox>> macros to be placed in the variables. For instance, if the macro <<textinput $FoodName>> appears in the same passage with a <<button>> , and the text \"pretzels\" has been entered into the input box, then clicking the button will, in addition to changing passages, run the equivalent of <<set $FoodName to \"pretzels\">> .","title":"button"},{"location":"twine1documentation/macros/button.html#ltltbuttongtgt","text":"The <<button>> macro creates a button, a special type of link that, when clicked, sets the data entered into other form macros in the passage ( <<textinput>> , <<radio>> , <<checkbox>> ), and moves to another passage.","title":"&amp;lt;&amp;lt;button&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/button.html#usage","text":"The <<button>> macro should be provided with the familiar link syntax: <<button [[displayed text|passage name]]>> The resulting button behaves identically to a normal link, but, when clicked, additionally causes the data entered into <<textinput>> , <<radio>> and <<checkbox>> macros to be placed in the variables. For instance, if the macro <<textinput $FoodName>> appears in the same passage with a <<button>> , and the text \"pretzels\" has been entered into the input box, then clicking the button will, in addition to changing passages, run the equivalent of <<set $FoodName to \"pretzels\">> .","title":"Usage"},{"location":"twine1documentation/macros/checkbox.html","text":"<<checkbox>> \u00b6 The <<checkbox>> macro creates a 'checkbox' <input> HTML element starting from the macro to the end of the current line. (See also: <<radio>> macro ) Example \u00b6 <<checkbox>>This is a checkbox input","title":"checkbox"},{"location":"twine1documentation/macros/checkbox.html#ltltcheckboxgtgt","text":"The <<checkbox>> macro creates a 'checkbox' <input> HTML element starting from the macro to the end of the current line. (See also: <<radio>> macro )","title":"&amp;lt;&amp;lt;checkbox&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/checkbox.html#example","text":"<<checkbox>>This is a checkbox input","title":"Example"},{"location":"twine1documentation/macros/choice.html","text":"<<choice>> \u00b6 <<choice>> creates a branching path in the story through creating a link to another passage. When clicked, the story will transition to the passage. However, if the story is transitioned backward or it returns to the same passage, the other choices will no longer be available. <<choice \"Test 1\">> <<choice \"Test 2\">> <<choice \"Test 3\">>","title":"choice"},{"location":"twine1documentation/macros/choice.html#ltltchoicegtgt","text":"<<choice>> creates a branching path in the story through creating a link to another passage. When clicked, the story will transition to the passage. However, if the story is transitioned backward or it returns to the same passage, the other choices will no longer be available. <<choice \"Test 1\">> <<choice \"Test 2\">> <<choice \"Test 3\">>","title":"&amp;lt;&amp;lt;choice&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/display.html","text":"<<display>> \u00b6 The <<display>> macro lets you display the full contents of a passage inside another passage. Usage \u00b6 Long form: <<display expression>> Shorthand form (see below): <<string [value \u2026]>> Motivating example \u00b6 Suppose you have a block of text or code which appears identically in multiple passages. It can be a pain to have to keep track of each instance in which it was used, especially when fixing spelling or link names. <<display>> provides you with an elegant means of reusing this text: simply place it in another passage, and then use <<display>> in each of the places it is used. A note about tags \u00b6 What the <<display>> macro actually does is copy the text from the given passage into the current passage. It doesn't actually display the passage in its own right. What this means is that, if a passage has tag-based CSS styling specific to it, then that styling will not be applied to the current passage! Using a variable to display a passage \u00b6 The <<display>> macro treats its argument as a code expression. This means that you can put a passage name in a variable and then display it: With a rush of wind, you arrive in the <<print $destination>> ! <<display $destination>> If, say, $destination contained the string \"Cellar\", and a Cellar passage existed, it would print \"With a rush of wind, you arrive in the Cellar!\" and display the Cellar passage. Shorthand form \u00b6 The <<display>> macro is special among Twine macros because it has a shorthand form. Instead of writing <<display \"passage\">> , you can simply write <<passage>> , as if it was another macro. However, to avoid conflicts with other aspects of Twine syntax, you can only use the shorthand to display passages whose names adhere to these rules: The passage name must not contain spaces. The passage name must not conflict with the name of an actual macro (so, you can't display a passage titled \"print\"). Displaying a script passage \u00b6 If you attempt to <<display>> a passage containing a Javascript script, something special will happen: the script code will not be displayed, but will instead be re-executed. Avoid the <<display>> loop \u00b6 It is possible to lock up a reader's Web browser by using the \u00abdisplay\u00bb macro improperly, like this: :: Oops <<display \"Oops\">> When displayed, the passage will keep attempting to display itself over and over until the reader force quits his Web browser. This doesn't do permanent damage, but it will not endear yourself to your reader.","title":"display"},{"location":"twine1documentation/macros/display.html#ltltdisplaygtgt","text":"The <<display>> macro lets you display the full contents of a passage inside another passage.","title":"&amp;lt;&amp;lt;display&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/display.html#usage","text":"Long form: <<display expression>> Shorthand form (see below): <<string [value \u2026]>>","title":"Usage"},{"location":"twine1documentation/macros/display.html#motivating-example","text":"Suppose you have a block of text or code which appears identically in multiple passages. It can be a pain to have to keep track of each instance in which it was used, especially when fixing spelling or link names. <<display>> provides you with an elegant means of reusing this text: simply place it in another passage, and then use <<display>> in each of the places it is used.","title":"Motivating example"},{"location":"twine1documentation/macros/display.html#a-note-about-tags","text":"What the <<display>> macro actually does is copy the text from the given passage into the current passage. It doesn't actually display the passage in its own right. What this means is that, if a passage has tag-based CSS styling specific to it, then that styling will not be applied to the current passage!","title":"A note about tags"},{"location":"twine1documentation/macros/display.html#using-a-variable-to-display-a-passage","text":"The <<display>> macro treats its argument as a code expression. This means that you can put a passage name in a variable and then display it: With a rush of wind, you arrive in the <<print $destination>> ! <<display $destination>> If, say, $destination contained the string \"Cellar\", and a Cellar passage existed, it would print \"With a rush of wind, you arrive in the Cellar!\" and display the Cellar passage.","title":"Using a variable to display a passage"},{"location":"twine1documentation/macros/display.html#shorthand-form","text":"The <<display>> macro is special among Twine macros because it has a shorthand form. Instead of writing <<display \"passage\">> , you can simply write <<passage>> , as if it was another macro. However, to avoid conflicts with other aspects of Twine syntax, you can only use the shorthand to display passages whose names adhere to these rules: The passage name must not contain spaces. The passage name must not conflict with the name of an actual macro (so, you can't display a passage titled \"print\").","title":"Shorthand form"},{"location":"twine1documentation/macros/display.html#displaying-a-script-passage","text":"If you attempt to <<display>> a passage containing a Javascript script, something special will happen: the script code will not be displayed, but will instead be re-executed.","title":"Displaying a script passage"},{"location":"twine1documentation/macros/display.html#avoid-the-ltltdisplaygtgt-loop","text":"It is possible to lock up a reader's Web browser by using the \u00abdisplay\u00bb macro improperly, like this: :: Oops <<display \"Oops\">> When displayed, the passage will keep attempting to display itself over and over until the reader force quits his Web browser. This doesn't do permanent damage, but it will not endear yourself to your reader.","title":"Avoid the &amp;lt;&amp;lt;display&amp;gt;&amp;gt; loop"},{"location":"twine1documentation/macros/else.html","text":"<<else>> \u00b6 <<else>> is a macro that is used to indicate text that should be displayed if the condition is false. It is paired with <<if>> or <<endif>> . The door to the left leads to the pantry. <<if visited(\"Pantry\")>> No way are you going back in there! <<else>> Sounds like a good place to search... <<endif>> The <<else>> macro can itself contain another \"if condition\", which causes the contents to only display if THAT condition is true: <<if $health is 3>>\\ You're in tip-top condition - fighting fit and frankly fearsome. No human or god can lick you! <<else if $health is 2>>\\ DOOMED! You're DOOMED, puny player!! You've lost already! YOU CANNOT WIN!! MWAHAHAHAHA! <<endif>>\\ You can insert as many <<else if>> 's as you want inside an <<if>> / <<endif>> pair. ( Note: if you prefer, you can also write \"else if\" as \"elseif\".)","title":"else"},{"location":"twine1documentation/macros/else.html#ltltelsegtgt","text":"<<else>> is a macro that is used to indicate text that should be displayed if the condition is false. It is paired with <<if>> or <<endif>> . The door to the left leads to the pantry. <<if visited(\"Pantry\")>> No way are you going back in there! <<else>> Sounds like a good place to search... <<endif>> The <<else>> macro can itself contain another \"if condition\", which causes the contents to only display if THAT condition is true: <<if $health is 3>>\\ You're in tip-top condition - fighting fit and frankly fearsome. No human or god can lick you! <<else if $health is 2>>\\ DOOMED! You're DOOMED, puny player!! You've lost already! YOU CANNOT WIN!! MWAHAHAHAHA! <<endif>>\\ You can insert as many <<else if>> 's as you want inside an <<if>> / <<endif>> pair. ( Note: if you prefer, you can also write \"else if\" as \"elseif\".)","title":"&amp;lt;&amp;lt;else&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/endif.html","text":"<<endif>> \u00b6 <<endif>> closes the usage of the <<if>> macro. Usage \u00b6 The <<if>> macro can be used in formats like these: <<if expression>> Text <<endif>> <<if expression>> Text <<else>> Text <<endif>> <<if expression>> Text <<else if expression>> Text ... <<endif>> expression is an expression that can evaluate to true or false. Text is any amount of passage text that you wish to display only if the condition is true. <<endif>> is a macro tag indicating the end of the <<if>> macro invocation. Note that the Text can contain any Twine code, including an inner <<if>> invocation: <<if $body is \"wounded\">>You are <<if $blood <= 5>>about to die<<else>>bleeding<<endif>>. Seek help <<endif>>","title":"endif"},{"location":"twine1documentation/macros/endif.html#ltltendifgtgt","text":"<<endif>> closes the usage of the <<if>> macro.","title":"&amp;lt;&amp;lt;endif&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/endif.html#usage","text":"The <<if>> macro can be used in formats like these: <<if expression>> Text <<endif>> <<if expression>> Text <<else>> Text <<endif>> <<if expression>> Text <<else if expression>> Text ... <<endif>> expression is an expression that can evaluate to true or false. Text is any amount of passage text that you wish to display only if the condition is true. <<endif>> is a macro tag indicating the end of the <<if>> macro invocation. Note that the Text can contain any Twine code, including an inner <<if>> invocation: <<if $body is \"wounded\">>You are <<if $blood <= 5>>about to die<<else>>bleeding<<endif>>. Seek help <<endif>>","title":"Usage"},{"location":"twine1documentation/macros/endsilently.html","text":"<<endsilently>> \u00b6 <<endsilently>> works with the <<silently>> macro to clear the space normally taken up by the use of macros within a passage. <<silently>> <<set $name to \"Name\">> <<endsilently>>","title":"endsilently"},{"location":"twine1documentation/macros/endsilently.html#ltltendsilentlygtgt","text":"<<endsilently>> works with the <<silently>> macro to clear the space normally taken up by the use of macros within a passage. <<silently>> <<set $name to \"Name\">> <<endsilently>>","title":"&amp;lt;&amp;lt;endsilently&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/forget.html","text":"<<forget>> \u00b6 The <<forget>> macro \"forgets\" a variable previously \"remembered\" through the use of the <<remember>> macro. <<forget $meals>>","title":"forget"},{"location":"twine1documentation/macros/forget.html#ltltforgetgtgt","text":"The <<forget>> macro \"forgets\" a variable previously \"remembered\" through the use of the <<remember>> macro. <<forget $meals>>","title":"&amp;lt;&amp;lt;forget&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/if.html","text":"<<if>> \u00b6 The <<if>> macro is used to control what text the player sees when they visit a passage, or what macros are run when the passage loads. Usage \u00b6 The <<if>> macro can be used in formats like these: <<if expression>> Text <<endif>> <<if expression>> Text <<else>> Text <<endif>> <<if expression>> Text <<else if expression>> Text... <<endif>> expression is an expression that can evaluate to true or false. Text is any amount of passage text that you wish to display only if the condition is true. <<endif>> is a macro tag indicating the end of the <<if>> macro invocation. Note that the Text can contain any Twine code, including an inner <<if>> invocation: <<if $body is \"wounded\">>You are <<if $blood <= 5>>about to die<<else>>bleeding<<endif>>. Seek help!<<endif>> Motivating example \u00b6 Consider a passage like this: You return to Selator's hut. A merry fire is crackling in the kitchen, and something is cooking that smells delicious. He greets you warmly and asks, \u201cHave you got the berry?\u201d If you have got the purple berry of the Antherica plant, turn to 175. If not, turn to 52. (Steve Jackson and Ian Livingstone, Scorpion Swamp) It would be nice if the story could track whether the protagonist found the berry or not, and branch accordingly. We can do this by simply noting the name of the passage where the berry was found: :: Antherica You have no doubt, from Selator's description, that you have found the Antherica plant. Half your mission is completed. Now you must return to the village with the precious berry. Then we can use the <<if>> macro and the visited() function to display a passage indicating victory: You return to Selator's hut. A merry fire is crackling in the kitchen, and something is cooking that smells delicious. He greets you warmly and asks, \"Have you got the berry?\" <<if visited(\"Antherica\")>> \"Wonderful!\" he exclaims... <<endif>> A note about line breaks \u00b6 When a passage containing an <<if>> macro is displayed, the <<if>> and <<endif>> macro tags are removed from the text. But, the line on which the tags was placed will remain - thus, if it was by itself on a line, it will create a blank line. You can choose to fix this by ending the tags' lines with a backslash: You leap over the sawblade with deft ease. <<if $alive>>\\ She laughs. \"Still not dead? How callous of you to scorn Death's loving embrace!\" <<endif>>\\ You may, for larger <<if>> constructions, use the <<nobr>> macro instead: You glare at the alien control panel. <<nobr>> <<if $red>> The red button blinks <<if $earplugs>> and hisses<<endif>> at you. <<endif>> <<endnobr>>","title":"if"},{"location":"twine1documentation/macros/if.html#ltltifgtgt","text":"The <<if>> macro is used to control what text the player sees when they visit a passage, or what macros are run when the passage loads.","title":"&amp;lt;&amp;lt;if&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/if.html#usage","text":"The <<if>> macro can be used in formats like these: <<if expression>> Text <<endif>> <<if expression>> Text <<else>> Text <<endif>> <<if expression>> Text <<else if expression>> Text... <<endif>> expression is an expression that can evaluate to true or false. Text is any amount of passage text that you wish to display only if the condition is true. <<endif>> is a macro tag indicating the end of the <<if>> macro invocation. Note that the Text can contain any Twine code, including an inner <<if>> invocation: <<if $body is \"wounded\">>You are <<if $blood <= 5>>about to die<<else>>bleeding<<endif>>. Seek help!<<endif>>","title":"Usage"},{"location":"twine1documentation/macros/if.html#motivating-example","text":"Consider a passage like this: You return to Selator's hut. A merry fire is crackling in the kitchen, and something is cooking that smells delicious. He greets you warmly and asks, \u201cHave you got the berry?\u201d If you have got the purple berry of the Antherica plant, turn to 175. If not, turn to 52. (Steve Jackson and Ian Livingstone, Scorpion Swamp) It would be nice if the story could track whether the protagonist found the berry or not, and branch accordingly. We can do this by simply noting the name of the passage where the berry was found: :: Antherica You have no doubt, from Selator's description, that you have found the Antherica plant. Half your mission is completed. Now you must return to the village with the precious berry. Then we can use the <<if>> macro and the visited() function to display a passage indicating victory: You return to Selator's hut. A merry fire is crackling in the kitchen, and something is cooking that smells delicious. He greets you warmly and asks, \"Have you got the berry?\" <<if visited(\"Antherica\")>> \"Wonderful!\" he exclaims... <<endif>>","title":"Motivating example"},{"location":"twine1documentation/macros/if.html#a-note-about-line-breaks","text":"When a passage containing an <<if>> macro is displayed, the <<if>> and <<endif>> macro tags are removed from the text. But, the line on which the tags was placed will remain - thus, if it was by itself on a line, it will create a blank line. You can choose to fix this by ending the tags' lines with a backslash: You leap over the sawblade with deft ease. <<if $alive>>\\ She laughs. \"Still not dead? How callous of you to scorn Death's loving embrace!\" <<endif>>\\ You may, for larger <<if>> constructions, use the <<nobr>> macro instead: You glare at the alien control panel. <<nobr>> <<if $red>> The red button blinks <<if $earplugs>> and hisses<<endif>> at you. <<endif>> <<endnobr>>","title":"A note about line breaks"},{"location":"twine1documentation/macros/nobr.html","text":"<<nobr>> \u00b6 The <<nobr>> macro removes all of the line breaks in the enclosed text. Usage \u00b6 <<nobr>> Text <<endnobr>> Motivating example \u00b6 In some cases, you'll want to do several things with macros at once. For example, in this passage: All you possess is an Axe (note under Weapons on your Action Chart) and a Backpack containing 1 Meal (note under Meals on your Action Chart). (Joe Dever, Flight from the Dark) You'd probably want to set both the protagonist's weapon and number of meals. You can do this without any extraneous whitespace appearing in your story by putting all the <<set>> statements on the same line: All you possess is an Axe and a Backpack containing 1 Meal. <<set $meals to 1>> <<set $weapon to \"axe\">> This is not particularly readable, however. The <<nobr>> macro can help in these situations, like so: All you possess is an Axe and a Backpack containing 1 Meal. <<nobr>> <<set $meals to 1>> <<set $weapon to \"axe\">> <<endnobr>> All the line breaks between <<nobr>> and <<endnobr>> are eliminated. See also \u00b6 The nobr passage tag can be applied if you want every line break in the passage to be removed, without having to insert the macro tags around the entire text. The <<silently>> macro was used for roughly the same purposes as \u00abnobr\u00bb prior to version 1.4.0.","title":"nobr"},{"location":"twine1documentation/macros/nobr.html#ltltnobrgtgt","text":"The <<nobr>> macro removes all of the line breaks in the enclosed text.","title":"&amp;lt;&amp;lt;nobr&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/nobr.html#usage","text":"<<nobr>> Text <<endnobr>>","title":"Usage"},{"location":"twine1documentation/macros/nobr.html#motivating-example","text":"In some cases, you'll want to do several things with macros at once. For example, in this passage: All you possess is an Axe (note under Weapons on your Action Chart) and a Backpack containing 1 Meal (note under Meals on your Action Chart). (Joe Dever, Flight from the Dark) You'd probably want to set both the protagonist's weapon and number of meals. You can do this without any extraneous whitespace appearing in your story by putting all the <<set>> statements on the same line: All you possess is an Axe and a Backpack containing 1 Meal. <<set $meals to 1>> <<set $weapon to \"axe\">> This is not particularly readable, however. The <<nobr>> macro can help in these situations, like so: All you possess is an Axe and a Backpack containing 1 Meal. <<nobr>> <<set $meals to 1>> <<set $weapon to \"axe\">> <<endnobr>> All the line breaks between <<nobr>> and <<endnobr>> are eliminated.","title":"Motivating example"},{"location":"twine1documentation/macros/nobr.html#see-also","text":"The nobr passage tag can be applied if you want every line break in the passage to be removed, without having to insert the macro tags around the entire text. The <<silently>> macro was used for roughly the same purposes as \u00abnobr\u00bb prior to version 1.4.0.","title":"See also"},{"location":"twine1documentation/macros/print.html","text":"<<print>> \u00b6 The <<print>> macro lets you print expressions, pure and simple. Usage: <<print expression>> The expression's value is calculated and printed into the passage. If an error occurred while calculating, an error message will be printed instead. Basic examples \u00b6 \"So, <<print $playerName>>, we meet again!\" booms the Wrestlemaster. Alas! <<print visited()>> time(s) you've fallen in this damned pit! Changing values while printing them \u00b6 The <<print>> macro has an extra feature: if you use \"to\", \"+=\", or other operators common to the <<set>> macro in the <<print>> 's expression, then it will change the variables and print the new values. For example: After the transfusion, you have <<set $blood -= 7>><<print $blood>> litres of blood left. can be potentially rewritten as: After the transfusion, you have <<print $blood -= 7>> litres of blood left. Shorthand form \u00b6 You may find yourself frequently using \u00abprint\u00bb to simply print a variable, without alteration. <<print>> has a convenient shorthand form for this single case: you simply omit the word \"print\", leaving just the variable within the angle brackets. For instance, <<print $beers>> can become simply <<$beers>> . This allows you to write Twine stories in a \"template\" style: Your superior officer approaches. \"<<$name>>, you've done a fine job. No, a superlative job. <<$species>> like you have no place on this cruel Earth, that rewards only greed and selfishness.\" Note: you can only perform this shorthand form using variables! You cannot, for instance, write <<visited()>> .","title":"print"},{"location":"twine1documentation/macros/print.html#ltltprintgtgt","text":"The <<print>> macro lets you print expressions, pure and simple. Usage: <<print expression>> The expression's value is calculated and printed into the passage. If an error occurred while calculating, an error message will be printed instead.","title":"&amp;lt;&amp;lt;print&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/print.html#basic-examples","text":"\"So, <<print $playerName>>, we meet again!\" booms the Wrestlemaster. Alas! <<print visited()>> time(s) you've fallen in this damned pit!","title":"Basic examples"},{"location":"twine1documentation/macros/print.html#changing-values-while-printing-them","text":"The <<print>> macro has an extra feature: if you use \"to\", \"+=\", or other operators common to the <<set>> macro in the <<print>> 's expression, then it will change the variables and print the new values. For example: After the transfusion, you have <<set $blood -= 7>><<print $blood>> litres of blood left. can be potentially rewritten as: After the transfusion, you have <<print $blood -= 7>> litres of blood left.","title":"Changing values while printing them"},{"location":"twine1documentation/macros/print.html#shorthand-form","text":"You may find yourself frequently using \u00abprint\u00bb to simply print a variable, without alteration. <<print>> has a convenient shorthand form for this single case: you simply omit the word \"print\", leaving just the variable within the angle brackets. For instance, <<print $beers>> can become simply <<$beers>> . This allows you to write Twine stories in a \"template\" style: Your superior officer approaches. \"<<$name>>, you've done a fine job. No, a superlative job. <<$species>> like you have no place on this cruel Earth, that rewards only greed and selfishness.\" Note: you can only perform this shorthand form using variables! You cannot, for instance, write <<visited()>> .","title":"Shorthand form"},{"location":"twine1documentation/macros/radio.html","text":"<<radio>> \u00b6 The <<radio>> macro lets you offer your reader with a familiar radio button input. While a <<checkbox>> set lets the reader make multiple choices, radio buttons are mutually exclusive\u2013your reader can choose only one option. Note that, in order for the value to be stored, there must be a <<button>> in the passage, and the user must click it. This code sample: Would you like to see some radio buttons? <<radio $choice \"yes\">> <<radio $choice \"no\">> <<radio $choice \"maybe\">> <<button [[Go on|go_on]]>> In this example, the variable $choice is the name for this set of radio buttons. You can set this to any variable name you like. You see each input has a value\u2013in this example, \"yes,\" \"no,\" and \"maybe.\" These are what will be displayed to the reader AND stored in the variable ( $choice ) to be used in the next passage. Thus if a reader chooses \"maybe\" and clicks the button \"Go on,\" it's the same as telling Twine this: <<set $choice = \"maybe\">> Twine 1 forces a line break between radio buttons. To work around this, you can set your radio buttons in an HTML table: < table > < tr > < td > Sound? </ td >< td > < < radio $ sound \" yes \" > > </ td >< td > < < radio $ sound \" no \" > > </ td > </ tr > < tr > < td > Color effects? </ td >< td > < < radio $ color_effects \" yes \" > > </ td >< td > < < radio $ color_effects \" no \" > > </ td > </ tr > </ table > < < button [[ Begin the Game | Begin ]] > > There is no native option to mark a radio button as selected before your reader makes their choice. One option to work around this in Twine natively is to initialize your variable to the default value and offer the reader only the other choice(s): <<set $sound = \"no\">>\\ <<set $color_effects = \"no\">> <table> <tr> <td>Sound?</td><td></td><td><<radio $sound \"yes\">></td> </tr> <tr> <td>Color effects?</td><td></td><td><<radio $color_effects \"yes\">></td> </tr> </table> <<button [[Start the Game|start_game]]>> A disadvantage of this approach is that, once the option is checked, it can't be unchecked back to whatever you set as the default.","title":"radio"},{"location":"twine1documentation/macros/radio.html#ltltradiogtgt","text":"The <<radio>> macro lets you offer your reader with a familiar radio button input. While a <<checkbox>> set lets the reader make multiple choices, radio buttons are mutually exclusive\u2013your reader can choose only one option. Note that, in order for the value to be stored, there must be a <<button>> in the passage, and the user must click it. This code sample: Would you like to see some radio buttons? <<radio $choice \"yes\">> <<radio $choice \"no\">> <<radio $choice \"maybe\">> <<button [[Go on|go_on]]>> In this example, the variable $choice is the name for this set of radio buttons. You can set this to any variable name you like. You see each input has a value\u2013in this example, \"yes,\" \"no,\" and \"maybe.\" These are what will be displayed to the reader AND stored in the variable ( $choice ) to be used in the next passage. Thus if a reader chooses \"maybe\" and clicks the button \"Go on,\" it's the same as telling Twine this: <<set $choice = \"maybe\">> Twine 1 forces a line break between radio buttons. To work around this, you can set your radio buttons in an HTML table: < table > < tr > < td > Sound? </ td >< td > < < radio $ sound \" yes \" > > </ td >< td > < < radio $ sound \" no \" > > </ td > </ tr > < tr > < td > Color effects? </ td >< td > < < radio $ color_effects \" yes \" > > </ td >< td > < < radio $ color_effects \" no \" > > </ td > </ tr > </ table > < < button [[ Begin the Game | Begin ]] > > There is no native option to mark a radio button as selected before your reader makes their choice. One option to work around this in Twine natively is to initialize your variable to the default value and offer the reader only the other choice(s): <<set $sound = \"no\">>\\ <<set $color_effects = \"no\">> <table> <tr> <td>Sound?</td><td></td><td><<radio $sound \"yes\">></td> </tr> <tr> <td>Color effects?</td><td></td><td><<radio $color_effects \"yes\">></td> </tr> </table> <<button [[Start the Game|start_game]]>> A disadvantage of this approach is that, once the option is checked, it can't be unchecked back to whatever you set as the default.","title":"&amp;lt;&amp;lt;radio&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/remember.html","text":"<<remember>> \u00b6 Variables are reset every time the reader restarts a story. If you'd like to remember the value of a variable after the game, use the <<remember>> macro. It works exactly the same way as <<set>> , except it stores the variable in browser storage that remains between sessions. At long last, you have escaped the dungeons. <<remember $escapes += 1>> So far, you have escaped the dungeons <<print $escapes>> times. If you are only interested in remembering the current state of a variable, you don't need to include an assignment: <<remember $meals>>","title":"remember"},{"location":"twine1documentation/macros/remember.html#ltltremembergtgt","text":"Variables are reset every time the reader restarts a story. If you'd like to remember the value of a variable after the game, use the <<remember>> macro. It works exactly the same way as <<set>> , except it stores the variable in browser storage that remains between sessions. At long last, you have escaped the dungeons. <<remember $escapes += 1>> So far, you have escaped the dungeons <<print $escapes>> times. If you are only interested in remembering the current state of a variable, you don't need to include an assignment: <<remember $meals>>","title":"&amp;lt;&amp;lt;remember&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/return.html","text":"<<return>> \u00b6 The <<return>> macro provides a \"return\" link to move backward one passage in the history of the story. (See also: <<back>> macro ) Previous Passage Example \u00b6 <<return>>","title":"return"},{"location":"twine1documentation/macros/return.html#ltltreturngtgt","text":"The <<return>> macro provides a \"return\" link to move backward one passage in the history of the story. (See also: <<back>> macro )","title":"&amp;lt;&amp;lt;return&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/return.html#previous-passage-example","text":"<<return>>","title":"Previous Passage Example"},{"location":"twine1documentation/macros/set.html","text":"<<set>> \u00b6 The <<set>> macro \"sets\" a value into a variable. Any value that can be stored like numbers, strings, and even arrays can be \"set.\" Example: <<set $variableName to \"Value\">>","title":"set"},{"location":"twine1documentation/macros/set.html#ltltsetgtgt","text":"The <<set>> macro \"sets\" a value into a variable. Any value that can be stored like numbers, strings, and even arrays can be \"set.\" Example: <<set $variableName to \"Value\">>","title":"&amp;lt;&amp;lt;set&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/silently.html","text":"<<silently>> \u00b6 The <<silently>> macro clears the space normally taken up by the use of macros within a passage up to the corresponding <<endsilently>> . <<silently>> <<set $name to \"Name\">> <<endsilently>>","title":"silently"},{"location":"twine1documentation/macros/silently.html#ltltsilentlygtgt","text":"The <<silently>> macro clears the space normally taken up by the use of macros within a passage up to the corresponding <<endsilently>> . <<silently>> <<set $name to \"Name\">> <<endsilently>>","title":"&amp;lt;&amp;lt;silently&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/textinput.html","text":"<<textinput>> \u00b6 The <<textinput>> macro creates a standard HTML text box that allows the player to enter text. The text will be set to a variable once a <<button>> macro is clicked. Usage \u00b6 <<textinput $variable>> When a button is clicked, the text entered into the textbox will be set into the variable. Clicking normal links will ignore the text. (This allows normal links to serve as a \"cancel\" or \"go back\" operation, allowing the player to navigate without unintentionally altering the variables.) Button shorthand \u00b6 As mentioned, the inputted text is ignored by Twine unless a button is clicked, which acts as a way to \"submit\" the text into the given variable. There is a way to create a button without using an extra <<button>> macro. Simply add a link as an extra argument to the macro: <<textinput $variable [[link text|passage name]] >> This creates a button immediately after the text box, which functions accordingly.","title":"textinput"},{"location":"twine1documentation/macros/textinput.html#ltlttextinputgtgt","text":"The <<textinput>> macro creates a standard HTML text box that allows the player to enter text. The text will be set to a variable once a <<button>> macro is clicked.","title":"&amp;lt;&amp;lt;textinput&amp;gt;&amp;gt;"},{"location":"twine1documentation/macros/textinput.html#usage","text":"<<textinput $variable>> When a button is clicked, the text entered into the textbox will be set into the variable. Clicking normal links will ignore the text. (This allows normal links to serve as a \"cancel\" or \"go back\" operation, allowing the player to navigate without unintentionally altering the variables.)","title":"Usage"},{"location":"twine1documentation/macros/textinput.html#button-shorthand","text":"As mentioned, the inputted text is ignored by Twine unless a button is clicked, which acts as a way to \"submit\" the text into the given variable. There is a way to create a button without using an extra <<button>> macro. Simply add a link as an extra argument to the macro: <<textinput $variable [[link text|passage name]] >> This creates a button immediately after the text box, which functions accordingly.","title":"Button shorthand"},{"location":"twine1documentation/storyformats/jonah.html","text":"Jonah \u00b6 This displays your story with black text on a chrome background, and as a player clicks links in your story, the text expands. A player can review earlier passages of your story by scrolling upwards. This approach is called stretch-text. They can rewind to past passages to try different choices by simply clicking the links in those passages (but you can optionally disable this in StorySettings). The StoryMenu in Jonah is simply the box in the upper-right corner.","title":"Jonah"},{"location":"twine1documentation/storyformats/jonah.html#jonah","text":"This displays your story with black text on a chrome background, and as a player clicks links in your story, the text expands. A player can review earlier passages of your story by scrolling upwards. This approach is called stretch-text. They can rewind to past passages to try different choices by simply clicking the links in those passages (but you can optionally disable this in StorySettings). The StoryMenu in Jonah is simply the box in the upper-right corner.","title":"Jonah"},{"location":"twine1documentation/storyformats/sugarcane.html","text":"Sugarcane \u00b6 This displays your story with white text on a black background. Players can only see one passage at a time, though they can, if you permit, use their browsers' back buttons to return to a previous passage. Sugarcane has a sidebar menu that may contain these entries: Bookmark: This serves as a link directly to the current passage, and is automatically updated throughout the game. Players can save their game by copying the URL from this link. (If your StorySettings disallows the ability to undo, then this is unavailable to players, as bookmarking can obviously be used to undo moves. Rewind: If a Sugarcane passage has the tag \u201cbookmark\u201d, then each visit to this passage will create an entry in the Rewind menu as a 'checkpoint'. By using that menu, they can rewind the game to that particular state. For obvious reasons, this isn't particularly useful if your StorySettings allows the Bookmark menu to also be present. Responsive This is simply a variant of Sugarcane with a different design that is more readable on mobile web browsers, especially phones.","title":"Sugarcane"},{"location":"twine1documentation/storyformats/sugarcane.html#sugarcane","text":"This displays your story with white text on a black background. Players can only see one passage at a time, though they can, if you permit, use their browsers' back buttons to return to a previous passage. Sugarcane has a sidebar menu that may contain these entries: Bookmark: This serves as a link directly to the current passage, and is automatically updated throughout the game. Players can save their game by copying the URL from this link. (If your StorySettings disallows the ability to undo, then this is unavailable to players, as bookmarking can obviously be used to undo moves. Rewind: If a Sugarcane passage has the tag \u201cbookmark\u201d, then each visit to this passage will create an entry in the Rewind menu as a 'checkpoint'. By using that menu, they can rewind the game to that particular state. For obvious reasons, this isn't particularly useful if your StorySettings allows the Bookmark menu to also be present. Responsive This is simply a variant of Sugarcane with a different design that is more readable on mobile web browsers, especially phones.","title":"Sugarcane"},{"location":"typewriter/chapbook/chapbook_typewriter.html","text":"\"Typewriter Effect\": Chapbook (v1.0.0) \u00b6 Summary \u00b6 \"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Chapbook, new modifiers can be added through the engine.extend() function. This examples creates a new modifier called [typewriter] that accepts a time in milliseconds. The [typewriter] modifier creates a series of <span> elements for each character found within the output of the modifier and sets an animation-delay equal to the time given to the modifier multiplied by the position of the character within the total length of the text output. When used, each character will appear within the passage as if \"typed\" based on the time given to the modifier. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Chapbook: Typewriter :: Start [JavaScript] engine.extend('1.0.0', () => { config.template.modifiers = [{ match: /^typewriter\\s/i, process(output, {invocation}) { // Get the time let time = invocation.replace(/^typewriter\\s/i, ''); // Save original text let text = output.text; // Get length of original text let length = text.length; // Set initial index let index = 0; // Wipe out output to start output.text = \"\"; // Loop through the text // -- Add a new <span> for each chracter // -- Set the class \"fade-in\" // -- Set the delay as equal to time multiplied position for(let i = 0; i < length; i++) { output.text += `<span class='fade-in' style='animation-delay: ${time * i}ms'>${text[i]}</span>`; } } }, ...config.template.modifiers]; }); [continued] [[Start TyperWriter]] :: Start TyperWriter [typewriter 1000] Hello, world! [continued] Download: Twee Code","title":"Chapbook"},{"location":"typewriter/chapbook/chapbook_typewriter.html#typewriter-effect-chapbook-v100","text":"","title":"\"Typewriter Effect\": Chapbook (v1.0.0)"},{"location":"typewriter/chapbook/chapbook_typewriter.html#summary","text":"\"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Chapbook, new modifiers can be added through the engine.extend() function. This examples creates a new modifier called [typewriter] that accepts a time in milliseconds. The [typewriter] modifier creates a series of <span> elements for each character found within the output of the modifier and sets an animation-delay equal to the time given to the modifier multiplied by the position of the character within the total length of the text output. When used, each character will appear within the passage as if \"typed\" based on the time given to the modifier.","title":"Summary"},{"location":"typewriter/chapbook/chapbook_typewriter.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"typewriter/chapbook/chapbook_typewriter.html#twee-code","text":":: StoryTitle Chapbook: Typewriter :: Start [JavaScript] engine.extend('1.0.0', () => { config.template.modifiers = [{ match: /^typewriter\\s/i, process(output, {invocation}) { // Get the time let time = invocation.replace(/^typewriter\\s/i, ''); // Save original text let text = output.text; // Get length of original text let length = text.length; // Set initial index let index = 0; // Wipe out output to start output.text = \"\"; // Loop through the text // -- Add a new <span> for each chracter // -- Set the class \"fade-in\" // -- Set the delay as equal to time multiplied position for(let i = 0; i < length; i++) { output.text += `<span class='fade-in' style='animation-delay: ${time * i}ms'>${text[i]}</span>`; } } }, ...config.template.modifiers]; }); [continued] [[Start TyperWriter]] :: Start TyperWriter [typewriter 1000] Hello, world! [continued] Download: Twee Code","title":"Twee Code"},{"location":"typewriter/harlowe/harlowe_typewriter.html","text":"\"Typewriter Effect\": Harlowe (v2.0) \u00b6 Summary \u00b6 \"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Harlowe, this is achieved using the (live:) macro for delayed showing and the (append:) macro to append text to a hook. Note: Additional Harlowe code will not be run within the $typewriterText variable and will all be printed as-is. This code can only be used once per passage. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Typewriter Effect in Harlowe :: Start <!-- Set the text to show --> (set: $typewriterText to \"Hello, world!\") <!-- Display (call) the Typewriter passage --> (display: \"Typewriter\") :: Typewriter { <!-- Create a variable to track the position within the $typewriterText string --> (set: $typewriterPos to 1) <!-- Create a hook to hold the typed text --> |typewriterOutput>[] <!-- Set a delay of 20ms seconds per loop --> (live: 20ms)[ <!-- Add the next character to the hook --> (append: ?typewriterOutput)[(print: $typewriterText's $typewriterPos)] <!-- Update the position --> (set: $typewriterPos to it + 1) <!-- If it's gone past the end, stop --> (if: $typewriterPos is $typewriterText's length + 1)[ (stop:) ] ] } Download: Twee Code See Also \u00b6 Delayed Text","title":"Harlowe"},{"location":"typewriter/harlowe/harlowe_typewriter.html#typewriter-effect-harlowe-v20","text":"","title":"\"Typewriter Effect\": Harlowe (v2.0)"},{"location":"typewriter/harlowe/harlowe_typewriter.html#summary","text":"\"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Harlowe, this is achieved using the (live:) macro for delayed showing and the (append:) macro to append text to a hook. Note: Additional Harlowe code will not be run within the $typewriterText variable and will all be printed as-is. This code can only be used once per passage.","title":"Summary"},{"location":"typewriter/harlowe/harlowe_typewriter.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"typewriter/harlowe/harlowe_typewriter.html#twee-code","text":":: StoryTitle Typewriter Effect in Harlowe :: Start <!-- Set the text to show --> (set: $typewriterText to \"Hello, world!\") <!-- Display (call) the Typewriter passage --> (display: \"Typewriter\") :: Typewriter { <!-- Create a variable to track the position within the $typewriterText string --> (set: $typewriterPos to 1) <!-- Create a hook to hold the typed text --> |typewriterOutput>[] <!-- Set a delay of 20ms seconds per loop --> (live: 20ms)[ <!-- Add the next character to the hook --> (append: ?typewriterOutput)[(print: $typewriterText's $typewriterPos)] <!-- Update the position --> (set: $typewriterPos to it + 1) <!-- If it's gone past the end, stop --> (if: $typewriterPos is $typewriterText's length + 1)[ (stop:) ] ] } Download: Twee Code","title":"Twee Code"},{"location":"typewriter/harlowe/harlowe_typewriter.html#see-also","text":"Delayed Text","title":"See Also"},{"location":"typewriter/snowman/snowman_typewriter.html","text":"\"Typewriter Effect\": Snowman (v1.3.0) \u00b6 Summary \u00b6 \"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Snowman, this is achieved using recursive calls to the setTimeout() function to repeat calls once every one second. A jQuery selector is used to find an element with the ID \"typewriter\" whose HTML content is updated with the text every second until it is fully shown. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Typewriter Effect in Snowman :: UserScript[script] // Create a global setup object window.setup = window.setup || {}; // Add a 'typewriter' object setup.typewriter = {}; // Save an index of the string. // Start at -1 because it will be increased // once (to 0) before the first character is shown. setup.typewriter.index = -1; // Allow users to set global text setup.typewriter.text = \"\"; // Save a reference to the setTimeout call setup.typewriter.timerReference = 0; // Write text character by character to an element // with the ID \"typewriter\" setup.typewriter.write = function(){ // Test if the index is less than the text length if(setup.typewriter.index < setup.typewriter.text.length) { // Update the current text character-by-character $(\"#typewriter\").html( $(\"#typewriter\").html() + setup.typewriter.text[setup.typewriter.index] ); // Increase the index setup.typewriter.index++; // Save the timeout reference setup.typewriter.timerReference = setTimeout(setup.typewriter.write, 1000); } else { // Clear out the timeout once index is greater than string length clearTimeout(setup.typewriter.timerReference); // Reset the index setup.typewriter.index = -1; } } :: Start <div id=\"typewriter\"></div> <% setup.typewriter.text = \"Hello, world!\"; setup.typewriter.write(); %> Download: Twee Code See Also \u00b6 Delayed Text","title":"Snowman"},{"location":"typewriter/snowman/snowman_typewriter.html#typewriter-effect-snowman-v130","text":"","title":"\"Typewriter Effect\": Snowman (v1.3.0)"},{"location":"typewriter/snowman/snowman_typewriter.html#summary","text":"\"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Snowman, this is achieved using recursive calls to the setTimeout() function to repeat calls once every one second. A jQuery selector is used to find an element with the ID \"typewriter\" whose HTML content is updated with the text every second until it is fully shown.","title":"Summary"},{"location":"typewriter/snowman/snowman_typewriter.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"typewriter/snowman/snowman_typewriter.html#twee-code","text":":: StoryTitle Typewriter Effect in Snowman :: UserScript[script] // Create a global setup object window.setup = window.setup || {}; // Add a 'typewriter' object setup.typewriter = {}; // Save an index of the string. // Start at -1 because it will be increased // once (to 0) before the first character is shown. setup.typewriter.index = -1; // Allow users to set global text setup.typewriter.text = \"\"; // Save a reference to the setTimeout call setup.typewriter.timerReference = 0; // Write text character by character to an element // with the ID \"typewriter\" setup.typewriter.write = function(){ // Test if the index is less than the text length if(setup.typewriter.index < setup.typewriter.text.length) { // Update the current text character-by-character $(\"#typewriter\").html( $(\"#typewriter\").html() + setup.typewriter.text[setup.typewriter.index] ); // Increase the index setup.typewriter.index++; // Save the timeout reference setup.typewriter.timerReference = setTimeout(setup.typewriter.write, 1000); } else { // Clear out the timeout once index is greater than string length clearTimeout(setup.typewriter.timerReference); // Reset the index setup.typewriter.index = -1; } } :: Start <div id=\"typewriter\"></div> <% setup.typewriter.text = \"Hello, world!\"; setup.typewriter.write(); %> Download: Twee Code","title":"Twee Code"},{"location":"typewriter/snowman/snowman_typewriter.html#see-also","text":"Delayed Text","title":"See Also"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html","text":"\"Typewriter Effect\": SugarCube (v2.18) \u00b6 Summary \u00b6 \"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In SugarCube, a <<widget>> macro named \"typewriter\" is created that uses the <<repeat>> and <<stop>> macros internally to show one character every one second. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Typewriter Effect in Sugarcube :: Start <<typewriter \"Hello, world\">> :: Typewriter[widget] \\<<widget typewriter>> \\ <!-- Create a SPAN with an ID --> \\ <span id=\"typewriter\"></span> \\ <!-- In SugarCube, arrays start at 0 --> \\ <<set _textArrayLength to 0>> \\ <!-- Repeat every second --> \\ <<repeat 1s>> \\ <!-- Test if textArrayLength is greater than length of $args[0] --> \\ <<if _textArrayLength gte $args[0].length>> \\ <<stop>> \\ <<else>> \\ <!-- Append the current position to the existing characters --> \\ <<append \"#typewriter\">>$args[0][_textArrayLength]<</append>> \\ <!-- Update the length --> \\ <<set _textArrayLength++>> \\ <</if>> \\ <</repeat>> \\<</widget>> Download: Twee Code See Also \u00b6 Delayed Text","title":"SugarCube"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html#typewriter-effect-sugarcube-v218","text":"","title":"\"Typewriter Effect\": SugarCube (v2.18)"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html#summary","text":"\"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In SugarCube, a <<widget>> macro named \"typewriter\" is created that uses the <<repeat>> and <<stop>> macros internally to show one character every one second.","title":"Summary"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html#twee-code","text":":: StoryTitle Typewriter Effect in Sugarcube :: Start <<typewriter \"Hello, world\">> :: Typewriter[widget] \\<<widget typewriter>> \\ <!-- Create a SPAN with an ID --> \\ <span id=\"typewriter\"></span> \\ <!-- In SugarCube, arrays start at 0 --> \\ <<set _textArrayLength to 0>> \\ <!-- Repeat every second --> \\ <<repeat 1s>> \\ <!-- Test if textArrayLength is greater than length of $args[0] --> \\ <<if _textArrayLength gte $args[0].length>> \\ <<stop>> \\ <<else>> \\ <!-- Append the current position to the existing characters --> \\ <<append \"#typewriter\">>$args[0][_textArrayLength]<</append>> \\ <!-- Update the length --> \\ <<set _textArrayLength++>> \\ <</if>> \\ <</repeat>> \\<</widget>> Download: Twee Code","title":"Twee Code"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html#see-also","text":"Delayed Text","title":"See Also"},{"location":"usingaddons/sugarcube/sugarcube_usingaddons.html","text":"\"Using Add-ons\": SugarCube (v2.18) \u00b6 Summary \u00b6 Many people have developed external add-ons for use in story formats like SugarCube. Often, these add-ons will come with instructions that should be followed to incorporate them into a story. This example uses the <<cyclinglink>> macro created by Thomas Michael Edwards based on the work done by Leon Arnott for Twine 1. It's code was copied into the Story JavaScript for use in the story. Live Example \u00b6 Download: Live Example Twee Code \u00b6 :: StoryTitle Using Add-ons in SugarCube :: UserScript[script] /*! <<cyclinglink>> macro for SugarCube 2.x */ !function(){\"use strict\";if(\"undefined\"==typeof version||\"undefined\"==typeof version.title||\"SugarCube\"!==version.title||\"undefined\"==typeof version.major||version.major<2)throw new Error(\"<<cyclinglink>> macro requires SugarCube 2.0 or greater, aborting load\");version.extensions.cyclinglinkMacro={major:3,minor:3,revision:2},macros.cyclinglink={handler:function(a,b,c){function toggleText(w){w.classList.remove(\"cyclingLinkInit\"),w.classList.toggle(rl+\"Enabled\"),w.classList.toggle(rl+\"Disabled\"),w.style.display=\"none\"===w.style.display?\"inline\":\"none\"}var rl=\"cyclingLink\";switch(c[c.length-1]){case\"end\":var end=!0;c.pop();break;case\"out\":var out=!0;c.pop()}var v=null;c.length&&\"$\"===c[0][0]&&(v=c[0].slice(1),c.shift());var h=State.variables;if(!out||!v||\"\"!==h[v]){var l=insertElement(a,\"a\");l.className=\"link-internal cyclingLink\",l.setAttribute(\"data-cycle\",0);for(var i=0;i<c.length;i++){var on=i===(v?Math.max(c.indexOf(h[v]),0):0),d=insertElement(null,\"span\",null,\"cyclingLinkInit cyclingLink\"+(on?\"En\":\"Dis\")+\"abled\");on?(v&&(h[v]=c[i]),l.setAttribute(\"data-cycle\",i)):d.style.display=\"none\",insertText(d,c[i]),on&&end&&i===c.length-1?l.parentNode.replaceChild(d,l):l.appendChild(d)}jQuery(l).ariaClick(function(){var t=this.childNodes,u=this.getAttribute(\"data-cycle\")-0,m=t.length;if(toggleText(t[u]),u+=1,out&&u===m?v&&(h[v]=\"\"):(u%=m,v&&(h[v]=c[u])),(end||out)&&u===m-(end?1:0)){if(!end)return void this.parentNode.removeChild(this);var n=this.removeChild(t[u]);return n.className=rl+\"End\",n.style.display=\"inline\",void this.parentNode.replaceChild(n,this)}toggleText(t[u]),this.setAttribute(\"data-cycle\",u)})}}}}(); :: Start <<cyclinglink \"First\" \"Second\" \"Third\">> Download: Twee Code","title":"SugarCube"},{"location":"usingaddons/sugarcube/sugarcube_usingaddons.html#using-add-ons-sugarcube-v218","text":"","title":"\"Using Add-ons\": SugarCube (v2.18)"},{"location":"usingaddons/sugarcube/sugarcube_usingaddons.html#summary","text":"Many people have developed external add-ons for use in story formats like SugarCube. Often, these add-ons will come with instructions that should be followed to incorporate them into a story. This example uses the <<cyclinglink>> macro created by Thomas Michael Edwards based on the work done by Leon Arnott for Twine 1. It's code was copied into the Story JavaScript for use in the story.","title":"Summary"},{"location":"usingaddons/sugarcube/sugarcube_usingaddons.html#live-example","text":"Download: Live Example","title":"Live Example"},{"location":"usingaddons/sugarcube/sugarcube_usingaddons.html#twee-code","text":":: StoryTitle Using Add-ons in SugarCube :: UserScript[script] /*! <<cyclinglink>> macro for SugarCube 2.x */ !function(){\"use strict\";if(\"undefined\"==typeof version||\"undefined\"==typeof version.title||\"SugarCube\"!==version.title||\"undefined\"==typeof version.major||version.major<2)throw new Error(\"<<cyclinglink>> macro requires SugarCube 2.0 or greater, aborting load\");version.extensions.cyclinglinkMacro={major:3,minor:3,revision:2},macros.cyclinglink={handler:function(a,b,c){function toggleText(w){w.classList.remove(\"cyclingLinkInit\"),w.classList.toggle(rl+\"Enabled\"),w.classList.toggle(rl+\"Disabled\"),w.style.display=\"none\"===w.style.display?\"inline\":\"none\"}var rl=\"cyclingLink\";switch(c[c.length-1]){case\"end\":var end=!0;c.pop();break;case\"out\":var out=!0;c.pop()}var v=null;c.length&&\"$\"===c[0][0]&&(v=c[0].slice(1),c.shift());var h=State.variables;if(!out||!v||\"\"!==h[v]){var l=insertElement(a,\"a\");l.className=\"link-internal cyclingLink\",l.setAttribute(\"data-cycle\",0);for(var i=0;i<c.length;i++){var on=i===(v?Math.max(c.indexOf(h[v]),0):0),d=insertElement(null,\"span\",null,\"cyclingLinkInit cyclingLink\"+(on?\"En\":\"Dis\")+\"abled\");on?(v&&(h[v]=c[i]),l.setAttribute(\"data-cycle\",i)):d.style.display=\"none\",insertText(d,c[i]),on&&end&&i===c.length-1?l.parentNode.replaceChild(d,l):l.appendChild(d)}jQuery(l).ariaClick(function(){var t=this.childNodes,u=this.getAttribute(\"data-cycle\")-0,m=t.length;if(toggleText(t[u]),u+=1,out&&u===m?v&&(h[v]=\"\"):(u%=m,v&&(h[v]=c[u])),(end||out)&&u===m-(end?1:0)){if(!end)return void this.parentNode.removeChild(this);var n=this.removeChild(t[u]);return n.className=rl+\"End\",n.style.display=\"inline\",void this.parentNode.replaceChild(n,this)}toggleText(t[u]),this.setAttribute(\"data-cycle\",u)})}}}}(); :: Start <<cyclinglink \"First\" \"Second\" \"Third\">> Download: Twee Code","title":"Twee Code"}]}