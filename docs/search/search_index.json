{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the Twine Cookbook # Reading the Cookbook Online # Starting with version 2.0, the Twine Cookbook is created using mkdocs with the Material theme and plugin set . It can be found at https://twinery.org/cookbook/ . Reading the Cookbook on GitHub # The Twine Cookbook can also be read on GitHub . All of its markdown files can be found in the pages folder with the output HTML in the docs folder. Want to suggest a change or new example? # Start with the Code of Conduct . Then, include as much as possible of the following in an issue : A short summary of the example(s) or suggestions(s) How (or if) you would like to be recognized for your contribution Contributors # @videlais (Dan Cox) [Editor] @klembot (Chris Klimas) @tmedwards (Thomas Michael Edwards) @greyelf (David Tarrant) @webbedspace (Leon Arnott) @shawngraham (Shawn Graham) @Akjosch (Akjosch) @ChapelR (Chapel) G.C. \"Grim\" Baccaris License # This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License . Version 2.0 (May 2020) #","title":"Home"},{"location":"index.html#welcome-to-the-twine-cookbook","text":"","title":"Welcome to the Twine Cookbook"},{"location":"index.html#reading-the-cookbook-online","text":"Starting with version 2.0, the Twine Cookbook is created using mkdocs with the Material theme and plugin set . It can be found at https://twinery.org/cookbook/ .","title":"Reading the Cookbook Online"},{"location":"index.html#reading-the-cookbook-on-github","text":"The Twine Cookbook can also be read on GitHub . All of its markdown files can be found in the pages folder with the output HTML in the docs folder.","title":"Reading the Cookbook on GitHub"},{"location":"index.html#want-to-suggest-a-change-or-new-example","text":"Start with the Code of Conduct . Then, include as much as possible of the following in an issue : A short summary of the example(s) or suggestions(s) How (or if) you would like to be recognized for your contribution","title":"Want to suggest a change or new example?"},{"location":"index.html#contributors","text":"@videlais (Dan Cox) [Editor] @klembot (Chris Klimas) @tmedwards (Thomas Michael Edwards) @greyelf (David Tarrant) @webbedspace (Leon Arnott) @shawngraham (Shawn Graham) @Akjosch (Akjosch) @ChapelR (Chapel) G.C. \"Grim\" Baccaris","title":"Contributors"},{"location":"index.html#license","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"License"},{"location":"index.html#version-20-may-2020","text":"","title":"Version 2.0 (May 2020)"},{"location":"formatting.html","text":"Example Formatting # Warning Warnings appear in blocks like this. Information Informational sections appear like this. Summary # Each example is divided into sections. They start with a summary of the example and a short description of what functionality is used and why. If specific macros or functions are mentioned, they should be emphasized and link to their appropriate documentation where possible. For terms that may not be familiar to a more general audience, they can be added to the Glossary file and their definitions will be available as a tooltip over the term or phrase in the HTML version of the book. Example # Each example has a link to a compiled example that can be imported in Twine 2. Twee Code # Finally, in the last section, all code is shown in its Twee notation for reference and download. :: Start Twee notation example! See Also # Some examples use, reference, or share functionality. In this space, some examples link to others in order to better help bridge connections between different ideas and techniques.","title":"Example Formatting"},{"location":"formatting.html#example-formatting","text":"Warning Warnings appear in blocks like this. Information Informational sections appear like this.","title":"Example Formatting"},{"location":"formatting.html#summary","text":"Each example is divided into sections. They start with a summary of the example and a short description of what functionality is used and why. If specific macros or functions are mentioned, they should be emphasized and link to their appropriate documentation where possible. For terms that may not be familiar to a more general audience, they can be added to the Glossary file and their definitions will be available as a tooltip over the term or phrase in the HTML version of the book.","title":"Summary"},{"location":"formatting.html#example","text":"Each example has a link to a compiled example that can be imported in Twine 2.","title":"Example"},{"location":"formatting.html#twee-code","text":"Finally, in the last section, all code is shown in its Twee notation for reference and download. :: Start Twee notation example!","title":"Twee Code"},{"location":"formatting.html#see-also","text":"Some examples use, reference, or share functionality. In this space, some examples link to others in order to better help bridge connections between different ideas and techniques.","title":"See Also"},{"location":"style_guide.html","text":"Style Guide # The Twine Cookbook uses certain conventions to indicate text should be considered macros , part of JavaScript , or values to be used with either. HTML and Macros # All HTML and macro names (such as those used in Chapbook, Harlowe, and SugarCube) are escaped. They will appear like this <div> for HTML and this <<include>> for macros. This is done for easily allowing users to copy and paste the text from the Cookbook into Twine 2. Example: This example uses the HTML element <div> and the macro (display:) . Variables and JavaScript Functions # All variables are highlighted with emphasis . If a story format provides or an example uses particular JavaScript functionality, it will appear with strong emphasis . Example: This example uses the variable exampleValue and uses the global object window and function parseInt() . Quotation Marks # In some cases, the value of a variable is shown in quotation marks. This is to help users see which values are used and how they might be transformed or inform certain functionality.","title":"Style Guide"},{"location":"style_guide.html#style-guide","text":"The Twine Cookbook uses certain conventions to indicate text should be considered macros , part of JavaScript , or values to be used with either.","title":"Style Guide"},{"location":"style_guide.html#html-and-macros","text":"All HTML and macro names (such as those used in Chapbook, Harlowe, and SugarCube) are escaped. They will appear like this <div> for HTML and this <<include>> for macros. This is done for easily allowing users to copy and paste the text from the Cookbook into Twine 2. Example: This example uses the HTML element <div> and the macro (display:) .","title":"HTML and Macros"},{"location":"style_guide.html#variables-and-javascript-functions","text":"All variables are highlighted with emphasis . If a story format provides or an example uses particular JavaScript functionality, it will appear with strong emphasis . Example: This example uses the variable exampleValue and uses the global object window and function parseInt() .","title":"Variables and JavaScript Functions"},{"location":"style_guide.html#quotation-marks","text":"In some cases, the value of a variable is shown in quotation marks. This is to help users see which values are used and how they might be transformed or inform certain functionality.","title":"Quotation Marks"},{"location":"using_cookbook.html","text":"Using the Twine Cookbook # The Twine Cookbook provides examples, Twee source code, and links to download either on each example page under the different topic areas. Downloading and Using the Examples # 1) Download the compiled HTML from an example page. 2) Import the file into Twine Twine 2: Use the \"Import From File\" link on the right-hand side under the \"+Story\" button. Twine 1: Use File->Import and select \"Compiled HTML File...\". Downloading and Using Twee Code # Twee source code is provided for all examples to more easily show the passages and what they contain. Twine 2 # Twine 2 does not natively understand Twee source code. Twine 1 # For Twine 1 examples, the Twee source code can be downloaded and imported through going to File->Import and selecting \"Twee Source Code...\".","title":"Using the Cookbook"},{"location":"using_cookbook.html#using-the-twine-cookbook","text":"The Twine Cookbook provides examples, Twee source code, and links to download either on each example page under the different topic areas.","title":"Using the Twine Cookbook"},{"location":"using_cookbook.html#downloading-and-using-the-examples","text":"1) Download the compiled HTML from an example page. 2) Import the file into Twine Twine 2: Use the \"Import From File\" link on the right-hand side under the \"+Story\" button. Twine 1: Use File->Import and select \"Compiled HTML File...\".","title":"Downloading and Using the Examples"},{"location":"using_cookbook.html#downloading-and-using-twee-code","text":"Twee source code is provided for all examples to more easily show the passages and what they contain.","title":"Downloading and Using Twee Code"},{"location":"using_cookbook.html#twine-2","text":"Twine 2 does not natively understand Twee source code.","title":"Twine 2"},{"location":"using_cookbook.html#twine-1","text":"For Twine 1 examples, the Twee source code can be downloaded and imported through going to File->Import and selecting \"Twee Source Code...\".","title":"Twine 1"},{"location":"addingfunctionality/chapbook/chapbook_adding_functionality.html","text":"\"Adding Functionality\": Chapbook (v1.0.0) # Summary # Chapbook allows for creation of custom inserts and modifiers . The example below adds an insert that displays a \ud83d\ude00 emoji. Example # Download Example Twee Code # :: StoryTitle Adding Functionality :: UserScript[script] engine.extend('1.0.0', () => { config.template.inserts = [{ match: /^smiley face$/i, render: () => '\ud83d\ude00' }, ...config.template.inserts]; }); :: Start Hello there {smiley face} Download Twee Code","title":"Chapbook"},{"location":"addingfunctionality/chapbook/chapbook_adding_functionality.html#adding-functionality-chapbook-v100","text":"","title":"\"Adding Functionality\": Chapbook (v1.0.0)"},{"location":"addingfunctionality/chapbook/chapbook_adding_functionality.html#summary","text":"Chapbook allows for creation of custom inserts and modifiers . The example below adds an insert that displays a \ud83d\ude00 emoji.","title":"Summary"},{"location":"addingfunctionality/chapbook/chapbook_adding_functionality.html#example","text":"Download Example","title":"Example"},{"location":"addingfunctionality/chapbook/chapbook_adding_functionality.html#twee-code","text":":: StoryTitle Adding Functionality :: UserScript[script] engine.extend('1.0.0', () => { config.template.inserts = [{ match: /^smiley face$/i, render: () => '\ud83d\ude00' }, ...config.template.inserts]; }); :: Start Hello there {smiley face} Download Twee Code","title":"Twee Code"},{"location":"addingfunctionality/snowman/snowman_adding_functionality.html","text":"\"Adding Functionality\": Snowman (v1.3.0) # Summary # Snowman does not provide macros . However, additional functionality can be added through the use of the Underscore.js JavaScript library provided with Snowman. In this example, a global function, showCurrentTime() , is added to the window.setup object. It is called in a passage through using the interpolation functionality of Underscore's template system to show a value. Example # Download Twee Code # :: StoryTitle Adding Functionality in Snowman :: UserScript[script] // Use or create window.setup window.setup = window.setup || {}; // Create global function window.setup.showCurrentTime = function() { return new Date(); } :: Start The current time is <%= setup.showCurrentTime() %> Twee Download","title":"Snowman"},{"location":"addingfunctionality/snowman/snowman_adding_functionality.html#adding-functionality-snowman-v130","text":"","title":"\"Adding Functionality\": Snowman (v1.3.0)"},{"location":"addingfunctionality/snowman/snowman_adding_functionality.html#summary","text":"Snowman does not provide macros . However, additional functionality can be added through the use of the Underscore.js JavaScript library provided with Snowman. In this example, a global function, showCurrentTime() , is added to the window.setup object. It is called in a passage through using the interpolation functionality of Underscore's template system to show a value.","title":"Summary"},{"location":"addingfunctionality/snowman/snowman_adding_functionality.html#example","text":"Download","title":"Example"},{"location":"addingfunctionality/snowman/snowman_adding_functionality.html#twee-code","text":":: StoryTitle Adding Functionality in Snowman :: UserScript[script] // Use or create window.setup window.setup = window.setup || {}; // Create global function window.setup.showCurrentTime = function() { return new Date(); } :: Start The current time is <%= setup.showCurrentTime() %> Twee Download","title":"Twee Code"},{"location":"addingfunctionality/sugarcube/sugarcube_adding_functionality.html","text":"\"Adding Functionality\": SugarCube (v2.18) # Summary # In SugarCube, additional functionality can be added through the Macro.add() function. In this example, the Date() JavaScript function is used to get the current time. This is saved to payload.contents , and the jQuery.wiki() function is used to convert and append it to the current passage. Example # Download Twee Code # :: StoryTitle Adding Functionality in SugarCube :: UserScript[script] Macro.add(\"currenttime\", { tags: null, handler: function() { // Try the following code and catch any errors try { // Get the current time and save it to the payload this.payload.contents = new Date(); // Wikify (and append) the current payload contents jQuery(this.output).wiki(this.payload.contents); } catch (ex) { // Return any errors return this.error(\"Error: \" + ex.message); } } }); :: Start <<currenttime>><</currenttime>> Twee Download","title":"SugarCube"},{"location":"addingfunctionality/sugarcube/sugarcube_adding_functionality.html#adding-functionality-sugarcube-v218","text":"","title":"\"Adding Functionality\": SugarCube (v2.18)"},{"location":"addingfunctionality/sugarcube/sugarcube_adding_functionality.html#summary","text":"In SugarCube, additional functionality can be added through the Macro.add() function. In this example, the Date() JavaScript function is used to get the current time. This is saved to payload.contents , and the jQuery.wiki() function is used to convert and append it to the current passage.","title":"Summary"},{"location":"addingfunctionality/sugarcube/sugarcube_adding_functionality.html#example","text":"Download","title":"Example"},{"location":"addingfunctionality/sugarcube/sugarcube_adding_functionality.html#twee-code","text":":: StoryTitle Adding Functionality in SugarCube :: UserScript[script] Macro.add(\"currenttime\", { tags: null, handler: function() { // Try the following code and catch any errors try { // Get the current time and save it to the payload this.payload.contents = new Date(); // Wikify (and append) the current payload contents jQuery(this.output).wiki(this.payload.contents); } catch (ex) { // Return any errors return this.error(\"Error: \" + ex.message); } } }); :: Start <<currenttime>><</currenttime>> Twee Download","title":"Twee Code"},{"location":"arrays/chapbook/chapbook_arrays.html","text":"\"Arrays\": Chapbook (1.0.0) # Summary # Using the Vars Section , variables can be set using any JavaScript values, such as arrays . However, Chapbook expressions will only show certain types of values . While Chapbook cannot show an array or its value by position, a new variable can be set and then shown. This following example shows how to do this approach. Example # Download Twee Code # :: StoryTitle Arrays for Chapbook :: Start arrayExample: [13, 15] exampleValue: arrayExample[0] -- Chapbook can't display indexed array values currently. However, setting a value based on a position in an array will show. Here is an {exampleValue}. Twee Download","title":"Chapbook"},{"location":"arrays/chapbook/chapbook_arrays.html#arrays-chapbook-100","text":"","title":"\"Arrays\": Chapbook (1.0.0)"},{"location":"arrays/chapbook/chapbook_arrays.html#summary","text":"Using the Vars Section , variables can be set using any JavaScript values, such as arrays . However, Chapbook expressions will only show certain types of values . While Chapbook cannot show an array or its value by position, a new variable can be set and then shown. This following example shows how to do this approach.","title":"Summary"},{"location":"arrays/chapbook/chapbook_arrays.html#example","text":"Download","title":"Example"},{"location":"arrays/chapbook/chapbook_arrays.html#twee-code","text":":: StoryTitle Arrays for Chapbook :: Start arrayExample: [13, 15] exampleValue: arrayExample[0] -- Chapbook can't display indexed array values currently. However, setting a value based on a position in an array will show. Here is an {exampleValue}. Twee Download","title":"Twee Code"},{"location":"arrays/harlowe/harlowe_arrays.html","text":"\"Arrays\": Harlowe (v2.1) # Summary # Arrays are a collection of values. Each entry in an array is assigned an index , which is a number that corresponds to its position in the array. In Harlowe, and unlike in JavaScript, arrays are one-based, meaning the first element in the array is given the index \"1\". Arrays can be created using the (a:) or (array:) macro and assigning a variable to it: (set: $myArray to (a:)) . Specific elements in an array can be accessed by following its variable name with a possessive 's and an ordinal number referencing the index to check, ( $myArray's 2nd ); the final entry, $myArray's last , points to the final element. Its contents can be tested using the contains operator (e.g. (if: $myArray contains 'something')[...] ), add new items using the + operator (e.g. (set: $myArray to + (a: 'something')) ), and remove items using the - operator. All elements in an array can be passed to macros as separate arguments with the spread operator ( ... ). Example # Download Twee Code # :: StoryTitle Arrays in Harlowe :: init [startup] <!-- it is always a good idea to initialize your variables, but with arrays it is particularly important --> (set: $inventory to (a:)) (set: $chest to (a: 'a shield', 'a suit of armor')) (set: $chestOpen to false) :: inventory [header] You are currently carrying: <!-- if the inventory contains nothing, show \"nothing\" -->\\ (if: $inventory's length is 0)[\\ nothing. ](else:)[\\ <!-- we iterate over the array and print each item -->\\ (for: each _item, ...$inventory)[\\ _item (unless: $inventory's last is _item)[, ]\\ ]. ] ----- :: Start <!-- we use the + operator and wrap the target elements in an (a:) macro to add to the array -->\\ You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. (set: $inventory to it + (a: 'a sword'))\\ [[Continue|hallway]] :: hallway You see a chest here in the hallway. \\ (unless: $chestOpen)[\\ Do you want to open it? { (link: 'Open the chest.')[ <!-- adding to arrays together can also be done with the + operator --> (set: $inventory to it + $chest) (set: $chestOpen to true) (goto: 'chest') ] } ](else:)[\\ It's open, and there's nothing inside. ]\\ [[Move on.|dart trap]] :: chest You open the chest and find (for: each _item, ...$chest)[\\ _item (unless: $chest's last is _item)[ and ]\\ ]. (link: 'Okay')[ (goto: (history:)'s last) ] :: dart trap Several darts shoot out of a wall at you! <!-- we can check to see if the player has a given item with the contains operator --> (if: $inventory contains 'a shield')[\\ Luckily, your shield will protect you. ](else:)[\\ With no way to defend yourself, you die. ] Twee Download","title":"Harlowe"},{"location":"arrays/harlowe/harlowe_arrays.html#arrays-harlowe-v21","text":"","title":"\"Arrays\": Harlowe (v2.1)"},{"location":"arrays/harlowe/harlowe_arrays.html#summary","text":"Arrays are a collection of values. Each entry in an array is assigned an index , which is a number that corresponds to its position in the array. In Harlowe, and unlike in JavaScript, arrays are one-based, meaning the first element in the array is given the index \"1\". Arrays can be created using the (a:) or (array:) macro and assigning a variable to it: (set: $myArray to (a:)) . Specific elements in an array can be accessed by following its variable name with a possessive 's and an ordinal number referencing the index to check, ( $myArray's 2nd ); the final entry, $myArray's last , points to the final element. Its contents can be tested using the contains operator (e.g. (if: $myArray contains 'something')[...] ), add new items using the + operator (e.g. (set: $myArray to + (a: 'something')) ), and remove items using the - operator. All elements in an array can be passed to macros as separate arguments with the spread operator ( ... ).","title":"Summary"},{"location":"arrays/harlowe/harlowe_arrays.html#example","text":"Download","title":"Example"},{"location":"arrays/harlowe/harlowe_arrays.html#twee-code","text":":: StoryTitle Arrays in Harlowe :: init [startup] <!-- it is always a good idea to initialize your variables, but with arrays it is particularly important --> (set: $inventory to (a:)) (set: $chest to (a: 'a shield', 'a suit of armor')) (set: $chestOpen to false) :: inventory [header] You are currently carrying: <!-- if the inventory contains nothing, show \"nothing\" -->\\ (if: $inventory's length is 0)[\\ nothing. ](else:)[\\ <!-- we iterate over the array and print each item -->\\ (for: each _item, ...$inventory)[\\ _item (unless: $inventory's last is _item)[, ]\\ ]. ] ----- :: Start <!-- we use the + operator and wrap the target elements in an (a:) macro to add to the array -->\\ You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. (set: $inventory to it + (a: 'a sword'))\\ [[Continue|hallway]] :: hallway You see a chest here in the hallway. \\ (unless: $chestOpen)[\\ Do you want to open it? { (link: 'Open the chest.')[ <!-- adding to arrays together can also be done with the + operator --> (set: $inventory to it + $chest) (set: $chestOpen to true) (goto: 'chest') ] } ](else:)[\\ It's open, and there's nothing inside. ]\\ [[Move on.|dart trap]] :: chest You open the chest and find (for: each _item, ...$chest)[\\ _item (unless: $chest's last is _item)[ and ]\\ ]. (link: 'Okay')[ (goto: (history:)'s last) ] :: dart trap Several darts shoot out of a wall at you! <!-- we can check to see if the player has a given item with the contains operator --> (if: $inventory contains 'a shield')[\\ Luckily, your shield will protect you. ](else:)[\\ With no way to defend yourself, you die. ] Twee Download","title":"Twee Code"},{"location":"arrays/snowman/snowman_arrays.html","text":"\"Arrays\": Snowman (v1.3) # Summary # Arrays are a collection of values. Each value in an array is assigned an index , which is a number that corresponds to the position of that item or element in the array. In JavaScript, arrays are zero-based , meaning the first element in the array is given the index \"0\". Arrays have many built-in methods and other features for your use. You can create an array by assigning a variable to the array literal, which is a pair of brackets ( [] ): <% s.myArray = [] %> . Specific elements can be accessed in an array by following its variable name with a pair of brackets containing the index to check. Testing whether an array contains an element can be done using the Array#includes() function; adding new items can be done using the Array#push() function. Example # Download Twee Code # :: StoryTitle Arrays in Snowman :: UserScript [script] (function () { var s = window.story.state; s.inventory = []; s.chest = ['a shield', 'a suit of armor']; s.chestOpen = false; }()); :: Header You are currently carrying: <% if (s.inventory.length === 0) { %> nothing. <% } else { %> <%= s.inventory.join(', ') + '.' %> <% } %> :: Start <%= window.story.render(\"Header\") %><hr /> You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. <% s.inventory.push('a sword') %> [[Continue|hallway]] :: hallway <%= window.story.render(\"Header\") %><hr /> You see a chest here in the hallway. <% if (!s.chestOpen) { %> Do you want to open it? [[Open the chest.|chest]] <% } else { %> It's open, and there's nothing inside. <% } %> [[Move on.|dart trap]] :: chest <% s.inventory = s.inventory.concat(s.chest) %> <% s.chestOpen = true %> <%= window.story.render(\"Header\") %><hr /> You open the chest and find <%= s.chest.join(' and ') %>. [[Okay.|hallway]] :: dart trap <%= window.story.render(\"Header\") %><hr /> Several darts shoot out of a wall at you! <% if (s.inventory.includes('a shield')) { %> Luckily, your shield will protect you. <% } else { %> With no way to defend yourself, you die. <% } %> Twee Download","title":"Snowman"},{"location":"arrays/snowman/snowman_arrays.html#arrays-snowman-v13","text":"","title":"\"Arrays\": Snowman (v1.3)"},{"location":"arrays/snowman/snowman_arrays.html#summary","text":"Arrays are a collection of values. Each value in an array is assigned an index , which is a number that corresponds to the position of that item or element in the array. In JavaScript, arrays are zero-based , meaning the first element in the array is given the index \"0\". Arrays have many built-in methods and other features for your use. You can create an array by assigning a variable to the array literal, which is a pair of brackets ( [] ): <% s.myArray = [] %> . Specific elements can be accessed in an array by following its variable name with a pair of brackets containing the index to check. Testing whether an array contains an element can be done using the Array#includes() function; adding new items can be done using the Array#push() function.","title":"Summary"},{"location":"arrays/snowman/snowman_arrays.html#example","text":"Download","title":"Example"},{"location":"arrays/snowman/snowman_arrays.html#twee-code","text":":: StoryTitle Arrays in Snowman :: UserScript [script] (function () { var s = window.story.state; s.inventory = []; s.chest = ['a shield', 'a suit of armor']; s.chestOpen = false; }()); :: Header You are currently carrying: <% if (s.inventory.length === 0) { %> nothing. <% } else { %> <%= s.inventory.join(', ') + '.' %> <% } %> :: Start <%= window.story.render(\"Header\") %><hr /> You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. <% s.inventory.push('a sword') %> [[Continue|hallway]] :: hallway <%= window.story.render(\"Header\") %><hr /> You see a chest here in the hallway. <% if (!s.chestOpen) { %> Do you want to open it? [[Open the chest.|chest]] <% } else { %> It's open, and there's nothing inside. <% } %> [[Move on.|dart trap]] :: chest <% s.inventory = s.inventory.concat(s.chest) %> <% s.chestOpen = true %> <%= window.story.render(\"Header\") %><hr /> You open the chest and find <%= s.chest.join(' and ') %>. [[Okay.|hallway]] :: dart trap <%= window.story.render(\"Header\") %><hr /> Several darts shoot out of a wall at you! <% if (s.inventory.includes('a shield')) { %> Luckily, your shield will protect you. <% } else { %> With no way to defend yourself, you die. <% } %> Twee Download","title":"Twee Code"},{"location":"arrays/sugarcube/sugarcube_arrays.html","text":"\"Arrays\": SugarCube (v2.18) # Summary # Arrays are a collection of values. Each value in an array is assigned an index , which is a number that corresponds to the position of that item or element. Arrays have many built-in methods and other features, and SugarCube adds many more . Arrays can be created by assigning a variable to the array literal, which is a pair of brackets ( [] ): <<set $myArray to []>> . Specific elements can be accessed in an array by following its variable name with a pair of brackets containing the index to check. Testing whether an array contains an element can be done using the Array#includes() function; adding new items can be done using the Array#push() function. Example # Download Twee Code # :: StoryTitle Arrays in SugarCube :: StoryInit /% it is always a good idea to initialize your variables, but with arrays it is particularly important %/ <<set $inventory to []>> <<set $chest to ['a shield', 'a suit of armor']>> <<set $chestOpen to false>> :: PassageHeader You are currently carrying: /% if the inventory contains nothing, show \"nothing\" %/\\ <<if $inventory.length is 0>>\\ nothing. <<else>>\\ /% the Array#join() method combines all array elements into a single string, with each element separated by the argument given %/\\ <<= $inventory.join(', ')>>. <</if>> ----- :: Start /% we use the Array#push() method to add new items to our inventory array %/\\ You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. <<run $inventory.push('a sword')>>\\ [[Continue|hallway]] :: hallway You see a chest here in the hallway. \\ <<if not $chestOpen>>\\ Do you want to open it? <<link [[Open the chest.|chest]]>> /% concatenating the arrays and setting the result to $inventory moves all the items from the $chest array into the $inventory array %/ <<set $inventory to $inventory.concat($chest)>> <<set $chestOpen to true>> <</link>> <<else>>\\ It's open, and there's nothing inside. <</if>> [[Move on.|dart trap]] :: chest You open the chest and find <<= $chest.join(' and ')>>. [[Okay.|previous()]] :: dart trap Several darts shoot out of a wall at you! /% we can check to see if the player has a given item with Array#includes() %/ <<if $inventory.includes('a shield')>>\\ Luckily, your shield will protect you. <<else>>\\ With no way to defend yourself, you die. <</if>> Twee Download","title":"SugarCube"},{"location":"arrays/sugarcube/sugarcube_arrays.html#arrays-sugarcube-v218","text":"","title":"\"Arrays\": SugarCube (v2.18)"},{"location":"arrays/sugarcube/sugarcube_arrays.html#summary","text":"Arrays are a collection of values. Each value in an array is assigned an index , which is a number that corresponds to the position of that item or element. Arrays have many built-in methods and other features, and SugarCube adds many more . Arrays can be created by assigning a variable to the array literal, which is a pair of brackets ( [] ): <<set $myArray to []>> . Specific elements can be accessed in an array by following its variable name with a pair of brackets containing the index to check. Testing whether an array contains an element can be done using the Array#includes() function; adding new items can be done using the Array#push() function.","title":"Summary"},{"location":"arrays/sugarcube/sugarcube_arrays.html#example","text":"Download","title":"Example"},{"location":"arrays/sugarcube/sugarcube_arrays.html#twee-code","text":":: StoryTitle Arrays in SugarCube :: StoryInit /% it is always a good idea to initialize your variables, but with arrays it is particularly important %/ <<set $inventory to []>> <<set $chest to ['a shield', 'a suit of armor']>> <<set $chestOpen to false>> :: PassageHeader You are currently carrying: /% if the inventory contains nothing, show \"nothing\" %/\\ <<if $inventory.length is 0>>\\ nothing. <<else>>\\ /% the Array#join() method combines all array elements into a single string, with each element separated by the argument given %/\\ <<= $inventory.join(', ')>>. <</if>> ----- :: Start /% we use the Array#push() method to add new items to our inventory array %/\\ You find yourself inside a small room. In the corner, you see a sword, and decide to pick it up. <<run $inventory.push('a sword')>>\\ [[Continue|hallway]] :: hallway You see a chest here in the hallway. \\ <<if not $chestOpen>>\\ Do you want to open it? <<link [[Open the chest.|chest]]>> /% concatenating the arrays and setting the result to $inventory moves all the items from the $chest array into the $inventory array %/ <<set $inventory to $inventory.concat($chest)>> <<set $chestOpen to true>> <</link>> <<else>>\\ It's open, and there's nothing inside. <</if>> [[Move on.|dart trap]] :: chest You open the chest and find <<= $chest.join(' and ')>>. [[Okay.|previous()]] :: dart trap Several darts shoot out of a wall at you! /% we can check to see if the player has a given item with Array#includes() %/ <<if $inventory.includes('a shield')>>\\ Luckily, your shield will protect you. <<else>>\\ With no way to defend yourself, you die. <</if>> Twee Download","title":"Twee Code"},{"location":"audio/chapbook/chapbook_audio.html","text":"\"Audio\": Chapbook (v1.0.0) # Information This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed. Summary # Chapbook supports both looping sounds (which it calls ambient) and one-off sound (which it calls effects). It only allows playing one sound at a time. Example # Download Twee Code # :: Start sound.ambient.test.url: 'testpattern.ogg' sound.ambient.test.description: 'An audio test pattern' -- > [[Play sound]] > [[Stop the sound]] :: Play sound {ambient sound: 'test'} [[Return->Start]] :: Stop the sound sound.ambient.test.playing: false -- [[Return->Start]] Twee Download","title":"Chapbook"},{"location":"audio/chapbook/chapbook_audio.html#audio-chapbook-v100","text":"Information This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed.","title":"\"Audio\": Chapbook (v1.0.0)"},{"location":"audio/chapbook/chapbook_audio.html#summary","text":"Chapbook supports both looping sounds (which it calls ambient) and one-off sound (which it calls effects). It only allows playing one sound at a time.","title":"Summary"},{"location":"audio/chapbook/chapbook_audio.html#example","text":"Download","title":"Example"},{"location":"audio/chapbook/chapbook_audio.html#twee-code","text":":: Start sound.ambient.test.url: 'testpattern.ogg' sound.ambient.test.description: 'An audio test pattern' -- > [[Play sound]] > [[Stop the sound]] :: Play sound {ambient sound: 'test'} [[Return->Start]] :: Stop the sound sound.ambient.test.playing: false -- [[Return->Start]] Twee Download","title":"Twee Code"},{"location":"audio/harlowe/harlowe_audio.html","text":"\"Audio\": Harlowe (v2.0) # Information This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed. Summary # Harlowe does not have direct macro support for audio resources. However, additional JavaScript can be added to work with audio elements within a story. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which one is best supported when first loaded. Example # Download Twee Code # :: StoryTitle Audio in Harlowe :: Start <audio controls> <source src=\"testpattern.ogg\" type=\"audio/ogg\"> <source src=\"testpattern.wav\" type=\"audio/wav\"> Your browser does not support the audio element. </audio> Twee Download","title":"Harlowe"},{"location":"audio/harlowe/harlowe_audio.html#audio-harlowe-v20","text":"Information This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed.","title":"\"Audio\": Harlowe (v2.0)"},{"location":"audio/harlowe/harlowe_audio.html#summary","text":"Harlowe does not have direct macro support for audio resources. However, additional JavaScript can be added to work with audio elements within a story. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which one is best supported when first loaded.","title":"Summary"},{"location":"audio/harlowe/harlowe_audio.html#example","text":"Download","title":"Example"},{"location":"audio/harlowe/harlowe_audio.html#twee-code","text":":: StoryTitle Audio in Harlowe :: Start <audio controls> <source src=\"testpattern.ogg\" type=\"audio/ogg\"> <source src=\"testpattern.wav\" type=\"audio/wav\"> Your browser does not support the audio element. </audio> Twee Download","title":"Twee Code"},{"location":"audio/snowman/snowman_audio.html","text":"\"Audio\": Snowman (v1.3.0) # Information This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed. Summary # Snowman does not have direct macro support for audio resources. However, additional JavaScript can be added to work with audio elements within a story. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which one is best supported when first loaded. Example # Download Twee Code # :: StoryTitle Audio in Snowman :: Start <audio controls> <source src=\"testpattern.ogg\" type=\"audio/ogg\"> <source src=\"testpattern.wav\" type=\"audio/wav\"> Your browser does not support the audio element. </audio> Twee Download","title":"Snowman"},{"location":"audio/snowman/snowman_audio.html#audio-snowman-v130","text":"Information This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed.","title":"\"Audio\": Snowman (v1.3.0)"},{"location":"audio/snowman/snowman_audio.html#summary","text":"Snowman does not have direct macro support for audio resources. However, additional JavaScript can be added to work with audio elements within a story. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which one is best supported when first loaded.","title":"Summary"},{"location":"audio/snowman/snowman_audio.html#example","text":"Download","title":"Example"},{"location":"audio/snowman/snowman_audio.html#twee-code","text":":: StoryTitle Audio in Snowman :: Start <audio controls> <source src=\"testpattern.ogg\" type=\"audio/ogg\"> <source src=\"testpattern.wav\" type=\"audio/wav\"> Your browser does not support the audio element. </audio> Twee Download","title":"Twee Code"},{"location":"audio/sugarcube/sugarcube_audio.html","text":"\"Audio\": SugarCube (v2.18) # Information This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed. Summary # SugarCube supports audio through multiple macros. For basic playing of audio, resources must be first cached through the <<cacheaudio>> macro and then can be referenced in others like the <<audio>> macro for playing and stopping. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which format is best supported when first loaded. Example # Download Twee Code # :: StoryTitle Audio in SugarCube :: Start <<link \"Start audio!\">> <<audio \"testpattern\" play>> <</link>> <<link \"Stop audio!\">> <<audio \"testpattern\" stop>> <</link>> :: StoryInit <<cacheaudio \"testpattern\" \"testpattern.ogg\" \"testpattern.wav\">> Twee Download","title":"SugarCube"},{"location":"audio/sugarcube/sugarcube_audio.html#audio-sugarcube-v218","text":"Information This examples uses two additional files, testpattern.ogg and testpattern.wav . Both files need to be downloaded and placed in the same folder as the HTML file in order to work as designed.","title":"\"Audio\": SugarCube (v2.18)"},{"location":"audio/sugarcube/sugarcube_audio.html#summary","text":"SugarCube supports audio through multiple macros. For basic playing of audio, resources must be first cached through the <<cacheaudio>> macro and then can be referenced in others like the <<audio>> macro for playing and stopping. Audio elements rely on sources either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the resource in relation to the webpage. Because audio files are external resources, they must also be accessed from a remote service, file hosting location, or stored separately with the webpage. Due to browser differences in licensing, some audio formats are not universally supported. For best results in using audio in Twine, it is recommended to use multiple formats, allowing the browser to choose which format is best supported when first loaded.","title":"Summary"},{"location":"audio/sugarcube/sugarcube_audio.html#example","text":"Download","title":"Example"},{"location":"audio/sugarcube/sugarcube_audio.html#twee-code","text":":: StoryTitle Audio in SugarCube :: Start <<link \"Start audio!\">> <<audio \"testpattern\" play>> <</link>> <<link \"Stop audio!\">> <<audio \"testpattern\" stop>> <</link>> :: StoryInit <<cacheaudio \"testpattern\" \"testpattern.ogg\" \"testpattern.wav\">> Twee Download","title":"Twee Code"},{"location":"clamping_numbers/chapbook/chapbook_clamping_numbers.html","text":"\"Limiting the Range of a Number\": Chapbook (v1.0.0) # Summary # This example demonstrates how to limit a numeric variable to a value between a set range. This process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. This added function is then used within the Vars Section to set a value before using an expression to show its value within the passage itself. Example # Download Twee Code # :: StoryTitle Chapbook: Limiting Range of Number :: UserScript[script] (function () { Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. example: Math.clamp(variable, 1, 10) \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. variable: Math.clamp(variable + 5, 1, 10) */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start exampleNumber: 11 exampleResult: Math.clamp(exampleNumber, 1, 10) -- Despite *exampleNumber* being {exampleNumber}, it will be \"clamped\" to the highest number given to the function (10). The result is {exampleResult}. Twee Download","title":"Chapbook"},{"location":"clamping_numbers/chapbook/chapbook_clamping_numbers.html#limiting-the-range-of-a-number-chapbook-v100","text":"","title":"\"Limiting the Range of a Number\": Chapbook (v1.0.0)"},{"location":"clamping_numbers/chapbook/chapbook_clamping_numbers.html#summary","text":"This example demonstrates how to limit a numeric variable to a value between a set range. This process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. This added function is then used within the Vars Section to set a value before using an expression to show its value within the passage itself.","title":"Summary"},{"location":"clamping_numbers/chapbook/chapbook_clamping_numbers.html#example","text":"Download","title":"Example"},{"location":"clamping_numbers/chapbook/chapbook_clamping_numbers.html#twee-code","text":":: StoryTitle Chapbook: Limiting Range of Number :: UserScript[script] (function () { Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. example: Math.clamp(variable, 1, 10) \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. variable: Math.clamp(variable + 5, 1, 10) */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start exampleNumber: 11 exampleResult: Math.clamp(exampleNumber, 1, 10) -- Despite *exampleNumber* being {exampleNumber}, it will be \"clamped\" to the highest number given to the function (10). The result is {exampleResult}. Twee Download","title":"Twee Code"},{"location":"clamping_numbers/harlowe/harlowe_clamping_numbers.html","text":"\"Limiting the Range of a Number\": Harlowe (v2.0) # Information The example also adds a clamp() function to the built-in Number global JavaScript object, which the new Math.clamp() function uses internally. However, due to how Harlowe implements variables, the <Number> .clamp() function can't be used directly. Summary # This example demonstrates how to limit a numeric variable to a value between a set range. This process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. Example # Download Twee Code # :: StoryTitle Limiting the range of a number in Harlowe :: UserScript [script] (function () { /* Returns the number clamped to the specified bounds. WARNING: Due to how Harlowe implements variables you can NOT call this function directly, you must use the Math.clamp() function instead. */ Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. (set: $variable to Math.clamp($variable, 1, 10)) \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. (set: $variable to Math.clamp($variable + 5, 1, 10)_ */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start Initialize the numeric variable to a value with the range you want. eg. between ''1'' and ''10'' inclusive. &#40;note: You don't need to use the //Math.clamp()// function at this point.&#41;\\ (set: $valueToClamp to 5) ''Current value'': $valueToClamp Increase the number to a value that is ''within'' the desired range. eg. Add 1 to the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp + 1, 1, 10)) ''New value'': $valueToClamp Try to increase the number to a value that is ''outside'' the desired range. eg. Add 100 to the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp + 100, 1, 10)) ''New value'': $valueToClamp Decrease the number to a value that is ''within'' the desired range. eg. Minus 5 from the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp - 5, 1, 10)) ''New value'': $valueToClamp Try to decrease the number to a value that is ''outside'' the desired range. eg. Minus 100 from the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp - 100, 1, 10)) ''New value'': $valueToClamp Twee Download","title":"Harlowe"},{"location":"clamping_numbers/harlowe/harlowe_clamping_numbers.html#limiting-the-range-of-a-number-harlowe-v20","text":"Information The example also adds a clamp() function to the built-in Number global JavaScript object, which the new Math.clamp() function uses internally. However, due to how Harlowe implements variables, the <Number> .clamp() function can't be used directly.","title":"\"Limiting the Range of a Number\": Harlowe (v2.0)"},{"location":"clamping_numbers/harlowe/harlowe_clamping_numbers.html#summary","text":"This example demonstrates how to limit a numeric variable to a value between a set range. This process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result.","title":"Summary"},{"location":"clamping_numbers/harlowe/harlowe_clamping_numbers.html#example","text":"Download","title":"Example"},{"location":"clamping_numbers/harlowe/harlowe_clamping_numbers.html#twee-code","text":":: StoryTitle Limiting the range of a number in Harlowe :: UserScript [script] (function () { /* Returns the number clamped to the specified bounds. WARNING: Due to how Harlowe implements variables you can NOT call this function directly, you must use the Math.clamp() function instead. */ Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. (set: $variable to Math.clamp($variable, 1, 10)) \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. (set: $variable to Math.clamp($variable + 5, 1, 10)_ */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start Initialize the numeric variable to a value with the range you want. eg. between ''1'' and ''10'' inclusive. &#40;note: You don't need to use the //Math.clamp()// function at this point.&#41;\\ (set: $valueToClamp to 5) ''Current value'': $valueToClamp Increase the number to a value that is ''within'' the desired range. eg. Add 1 to the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp + 1, 1, 10)) ''New value'': $valueToClamp Try to increase the number to a value that is ''outside'' the desired range. eg. Add 100 to the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp + 100, 1, 10)) ''New value'': $valueToClamp Decrease the number to a value that is ''within'' the desired range. eg. Minus 5 from the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp - 5, 1, 10)) ''New value'': $valueToClamp Try to decrease the number to a value that is ''outside'' the desired range. eg. Minus 100 from the current value.\\ (set: $valueToClamp to Math.clamp($valueToClamp - 100, 1, 10)) ''New value'': $valueToClamp Twee Download","title":"Twee Code"},{"location":"clamping_numbers/snowman/snowman_clamping_numbers.html","text":"\"Limiting the Range of a Number\": Snowman (v1.3) # Summary # This example demonstrates how to limit a numeric variable to a value between a set range, this process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. It also adds a clamp() function to the built-in Number global JavaScript object that the new Math.clamp() function uses internally. Example # Download Twee Code # :: StoryTitle Limiting the range of a number in Snowman :: UserScript [script] (function () { /* Returns the number clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. <% s.variable = s.variable.clamp(1, 10) %> */ Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. <% s.variable = Math.clamp(s.variable, 1, 10) %> \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. <% s.variable = Math.clamp(s.variable + 5, 1, 10) %> */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start Initialize the numeric variable to a value with the range you want.<br> eg. between <b>1</b> and <b>10</b> inclusive.<br> &#40;note: You don't need to use the <i>Math.clamp()</i> function at this point.&#41;<br> <% s.valueToClamp = 5 %> <b>Current value</b>: <%= s.valueToClamp %> Increase the number to a value that is <b>within</b> the desired range.<br> eg. Add 1 to the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp + 1, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Try to increase the number to a value that is <b>outside</b> the desired range.<br> eg. Add 100 to the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp + 100, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Decrease the number to a value that is <b>within</b> the desired range.<br> eg. Minus 5 from the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp - 5, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Try to decrease the number to a value that is <b>outside</b> the desired range.<br> eg. Minus 100 from the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp - 100, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Twee Download","title":"Snowman"},{"location":"clamping_numbers/snowman/snowman_clamping_numbers.html#limiting-the-range-of-a-number-snowman-v13","text":"","title":"\"Limiting the Range of a Number\": Snowman (v1.3)"},{"location":"clamping_numbers/snowman/snowman_clamping_numbers.html#summary","text":"This example demonstrates how to limit a numeric variable to a value between a set range, this process is commonly known as clamping. The example adds a clamp() function to the existing built-in Math global JavaScript object, which can then be called to achieve the desired result. It also adds a clamp() function to the built-in Number global JavaScript object that the new Math.clamp() function uses internally.","title":"Summary"},{"location":"clamping_numbers/snowman/snowman_clamping_numbers.html#example","text":"Download","title":"Example"},{"location":"clamping_numbers/snowman/snowman_clamping_numbers.html#twee-code","text":":: StoryTitle Limiting the range of a number in Snowman :: UserScript [script] (function () { /* Returns the number clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. <% s.variable = s.variable.clamp(1, 10) %> */ Object.defineProperty(Number.prototype, 'clamp', { configurable : true, writable : true, value(/* min, max */) { if (this == null) { // lazy equality for null throw new TypeError('Number.prototype.clamp called on null or undefined'); } if (arguments.length !== 2) { throw new Error('Number.prototype.clamp called with an incorrect number of parameters'); } var min = Number(arguments[0]); var max = Number(arguments[1]); if (min > max) { var tmp = min; min = max; max = tmp; } return Math.min(Math.max(this, min), max); } }); /* Returns the given numerical clamped to the specified bounds. Usage: \u2192 Limit numeric variable to a value between 1 and 10 inclusive. <% s.variable = Math.clamp(s.variable, 1, 10) %> \u2192 Limit result of mathematical operation to a value between 1 and 10 inclusive. <% s.variable = Math.clamp(s.variable + 5, 1, 10) %> */ Object.defineProperty(Math, 'clamp', { configurable : true, writable : true, value(num, min, max) { var value = Number(num); return Number.isNaN(value) ? NaN : value.clamp(min, max); } }); })(); :: Start Initialize the numeric variable to a value with the range you want.<br> eg. between <b>1</b> and <b>10</b> inclusive.<br> &#40;note: You don't need to use the <i>Math.clamp()</i> function at this point.&#41;<br> <% s.valueToClamp = 5 %> <b>Current value</b>: <%= s.valueToClamp %> Increase the number to a value that is <b>within</b> the desired range.<br> eg. Add 1 to the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp + 1, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Try to increase the number to a value that is <b>outside</b> the desired range.<br> eg. Add 100 to the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp + 100, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Decrease the number to a value that is <b>within</b> the desired range.<br> eg. Minus 5 from the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp - 5, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Try to decrease the number to a value that is <b>outside</b> the desired range.<br> eg. Minus 100 from the current value. <% s.valueToClamp = Math.clamp(s.valueToClamp - 100, 1, 10) %> <b>New value</b>: <%= s.valueToClamp %> Twee Download","title":"Twee Code"},{"location":"clamping_numbers/sugarcube/sugarcube_clamping_numbers.html","text":"\"Limiting the Range of a Number\": SugarCube (v2.18) # Summary # This example demonstrates how to limit a numeric variable to a value between a set range, this process is commonly known as clamping. It uses the Math.clamp() function in SugarCube to achieve the desired result. Example # Download Twee Code # :: StoryTitle Limiting the range of a number in SugarCube :: Start Initialize the numeric variable to a value with the range you want. eg. between ''1'' and ''10'' inclusive. (note: You don't need to use the //Math.clamp()// function at this point.)\\ <<set $valueToClamp to 5>> ''Current value'': $valueToClamp Increase the number to a value that is ''within'' the desired range. eg. Add 1 to the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp + 1, 1, 10)>> ''New value'': $valueToClamp Try to increase the number to a value that is ''outside'' the desired range. eg. Add 100 to the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp + 100, 1, 10)>> ''New value'': $valueToClamp Decrease the number to a value that is ''within'' the desired range. eg. Minus 5 from the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp - 5, 1, 10)>> ''New value'': $valueToClamp Try to decrease the number to a value that is ''outside'' the desired range. eg. Minus 100 from the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp - 100, 1, 10)>> ''New value'': $valueToClamp Twee Download","title":"SugarCube"},{"location":"clamping_numbers/sugarcube/sugarcube_clamping_numbers.html#limiting-the-range-of-a-number-sugarcube-v218","text":"","title":"\"Limiting the Range of a Number\": SugarCube (v2.18)"},{"location":"clamping_numbers/sugarcube/sugarcube_clamping_numbers.html#summary","text":"This example demonstrates how to limit a numeric variable to a value between a set range, this process is commonly known as clamping. It uses the Math.clamp() function in SugarCube to achieve the desired result.","title":"Summary"},{"location":"clamping_numbers/sugarcube/sugarcube_clamping_numbers.html#example","text":"Download","title":"Example"},{"location":"clamping_numbers/sugarcube/sugarcube_clamping_numbers.html#twee-code","text":":: StoryTitle Limiting the range of a number in SugarCube :: Start Initialize the numeric variable to a value with the range you want. eg. between ''1'' and ''10'' inclusive. (note: You don't need to use the //Math.clamp()// function at this point.)\\ <<set $valueToClamp to 5>> ''Current value'': $valueToClamp Increase the number to a value that is ''within'' the desired range. eg. Add 1 to the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp + 1, 1, 10)>> ''New value'': $valueToClamp Try to increase the number to a value that is ''outside'' the desired range. eg. Add 100 to the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp + 100, 1, 10)>> ''New value'': $valueToClamp Decrease the number to a value that is ''within'' the desired range. eg. Minus 5 from the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp - 5, 1, 10)>> ''New value'': $valueToClamp Try to decrease the number to a value that is ''outside'' the desired range. eg. Minus 100 from the current value.\\ <<set $valueToClamp to Math.clamp($valueToClamp - 100, 1, 10)>> ''New value'': $valueToClamp Twee Download","title":"Twee Code"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html","text":"\"Conditional Statements\": Chapbook (v1.0.0) # Summary # The [if condition] and [else] modifiers found in the Conditional Display section of the Chapbook guide can be used to conditionally display content based on the current value of a variable. Example # Download Twee Code # :: StoryTitle Conditional Statements in Chapbook :: Start animal: \"horse\" -- [if animal === \"dog\"] It's a dog! [else] It's a horse! [continue] Twee Download See Also # Setting and Showing Variables","title":"Chapbook"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html#conditional-statements-chapbook-v100","text":"","title":"\"Conditional Statements\": Chapbook (v1.0.0)"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html#summary","text":"The [if condition] and [else] modifiers found in the Conditional Display section of the Chapbook guide can be used to conditionally display content based on the current value of a variable.","title":"Summary"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html#example","text":"Download","title":"Example"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html#twee-code","text":":: StoryTitle Conditional Statements in Chapbook :: Start animal: \"horse\" -- [if animal === \"dog\"] It's a dog! [else] It's a horse! [continue] Twee Download","title":"Twee Code"},{"location":"conditionalstatements/chapbook/chapbook_conditionalstatements.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html","text":"\"Conditional Statements\": Harlowe (v2.0) # Summary # The (if:) and (else:) macros conditionally produce commands that can be attached to hooks in Harlowe. If the statement is true, the (if:) section will be run. Otherwise, the (else:) section will be. The (unless:) macro can also be used in place of (if:) for the opposite effect. Furthermore, variables can be attached to hooks to control whether they are displayed based on if they are \"true\" (will be displayed) or \"false\" (will not be displayed). Example # Download Twee Code # :: StoryTitle Conditional Statements in Harlowe :: Start (set: $animal to \"horse\") (if: $animal is \"dog\")[It's a dog!] (else:)[It's a horse!] (unless: $animal is \"dog\")[It's a horse!] (else:)[It's a dog!] (set: $isDog to $animal is \"horse\") $isDog[It's a dog!] Twee Download See Also # Setting and Showing Variables","title":"Harlowe"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html#conditional-statements-harlowe-v20","text":"","title":"\"Conditional Statements\": Harlowe (v2.0)"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html#summary","text":"The (if:) and (else:) macros conditionally produce commands that can be attached to hooks in Harlowe. If the statement is true, the (if:) section will be run. Otherwise, the (else:) section will be. The (unless:) macro can also be used in place of (if:) for the opposite effect. Furthermore, variables can be attached to hooks to control whether they are displayed based on if they are \"true\" (will be displayed) or \"false\" (will not be displayed).","title":"Summary"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html#example","text":"Download","title":"Example"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html#twee-code","text":":: StoryTitle Conditional Statements in Harlowe :: Start (set: $animal to \"horse\") (if: $animal is \"dog\")[It's a dog!] (else:)[It's a horse!] (unless: $animal is \"dog\")[It's a horse!] (else:)[It's a dog!] (set: $isDog to $animal is \"horse\") $isDog[It's a dog!] Twee Download","title":"Twee Code"},{"location":"conditionalstatements/harlowe/harlowe_conditionalstatements.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html","text":"\"Conditional Statements\": Snowman (v1.3.0) # Summary # Through using the s global variable and the built-in Underscore template functionality , JavaScript conditional statements can be run to show content in Snowman. Example # Download Twee Code # :: StoryTitle Conditional Statements in Snowman :: Start <% s.animal = \"horse\"; %> <% if(s.animal == \"dog\"){ %> It's a dog! <% } else { %> It's a horse! <% } %> Twee Download See Also # Setting and Showing Variables","title":"Snowman"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html#conditional-statements-snowman-v130","text":"","title":"\"Conditional Statements\": Snowman (v1.3.0)"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html#summary","text":"Through using the s global variable and the built-in Underscore template functionality , JavaScript conditional statements can be run to show content in Snowman.","title":"Summary"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html#example","text":"Download","title":"Example"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html#twee-code","text":":: StoryTitle Conditional Statements in Snowman :: Start <% s.animal = \"horse\"; %> <% if(s.animal == \"dog\"){ %> It's a dog! <% } else { %> It's a horse! <% } %> Twee Download","title":"Twee Code"},{"location":"conditionalstatements/snowman/snowman_conditionalstatements.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html","text":"\"Conditional Statements\": SugarCube (v2.18) # Summary # In SugarCube, the <<if>> and <<else>> macros conditionally run sections. If the statement is true, the <<if>> section will be run. Otherwise, the <<else>> section will be. Example # Download Twee Code # :: StoryTitle Conditional Statements in SugarCube :: Start <<set $animal to \"horse\">> <<if $animal is \"dog\">> It's a dog! <<else>> It's a horse! <</if>> Twee Download See Also # Setting and Showing Variables","title":"SugarCube"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html#conditional-statements-sugarcube-v218","text":"","title":"\"Conditional Statements\": SugarCube (v2.18)"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html#summary","text":"In SugarCube, the <<if>> and <<else>> macros conditionally run sections. If the statement is true, the <<if>> section will be run. Otherwise, the <<else>> section will be.","title":"Summary"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html#example","text":"Download","title":"Example"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html#twee-code","text":":: StoryTitle Conditional Statements in SugarCube :: Start <<set $animal to \"horse\">> <<if $animal is \"dog\">> It's a dog! <<else>> It's a horse! <</if>> Twee Download","title":"Twee Code"},{"location":"conditionalstatements/sugarcube/sugarcube_conditionalstatements.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"css/selectors.html","text":"Reviewing CSS Selectors # Cascading StyleSheets (CSS) is a programming language for defining the presentation of HyperText Markup Language (HTML). Stylesheets \"cascade\" because values are passed from parent HTML elements to their children. Declarations # Declarations are written as a series of properties and values . Each has a property, colon ( : ), value, and end with a semicolon, ; . They \"declare\" the property has a certain value. color : red ; Declaration Blocks # CSS is written in groups of declarations called blocks . { color : red ; background : blue ; } A declaration block begins with an opening curly bracket and ends with a closing curly bracket. Selectors # In order to apply the declarations to content, a selector is needed. This \"selects\" where in the document to apply the declarations. There are many different possible selector combinations. Three of the most common are type, class, and ID. Type # A type selector finds one or more elements based on their name. CSS: p { color : red ; } HTML: < p > This would be red! </ p > Class # A class selector finds one or more elements on their class attribute. Class selectors starts with a period, . . CSS: . redFont { color : red ; } HTML: < p class = \"redFont\" > This would be red! </ p > ID # An ID selector finds one or more elements based on their id attribute. ID selectors start with a hash, # . CSS: # redFont { color : red ; } HTML: < p id = \"redFont\" > This would be red! </ p > Ruleset # A ruleset is a combination of one or more selectors with a declaration block. They are often simply called \"rules\" or \"CSS rules\" when referring to them as groups. CSS: body { font-size : 1.2 em ; } # redFont { color : red ; } HTML: < body > < div id = \"redFont\" > This would be larger and in red! </ div > </ body >","title":"Reviewing CSS Selectors"},{"location":"css/selectors.html#reviewing-css-selectors","text":"Cascading StyleSheets (CSS) is a programming language for defining the presentation of HyperText Markup Language (HTML). Stylesheets \"cascade\" because values are passed from parent HTML elements to their children.","title":"Reviewing CSS Selectors"},{"location":"css/selectors.html#declarations","text":"Declarations are written as a series of properties and values . Each has a property, colon ( : ), value, and end with a semicolon, ; . They \"declare\" the property has a certain value. color : red ;","title":"Declarations"},{"location":"css/selectors.html#declaration-blocks","text":"CSS is written in groups of declarations called blocks . { color : red ; background : blue ; } A declaration block begins with an opening curly bracket and ends with a closing curly bracket.","title":"Declaration Blocks"},{"location":"css/selectors.html#selectors","text":"In order to apply the declarations to content, a selector is needed. This \"selects\" where in the document to apply the declarations. There are many different possible selector combinations. Three of the most common are type, class, and ID.","title":"Selectors"},{"location":"css/selectors.html#type","text":"A type selector finds one or more elements based on their name. CSS: p { color : red ; } HTML: < p > This would be red! </ p >","title":"Type"},{"location":"css/selectors.html#class","text":"A class selector finds one or more elements on their class attribute. Class selectors starts with a period, . . CSS: . redFont { color : red ; } HTML: < p class = \"redFont\" > This would be red! </ p >","title":"Class"},{"location":"css/selectors.html#id","text":"An ID selector finds one or more elements based on their id attribute. ID selectors start with a hash, # . CSS: # redFont { color : red ; } HTML: < p id = \"redFont\" > This would be red! </ p >","title":"ID"},{"location":"css/selectors.html#ruleset","text":"A ruleset is a combination of one or more selectors with a declaration block. They are often simply called \"rules\" or \"CSS rules\" when referring to them as groups. CSS: body { font-size : 1.2 em ; } # redFont { color : red ; } HTML: < body > < div id = \"redFont\" > This would be larger and in red! </ div > </ body >","title":"Ruleset"},{"location":"css/storyformats/chapbook.html","text":"Chapbook CSS # Stories in Chapbook can be styled in different ways through using its Vars Section. Chapbook defines the global object config.style for changing these. Fonts and Colors # Fonts and colors can be adjusted in Chapbook through using the objects of header , page , and footer areas as part of the global config.style . Example: config.style.page.color: \"red-6\" -- Passage content Note: Chapbook uses a specific syntax for writing colors using the Open Colors system. Header and Footer # Passage content in Chapbook is also divided into seven areas in the following arrangement. config.header.left config.header.center config.header.right main passage text config.footer.left config.footer.center config.footer.right These correspond to elements with different classes (left, center, right) for both <header> and <footer> . Passage content is stored in an <article> element. < div id = \"page\" aria-live = \"polite\" > < header > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ header > < article style = \"position: relative;\" > < div class = \"\" style = \"\" > < p > Double-click this passage to edit it. </ p > </ div > </ article > < footer class = \"has-content\" > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ footer > </ div > Overwriting Chapbook CSS # Warning Overwriting existing CSS rules is an advanced technique. It has the potential to significantly change the presentation of content. All Chapbook stories follow the same HTML structure . Page > Article # All passage content is shown to users as part of an element with the id of page with an <article> element. < div id = \"page\" aria-live = \"polite\" > < article style = \"position: relative;\" > < div class = \"\" style = \"\" > < p > Double-click this passage to edit it. </ p > </ div > </ article > </ div > Targeting this selector allows for changing the presentation of passage content. Example CSS: # page article { background-color : black ; color : purple ; } Example Presentation: Page > A # Passage links are represented as <a> elements in Chapbook. Using the selector of #page a allows for changing the presentation of links in a story. Example CSS: # page a { color : purple ; border : 2 px solid red ; } Example Presentation:","title":"Chapbook"},{"location":"css/storyformats/chapbook.html#chapbook-css","text":"Stories in Chapbook can be styled in different ways through using its Vars Section. Chapbook defines the global object config.style for changing these.","title":"Chapbook CSS"},{"location":"css/storyformats/chapbook.html#fonts-and-colors","text":"Fonts and colors can be adjusted in Chapbook through using the objects of header , page , and footer areas as part of the global config.style . Example: config.style.page.color: \"red-6\" -- Passage content Note: Chapbook uses a specific syntax for writing colors using the Open Colors system.","title":"Fonts and Colors"},{"location":"css/storyformats/chapbook.html#header-and-footer","text":"Passage content in Chapbook is also divided into seven areas in the following arrangement. config.header.left config.header.center config.header.right main passage text config.footer.left config.footer.center config.footer.right These correspond to elements with different classes (left, center, right) for both <header> and <footer> . Passage content is stored in an <article> element. < div id = \"page\" aria-live = \"polite\" > < header > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ header > < article style = \"position: relative;\" > < div class = \"\" style = \"\" > < p > Double-click this passage to edit it. </ p > </ div > </ article > < footer class = \"has-content\" > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ footer > </ div >","title":"Header and Footer"},{"location":"css/storyformats/chapbook.html#overwriting-chapbook-css","text":"Warning Overwriting existing CSS rules is an advanced technique. It has the potential to significantly change the presentation of content. All Chapbook stories follow the same HTML structure .","title":"Overwriting Chapbook CSS"},{"location":"css/storyformats/chapbook.html#page-article","text":"All passage content is shown to users as part of an element with the id of page with an <article> element. < div id = \"page\" aria-live = \"polite\" > < article style = \"position: relative;\" > < div class = \"\" style = \"\" > < p > Double-click this passage to edit it. </ p > </ div > </ article > </ div > Targeting this selector allows for changing the presentation of passage content. Example CSS: # page article { background-color : black ; color : purple ; } Example Presentation:","title":"Page &gt; Article"},{"location":"css/storyformats/chapbook.html#page-a","text":"Passage links are represented as <a> elements in Chapbook. Using the selector of #page a allows for changing the presentation of links in a story. Example CSS: # page a { color : purple ; border : 2 px solid red ; } Example Presentation:","title":"Page &gt; A"},{"location":"css/storyformats/harlowe.html","text":"Harlowe CSS # Harlowe strongly encourages authors to style stories through using macros and named hooks. Named Hooks # Page # ?Page : Affects the <tw-story> element. Example: (enchant: ?Page, (text-color: yellow) + (text-style:'bold')) Yellow text in a bold style! Example Presentation: Passage # ?Passage : Affects the <tw-passage> element), allowing (text-colour:) , (font:) , or (css:) usage with text content. Example: (enchant: ?Passage, (text-color: green) + (background: red)) Red background and green text! Example Presentation: Sidebar # ?Sidebar : Affects the <tw-sidebar> element, allowing macros like (replace:) or (append:) to change text content. Example: (replace: ?Sidebar)[This is the new sidebar content!] [[Another Passage]] Example Presentation: Link # ?Link : Affects all of the links (passage links and (link:) ) in the passage. Example: (enchant: ?Link, (color: green) ) [[Not blue, only green]] Example Presentation: Overwriting Harlowe CSS # Warning Overwriting existing CSS rules is an advanced technique. It has the potential to significantly change the presentation of content. All Harlowe stories follow the same HTML structure . tw-passage # Like working with ?Passage , using the type selector with tw-passage allows for overriding or augmenting the existing declarations. tw-passage { /* Your CSS Here */ } tw-link # When creating hyperlinks, Harlowe uses the <tw-link> element. tw-link { /* Your CSS Here */ }","title":"Harlowe"},{"location":"css/storyformats/harlowe.html#harlowe-css","text":"Harlowe strongly encourages authors to style stories through using macros and named hooks.","title":"Harlowe CSS"},{"location":"css/storyformats/harlowe.html#named-hooks","text":"","title":"Named Hooks"},{"location":"css/storyformats/harlowe.html#page","text":"?Page : Affects the <tw-story> element. Example: (enchant: ?Page, (text-color: yellow) + (text-style:'bold')) Yellow text in a bold style! Example Presentation:","title":"Page"},{"location":"css/storyformats/harlowe.html#passage","text":"?Passage : Affects the <tw-passage> element), allowing (text-colour:) , (font:) , or (css:) usage with text content. Example: (enchant: ?Passage, (text-color: green) + (background: red)) Red background and green text! Example Presentation:","title":"Passage"},{"location":"css/storyformats/harlowe.html#sidebar","text":"?Sidebar : Affects the <tw-sidebar> element, allowing macros like (replace:) or (append:) to change text content. Example: (replace: ?Sidebar)[This is the new sidebar content!] [[Another Passage]] Example Presentation:","title":"Sidebar"},{"location":"css/storyformats/harlowe.html#link","text":"?Link : Affects all of the links (passage links and (link:) ) in the passage. Example: (enchant: ?Link, (color: green) ) [[Not blue, only green]] Example Presentation:","title":"Link"},{"location":"css/storyformats/harlowe.html#overwriting-harlowe-css","text":"Warning Overwriting existing CSS rules is an advanced technique. It has the potential to significantly change the presentation of content. All Harlowe stories follow the same HTML structure .","title":"Overwriting Harlowe CSS"},{"location":"css/storyformats/harlowe.html#tw-passage","text":"Like working with ?Passage , using the type selector with tw-passage allows for overriding or augmenting the existing declarations. tw-passage { /* Your CSS Here */ }","title":"tw-passage"},{"location":"css/storyformats/harlowe.html#tw-link","text":"When creating hyperlinks, Harlowe uses the <tw-link> element. tw-link { /* Your CSS Here */ }","title":"tw-link"},{"location":"css/storyformats/snowman.html","text":"Snowman CSS # Warning Overwriting existing CSS rules is an advanced technique. It has the potential to significantly change the presentation of content. Snowman 1.X provides a limited set of CSS selectors and declarations. Snowman 1.X # body { font : 18 px \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; color : #222 ; } # main { max-width : 38 em ; margin : 0 auto ; line-height : 145 % ; } a { color : #222 ; text-decoration-color : #bbb ; } a : hover { color : #cc8929 ; text-decoration-color : #cc8929 ; } a : active { color : #ffb040 ; text-decoration-color : #cc8929 ; } Snowman 2.X # Snowman 2.X includes normalize.css with its existing CSS code. body { font : 1.5 em \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; color : #222 ; margin : 0.5 em ; } tw-story { max-width : 35 em ; margin : 0 auto ; line-height : 150 % ; display : block ; } tw-passage { display : block ; } a { color : #222 ; text-decoration-color : #ccc ; } a : hover { color : #cc8929 ; text-decoration-color : #cc8929 ; } a : active { color : #ffb040 ; text-decoration-color : #cc8929 ; } Snowman Links # Snowman uses the anchor element, <a> , for all links. However, as links are re-generated at the start of each passage, the pseudo-class visited will not have an effect. hover , however, will. a { color : blue ; } a : hover { color : green ; } Overwriting CSS # Snowman 1.X Passage # # main { /* Your CSS Here */ } Snowman 2.X Passage # tw-passage { /* Your CSS Here */ }","title":"Snowman"},{"location":"css/storyformats/snowman.html#snowman-css","text":"Warning Overwriting existing CSS rules is an advanced technique. It has the potential to significantly change the presentation of content. Snowman 1.X provides a limited set of CSS selectors and declarations.","title":"Snowman CSS"},{"location":"css/storyformats/snowman.html#snowman-1x","text":"body { font : 18 px \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; color : #222 ; } # main { max-width : 38 em ; margin : 0 auto ; line-height : 145 % ; } a { color : #222 ; text-decoration-color : #bbb ; } a : hover { color : #cc8929 ; text-decoration-color : #cc8929 ; } a : active { color : #ffb040 ; text-decoration-color : #cc8929 ; }","title":"Snowman 1.X"},{"location":"css/storyformats/snowman.html#snowman-2x","text":"Snowman 2.X includes normalize.css with its existing CSS code. body { font : 1.5 em \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; color : #222 ; margin : 0.5 em ; } tw-story { max-width : 35 em ; margin : 0 auto ; line-height : 150 % ; display : block ; } tw-passage { display : block ; } a { color : #222 ; text-decoration-color : #ccc ; } a : hover { color : #cc8929 ; text-decoration-color : #cc8929 ; } a : active { color : #ffb040 ; text-decoration-color : #cc8929 ; }","title":"Snowman 2.X"},{"location":"css/storyformats/snowman.html#snowman-links","text":"Snowman uses the anchor element, <a> , for all links. However, as links are re-generated at the start of each passage, the pseudo-class visited will not have an effect. hover , however, will. a { color : blue ; } a : hover { color : green ; }","title":"Snowman Links"},{"location":"css/storyformats/snowman.html#overwriting-css","text":"","title":"Overwriting CSS"},{"location":"css/storyformats/snowman.html#snowman-1x-passage","text":"# main { /* Your CSS Here */ }","title":"Snowman 1.X Passage"},{"location":"css/storyformats/snowman.html#snowman-2x-passage","text":"tw-passage { /* Your CSS Here */ }","title":"Snowman 2.X Passage"},{"location":"css/storyformats/sugarcube.html","text":"SugarCube CSS # Warning Overwriting existing CSS rules is an advanced technique. It has the potential to significantly change the presentation of content. All SugarCube stories follow the same HTML structure . The SugarCube documentation has extensive details on the selectors available in the story format. Overwriting SugarCube CSS # SugarCube Passage # . passage { /* Your CSS Here */ } SugarCube Links # SugarCube uses the anchor element, <a> , to create hyperlinks. . passage a { /* Your CSS Here */ } . passage a : hover { /* Your CSS Here */ } . passage a : active { /* Your CSS Here */ } Passage Names # All passages are given the id attribute value as their name with the prefix of passage- . Any with spaces between words or characters are converted into hyphens. All letters are converted into lowercase. Example: # passage-untitled-passage { /* Your CSS Here */ } If a passage is included via the <<include>> macro, its name is added to the class list for the passage element. It can be used as a class selector instead. Example: . passage-additional-passage { /* Your CSS Here */ }","title":"SugarCube"},{"location":"css/storyformats/sugarcube.html#sugarcube-css","text":"Warning Overwriting existing CSS rules is an advanced technique. It has the potential to significantly change the presentation of content. All SugarCube stories follow the same HTML structure . The SugarCube documentation has extensive details on the selectors available in the story format.","title":"SugarCube CSS"},{"location":"css/storyformats/sugarcube.html#overwriting-sugarcube-css","text":"","title":"Overwriting SugarCube CSS"},{"location":"css/storyformats/sugarcube.html#sugarcube-passage","text":". passage { /* Your CSS Here */ }","title":"SugarCube Passage"},{"location":"css/storyformats/sugarcube.html#sugarcube-links","text":"SugarCube uses the anchor element, <a> , to create hyperlinks. . passage a { /* Your CSS Here */ } . passage a : hover { /* Your CSS Here */ } . passage a : active { /* Your CSS Here */ }","title":"SugarCube Links"},{"location":"css/storyformats/sugarcube.html#passage-names","text":"All passages are given the id attribute value as their name with the prefix of passage- . Any with spaces between words or characters are converted into hyphens. All letters are converted into lowercase. Example: # passage-untitled-passage { /* Your CSS Here */ } If a passage is included via the <<include>> macro, its name is added to the class list for the passage element. It can be used as a class selector instead. Example: . passage-additional-passage { /* Your CSS Here */ }","title":"Passage Names"},{"location":"cssselectors/chapbook/chapbook_cssselectors.html","text":"\"CSS Selectors\": Chapbook (v1.0) # Summary # This example shows how to use CSS selectors to style different areas of the page. In Chapbook, the backdrop covers the whole page, the page is like a \"story\" area in other story formats, and the first <div> inside the <article> is the main passage area. < div id = \"backdrop\" > < div class = \"page\" > < header > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ header > < article > < div ></ div > </ article > < footer > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ footer > </ div > </ div > Example # Download Twee Code # :: StoryTitle CSS Selectors in Chapbook :: UserStylesheet[stylesheet] #backdrop { border: 5px solid green; } #page { border: 2px solid red; } #page article>:first-child { border: 1px solid blue; } :: Start The backdrop has a green border; it contains this page (red border) and the article (blue border). [[Second]] :: Second This passage also has a blue border. Twee Download","title":"Chapbook"},{"location":"cssselectors/chapbook/chapbook_cssselectors.html#css-selectors-chapbook-v10","text":"","title":"\"CSS Selectors\": Chapbook (v1.0)"},{"location":"cssselectors/chapbook/chapbook_cssselectors.html#summary","text":"This example shows how to use CSS selectors to style different areas of the page. In Chapbook, the backdrop covers the whole page, the page is like a \"story\" area in other story formats, and the first <div> inside the <article> is the main passage area. < div id = \"backdrop\" > < div class = \"page\" > < header > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ header > < article > < div ></ div > </ article > < footer > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ footer > </ div > </ div >","title":"Summary"},{"location":"cssselectors/chapbook/chapbook_cssselectors.html#example","text":"Download","title":"Example"},{"location":"cssselectors/chapbook/chapbook_cssselectors.html#twee-code","text":":: StoryTitle CSS Selectors in Chapbook :: UserStylesheet[stylesheet] #backdrop { border: 5px solid green; } #page { border: 2px solid red; } #page article>:first-child { border: 1px solid blue; } :: Start The backdrop has a green border; it contains this page (red border) and the article (blue border). [[Second]] :: Second This passage also has a blue border. Twee Download","title":"Twee Code"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html","text":"\"CSS Selectors\": Harlowe (v2.0) # Warning The following example is designed for use in Harlowe 2.x and later Summary # This example shows how to use CSS selectors to style different areas of the page. In Harlowe, custom HTML elements are used for layout: the <tw-story> element contains the page as well as a an element containing the currently shown passage, <tw-passage> , and an element containing the sidebar, <tw-sidebar> . <tw-story> <tw-passage> <tw-sidebar>...</tw-sidebar> ... </tw-passage> </tw-story> Example # Download Twee Code # :: StoryTitle CSS Selectors in Harlowe :: UserStylesheet [stylesheet] tw-story { border: 5px solid lightgreen; } tw-sidebar { border: 2px solid blue; } tw-passage { border: 1px solid red; } :: Start The page has a green border; it contains this passage (red border) and the sidebar (blue border). [[Second]] :: Second This passage also has a red border. Twee Download See Also # See the left sidebar for another example of styling custom elements like <tw-sidebar> . Harlowe also supports styling passages by tag using its custom 'tags' attribute.","title":"Harlowe"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html#css-selectors-harlowe-v20","text":"Warning The following example is designed for use in Harlowe 2.x and later","title":"\"CSS Selectors\": Harlowe (v2.0)"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html#summary","text":"This example shows how to use CSS selectors to style different areas of the page. In Harlowe, custom HTML elements are used for layout: the <tw-story> element contains the page as well as a an element containing the currently shown passage, <tw-passage> , and an element containing the sidebar, <tw-sidebar> . <tw-story> <tw-passage> <tw-sidebar>...</tw-sidebar> ... </tw-passage> </tw-story>","title":"Summary"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html#example","text":"Download","title":"Example"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html#twee-code","text":":: StoryTitle CSS Selectors in Harlowe :: UserStylesheet [stylesheet] tw-story { border: 5px solid lightgreen; } tw-sidebar { border: 2px solid blue; } tw-passage { border: 1px solid red; } :: Start The page has a green border; it contains this passage (red border) and the sidebar (blue border). [[Second]] :: Second This passage also has a red border. Twee Download","title":"Twee Code"},{"location":"cssselectors/harlowe/harlowe_cssselectors.html#see-also","text":"See the left sidebar for another example of styling custom elements like <tw-sidebar> . Harlowe also supports styling passages by tag using its custom 'tags' attribute.","title":"See Also"},{"location":"cssselectors/snowman/snowman_cssselectors.html","text":"\"CSS Selectors\": Snowman (v1.3.0) # Summary # This example shows how to use CSS selectors to style different areas of the page. Snowman uses a simple HTML structure of a <div> with id \"passage\" directly below (inside) the <body> tag. < body > < div id = \"passage\" > ... </ div > </ body > Example # Download Twee Code # :: StoryTitle CSS Selectors in Snowman :: UserStylesheet [stylesheet] body { background-color: lightgreen; } #passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage, which has a red border. [[Second]] :: Second This passage also has a red border. Twee Download See Also # See the Snowman left sidebar for an example of styling passages using the id CSS selector .","title":"Snowman"},{"location":"cssselectors/snowman/snowman_cssselectors.html#css-selectors-snowman-v130","text":"","title":"\"CSS Selectors\": Snowman (v1.3.0)"},{"location":"cssselectors/snowman/snowman_cssselectors.html#summary","text":"This example shows how to use CSS selectors to style different areas of the page. Snowman uses a simple HTML structure of a <div> with id \"passage\" directly below (inside) the <body> tag. < body > < div id = \"passage\" > ... </ div > </ body >","title":"Summary"},{"location":"cssselectors/snowman/snowman_cssselectors.html#example","text":"Download","title":"Example"},{"location":"cssselectors/snowman/snowman_cssselectors.html#twee-code","text":":: StoryTitle CSS Selectors in Snowman :: UserStylesheet [stylesheet] body { background-color: lightgreen; } #passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage, which has a red border. [[Second]] :: Second This passage also has a red border. Twee Download","title":"Twee Code"},{"location":"cssselectors/snowman/snowman_cssselectors.html#see-also","text":"See the Snowman left sidebar for an example of styling passages using the id CSS selector .","title":"See Also"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html","text":"\"CSS Selectors\": Snowman (v2.0.2) # Summary # This example shows how to use CSS selectors to style different areas of the page. Snowman 2.0 uses the elements <tw-story> and <tw-passage> to show a passage. It also changes from an id to a class named \"passage\" from previous versions of Snowman. < body > < tw-story > < tw-passage class = \"passage\" ></ tw-passage > </ tw-story > </ body > Example # Download Twee Code # :: StoryTitle CSS Selectors in Snowman :: UserStylesheet [stylesheet] body { background-color: lightgreen; } tw-passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage, which has a red border. [[Second]] :: Second This passage also has a red border. Twee Download See Also # See the Snowman left sidebar for an example of styling passages using the id CSS selector .","title":"Snowman (v2.0 and later)"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html#css-selectors-snowman-v202","text":"","title":"\"CSS Selectors\": Snowman (v2.0.2)"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html#summary","text":"This example shows how to use CSS selectors to style different areas of the page. Snowman 2.0 uses the elements <tw-story> and <tw-passage> to show a passage. It also changes from an id to a class named \"passage\" from previous versions of Snowman. < body > < tw-story > < tw-passage class = \"passage\" ></ tw-passage > </ tw-story > </ body >","title":"Summary"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html#example","text":"Download","title":"Example"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html#twee-code","text":":: StoryTitle CSS Selectors in Snowman :: UserStylesheet [stylesheet] body { background-color: lightgreen; } tw-passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage, which has a red border. [[Second]] :: Second This passage also has a red border. Twee Download","title":"Twee Code"},{"location":"cssselectors/snowman_2/snowman_cssselectors.html#see-also","text":"See the Snowman left sidebar for an example of styling passages using the id CSS selector .","title":"See Also"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html","text":"\"CSS Selectors\": SugarCube (v2.18) # Summary # This example shows how to use CSS selectors to style different areas of the page. SugarCube uses nested <div> s with ids to structure its significant elements. Most notably the sidebar is a <div> with id \"ui-bar\". However, these elements are often more easily styled by other means, such as selecting the <body> element to style the entire page, and the \"passage\" class to style the current passage. < body > < div id = \"ui-bar\" > ... </ div > < div id = \"story\" > < div id = \"passages\" > < div id = \"a-passage-name\" class = \"passage\" > ... </ div > </ div > </ div > </ body > Example # Download Twee Code # :: StoryTitle CSS Selectors in SugarCube :: UserStylesheet [stylesheet] body { background-color: darkgreen; } #ui-bar { border: 2px solid blue; } .passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage (red border) and the sidebar (blue border). [[Second]] :: Second This passage also has a red border. Twee Download See Also # See the SugarCube images for an example of using a single class CSS selector to style a different element. See styling passages by tag for an example of using two classes to style a single element.","title":"SugarCube"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#css-selectors-sugarcube-v218","text":"","title":"\"CSS Selectors\": SugarCube (v2.18)"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#summary","text":"This example shows how to use CSS selectors to style different areas of the page. SugarCube uses nested <div> s with ids to structure its significant elements. Most notably the sidebar is a <div> with id \"ui-bar\". However, these elements are often more easily styled by other means, such as selecting the <body> element to style the entire page, and the \"passage\" class to style the current passage. < body > < div id = \"ui-bar\" > ... </ div > < div id = \"story\" > < div id = \"passages\" > < div id = \"a-passage-name\" class = \"passage\" > ... </ div > </ div > </ div > </ body >","title":"Summary"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#example","text":"Download","title":"Example"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#twee-code","text":":: StoryTitle CSS Selectors in SugarCube :: UserStylesheet [stylesheet] body { background-color: darkgreen; } #ui-bar { border: 2px solid blue; } .passage { border: 1px solid red; } :: Start The page has a green background; it contains this passage (red border) and the sidebar (blue border). [[Second]] :: Second This passage also has a red border. Twee Download","title":"Twee Code"},{"location":"cssselectors/sugarcube/sugarcube_cssselectors.html#see-also","text":"See the SugarCube images for an example of using a single class CSS selector to style a different element. See styling passages by tag for an example of using two classes to style a single element.","title":"See Also"},{"location":"cycling/chapbook/chapbook_cycling.html","text":"\"Cycling Choices\": Chapbook (v1.0.0) # Summary # Chapbook provides the {cycling link} modifier for creating a cycling link effect. Example # Download Twee Code # :: StoryTitle Chapbook: Cycling Links :: Start This cycling link example remembers the choice made: {cycling link for: 'hair', choices: [\"Black\", \"Brown\", \"Blonde\", \"Red\", \"White\"]} This cycling-link example will disappear (show empty string) on its last choice: {cycling link for: 'breakfast', choices: [\"Two eggs\", \"One egg\", \"\"]} Twee Download","title":"Chapbook"},{"location":"cycling/chapbook/chapbook_cycling.html#cycling-choices-chapbook-v100","text":"","title":"\"Cycling Choices\": Chapbook (v1.0.0)"},{"location":"cycling/chapbook/chapbook_cycling.html#summary","text":"Chapbook provides the {cycling link} modifier for creating a cycling link effect.","title":"Summary"},{"location":"cycling/chapbook/chapbook_cycling.html#example","text":"Download","title":"Example"},{"location":"cycling/chapbook/chapbook_cycling.html#twee-code","text":":: StoryTitle Chapbook: Cycling Links :: Start This cycling link example remembers the choice made: {cycling link for: 'hair', choices: [\"Black\", \"Brown\", \"Blonde\", \"Red\", \"White\"]} This cycling-link example will disappear (show empty string) on its last choice: {cycling link for: 'breakfast', choices: [\"Two eggs\", \"One egg\", \"\"]} Twee Download","title":"Twee Code"},{"location":"cycling/harlowe/harlowe_cycling.html","text":"\"Cycling Choices\": Harlowe (v2.0) # Information This example is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values. Summary # \"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. The cycle starts with the use of the (display:) macro and the assumption that the 1st element in the $choices Array is the currently selected choice. If the user clicks on the link (created through using the (link:) macro), the $choices array is updated using the (rotated:) macro. This causes the current 1st element to be moved to the end of the array, making the element that was previously 2nd to now be 1st. At the end of every cycle, the currently selected value is always the 1st element in the $choices array. Example # Download Twee Code # :: StoryTitle Cycling Choices in Harlowe :: Start (set: $choices to (array: \"First\", \"Second\", \"Third\")) Click options to cycle: [(display: \"Cycling\")]<choice| [[Submit|Results]] :: Cycling { (link: (text: $choices's 1st) )[ (set: $choices to (rotated: -1, ...$choices)) (replace: ?choice)[(display: \"Cycling\")] ] } :: Results Selected choice: (print: $choices's 1st) Twee Download See Also # Setting and Showing Variables , Modularity","title":"Harlowe"},{"location":"cycling/harlowe/harlowe_cycling.html#cycling-choices-harlowe-v20","text":"Information This example is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values.","title":"\"Cycling Choices\": Harlowe (v2.0)"},{"location":"cycling/harlowe/harlowe_cycling.html#summary","text":"\"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. The cycle starts with the use of the (display:) macro and the assumption that the 1st element in the $choices Array is the currently selected choice. If the user clicks on the link (created through using the (link:) macro), the $choices array is updated using the (rotated:) macro. This causes the current 1st element to be moved to the end of the array, making the element that was previously 2nd to now be 1st. At the end of every cycle, the currently selected value is always the 1st element in the $choices array.","title":"Summary"},{"location":"cycling/harlowe/harlowe_cycling.html#example","text":"Download","title":"Example"},{"location":"cycling/harlowe/harlowe_cycling.html#twee-code","text":":: StoryTitle Cycling Choices in Harlowe :: Start (set: $choices to (array: \"First\", \"Second\", \"Third\")) Click options to cycle: [(display: \"Cycling\")]<choice| [[Submit|Results]] :: Cycling { (link: (text: $choices's 1st) )[ (set: $choices to (rotated: -1, ...$choices)) (replace: ?choice)[(display: \"Cycling\")] ] } :: Results Selected choice: (print: $choices's 1st) Twee Download","title":"Twee Code"},{"location":"cycling/harlowe/harlowe_cycling.html#see-also","text":"Setting and Showing Variables , Modularity","title":"See Also"},{"location":"cycling/harlowe_3/harlowe_cycling.html","text":"\"Cycling Choices\": Harlowe (v3.0) # Summary # Starting in Harlowe 3.0.1, the (cycling-link) macro was introduced. Clicking on the link it provides allows for cycling though its possibilities. Combined with the bind keyword, its selection can be saved to a variable. Example # Download Twee Code # :: StoryTitle Harlowe 3: Cycling Links :: Start This cycling-link example remembers the choice made: (cycling-link: bind $hair, \"Black\", \"Brown\", \"Blonde\", \"Red\", \"White\") This cycling-link example does not: (cycling-link: \"Cat\", \"Dog\", \"Fish\", \"Mouse\") This cycling-link example will disappear (show empty string) on its last choice: (cycling-link: \"Two eggs\", \"One egg\", \"\") [[Show result]] :: Show result The choice of hair was $hair. Twee Download See Also # Setting and Showing Variables , Modularity","title":"Harlowe (v3.0.1 or later)"},{"location":"cycling/harlowe_3/harlowe_cycling.html#cycling-choices-harlowe-v30","text":"","title":"\"Cycling Choices\": Harlowe (v3.0)"},{"location":"cycling/harlowe_3/harlowe_cycling.html#summary","text":"Starting in Harlowe 3.0.1, the (cycling-link) macro was introduced. Clicking on the link it provides allows for cycling though its possibilities. Combined with the bind keyword, its selection can be saved to a variable.","title":"Summary"},{"location":"cycling/harlowe_3/harlowe_cycling.html#example","text":"Download","title":"Example"},{"location":"cycling/harlowe_3/harlowe_cycling.html#twee-code","text":":: StoryTitle Harlowe 3: Cycling Links :: Start This cycling-link example remembers the choice made: (cycling-link: bind $hair, \"Black\", \"Brown\", \"Blonde\", \"Red\", \"White\") This cycling-link example does not: (cycling-link: \"Cat\", \"Dog\", \"Fish\", \"Mouse\") This cycling-link example will disappear (show empty string) on its last choice: (cycling-link: \"Two eggs\", \"One egg\", \"\") [[Show result]] :: Show result The choice of hair was $hair. Twee Download","title":"Twee Code"},{"location":"cycling/harlowe_3/harlowe_cycling.html#see-also","text":"Setting and Showing Variables , Modularity","title":"See Also"},{"location":"cycling/snowman/snowman_cycling.html","text":"\"Cycling Choices\": Snowman (v1.3.0) # Summary # \"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. Starting with iterating over all elements with the class cycle, each element's 'choices' and 'selection' attribute values are saved as global variables not expected to change during the story. Next, through using jQuery, a .click() trigger is set for all elements with the class \"cycle\". When triggered, the global values of \"choices\" and \"selection\" for the element are retrieved and the \"selection\" updated. The text() of the element is set to the selection index of the choices array. Finally, the global variables are updated according to the element's id for later access and to prevent changes to the history of the story potentially affecting saved values. Example # Download Twee Code # :: StoryTitle Cycling Choices in Snowman :: UserScript[script] $(function() { // Create a global object window.setup = window.setup || {}; // Iterate through all elements with the class 'cycle' // For each, save the current 'choices' and 'selection' // (This sets all the 'default' values.) $('.cycle').each(function() { // Create a global object for each 'id' var id = $(this).attr('id'); setup[id] = {}; // Save the current 'choices' for each var choices = JSON.parse($(this).attr(\"data-cycling-choices\")); setup[id].choices = choices; // Save the current 'selection' for each var selection = $(this).attr(\"data-cycling-selection\"); setup[id].selection = selection; }); $('.cycle').click(function(){ // Save the 'id' var id = $(this).attr('id'); // Retrieve the global 'choices' var choices = setup[id].choices; // Retrieve the global 'selection' var selection = setup[id].selection; // Update the 'selection' number selection++; // Check if 'selection' is greater than length of choices if(selection >= choices.length) { selection = 0; } // Update the 'selection' on the element $(this).attr(\"data-cycling-selection\", selection); // Update the text of the element with the choice $(this).text(choices[selection]); // Update the global values of 'choices' and 'selection' setup[id].choices = choices; setup[id].selection = selection; }); }); :: Start <a href='javascript:void(0)' id='cycleOne' class='cycle' data-cycling-choices='[\"One\", \"Two\", \"Three\"]' data-cycling-selection=0>One</a> [[Submit|Results]] :: Results <%= setup[\"cycleOne\"].choices[setup[\"cycleOne\"].selection] %> Twee Download See Also # Setting and Showing Variables","title":"Snowman"},{"location":"cycling/snowman/snowman_cycling.html#cycling-choices-snowman-v130","text":"","title":"\"Cycling Choices\": Snowman (v1.3.0)"},{"location":"cycling/snowman/snowman_cycling.html#summary","text":"\"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. Starting with iterating over all elements with the class cycle, each element's 'choices' and 'selection' attribute values are saved as global variables not expected to change during the story. Next, through using jQuery, a .click() trigger is set for all elements with the class \"cycle\". When triggered, the global values of \"choices\" and \"selection\" for the element are retrieved and the \"selection\" updated. The text() of the element is set to the selection index of the choices array. Finally, the global variables are updated according to the element's id for later access and to prevent changes to the history of the story potentially affecting saved values.","title":"Summary"},{"location":"cycling/snowman/snowman_cycling.html#example","text":"Download","title":"Example"},{"location":"cycling/snowman/snowman_cycling.html#twee-code","text":":: StoryTitle Cycling Choices in Snowman :: UserScript[script] $(function() { // Create a global object window.setup = window.setup || {}; // Iterate through all elements with the class 'cycle' // For each, save the current 'choices' and 'selection' // (This sets all the 'default' values.) $('.cycle').each(function() { // Create a global object for each 'id' var id = $(this).attr('id'); setup[id] = {}; // Save the current 'choices' for each var choices = JSON.parse($(this).attr(\"data-cycling-choices\")); setup[id].choices = choices; // Save the current 'selection' for each var selection = $(this).attr(\"data-cycling-selection\"); setup[id].selection = selection; }); $('.cycle').click(function(){ // Save the 'id' var id = $(this).attr('id'); // Retrieve the global 'choices' var choices = setup[id].choices; // Retrieve the global 'selection' var selection = setup[id].selection; // Update the 'selection' number selection++; // Check if 'selection' is greater than length of choices if(selection >= choices.length) { selection = 0; } // Update the 'selection' on the element $(this).attr(\"data-cycling-selection\", selection); // Update the text of the element with the choice $(this).text(choices[selection]); // Update the global values of 'choices' and 'selection' setup[id].choices = choices; setup[id].selection = selection; }); }); :: Start <a href='javascript:void(0)' id='cycleOne' class='cycle' data-cycling-choices='[\"One\", \"Two\", \"Three\"]' data-cycling-selection=0>One</a> [[Submit|Results]] :: Results <%= setup[\"cycleOne\"].choices[setup[\"cycleOne\"].selection] %> Twee Download","title":"Twee Code"},{"location":"cycling/snowman/snowman_cycling.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"cycling/sugarcube/sugarcube_cycling.html","text":"\"Cycling Choices\": SugarCube (v2.18) # Summary # \"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. The cycle starts with the use of the <<include>> macro and assumption of \\$choicesCount beginning at the number -1. Within the passage \"Cycling\", the first 'cycle' begins with testing if the variable \\$choices exists. If it does not, \\$choices and \\$choicesCount are set (created) to their initial values. Next, \\$choicesCount is then increased by one to the start value of 0 (the first location of an array in SugarCube) and the position of \\$choices is shown based on this. If the user clicks on the link (created through using the <<linkreplace>> and <<include>> macros) again, future 'cycles' test if \\$choicesCount increases beyond the number of values in the \\$choices array and resets it to 0. At the end of every cycle, the currently selected value is stored in the variable \\$cyclingResult for future access and usage. Example # Download Twee Code # :: StoryTitle Cycling Choices in SugarCube :: Start Click options to cycle: <<include \"Cycling\">> [[Submit|Results]] :: Cycling <<silently>> <<if not $choices>> <<set $choicesCount to -1>> <<set $choices to [\"First\", \"Second\", \"Third\"]>> <</if>> <<set $choicesCount to $choicesCount + 1>> <<if $choicesCount >= $choices.length>> <<set $choicesCount to 0>> <</if>> <<set $cyclingResult to $choices[$choicesCount]>> <</silently>> \\<<linkreplace $choices[$choicesCount]>><<include \"Cycling\">><</linkreplace>> :: Results $cyclingResult Twee Download See Also # Setting and Showing Variables , Modularity","title":"SugarCube"},{"location":"cycling/sugarcube/sugarcube_cycling.html#cycling-choices-sugarcube-v218","text":"","title":"\"Cycling Choices\": SugarCube (v2.18)"},{"location":"cycling/sugarcube/sugarcube_cycling.html#summary","text":"\"Cycling Choices\" demonstrates how to create a 'cycling' effect of different choices through clicking on them. The cycle starts with the use of the <<include>> macro and assumption of \\$choicesCount beginning at the number -1. Within the passage \"Cycling\", the first 'cycle' begins with testing if the variable \\$choices exists. If it does not, \\$choices and \\$choicesCount are set (created) to their initial values. Next, \\$choicesCount is then increased by one to the start value of 0 (the first location of an array in SugarCube) and the position of \\$choices is shown based on this. If the user clicks on the link (created through using the <<linkreplace>> and <<include>> macros) again, future 'cycles' test if \\$choicesCount increases beyond the number of values in the \\$choices array and resets it to 0. At the end of every cycle, the currently selected value is stored in the variable \\$cyclingResult for future access and usage.","title":"Summary"},{"location":"cycling/sugarcube/sugarcube_cycling.html#example","text":"Download","title":"Example"},{"location":"cycling/sugarcube/sugarcube_cycling.html#twee-code","text":":: StoryTitle Cycling Choices in SugarCube :: Start Click options to cycle: <<include \"Cycling\">> [[Submit|Results]] :: Cycling <<silently>> <<if not $choices>> <<set $choicesCount to -1>> <<set $choices to [\"First\", \"Second\", \"Third\"]>> <</if>> <<set $choicesCount to $choicesCount + 1>> <<if $choicesCount >= $choices.length>> <<set $choicesCount to 0>> <</if>> <<set $cyclingResult to $choices[$choicesCount]>> <</silently>> \\<<linkreplace $choices[$choicesCount]>><<include \"Cycling\">><</linkreplace>> :: Results $cyclingResult Twee Download","title":"Twee Code"},{"location":"cycling/sugarcube/sugarcube_cycling.html#see-also","text":"Setting and Showing Variables , Modularity","title":"See Also"},{"location":"dateandtime/chapbook/chapbook_dateandtime.html","text":"\"Date and Time\": Chapbook (1.0.0) # Summary # Using lookups , Chapbook can easily retrieve the current month, day, and year. Example # Download Twee Code # :: StoryTitle Date and Time in Chapbook :: Start The current month number is {now.month}. The current day number is {now.day}. The current full-year number is {now.year}. Twee Download","title":"Chapbook"},{"location":"dateandtime/chapbook/chapbook_dateandtime.html#date-and-time-chapbook-100","text":"","title":"\"Date and Time\": Chapbook (1.0.0)"},{"location":"dateandtime/chapbook/chapbook_dateandtime.html#summary","text":"Using lookups , Chapbook can easily retrieve the current month, day, and year.","title":"Summary"},{"location":"dateandtime/chapbook/chapbook_dateandtime.html#example","text":"Download","title":"Example"},{"location":"dateandtime/chapbook/chapbook_dateandtime.html#twee-code","text":":: StoryTitle Date and Time in Chapbook :: Start The current month number is {now.month}. The current day number is {now.day}. The current full-year number is {now.year}. Twee Download","title":"Twee Code"},{"location":"dateandtime/harlowe/harlowe_dateandtime.html","text":"\"Date and Time\": Harlowe (v2.1) # Summary # \"Date and Time\" demonstrates how to use the (current-date:) , (current-time:) , and other time-related macros in Harlowe. Example # Download Twee Code # :: StoryTitle Date and Time in Harlowe :: Start The current date is (current-date:). The current time is (current-time: ). The current day (of the month) is (monthday: ). The current day is (weekday: ). Twee Download","title":"Harlowe"},{"location":"dateandtime/harlowe/harlowe_dateandtime.html#date-and-time-harlowe-v21","text":"","title":"\"Date and Time\": Harlowe (v2.1)"},{"location":"dateandtime/harlowe/harlowe_dateandtime.html#summary","text":"\"Date and Time\" demonstrates how to use the (current-date:) , (current-time:) , and other time-related macros in Harlowe.","title":"Summary"},{"location":"dateandtime/harlowe/harlowe_dateandtime.html#example","text":"Download","title":"Example"},{"location":"dateandtime/harlowe/harlowe_dateandtime.html#twee-code","text":":: StoryTitle Date and Time in Harlowe :: Start The current date is (current-date:). The current time is (current-time: ). The current day (of the month) is (monthday: ). The current day is (weekday: ). Twee Download","title":"Twee Code"},{"location":"dateandtime/snowman/snowman_dateandtime.html","text":"\"Date and Time\": Snowman (v1.3) # Summary # \"Date and Time\" demonstrates how to use the JavaScript Date() functionality in Snowman. Example # Download Twee Code # :: StoryTitle Date and Time in Snowman :: Start The current time (in milliseconds since January 1, 1970 00:00:00 UTC) is <%= Date.now() %> <% window.setup = {}; window.setup.newDate = new Date(); %> The current month is <%= setup.newDate.getMonth() %>. The current day is <%= setup.newDate.getDay() %>. The current hour is <%= setup.newDate.getHours() %>. The current minute is <%= setup.newDate.getMinutes() %>. The current fullyear is <%= setup.newDate.getFullYear() %>. <% window.setup.originalDate = new Date(\"October 20, 2018\") %> It has been <%= Date.now() - setup.originalDate%> milliseconds since October 20, 2018. Twee Download","title":"Snowman"},{"location":"dateandtime/snowman/snowman_dateandtime.html#date-and-time-snowman-v13","text":"","title":"\"Date and Time\": Snowman (v1.3)"},{"location":"dateandtime/snowman/snowman_dateandtime.html#summary","text":"\"Date and Time\" demonstrates how to use the JavaScript Date() functionality in Snowman.","title":"Summary"},{"location":"dateandtime/snowman/snowman_dateandtime.html#example","text":"Download","title":"Example"},{"location":"dateandtime/snowman/snowman_dateandtime.html#twee-code","text":":: StoryTitle Date and Time in Snowman :: Start The current time (in milliseconds since January 1, 1970 00:00:00 UTC) is <%= Date.now() %> <% window.setup = {}; window.setup.newDate = new Date(); %> The current month is <%= setup.newDate.getMonth() %>. The current day is <%= setup.newDate.getDay() %>. The current hour is <%= setup.newDate.getHours() %>. The current minute is <%= setup.newDate.getMinutes() %>. The current fullyear is <%= setup.newDate.getFullYear() %>. <% window.setup.originalDate = new Date(\"October 20, 2018\") %> It has been <%= Date.now() - setup.originalDate%> milliseconds since October 20, 2018. Twee Download","title":"Twee Code"},{"location":"dateandtime/sugarcube/sugarcube_dateandtime.html","text":"\"Date and Time\": SugarCube (v2.18) # Summary # \"Date and Time\" demonstrates how to use the JavaScript Date() functionality in SugarCube. Example # Download Twee Code # :: StoryTitle Date and Time in SugarCube :: Start <<print \"The current time (in milliseconds since January 1, 1970 00:00:00 UTC) is \" + Date.now()>> <<set $date to new Date()>> The current month is <<print $date.getMonth() >>. The current day is <<print $date.getDay() >>. The current hour is <<print $date.getHours() >>. The current minute is <<print $date.getMinutes() >>. The current fullyear is <<print $date.getFullYear() >>. <<set $originalDate to new Date(\"October 20, 2018\")>> <<set $timeDifference to Date.now() - $originalDate>> It has been $timeDifference milliseconds since October 20, 2018. Twee Download","title":"SugarCube"},{"location":"dateandtime/sugarcube/sugarcube_dateandtime.html#date-and-time-sugarcube-v218","text":"","title":"\"Date and Time\": SugarCube (v2.18)"},{"location":"dateandtime/sugarcube/sugarcube_dateandtime.html#summary","text":"\"Date and Time\" demonstrates how to use the JavaScript Date() functionality in SugarCube.","title":"Summary"},{"location":"dateandtime/sugarcube/sugarcube_dateandtime.html#example","text":"Download","title":"Example"},{"location":"dateandtime/sugarcube/sugarcube_dateandtime.html#twee-code","text":":: StoryTitle Date and Time in SugarCube :: Start <<print \"The current time (in milliseconds since January 1, 1970 00:00:00 UTC) is \" + Date.now()>> <<set $date to new Date()>> The current month is <<print $date.getMonth() >>. The current day is <<print $date.getDay() >>. The current hour is <<print $date.getHours() >>. The current minute is <<print $date.getMinutes() >>. The current fullyear is <<print $date.getFullYear() >>. <<set $originalDate to new Date(\"October 20, 2018\")>> <<set $timeDifference to Date.now() - $originalDate>> It has been $timeDifference milliseconds since October 20, 2018. Twee Download","title":"Twee Code"},{"location":"delayedtext/chapbook/chapbook_delayedtext.html","text":"\"Delayed Text\": Chapbook (v1.0.0) # Summary # In Chapbook, the [after] modifier shows text after a set amount of time. Example # Download Twee Code # :: StoryTitle Chapbook: Delayed Text :: Start [after 5s; append] It has been 5 seconds. Show the text! Twee Download","title":"Chapbook"},{"location":"delayedtext/chapbook/chapbook_delayedtext.html#delayed-text-chapbook-v100","text":"","title":"\"Delayed Text\": Chapbook (v1.0.0)"},{"location":"delayedtext/chapbook/chapbook_delayedtext.html#summary","text":"In Chapbook, the [after] modifier shows text after a set amount of time.","title":"Summary"},{"location":"delayedtext/chapbook/chapbook_delayedtext.html#example","text":"Download","title":"Example"},{"location":"delayedtext/chapbook/chapbook_delayedtext.html#twee-code","text":":: StoryTitle Chapbook: Delayed Text :: Start [after 5s; append] It has been 5 seconds. Show the text! Twee Download","title":"Twee Code"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html","text":"\"Delayed Text\": Harlowe (v2.0) # Summary # \"Delayed Text\" uses the (live:) and (stop:) macros to create a loop that runs only once with a delay of five seconds. Example # Download Twee Code # :: StoryTitle Delayed Text in Harlowe :: Start { (live: 5s)[ (stop:) It has been 5 seconds. Show the text! ] } Twee Download See Also # Typewriter Effect","title":"Harlowe"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html#delayed-text-harlowe-v20","text":"","title":"\"Delayed Text\": Harlowe (v2.0)"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html#summary","text":"\"Delayed Text\" uses the (live:) and (stop:) macros to create a loop that runs only once with a delay of five seconds.","title":"Summary"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html#example","text":"Download","title":"Example"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html#twee-code","text":":: StoryTitle Delayed Text in Harlowe :: Start { (live: 5s)[ (stop:) It has been 5 seconds. Show the text! ] } Twee Download","title":"Twee Code"},{"location":"delayedtext/harlowe/harlowe_delayedtext.html#see-also","text":"Typewriter Effect","title":"See Also"},{"location":"delayedtext/snowman/snowman_delayedtext.html","text":"\"Delayed Text\": Snowman (v1.3.0) # Summary # \"Delayed Text\" uses the delay() function in Underscore combined with a jQuery selector to target an element with the ID of \"results\" to change its internal text after five seconds. Example # Download Twee Code # :: StoryTitle Delayed Text in Snowman :: Start <div id=\"results\"></div> <% _.delay( function() { $(\"#results\").text(\"It has been 5 seconds. Show the text!\"); }, 5000); %> Twee Download See Also # Typewriter Effect","title":"Snowman"},{"location":"delayedtext/snowman/snowman_delayedtext.html#delayed-text-snowman-v130","text":"","title":"\"Delayed Text\": Snowman (v1.3.0)"},{"location":"delayedtext/snowman/snowman_delayedtext.html#summary","text":"\"Delayed Text\" uses the delay() function in Underscore combined with a jQuery selector to target an element with the ID of \"results\" to change its internal text after five seconds.","title":"Summary"},{"location":"delayedtext/snowman/snowman_delayedtext.html#example","text":"Download","title":"Example"},{"location":"delayedtext/snowman/snowman_delayedtext.html#twee-code","text":":: StoryTitle Delayed Text in Snowman :: Start <div id=\"results\"></div> <% _.delay( function() { $(\"#results\").text(\"It has been 5 seconds. Show the text!\"); }, 5000); %> Twee Download","title":"Twee Code"},{"location":"delayedtext/snowman/snowman_delayedtext.html#see-also","text":"Typewriter Effect","title":"See Also"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html","text":"\"Delayed Text\": SugarCube (v2.18) # Summary # \"Delayed Text\" uses the <<timed>> macro to delay five seconds before showing text. Example # Download Twee Code # :: StoryTitle Delayed Text in SugarCube :: Start <<timed 5s>> It has been 5 seconds. Show the text! <</timed>> Twee Download See Also # Typewriter Effect","title":"SugarCube"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html#delayed-text-sugarcube-v218","text":"","title":"\"Delayed Text\": SugarCube (v2.18)"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html#summary","text":"\"Delayed Text\" uses the <<timed>> macro to delay five seconds before showing text.","title":"Summary"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html#example","text":"Download","title":"Example"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html#twee-code","text":":: StoryTitle Delayed Text in SugarCube :: Start <<timed 5s>> It has been 5 seconds. Show the text! <</timed>> Twee Download","title":"Twee Code"},{"location":"delayedtext/sugarcube/sugarcube_delayedtext.html#see-also","text":"Typewriter Effect","title":"See Also"},{"location":"deletingvariables/chapbook/chapbook_deletingvariables.html","text":"\"Deleting Variables\": Chapbook (v1.0.0) # Summary # While variables created using the [JavaScript] modifier can be deleted within their blocks, any created within the Vars Section can simply be set to undefined to make them unable to be shown within an expression using the engine.state.set() function. Example # Download Twee Code # :: StoryTitle Chapbook: Deleting Variables :: Start color: \"red\" -- [JavaScript] engine.state.set(\"color\", undefined) [continued] What is color? {color} Twee Download","title":"Chapbook"},{"location":"deletingvariables/chapbook/chapbook_deletingvariables.html#deleting-variables-chapbook-v100","text":"","title":"\"Deleting Variables\": Chapbook (v1.0.0)"},{"location":"deletingvariables/chapbook/chapbook_deletingvariables.html#summary","text":"While variables created using the [JavaScript] modifier can be deleted within their blocks, any created within the Vars Section can simply be set to undefined to make them unable to be shown within an expression using the engine.state.set() function.","title":"Summary"},{"location":"deletingvariables/chapbook/chapbook_deletingvariables.html#example","text":"Download","title":"Example"},{"location":"deletingvariables/chapbook/chapbook_deletingvariables.html#twee-code","text":":: StoryTitle Chapbook: Deleting Variables :: Start color: \"red\" -- [JavaScript] engine.state.set(\"color\", undefined) [continued] What is color? {color} Twee Download","title":"Twee Code"},{"location":"deletingvariables/snowman/snowman_deletingvariables.html","text":"\"Deleting Variables\": Snowman (v1.3) # Summary # Through using the Underscore template library available in Snowman, JavaScript can be used within passages without a <script> tag. The delete operator can be used in JavaScript to remove a variable. Example # Download Twee Code # :: StoryTitle Snowman: Deleting Variables :: UserScript[script] window.story = {}; window.story.example = \"an example!\"; :: Start What is the value of the property \"example\" of the object window.story? <%= window.story.example %> [[Delete the value!]] :: Delete the value! <% // Delete the variable delete window.story.example; %> [[Test for value]] :: Test for value Does \"example\" still exist as part of the object window.story? <%= window.story.hasOwnProperty(\"example\") %> Twee Download","title":"Snowman"},{"location":"deletingvariables/snowman/snowman_deletingvariables.html#deleting-variables-snowman-v13","text":"","title":"\"Deleting Variables\": Snowman (v1.3)"},{"location":"deletingvariables/snowman/snowman_deletingvariables.html#summary","text":"Through using the Underscore template library available in Snowman, JavaScript can be used within passages without a <script> tag. The delete operator can be used in JavaScript to remove a variable.","title":"Summary"},{"location":"deletingvariables/snowman/snowman_deletingvariables.html#example","text":"Download","title":"Example"},{"location":"deletingvariables/snowman/snowman_deletingvariables.html#twee-code","text":":: StoryTitle Snowman: Deleting Variables :: UserScript[script] window.story = {}; window.story.example = \"an example!\"; :: Start What is the value of the property \"example\" of the object window.story? <%= window.story.example %> [[Delete the value!]] :: Delete the value! <% // Delete the variable delete window.story.example; %> [[Test for value]] :: Test for value Does \"example\" still exist as part of the object window.story? <%= window.story.hasOwnProperty(\"example\") %> Twee Download","title":"Twee Code"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html","text":"\"Deleting Variables\": SugarCube (v2.18) # Summary # In SugarCube, <<unset>> works as a \"reverse\" to <<set>> . Instead of setting a value, it deletes it. <<unset>> works on both temporary and story variables. Example # Download Twee Code # :: StoryTitle SugarCube: Unsetting Variables :: Start <<set $proof to \"hand-written letter\">> [[Accidentally drop the letter]] :: Accidentally drop the letter <<unset $proof>> [[Present the letter to the sheriff]] :: Present the letter to the sheriff You present the $proof to the sheriff, not realizing the rain has washed away the ink from the hand-written letter. Twee Download See Also # Conditional Statements , Setting and Showing","title":"SugarCube"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html#deleting-variables-sugarcube-v218","text":"","title":"\"Deleting Variables\": SugarCube (v2.18)"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html#summary","text":"In SugarCube, <<unset>> works as a \"reverse\" to <<set>> . Instead of setting a value, it deletes it. <<unset>> works on both temporary and story variables.","title":"Summary"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html#example","text":"Download","title":"Example"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html#twee-code","text":":: StoryTitle SugarCube: Unsetting Variables :: Start <<set $proof to \"hand-written letter\">> [[Accidentally drop the letter]] :: Accidentally drop the letter <<unset $proof>> [[Present the letter to the sheriff]] :: Present the letter to the sheriff You present the $proof to the sheriff, not realizing the rain has washed away the ink from the hand-written letter. Twee Download","title":"Twee Code"},{"location":"deletingvariables/sugarcube/sugarcube_deletingvariables.html#see-also","text":"Conditional Statements , Setting and Showing","title":"See Also"},{"location":"dicerolling/chapbook/chapbook_dicerolling.html","text":"\"Dice Rolling\": Chapbook (v1.0) # Summary # This example demonstrates how to create the same effects of rolling various physical dice through using the random global variable in Chapbook. Inserts are used to display the use of random in the passage. For calculations, a var section and temporary variables are used because expressions cannot be used within inserts. Example # Download Twee Code # :: StoryTitle Chapbook: Rolling Dice :: Start _example1: random.d4 + 4 _example2: random.d6 - 2 _example3: random.d6 + random.d6 + 10 -- Rolling a 1d4: {random.d4} Rolling a 1d6: {random.d6} Rolling a 1d8: {random.d8} Rolling a 1d10: {random.d10} Rolling a 1d12: {random.d12} Rolling a 1d20: {random.d20} Rolling a 1d100: {random.d100} Rolling a 1d4 + 4: {_example1} Rolling a 1d6 - 2: {_example2} Rolling a 2d6 + 10: {_example3} Twee Download","title":"Chapbook"},{"location":"dicerolling/chapbook/chapbook_dicerolling.html#dice-rolling-chapbook-v10","text":"","title":"\"Dice Rolling\": Chapbook (v1.0)"},{"location":"dicerolling/chapbook/chapbook_dicerolling.html#summary","text":"This example demonstrates how to create the same effects of rolling various physical dice through using the random global variable in Chapbook. Inserts are used to display the use of random in the passage. For calculations, a var section and temporary variables are used because expressions cannot be used within inserts.","title":"Summary"},{"location":"dicerolling/chapbook/chapbook_dicerolling.html#example","text":"Download","title":"Example"},{"location":"dicerolling/chapbook/chapbook_dicerolling.html#twee-code","text":":: StoryTitle Chapbook: Rolling Dice :: Start _example1: random.d4 + 4 _example2: random.d6 - 2 _example3: random.d6 + random.d6 + 10 -- Rolling a 1d4: {random.d4} Rolling a 1d6: {random.d6} Rolling a 1d8: {random.d8} Rolling a 1d10: {random.d10} Rolling a 1d12: {random.d12} Rolling a 1d20: {random.d20} Rolling a 1d100: {random.d100} Rolling a 1d4 + 4: {_example1} Rolling a 1d6 - 2: {_example2} Rolling a 2d6 + 10: {_example3} Twee Download","title":"Twee Code"},{"location":"dicerolling/harlowe/harlowe_dicerolling.html","text":"\"Dice Rolling\": Harlowe (v2.0) # Summary # \"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using the (random:) macro and adding or subtracting numbers. Example # Download Twee Code # :: StoryTitle Harlowe: Dice Rolling :: Start Rolling a 1d4: (random: 1,4) Rolling a 1d6: (random: 1,6) Rolling a 1d8: (random: 1,8) Rolling a 1d10: (random: 1, 10) Rolling a 1d12: (random: 1, 12) Rolling a 1d20: (random: 1, 20) Rolling a 1d100: (random: 1, 100) Rolling a 1d4 + 4: (text: (random: 1, 4) + 4) Rolling a 1d6 - 2: (text: (random: 1, 6) - 2) Rolling a 2d6 + 10: (text: (random: 1, 6) + (random: 1, 6) + 10) Twee Download","title":"Harlowe"},{"location":"dicerolling/harlowe/harlowe_dicerolling.html#dice-rolling-harlowe-v20","text":"","title":"\"Dice Rolling\": Harlowe (v2.0)"},{"location":"dicerolling/harlowe/harlowe_dicerolling.html#summary","text":"\"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using the (random:) macro and adding or subtracting numbers.","title":"Summary"},{"location":"dicerolling/harlowe/harlowe_dicerolling.html#example","text":"Download","title":"Example"},{"location":"dicerolling/harlowe/harlowe_dicerolling.html#twee-code","text":":: StoryTitle Harlowe: Dice Rolling :: Start Rolling a 1d4: (random: 1,4) Rolling a 1d6: (random: 1,6) Rolling a 1d8: (random: 1,8) Rolling a 1d10: (random: 1, 10) Rolling a 1d12: (random: 1, 12) Rolling a 1d20: (random: 1, 20) Rolling a 1d100: (random: 1, 100) Rolling a 1d4 + 4: (text: (random: 1, 4) + 4) Rolling a 1d6 - 2: (text: (random: 1, 6) - 2) Rolling a 2d6 + 10: (text: (random: 1, 6) + (random: 1, 6) + 10) Twee Download","title":"Twee Code"},{"location":"dicerolling/snowman/snowman_dicerolling.html","text":"\"Dice Rolling\": Snowman (v1.3) # Summary # \"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using Underscore.js's _.random() function and its interpolating functionality. Example # Download Twee Code # :: StoryTitle Snowman: Dice Rolling :: Start Rolling a 1d4: <%= _.random(1,4) %> Rolling a 1d6: <%= _.random(1,6) %> Rolling a 1d8: <%= _.random(1,8) %> Rolling a 1d10: <%= _.random(1, 10) %> Rolling a 1d12: <%= _.random(1, 12) %> Rolling a 1d20: <%= _.random(1, 20) %> Rolling a 1d100: <%= _.random(1, 100) %> Rolling a 1d4 + 4: <%= _.random(1, 4) + 4 %> Rolling a 1d6 - 2: <%= _.random(1, 6) - 2 %> Rolling a 2d6 + 10: <%= _.random(1, 6) + _.random(1, 6) + 10 %> Twee Download","title":"Snowman"},{"location":"dicerolling/snowman/snowman_dicerolling.html#dice-rolling-snowman-v13","text":"","title":"\"Dice Rolling\": Snowman (v1.3)"},{"location":"dicerolling/snowman/snowman_dicerolling.html#summary","text":"\"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using Underscore.js's _.random() function and its interpolating functionality.","title":"Summary"},{"location":"dicerolling/snowman/snowman_dicerolling.html#example","text":"Download","title":"Example"},{"location":"dicerolling/snowman/snowman_dicerolling.html#twee-code","text":":: StoryTitle Snowman: Dice Rolling :: Start Rolling a 1d4: <%= _.random(1,4) %> Rolling a 1d6: <%= _.random(1,6) %> Rolling a 1d8: <%= _.random(1,8) %> Rolling a 1d10: <%= _.random(1, 10) %> Rolling a 1d12: <%= _.random(1, 12) %> Rolling a 1d20: <%= _.random(1, 20) %> Rolling a 1d100: <%= _.random(1, 100) %> Rolling a 1d4 + 4: <%= _.random(1, 4) + 4 %> Rolling a 1d6 - 2: <%= _.random(1, 6) - 2 %> Rolling a 2d6 + 10: <%= _.random(1, 6) + _.random(1, 6) + 10 %> Twee Download","title":"Twee Code"},{"location":"dicerolling/sugarcube/sugarcube_dicerolling.html","text":"\"Dice Rolling\": SugarCube (v2.18) # Summary # \"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using the random() function and the <<print>> macro to show the results. Example # Download Twee Code # :: StoryTitle SugarCube: Dice Rolling :: Start Rolling a 1d4: <<print random(1,4) >> Rolling a 1d6: <<print random(1,6) >> Rolling a 1d8: <<print random(1,8) >> Rolling a 1d10: <<print random(1, 10) >> Rolling a 1d12: <<print random(1, 12) >> Rolling a 1d20: <<print random(1, 20) >> Rolling a 1d100: <<print random(1, 100) >> Rolling a 1d4 + 4: <<print random(1, 4) + 4 >> Rolling a 1d6 - 2: <<print random(1, 6) - 2 >> Rolling a 2d6 + 10: <<print random(1, 6) + random(1, 6) + 10 >> Twee Download","title":"SugarCube"},{"location":"dicerolling/sugarcube/sugarcube_dicerolling.html#dice-rolling-sugarcube-v218","text":"","title":"\"Dice Rolling\": SugarCube (v2.18)"},{"location":"dicerolling/sugarcube/sugarcube_dicerolling.html#summary","text":"\"Dice Rolling\" demonstrates how to create the same effects of rolling various physical dice through using the random() function and the <<print>> macro to show the results.","title":"Summary"},{"location":"dicerolling/sugarcube/sugarcube_dicerolling.html#example","text":"Download","title":"Example"},{"location":"dicerolling/sugarcube/sugarcube_dicerolling.html#twee-code","text":":: StoryTitle SugarCube: Dice Rolling :: Start Rolling a 1d4: <<print random(1,4) >> Rolling a 1d6: <<print random(1,6) >> Rolling a 1d8: <<print random(1,8) >> Rolling a 1d10: <<print random(1, 10) >> Rolling a 1d12: <<print random(1, 12) >> Rolling a 1d20: <<print random(1, 20) >> Rolling a 1d100: <<print random(1, 100) >> Rolling a 1d4 + 4: <<print random(1, 4) + 4 >> Rolling a 1d6 - 2: <<print random(1, 6) - 2 >> Rolling a 2d6 + 10: <<print random(1, 6) + random(1, 6) + 10 >> Twee Download","title":"Twee Code"},{"location":"dropdown/chapbook/chapbook_dropdown.html","text":"\"Dropdown\": Chapbook (v1.0) # Summary # The insert {dropdown} is used to create a dropdown menu in Chapbook. The for: option specifies where to save the selected value and the choices: option defines what the choices should be for the user. Example # Download Twee Code # :: StoryTitle Chapbook: Dropdown :: Start {dropdown menu for: \"chosenValue\", choices: [\"Up\", \"Down\", \"Left\", \"Right\"]} [[Check Choice]] :: Check Choice You chose {chosenValue}. Twee Download","title":"Chapbook"},{"location":"dropdown/chapbook/chapbook_dropdown.html#dropdown-chapbook-v10","text":"","title":"\"Dropdown\": Chapbook (v1.0)"},{"location":"dropdown/chapbook/chapbook_dropdown.html#summary","text":"The insert {dropdown} is used to create a dropdown menu in Chapbook. The for: option specifies where to save the selected value and the choices: option defines what the choices should be for the user.","title":"Summary"},{"location":"dropdown/chapbook/chapbook_dropdown.html#example","text":"Download","title":"Example"},{"location":"dropdown/chapbook/chapbook_dropdown.html#twee-code","text":":: StoryTitle Chapbook: Dropdown :: Start {dropdown menu for: \"chosenValue\", choices: [\"Up\", \"Down\", \"Left\", \"Right\"]} [[Check Choice]] :: Check Choice You chose {chosenValue}. Twee Download","title":"Twee Code"},{"location":"dropdown/harlowe/harlowe_dropdown.html","text":"\"Dropdown\": Harlowe (v3.0) # Summary # The macro (dropdown:) was introduced with Harlowe 3.0. It creates a drop-down menu based on the options supplied to it. In order to save the outcome of using the drop-down menu, the keyword bind is used to save the choice. Example # Download Twee Code # :: StoryTitle Harlowe 3: Dropdown :: Start Choose direction: (dropdown: bind $direction, \"Up\", \"Down\", \"Left\", \"Right\") [[Show result]] :: Show result The direction picked was $direction. Twee Download","title":"Harlowe (v3.0.1 or later)"},{"location":"dropdown/harlowe/harlowe_dropdown.html#dropdown-harlowe-v30","text":"","title":"\"Dropdown\": Harlowe (v3.0)"},{"location":"dropdown/harlowe/harlowe_dropdown.html#summary","text":"The macro (dropdown:) was introduced with Harlowe 3.0. It creates a drop-down menu based on the options supplied to it. In order to save the outcome of using the drop-down menu, the keyword bind is used to save the choice.","title":"Summary"},{"location":"dropdown/harlowe/harlowe_dropdown.html#example","text":"Download","title":"Example"},{"location":"dropdown/harlowe/harlowe_dropdown.html#twee-code","text":":: StoryTitle Harlowe 3: Dropdown :: Start Choose direction: (dropdown: bind $direction, \"Up\", \"Down\", \"Left\", \"Right\") [[Show result]] :: Show result The direction picked was $direction. Twee Download","title":"Twee Code"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html","text":"\"Moving through a 'dungeon\": Harlowe (v2.0) # Summary # \"Moving through a 'dungeon'\" uses the (array:) macro to create a multidimensional array. Movement positions are then tracked through X and Y variables for a grid system. Each movement subtracts or adds to its corresponding X or Y position and is compared to those same positions within the array. Different directions are shown if movement is possible in that direction. A map of the array is created by iterating through temporary variables and placing different symbols matching walls, movement spaces, and the player herself. Example # Download Twee Code # :: StoryTitle Harlowe: Moving through Dungeons :: User Style [stylesheet] tw-include[type=\"startup\"], tw-hook[name=\"workarea\"] { display: none; } tw-hook[name=\"map\"] { font-family: monospace; line-height: 1.75; font-size: 16pt; } :: Start |map>[(display: \"Map\")] :: Map (set: $map to \"\")\\ |workarea>[ (for: each _y, ...(range: 1, $dungeon's length))[ (for: each _x, ...(range: 1, $dungeon's (_y)'s length))[ (if: _x is $positionX and _y is $positionY)[ (set: $map to it + \"P \") ] (else-if: $dungeon's (_y)'s (_x) is 0)[ (set: $map to it + \"&num; \") ] (else-if: $dungeon's (_y)'s (_x) is 1)[ (set: $map to it + \". \") ] (else-if: $dungeon's (_y)'s (_x) is 2)[ (set: $map to it + \"E \") ] ] (set: $map to it + \" <br>\") ] ]\\ $map { (set: $seperator to \"\")\\ (set: _north to $dungeon's ($positionY - 1)'s ($positionX)) (set: _east to $dungeon's ($positionY)'s ($positionX + 1)) (set: _south to $dungeon's ($positionY + 1)'s ($positionX)) (set: _west to $dungeon's ($positionY)'s ($positionX - 1)) (if: _north is 1)[ $seperator (link: \"North\")[ (set: $positionY to it - 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _north is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _east is 1)[ $seperator (link: \"East\")[ (set: $positionX to it + 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _east is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _south is 1)[ $seperator (link: \"South\")[ (set: $positionY to it + 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _south is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _west is 1)[ $seperator (link: \"West\")[ (set: $positionX to it - 1) (replace: ?map)[(display: \"Map\")] ] ] (else-if: _west is 2)[ $seperator[[Exit]] ] } :: Startup [startup] { (set: $dungeon to (array: (a: 0,0,0,0,0,0,0,0,0,0,0), (a: 0,1,1,1,0,1,1,1,1,1,0), (a: 0,0,0,1,0,0,0,0,0,1,0), (a: 0,1,0,1,1,1,1,1,0,1,0), (a: 0,1,0,0,0,0,0,1,0,1,0), (a: 0,1,1,1,1,1,1,1,0,1,0), (a: 0,0,0,0,0,0,0,1,0,1,0), (a: 0,1,0,1,1,1,1,1,1,1,0), (a: 0,1,0,1,0,0,0,1,0,0,0), (a: 0,1,1,1,0,1,1,1,1,2,0), (a: 0,0,0,0,0,0,0,0,0,0,0) ) ) (set: $positionX to 2) (set: $positionY to 2) } :: Exit You have exited the map. Twee Download See Also # Setting and Showing Variables , Conditional Statements , Modularity","title":"Harlowe"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html#moving-through-a-dungeon-harlowe-v20","text":"","title":"\"Moving through a 'dungeon\": Harlowe (v2.0)"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html#summary","text":"\"Moving through a 'dungeon'\" uses the (array:) macro to create a multidimensional array. Movement positions are then tracked through X and Y variables for a grid system. Each movement subtracts or adds to its corresponding X or Y position and is compared to those same positions within the array. Different directions are shown if movement is possible in that direction. A map of the array is created by iterating through temporary variables and placing different symbols matching walls, movement spaces, and the player herself.","title":"Summary"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html#example","text":"Download","title":"Example"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html#twee-code","text":":: StoryTitle Harlowe: Moving through Dungeons :: User Style [stylesheet] tw-include[type=\"startup\"], tw-hook[name=\"workarea\"] { display: none; } tw-hook[name=\"map\"] { font-family: monospace; line-height: 1.75; font-size: 16pt; } :: Start |map>[(display: \"Map\")] :: Map (set: $map to \"\")\\ |workarea>[ (for: each _y, ...(range: 1, $dungeon's length))[ (for: each _x, ...(range: 1, $dungeon's (_y)'s length))[ (if: _x is $positionX and _y is $positionY)[ (set: $map to it + \"P \") ] (else-if: $dungeon's (_y)'s (_x) is 0)[ (set: $map to it + \"&num; \") ] (else-if: $dungeon's (_y)'s (_x) is 1)[ (set: $map to it + \". \") ] (else-if: $dungeon's (_y)'s (_x) is 2)[ (set: $map to it + \"E \") ] ] (set: $map to it + \" <br>\") ] ]\\ $map { (set: $seperator to \"\")\\ (set: _north to $dungeon's ($positionY - 1)'s ($positionX)) (set: _east to $dungeon's ($positionY)'s ($positionX + 1)) (set: _south to $dungeon's ($positionY + 1)'s ($positionX)) (set: _west to $dungeon's ($positionY)'s ($positionX - 1)) (if: _north is 1)[ $seperator (link: \"North\")[ (set: $positionY to it - 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _north is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _east is 1)[ $seperator (link: \"East\")[ (set: $positionX to it + 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _east is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _south is 1)[ $seperator (link: \"South\")[ (set: $positionY to it + 1) (replace: ?map)[(display: \"Map\")] ] (set: $seperator to \" | \") ] (else-if: _south is 2)[ $seperator[[Exit]] (set: $seperator to \" | \") ] (if: _west is 1)[ $seperator (link: \"West\")[ (set: $positionX to it - 1) (replace: ?map)[(display: \"Map\")] ] ] (else-if: _west is 2)[ $seperator[[Exit]] ] } :: Startup [startup] { (set: $dungeon to (array: (a: 0,0,0,0,0,0,0,0,0,0,0), (a: 0,1,1,1,0,1,1,1,1,1,0), (a: 0,0,0,1,0,0,0,0,0,1,0), (a: 0,1,0,1,1,1,1,1,0,1,0), (a: 0,1,0,0,0,0,0,1,0,1,0), (a: 0,1,1,1,1,1,1,1,0,1,0), (a: 0,0,0,0,0,0,0,1,0,1,0), (a: 0,1,0,1,1,1,1,1,1,1,0), (a: 0,1,0,1,0,0,0,1,0,0,0), (a: 0,1,1,1,0,1,1,1,1,2,0), (a: 0,0,0,0,0,0,0,0,0,0,0) ) ) (set: $positionX to 2) (set: $positionY to 2) } :: Exit You have exited the map. Twee Download","title":"Twee Code"},{"location":"dungeonmoving/harlowe/harlowe_dungeonmoving.html#see-also","text":"Setting and Showing Variables , Conditional Statements , Modularity","title":"See Also"},{"location":"dungeonmoving/snowman/snowman_dungeonmoving.html","text":"\"Moving through a 'dungeon\": Snowman (1.3.0) # Summary # \"Moving through a 'dungeon'\" creates a multidimensional array. Movement positions are then tracked through X and Y variables for a grid system. Each movement subtracts or adds to its corresponding X or Y position and is compared to those same positions within the array. Different directions are shown if movement is possible in that direction. Example # Download Twee Code # :: Start <div class=\"maze\"></div> <button type=\"button\" data-move=\"n\">North</button> <button type=\"button\" data-move=\"s\">South</button> <button type=\"button\" data-move=\"e\">East</button> <button type=\"button\" data-move=\"w\">West</button> <% /* 0s are walls, 1 are spaces, 2 is the goal. */ var maze = [ [0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0] ]; /* Where the player starts. The top left is (0, 0). */ var positionX = 1, positionY = 1; function renderMaze() { /* Transform the maze into ASCII art. */ /* What characters we use to display the maze. */ var displayChars = ['#', '.', 'E']; $('.maze').html(maze.map(function(row, renderY) { return row.reduceRight(function(html, cell, renderX) { if (renderX === positionX && renderY === positionY) { return 'P' + html; } return displayChars[cell] + html; }, '<br>'); })); } function updateMoves() { /* Enable/disable buttons to move based on what's allowed. We take advantage of the fact that both 0 and undefined (outside the maze) are converted to false by JavaScript by the ! operator. */ $('[data-move=\"n\"]').attr('disabled', !maze[positionY - 1][positionX]); $('[data-move=\"s\"]').attr('disabled', !maze[positionY + 1][positionX]); $('[data-move=\"e\"]').attr('disabled', !maze[positionY][positionX + 1]); $('[data-move=\"w\"]').attr('disabled', !maze[positionY][positionX - 1]); } $(function() { renderMaze(); updateMoves(); /* Change position when the user clicks an appropriate link. We depend on updateMoves() to prevent the user from walking through a wall. */ $('[data-move]').click(function() { var direction = $(this).data('move'); switch (direction) { case 'n': positionY--; break; case 's': positionY++; break; case 'e': positionX++; break; case 'w': positionX--; break; default: throw new Error('Don\\'t know how to move ' + direction); } if (maze[positionY][positionX] === 2) { story.show('Exit'); } else { renderMaze(); updateMoves(); } }); }); %> :: Exit You've escaped this fiendish maze! Twee Download Setting and Showing Variables , Conditional Statements","title":"Snowman"},{"location":"dungeonmoving/snowman/snowman_dungeonmoving.html#moving-through-a-dungeon-snowman-130","text":"","title":"\"Moving through a 'dungeon\": Snowman (1.3.0)"},{"location":"dungeonmoving/snowman/snowman_dungeonmoving.html#summary","text":"\"Moving through a 'dungeon'\" creates a multidimensional array. Movement positions are then tracked through X and Y variables for a grid system. Each movement subtracts or adds to its corresponding X or Y position and is compared to those same positions within the array. Different directions are shown if movement is possible in that direction.","title":"Summary"},{"location":"dungeonmoving/snowman/snowman_dungeonmoving.html#example","text":"Download","title":"Example"},{"location":"dungeonmoving/snowman/snowman_dungeonmoving.html#twee-code","text":":: Start <div class=\"maze\"></div> <button type=\"button\" data-move=\"n\">North</button> <button type=\"button\" data-move=\"s\">South</button> <button type=\"button\" data-move=\"e\">East</button> <button type=\"button\" data-move=\"w\">West</button> <% /* 0s are walls, 1 are spaces, 2 is the goal. */ var maze = [ [0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0] ]; /* Where the player starts. The top left is (0, 0). */ var positionX = 1, positionY = 1; function renderMaze() { /* Transform the maze into ASCII art. */ /* What characters we use to display the maze. */ var displayChars = ['#', '.', 'E']; $('.maze').html(maze.map(function(row, renderY) { return row.reduceRight(function(html, cell, renderX) { if (renderX === positionX && renderY === positionY) { return 'P' + html; } return displayChars[cell] + html; }, '<br>'); })); } function updateMoves() { /* Enable/disable buttons to move based on what's allowed. We take advantage of the fact that both 0 and undefined (outside the maze) are converted to false by JavaScript by the ! operator. */ $('[data-move=\"n\"]').attr('disabled', !maze[positionY - 1][positionX]); $('[data-move=\"s\"]').attr('disabled', !maze[positionY + 1][positionX]); $('[data-move=\"e\"]').attr('disabled', !maze[positionY][positionX + 1]); $('[data-move=\"w\"]').attr('disabled', !maze[positionY][positionX - 1]); } $(function() { renderMaze(); updateMoves(); /* Change position when the user clicks an appropriate link. We depend on updateMoves() to prevent the user from walking through a wall. */ $('[data-move]').click(function() { var direction = $(this).data('move'); switch (direction) { case 'n': positionY--; break; case 's': positionY++; break; case 'e': positionX++; break; case 'w': positionX--; break; default: throw new Error('Don\\'t know how to move ' + direction); } if (maze[positionY][positionX] === 2) { story.show('Exit'); } else { renderMaze(); updateMoves(); } }); }); %> :: Exit You've escaped this fiendish maze! Twee Download Setting and Showing Variables , Conditional Statements","title":"Twee Code"},{"location":"dungeonmoving/sugarcane/sugarcane_dungeonmoving.html","text":"\"Moving through a 'dungeon'\": Sugarcane (v2.0) # Warning The following example is designed for Twine 1.4.2. Summary # \"Moving through a 'dungeon'\" uses an array of arrays to track positions 'moved' through using X and Y variables. It also creates a <<navigate>> macro that handles the showing of directions. Example # Download Twee Code # :: North <<set $posy = $posy - 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: StoryTitle Sugarcane: Moving through a 'Dungeon' :: Start <<display \"Maze Addon\">> [[Enter Dungeon]] :: Maze Addon <<silently>> <<set $MazeAddon = function() { var maze = [[0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0]]; var x = 1; var y = 1; $posx = 1; $posy = 1; macros['navigate'] = { handler: function(obj, fnc, val) { x = $posx; y = $posy; if(maze[y-1][x] eq 1) { $North = 1; } else if(maze[x][y+1] eq 2) {$Exit = 1;} else {$North = 0;} if(maze[y+1][x] eq 1) { $South = 1; } else if(maze[x][y-1] eq 2) {$Exit = 1;} else {$South = 0;} if(maze[y][x-1] eq 1) { $West = 1; } else if(maze[x-1][y] eq 2) {$Exit = 1;} else {$West = 0;} if(maze[y][x+1] eq 1) { $East = 1; } else if(maze[x+1][y] eq 2) {$Exit = 1;} else {$East = 0;} } } } >> <<print $MazeAddon()>> <<endsilently>> :: StoryAuthor @videlais :: West <<set $posx = $posx - 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: East <<set $posx = $posx + 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: Enter Dungeon <<navigate>> <<if $North eq true>> [[North]] <<endif>> <<if $South eq true>> [[South]] <<endif>> <<if $West eq true>> [[West]] <<endif>> <<if $East eq true>> [[East]] <<endif>> :: South <<set $posy = $posy + 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: Exit Twee Download","title":"Sugarcane (1.4.2)"},{"location":"dungeonmoving/sugarcane/sugarcane_dungeonmoving.html#moving-through-a-dungeon-sugarcane-v20","text":"Warning The following example is designed for Twine 1.4.2.","title":"\"Moving through a 'dungeon'\": Sugarcane (v2.0)"},{"location":"dungeonmoving/sugarcane/sugarcane_dungeonmoving.html#summary","text":"\"Moving through a 'dungeon'\" uses an array of arrays to track positions 'moved' through using X and Y variables. It also creates a <<navigate>> macro that handles the showing of directions.","title":"Summary"},{"location":"dungeonmoving/sugarcane/sugarcane_dungeonmoving.html#example","text":"Download","title":"Example"},{"location":"dungeonmoving/sugarcane/sugarcane_dungeonmoving.html#twee-code","text":":: North <<set $posy = $posy - 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: StoryTitle Sugarcane: Moving through a 'Dungeon' :: Start <<display \"Maze Addon\">> [[Enter Dungeon]] :: Maze Addon <<silently>> <<set $MazeAddon = function() { var maze = [[0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0]]; var x = 1; var y = 1; $posx = 1; $posy = 1; macros['navigate'] = { handler: function(obj, fnc, val) { x = $posx; y = $posy; if(maze[y-1][x] eq 1) { $North = 1; } else if(maze[x][y+1] eq 2) {$Exit = 1;} else {$North = 0;} if(maze[y+1][x] eq 1) { $South = 1; } else if(maze[x][y-1] eq 2) {$Exit = 1;} else {$South = 0;} if(maze[y][x-1] eq 1) { $West = 1; } else if(maze[x-1][y] eq 2) {$Exit = 1;} else {$West = 0;} if(maze[y][x+1] eq 1) { $East = 1; } else if(maze[x+1][y] eq 2) {$Exit = 1;} else {$East = 0;} } } } >> <<print $MazeAddon()>> <<endsilently>> :: StoryAuthor @videlais :: West <<set $posx = $posx - 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: East <<set $posx = $posx + 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: Enter Dungeon <<navigate>> <<if $North eq true>> [[North]] <<endif>> <<if $South eq true>> [[South]] <<endif>> <<if $West eq true>> [[West]] <<endif>> <<if $East eq true>> [[East]] <<endif>> :: South <<set $posy = $posy + 1>> <<navigate>> <<if $North eq 1>> [[North]] <<endif>> <<if $South eq 1>> [[South]] <<endif>> <<if $West eq 1>> [[West]] <<endif>> <<if $East eq 1>> [[East]] <<endif>> <<if $Exit eq 1>> [[Exit]] <<endif>> :: Exit Twee Download","title":"Twee Code"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html","text":"\"Moving through a 'dungeon'\": SugarCube (v2.0) # Summary # \"Moving through a 'dungeon'\" uses a two-dimensional array for the \"map\" and two variables, X and Y, to track movement through the space. The 'Map System' passage checks the positions of X and Y relative to the \"map\" and writes the available directional movement options. Once a direction is clicked, the X and Y values are added or subtracted corresponding to the direction and the map is re-drawn again. Symbols are then placed on the map matching the walls, movement space, and player. Example # Download Twee Code # :: StoryTitle SugarCube: Moving through a Dungeon :: UserStylesheet[stylesheet] #map { font-family: monospace; } :: StoryInit <<set $mapArray to [[0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0]]>> <<set $positionX to 1>> <<set $positionY to 1>> :: Location <span id=\"map\"> <<nobr>> <<for $i to 0; $i lt $mapArray.length; $i++>> <<for $k to 0; $k lt $mapArray[$i].length; $k++>> <<if $k eq $positionX and $i eq $positionY>> <<print \"P\">> <<elseif $mapArray[$i][$k] eq 1>> <<print \".\">> <<elseif $mapArray[$i][$k] eq 0>> <<print \"#\">> <<elseif $mapArray[$i][$k] eq 2>> <<print \"E\">> <</if>> <</for>> <<print \"<br>\">> <</for>> <</nobr>> </span> :: East <<set $positionX += 1>> <<include \"Map System\">> :: West <<set $positionX -= 1>> <<include \"Map System\">> :: South <<set $positionY += 1>> <<include \"Map System\">> :: North <<set $positionY -= 1>> <<include \"Map System\">> :: Map System <<include \"Location\">> <<nobr>> <<if $mapArray[$positionY-1][$positionX] eq 1>> [[North]] | <<elseif $mapArray[$positionY-1][$positionX] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY][$positionX+1] eq 1>> [[East]] | <<elseif $mapArray[$positionY][$positionX+1] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY+1][$positionX] eq 1>> [[South]] | <<elseif $mapArray[$positionY+1][$positionX] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY][$positionX-1] eq 1>> [[West]] | <<elseif $mapArray[$positionY][$positionX-1] eq 2>> [[Exit]] | <</if>> <</nobr>> :: Exit Double-click this passage to edit it. Twee Download See Also # Setting and Showing Variables , Conditional Statements , Modularity","title":"SugarCube"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html#moving-through-a-dungeon-sugarcube-v20","text":"","title":"\"Moving through a 'dungeon'\": SugarCube (v2.0)"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html#summary","text":"\"Moving through a 'dungeon'\" uses a two-dimensional array for the \"map\" and two variables, X and Y, to track movement through the space. The 'Map System' passage checks the positions of X and Y relative to the \"map\" and writes the available directional movement options. Once a direction is clicked, the X and Y values are added or subtracted corresponding to the direction and the map is re-drawn again. Symbols are then placed on the map matching the walls, movement space, and player.","title":"Summary"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html#example","text":"Download","title":"Example"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html#twee-code","text":":: StoryTitle SugarCube: Moving through a Dungeon :: UserStylesheet[stylesheet] #map { font-family: monospace; } :: StoryInit <<set $mapArray to [[0,0,0,0,0,0,0,0,0,0,0], [0,1,1,1,0,1,1,1,1,1,0], [0,0,0,1,0,0,0,0,0,1,0], [0,1,0,1,1,1,1,1,0,1,0], [0,1,0,0,0,0,0,1,0,1,0], [0,1,1,1,1,1,1,1,0,1,0], [0,0,0,0,0,0,0,1,0,1,0], [0,1,0,1,1,1,1,1,1,1,0], [0,1,0,1,0,0,0,1,0,0,0], [0,1,1,1,0,1,1,1,1,2,0], [0,0,0,0,0,0,0,0,0,0,0]]>> <<set $positionX to 1>> <<set $positionY to 1>> :: Location <span id=\"map\"> <<nobr>> <<for $i to 0; $i lt $mapArray.length; $i++>> <<for $k to 0; $k lt $mapArray[$i].length; $k++>> <<if $k eq $positionX and $i eq $positionY>> <<print \"P\">> <<elseif $mapArray[$i][$k] eq 1>> <<print \".\">> <<elseif $mapArray[$i][$k] eq 0>> <<print \"#\">> <<elseif $mapArray[$i][$k] eq 2>> <<print \"E\">> <</if>> <</for>> <<print \"<br>\">> <</for>> <</nobr>> </span> :: East <<set $positionX += 1>> <<include \"Map System\">> :: West <<set $positionX -= 1>> <<include \"Map System\">> :: South <<set $positionY += 1>> <<include \"Map System\">> :: North <<set $positionY -= 1>> <<include \"Map System\">> :: Map System <<include \"Location\">> <<nobr>> <<if $mapArray[$positionY-1][$positionX] eq 1>> [[North]] | <<elseif $mapArray[$positionY-1][$positionX] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY][$positionX+1] eq 1>> [[East]] | <<elseif $mapArray[$positionY][$positionX+1] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY+1][$positionX] eq 1>> [[South]] | <<elseif $mapArray[$positionY+1][$positionX] eq 2>> [[Exit]] | <</if>> <<if $mapArray[$positionY][$positionX-1] eq 1>> [[West]] | <<elseif $mapArray[$positionY][$positionX-1] eq 2>> [[Exit]] | <</if>> <</nobr>> :: Exit Double-click this passage to edit it. Twee Download","title":"Twee Code"},{"location":"dungeonmoving/sugarcube/sugarcube_dungeonmoving.html#see-also","text":"Setting and Showing Variables , Conditional Statements , Modularity","title":"See Also"},{"location":"fairmath/chapbook/chapbook_fairmath.html","text":"\"Fairmath System\": Chapbook (v1.0.0) # Summary # \"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on the operation, increasing and decreasing changes the value by a percentage as the difference between the original and adjusted value. This example defines functions in the Story JavaScript, which are then used in the Vars Section of a passage to set values. These are shown using expressions within the text of the passage itself. Example # Download Twee Code # :: StoryTitle Chapbook: Fairmath :: UserScript[script] // Create a global object window.setup = window.setup || {}; // Create a fairmath global object window.setup.fairmath = {}; // Create an 'increase' function setup.fairmath.increase = function(x,y) { return Math.round(x+((100-x)*(y/100))); }; // Create a \"decrease\" function setup.fairmath.decrease = function(x,y) { return Math.round(x-(x*(y/100))); }; :: Start decreaseExample: setup.fairmath.decrease(100, 50) increaseExample: setup.fairmath.increase(50, 50) -- Decrease 100 by 50% using Fairmath: Decrease Example: {decreaseExample} Increase 50 by 50% using Fairmath: Increase Example: {increaseExample} Twee Download","title":"Chapbook"},{"location":"fairmath/chapbook/chapbook_fairmath.html#fairmath-system-chapbook-v100","text":"","title":"\"Fairmath System\": Chapbook (v1.0.0)"},{"location":"fairmath/chapbook/chapbook_fairmath.html#summary","text":"\"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on the operation, increasing and decreasing changes the value by a percentage as the difference between the original and adjusted value. This example defines functions in the Story JavaScript, which are then used in the Vars Section of a passage to set values. These are shown using expressions within the text of the passage itself.","title":"Summary"},{"location":"fairmath/chapbook/chapbook_fairmath.html#example","text":"Download","title":"Example"},{"location":"fairmath/chapbook/chapbook_fairmath.html#twee-code","text":":: StoryTitle Chapbook: Fairmath :: UserScript[script] // Create a global object window.setup = window.setup || {}; // Create a fairmath global object window.setup.fairmath = {}; // Create an 'increase' function setup.fairmath.increase = function(x,y) { return Math.round(x+((100-x)*(y/100))); }; // Create a \"decrease\" function setup.fairmath.decrease = function(x,y) { return Math.round(x-(x*(y/100))); }; :: Start decreaseExample: setup.fairmath.decrease(100, 50) increaseExample: setup.fairmath.increase(50, 50) -- Decrease 100 by 50% using Fairmath: Decrease Example: {decreaseExample} Increase 50 by 50% using Fairmath: Increase Example: {increaseExample} Twee Download","title":"Twee Code"},{"location":"fairmath/harlowe/harlowe_fairmath.html","text":"\"Fairmath System\": Harlowe (v2.0) # Summary # \"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increasing and decreasing changes the value by a percentage as the difference between the original and adjusted value. This example uses the (display:) macro in Harlowe to separate operations for increasing and decreasing. Through setting values to adjust, either passage can be included and the $resultValue used to track and store changes. Example # Download Twee Code # :: StoryTitle Fairmath System in Harlowe :: Start <!-- Fairmath formulas based on http://choicescriptdev.wikia.com/wiki/Arithmetic_operators#Fairmath --> <!-- Set an initial value for the story --> (set: $valueToAdjust to 100) The initial value is $valueToAdjust. <!-- Set originalValue to the value to adjust --> (set: $originalValue to $valueToAdjust) <!-- Set the changeValue (percentage) to adjust --> (set: $changeValue to 50) <!-- Display (call) the Fairmath Decrease passage --> (display: \"Decrease\") <!-- The new value will be resultValue --> The adjusted value is $resultValue. <!-- Update valueToAdjust --> (set: $valueToAdjust to $resultValue) <!-- Set originalValue to the value to adjust --> (set: $originalValue to $valueToAdjust) <!-- Set the changeValue (percentage) to adjust --> (set: $changeValue to 100) <!-- Display (call) the Fairmath Increase passage --> (display: \"Increase\") The adjusted value is $resultValue. :: Increase (set: $resultValue to (round: $originalValue+((100-$originalValue)*($changeValue/100))) ) :: Decrease (set: $resultValue to (round: $originalValue-($originalValue*($changeValue/100)) ) ) Twee Download","title":"Harlowe"},{"location":"fairmath/harlowe/harlowe_fairmath.html#fairmath-system-harlowe-v20","text":"","title":"\"Fairmath System\": Harlowe (v2.0)"},{"location":"fairmath/harlowe/harlowe_fairmath.html#summary","text":"\"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increasing and decreasing changes the value by a percentage as the difference between the original and adjusted value. This example uses the (display:) macro in Harlowe to separate operations for increasing and decreasing. Through setting values to adjust, either passage can be included and the $resultValue used to track and store changes.","title":"Summary"},{"location":"fairmath/harlowe/harlowe_fairmath.html#example","text":"Download","title":"Example"},{"location":"fairmath/harlowe/harlowe_fairmath.html#twee-code","text":":: StoryTitle Fairmath System in Harlowe :: Start <!-- Fairmath formulas based on http://choicescriptdev.wikia.com/wiki/Arithmetic_operators#Fairmath --> <!-- Set an initial value for the story --> (set: $valueToAdjust to 100) The initial value is $valueToAdjust. <!-- Set originalValue to the value to adjust --> (set: $originalValue to $valueToAdjust) <!-- Set the changeValue (percentage) to adjust --> (set: $changeValue to 50) <!-- Display (call) the Fairmath Decrease passage --> (display: \"Decrease\") <!-- The new value will be resultValue --> The adjusted value is $resultValue. <!-- Update valueToAdjust --> (set: $valueToAdjust to $resultValue) <!-- Set originalValue to the value to adjust --> (set: $originalValue to $valueToAdjust) <!-- Set the changeValue (percentage) to adjust --> (set: $changeValue to 100) <!-- Display (call) the Fairmath Increase passage --> (display: \"Increase\") The adjusted value is $resultValue. :: Increase (set: $resultValue to (round: $originalValue+((100-$originalValue)*($changeValue/100))) ) :: Decrease (set: $resultValue to (round: $originalValue-($originalValue*($changeValue/100)) ) ) Twee Download","title":"Twee Code"},{"location":"fairmath/snowman/snowman_fairmath.html","text":"\"Fairmath System\": Snowman (v1.3.0) # Summary # \"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increase and decrease changes the value by a percentage as the difference between the original and adjusted value. This example uses functions increase() and decrease() as part of a created global window.setup.fairmath . These can be called through using the Underscore template functionality to define, use, and show the values of the functions in any one passage. Example # Download Twee Code # :: StoryTitle Fairmath in Snowman :: UserScript[script] // Create a global object window.setup = window.setup || {}; // Create a fairmath global object window.setup.fairmath = {}; // Create an 'increase' function setup.fairmath.increase = function(x,y) { return Math.round(x+((100-x)*(y/100))); }; // Create a \"decrease\" function setup.fairmath.decrease = function(x,y) { return Math.round(x-(x*(y/100))); }; :: Start Decrease 100 by 50% using Fairmath: <%= setup.fairmath.decrease(100, 50) %> Increase 50 by 50% using Fairmath: <%= setup.fairmath.increase(50, 50) %> Twee Download","title":"Snowman"},{"location":"fairmath/snowman/snowman_fairmath.html#fairmath-system-snowman-v130","text":"","title":"\"Fairmath System\": Snowman (v1.3.0)"},{"location":"fairmath/snowman/snowman_fairmath.html#summary","text":"\"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increase and decrease changes the value by a percentage as the difference between the original and adjusted value. This example uses functions increase() and decrease() as part of a created global window.setup.fairmath . These can be called through using the Underscore template functionality to define, use, and show the values of the functions in any one passage.","title":"Summary"},{"location":"fairmath/snowman/snowman_fairmath.html#example","text":"Download","title":"Example"},{"location":"fairmath/snowman/snowman_fairmath.html#twee-code","text":":: StoryTitle Fairmath in Snowman :: UserScript[script] // Create a global object window.setup = window.setup || {}; // Create a fairmath global object window.setup.fairmath = {}; // Create an 'increase' function setup.fairmath.increase = function(x,y) { return Math.round(x+((100-x)*(y/100))); }; // Create a \"decrease\" function setup.fairmath.decrease = function(x,y) { return Math.round(x-(x*(y/100))); }; :: Start Decrease 100 by 50% using Fairmath: <%= setup.fairmath.decrease(100, 50) %> Increase 50 by 50% using Fairmath: <%= setup.fairmath.increase(50, 50) %> Twee Download","title":"Twee Code"},{"location":"fairmath/sugarcube/sugarcube_fairmath.html","text":"\"Fairmath System\": SugarCube (v2.18) # Summary # \"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increase and decrease changes the value by a percentage as the difference between the original and adjusted value. This example uses the <<widget>> macro in SugarCube to separate operations for increasing and decreasing. Example # Download Twee Code # :: StoryTitle Fairmath in SugarCube :: Start <!-- Fairmath formulas based on http://choicescriptdev.wikia.com/wiki/Arithmetic_operators#Fairmath --> <<set $valueToAdjust to 100>> The inital value is $valueToAdjust <!-- Call the decrease widget --> <<decrease $valueToAdjust 50>> The adjusted value is $resultValue. <!-- Save the changed value --> <<set $valueToAdjust to $resultValue>> <!-- Call the increase widget --> <<increase $valueToAdjust 100>> The adjusted value is $resultValue. :: Fairmath Operations[widget] <<widget \"increase\">> <<set $resultValue to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >> <</widget>> <<widget \"decrease\">> <<set $resultValue to Math.round($args[0]-($args[0]*($args[1]/100) )) >> <</widget>> Twee Download","title":"SugarCube"},{"location":"fairmath/sugarcube/sugarcube_fairmath.html#fairmath-system-sugarcube-v218","text":"","title":"\"Fairmath System\": SugarCube (v2.18)"},{"location":"fairmath/sugarcube/sugarcube_fairmath.html#summary","text":"\"Fairmath System\" demonstrates how to re-create the Fairmath system found in ChoiceScript . Based on a percentage operation, increase and decrease changes the value by a percentage as the difference between the original and adjusted value. This example uses the <<widget>> macro in SugarCube to separate operations for increasing and decreasing.","title":"Summary"},{"location":"fairmath/sugarcube/sugarcube_fairmath.html#example","text":"Download","title":"Example"},{"location":"fairmath/sugarcube/sugarcube_fairmath.html#twee-code","text":":: StoryTitle Fairmath in SugarCube :: Start <!-- Fairmath formulas based on http://choicescriptdev.wikia.com/wiki/Arithmetic_operators#Fairmath --> <<set $valueToAdjust to 100>> The inital value is $valueToAdjust <!-- Call the decrease widget --> <<decrease $valueToAdjust 50>> The adjusted value is $resultValue. <!-- Save the changed value --> <<set $valueToAdjust to $resultValue>> <!-- Call the increase widget --> <<increase $valueToAdjust 100>> The adjusted value is $resultValue. :: Fairmath Operations[widget] <<widget \"increase\">> <<set $resultValue to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >> <</widget>> <<widget \"decrease\">> <<set $resultValue to Math.round($args[0]-($args[0]*($args[1]/100) )) >> <</widget>> Twee Download","title":"Twee Code"},{"location":"geolocation/chapbook/chapbook_geolocation.html","text":"\"Geolocation\": Chapbook (v1.0.0) # Summary # Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. In this example, the [JavaScript] modifier is used to test for, run, and show data using an alert() from the JavaScript functions. Example # Download Twee Code # :: StoryTitle Chapbook: Geolocation :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[GeoLocation]] :: GeoLocation [JavaScript] if(window.geolocation.available() ) { var geolocation = window.geolocation.getLocation(); alert(\"Latitude: \" + geolocation.latitude + \" Longitude:\" + geolocation.longitude); } [continued] Twee Download","title":"Chapbook"},{"location":"geolocation/chapbook/chapbook_geolocation.html#geolocation-chapbook-v100","text":"","title":"\"Geolocation\": Chapbook (v1.0.0)"},{"location":"geolocation/chapbook/chapbook_geolocation.html#summary","text":"Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. In this example, the [JavaScript] modifier is used to test for, run, and show data using an alert() from the JavaScript functions.","title":"Summary"},{"location":"geolocation/chapbook/chapbook_geolocation.html#example","text":"Download","title":"Example"},{"location":"geolocation/chapbook/chapbook_geolocation.html#twee-code","text":":: StoryTitle Chapbook: Geolocation :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[GeoLocation]] :: GeoLocation [JavaScript] if(window.geolocation.available() ) { var geolocation = window.geolocation.getLocation(); alert(\"Latitude: \" + geolocation.latitude + \" Longitude:\" + geolocation.longitude); } [continued] Twee Download","title":"Twee Code"},{"location":"geolocation/harlowe/harlowe_geolocation.html","text":"\"Geolocation\": Harlowe (v2.0) # Summary # Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. Harlowe does not have an easy way to bridge the gap between its macros and JavaScript. In this example, the <script> element is used to test for, run, and show an alert() with data from the JavaScript functions. Example # Download Twee Code # :: StoryTitle Geolocation in Harlowe :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[Ask for permission]] :: Ask for permission <script> if(window.geolocation.available() ) { var geolocation = window.geolocation.getLocation(); alert(\"Latitude: \" + geolocation.latitude + \" Longitude:\" + geolocation.longitude); } </script> Twee Download","title":"Harlowe"},{"location":"geolocation/harlowe/harlowe_geolocation.html#geolocation-harlowe-v20","text":"","title":"\"Geolocation\": Harlowe (v2.0)"},{"location":"geolocation/harlowe/harlowe_geolocation.html#summary","text":"Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. Harlowe does not have an easy way to bridge the gap between its macros and JavaScript. In this example, the <script> element is used to test for, run, and show an alert() with data from the JavaScript functions.","title":"Summary"},{"location":"geolocation/harlowe/harlowe_geolocation.html#example","text":"Download","title":"Example"},{"location":"geolocation/harlowe/harlowe_geolocation.html#twee-code","text":":: StoryTitle Geolocation in Harlowe :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[Ask for permission]] :: Ask for permission <script> if(window.geolocation.available() ) { var geolocation = window.geolocation.getLocation(); alert(\"Latitude: \" + geolocation.latitude + \" Longitude:\" + geolocation.longitude); } </script> Twee Download","title":"Twee Code"},{"location":"geolocation/snowman/snowman_geolocation.html","text":"\"Geolocation\": Snowman (v1.3.0) # Summary # Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. This example uses Underscore template functionality to test for and show the values of properties storied in the s global variable in Snowman. Example # Download Twee Code # :: StoryTitle Geolocation in Snowman :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[Ask for permission]] :: Show results Is geolocation available? <%= window.geolocation.available() %> <% if(window.geolocation.available()) { s.location = window.geolocation.getLocation(); } %> If so, what is the current location? Latitude: <%= s.location.latitude %> Longitude: <%= s.location.longitude %> Are we in the approximate location of Stonehenge (51.1788853, -1.828409)? Latitude: <%= window.geolocation.approximateLocation(s.location.latitude, 51.1788853) %> Longitude: <%= window.geolocation.approximateLocation(s.location.longitude, -1.828409) %> :: Ask for permission <% if(window.geolocation.available()) { s.location = window.geolocation.getLocation(); } %> [[Show results]] Twee Download","title":"Snowman"},{"location":"geolocation/snowman/snowman_geolocation.html#geolocation-snowman-v130","text":"","title":"\"Geolocation\": Snowman (v1.3.0)"},{"location":"geolocation/snowman/snowman_geolocation.html#summary","text":"Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. This example uses Underscore template functionality to test for and show the values of properties storied in the s global variable in Snowman.","title":"Summary"},{"location":"geolocation/snowman/snowman_geolocation.html#example","text":"Download","title":"Example"},{"location":"geolocation/snowman/snowman_geolocation.html#twee-code","text":":: StoryTitle Geolocation in Snowman :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start [[Ask for permission]] :: Show results Is geolocation available? <%= window.geolocation.available() %> <% if(window.geolocation.available()) { s.location = window.geolocation.getLocation(); } %> If so, what is the current location? Latitude: <%= s.location.latitude %> Longitude: <%= s.location.longitude %> Are we in the approximate location of Stonehenge (51.1788853, -1.828409)? Latitude: <%= window.geolocation.approximateLocation(s.location.latitude, 51.1788853) %> Longitude: <%= window.geolocation.approximateLocation(s.location.longitude, -1.828409) %> :: Ask for permission <% if(window.geolocation.available()) { s.location = window.geolocation.getLocation(); } %> [[Show results]] Twee Download","title":"Twee Code"},{"location":"geolocation/sugarcube/sugarcube_geolocation.html","text":"\"Geolocation\": SugarCube (v2.18) # Summary # Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. This example uses <<linkreplace>> and <<script>> macros to run JavaScript in passages in SugarCube. The State.variables object is used to store the results of running JavaScript functions and using those values in TwineScript. Example # Download Twee Code # :: StoryTitle Geolocation in SugarCube :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start <<linkreplace \"Ask for permission\">> <<script>> State.variables.geoLocationAvailable = window.geolocation.available(); if(window.geolocation.available()) { State.variables.location = window.geolocation.getLocation(); } <</script>> [[Show results]] <</linkreplace>> :: Show results <<script>> State.variables.geoLocationAvailable = window.geolocation.available(); if(window.geolocation.available()) { State.variables.location = window.geolocation.getLocation(); } <</script>> Is geolocation available? $geoLocationAvailable If so, what is the current location? Latitude: $location.latitude Longitude: $location.longitude Are we in the approximate location of Stonehenge (51.1788853, -1.828409)? <<set $approxLat to window.geolocation.approximateLocation(State.variables.location.latitude, 51.1788853) >> <<set $approxLong to window.geolocation.approximateLocation(State.variables.location.longitude, -1.828409) >> Latitude: $approxLat Longitude: $approxLong Twee Download","title":"SugarCube"},{"location":"geolocation/sugarcube/sugarcube_geolocation.html#geolocation-sugarcube-v218","text":"","title":"\"Geolocation\": SugarCube (v2.18)"},{"location":"geolocation/sugarcube/sugarcube_geolocation.html#summary","text":"Many browsers allow access to the current location through the Geolocation property and associated functions. This functionality is subject to the user agreeing to allow access. Until the functionality is unlocked, or if the user declines, default values will be returned. Functionality availability and their results should always be tested against other location services or information. Most browsers will return results through the fastest and sometimes least-accurate methods possible. This example uses <<linkreplace>> and <<script>> macros to run JavaScript in passages in SugarCube. The State.variables object is used to store the results of running JavaScript functions and using those values in TwineScript.","title":"Summary"},{"location":"geolocation/sugarcube/sugarcube_geolocation.html#example","text":"Download","title":"Example"},{"location":"geolocation/sugarcube/sugarcube_geolocation.html#twee-code","text":":: StoryTitle Geolocation in SugarCube :: UserScript[script] (function () { window.geolocation = { available: function() { return (\"geolocation\" in navigator && typeof navigator.geolocation.getCurrentPosition === \"function\"); }, getLocation: function() { // Create initial values var location = { latitude : 0, longitude : 0 }; // Create success callback to store values var positionSuccess = function (position) { location.latitude = position.coords.latitude; location.longitude = position.coords.longitude; }; // Create error callback var positionError = function (error) { /* Code that handles errors */ }; // Create initial options var positionOptions = { timeout: 31000, enableHighAccuracy: true, maximumAge : 120000 }; // Ask for location based on callbacks and options navigator.geolocation.getCurrentPosition( positionSuccess, positionError, positionOptions ); // Return location found // If not location, will return initial (0,0) values return location; }, approximateLocation: function (a, b, allowedDiff) { // allowedDiff must always be > 0 if (a === b) { // handles various \"exact\" edge cases return true; } allowedDiff = allowedDiff || 0.0005; return Math.abs(a - b) < allowedDiff; } }; }()); :: Start <<linkreplace \"Ask for permission\">> <<script>> State.variables.geoLocationAvailable = window.geolocation.available(); if(window.geolocation.available()) { State.variables.location = window.geolocation.getLocation(); } <</script>> [[Show results]] <</linkreplace>> :: Show results <<script>> State.variables.geoLocationAvailable = window.geolocation.available(); if(window.geolocation.available()) { State.variables.location = window.geolocation.getLocation(); } <</script>> Is geolocation available? $geoLocationAvailable If so, what is the current location? Latitude: $location.latitude Longitude: $location.longitude Are we in the approximate location of Stonehenge (51.1788853, -1.828409)? <<set $approxLat to window.geolocation.approximateLocation(State.variables.location.latitude, 51.1788853) >> <<set $approxLong to window.geolocation.approximateLocation(State.variables.location.longitude, -1.828409) >> Latitude: $approxLat Longitude: $approxLong Twee Download","title":"Twee Code"},{"location":"googlefonts/chapbook/chapbook_googlefonts.html","text":"\"Google Fonts\": Chapbook (v1.0.0) # Summary # Chapbook provides a global variable, config.style.googleFont , that can be used within the Vars Section to load and use an external font . Live Example # Download Twee Code # :: StoryTitle Chapbook: Google Fonts :: Start config.style.googleFont: '<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">' config.style.page.font: 'Roboto' -- This text is styled by a Google Font. Twee Download","title":"Chapbook"},{"location":"googlefonts/chapbook/chapbook_googlefonts.html#google-fonts-chapbook-v100","text":"","title":"\"Google Fonts\": Chapbook (v1.0.0)"},{"location":"googlefonts/chapbook/chapbook_googlefonts.html#summary","text":"Chapbook provides a global variable, config.style.googleFont , that can be used within the Vars Section to load and use an external font .","title":"Summary"},{"location":"googlefonts/chapbook/chapbook_googlefonts.html#live-example","text":"Download","title":"Live Example"},{"location":"googlefonts/chapbook/chapbook_googlefonts.html#twee-code","text":":: StoryTitle Chapbook: Google Fonts :: Start config.style.googleFont: '<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">' config.style.page.font: 'Roboto' -- This text is styled by a Google Font. Twee Download","title":"Twee Code"},{"location":"googlefonts/harlowe/harlowe_googlefonts.html","text":"\"Google Fonts\": Harlowe (v2.0) # Summary # \"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. The loaded font is then applied to selected text using the (font:) macro. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way. Example # Download Twee Code # :: StoryTitle Harlowe: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); :: Start (font:\"Roboto\")[This text is styled by a Google Font] Twee Download","title":"Harlowe"},{"location":"googlefonts/harlowe/harlowe_googlefonts.html#google-fonts-harlowe-v20","text":"","title":"\"Google Fonts\": Harlowe (v2.0)"},{"location":"googlefonts/harlowe/harlowe_googlefonts.html#summary","text":"\"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. The loaded font is then applied to selected text using the (font:) macro. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way.","title":"Summary"},{"location":"googlefonts/harlowe/harlowe_googlefonts.html#example","text":"Download","title":"Example"},{"location":"googlefonts/harlowe/harlowe_googlefonts.html#twee-code","text":":: StoryTitle Harlowe: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); :: Start (font:\"Roboto\")[This text is styled by a Google Font] Twee Download","title":"Twee Code"},{"location":"googlefonts/snowman/snowman_googlefonts.html","text":"\"Google Fonts\": Snowman (v1.3) # Summary # \"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way. Example # Download Twee Code # :: StoryTitle Snowman: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Twee Download","title":"Snowman"},{"location":"googlefonts/snowman/snowman_googlefonts.html#google-fonts-snowman-v13","text":"","title":"\"Google Fonts\": Snowman (v1.3)"},{"location":"googlefonts/snowman/snowman_googlefonts.html#summary","text":"\"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way.","title":"Summary"},{"location":"googlefonts/snowman/snowman_googlefonts.html#example","text":"Download","title":"Example"},{"location":"googlefonts/snowman/snowman_googlefonts.html#twee-code","text":":: StoryTitle Snowman: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Twee Download","title":"Twee Code"},{"location":"googlefonts/sugarcane/sugarcane_googlefonts.html","text":"\"Google Fonts\": Sugarcane (v1.4.2) # Warning The following example is designed for Twine 1.4.2. Summary # \"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way. Example # Download Twee Code # :: StoryTitle Responsive: Google Fonts :: StoryAuthor @videlais :: StoryStylesheet [stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Twee Download","title":"Sugarcane (1.4.2)"},{"location":"googlefonts/sugarcane/sugarcane_googlefonts.html#google-fonts-sugarcane-v142","text":"Warning The following example is designed for Twine 1.4.2.","title":"\"Google Fonts\": Sugarcane (v1.4.2)"},{"location":"googlefonts/sugarcane/sugarcane_googlefonts.html#summary","text":"\"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way.","title":"Summary"},{"location":"googlefonts/sugarcane/sugarcane_googlefonts.html#example","text":"Download","title":"Example"},{"location":"googlefonts/sugarcane/sugarcane_googlefonts.html#twee-code","text":":: StoryTitle Responsive: Google Fonts :: StoryAuthor @videlais :: StoryStylesheet [stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Twee Download","title":"Twee Code"},{"location":"googlefonts/sugarcube/sugarcube_googlefonts.html","text":"\"Google Fonts\": SugarCube (v2.18) # Summary # \"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way. Example # Download Twee Code # :: StoryTitle SugarCube: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Twee Download","title":"SugarCube"},{"location":"googlefonts/sugarcube/sugarcube_googlefonts.html#google-fonts-sugarcube-v218","text":"","title":"\"Google Fonts\": SugarCube (v2.18)"},{"location":"googlefonts/sugarcube/sugarcube_googlefonts.html#summary","text":"\"Google Fonts\" uses a Google Font loaded via the CSS @import at-rule. A class style rule (\"message\") is then created using the imported font-family and applied to a <div> element within a single passage. Other Google Fonts could be imported and applied using the same method, creating new class or ID style rules to be applied for and across different HTML elements in the same way.","title":"Summary"},{"location":"googlefonts/sugarcube/sugarcube_googlefonts.html#example","text":"Download","title":"Example"},{"location":"googlefonts/sugarcube/sugarcube_googlefonts.html#twee-code","text":":: StoryTitle SugarCube: Google Fonts :: StoryStylesheet[stylesheet] @import url('https://fonts.googleapis.com/css?family=Roboto'); .message { font-family: 'Roboto', sans-serif; } :: Start <div class=\"message\">This text is styled using a Google Font</div> Twee Download","title":"Twee Code"},{"location":"headersandfooters/chapbook/chapbook_headersandfooters.html","text":"\"Headers and Footers\": Chapbook (v1.0.0) # Summary # Chapbook provides two global variables, config.header and config.footer , that each have the properties left , right , and center . When set, these properties show their content as the header or footer in the particular position matching its property name. Example # Download Twee Code # :: StoryTitle Chapbook: Header and Footer :: Start config.header.center: \"This is the header!\" config.footer.center: \"This is the footer!\" -- This is content. Twee Download","title":"Chapbook"},{"location":"headersandfooters/chapbook/chapbook_headersandfooters.html#headers-and-footers-chapbook-v100","text":"","title":"\"Headers and Footers\": Chapbook (v1.0.0)"},{"location":"headersandfooters/chapbook/chapbook_headersandfooters.html#summary","text":"Chapbook provides two global variables, config.header and config.footer , that each have the properties left , right , and center . When set, these properties show their content as the header or footer in the particular position matching its property name.","title":"Summary"},{"location":"headersandfooters/chapbook/chapbook_headersandfooters.html#example","text":"Download","title":"Example"},{"location":"headersandfooters/chapbook/chapbook_headersandfooters.html#twee-code","text":":: StoryTitle Chapbook: Header and Footer :: Start config.header.center: \"This is the header!\" config.footer.center: \"This is the footer!\" -- This is content. Twee Download","title":"Twee Code"},{"location":"headersandfooters/harlowe/harlowe_headersandfooters.html","text":"\"Headers and Footers\": Harlowe (v2.0) # Summary # \"Headers and Footers\" demonstrates the use of the \"header\" and \"footer\" passage tags . When used in passages, they are either prepended (header) or appended (footer) to every passage. Multiple passages can have the tags and are loaded alphabetically when detected. Example # Download Twee Code # :: StoryTitle Harlowe: Headers and Footers :: Start This is content between the header and the footer. :: Header[header] This is the header! :: Footer[footer] This is the footer! Twee Download","title":"Harlowe"},{"location":"headersandfooters/harlowe/harlowe_headersandfooters.html#headers-and-footers-harlowe-v20","text":"","title":"\"Headers and Footers\": Harlowe (v2.0)"},{"location":"headersandfooters/harlowe/harlowe_headersandfooters.html#summary","text":"\"Headers and Footers\" demonstrates the use of the \"header\" and \"footer\" passage tags . When used in passages, they are either prepended (header) or appended (footer) to every passage. Multiple passages can have the tags and are loaded alphabetically when detected.","title":"Summary"},{"location":"headersandfooters/harlowe/harlowe_headersandfooters.html#example","text":"Download","title":"Example"},{"location":"headersandfooters/harlowe/harlowe_headersandfooters.html#twee-code","text":":: StoryTitle Harlowe: Headers and Footers :: Start This is content between the header and the footer. :: Header[header] This is the header! :: Footer[footer] This is the footer! Twee Download","title":"Twee Code"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html","text":"\"Headers and Footers\": Snowman (v1.3) # Summary # \"Headers and Footers\" demonstrates the use of the window.story.render() function to return the HTML contents of another passage. Combined with Underscore template functionality , the content of passages can be \"displayed\" in others. Because Snowman does not have pre-defined 'header' or 'footer' functionality, using these two different methods together can create the same result. However, the code would need to be included on any additional passages to continue the effect. Example # Download Twee Code # :: StoryTitle Snowman: Headers and Footers :: Start <%= window.story.render(\"Header\") %> This content is between the header and the footer. <%= window.story.render(\"Footer\") %> :: Header This is the header! :: Footer This is the footer! Twee Download See Also # Passage Events","title":"Snowman"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html#headers-and-footers-snowman-v13","text":"","title":"\"Headers and Footers\": Snowman (v1.3)"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html#summary","text":"\"Headers and Footers\" demonstrates the use of the window.story.render() function to return the HTML contents of another passage. Combined with Underscore template functionality , the content of passages can be \"displayed\" in others. Because Snowman does not have pre-defined 'header' or 'footer' functionality, using these two different methods together can create the same result. However, the code would need to be included on any additional passages to continue the effect.","title":"Summary"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html#example","text":"Download","title":"Example"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html#twee-code","text":":: StoryTitle Snowman: Headers and Footers :: Start <%= window.story.render(\"Header\") %> This content is between the header and the footer. <%= window.story.render(\"Footer\") %> :: Header This is the header! :: Footer This is the footer! Twee Download","title":"Twee Code"},{"location":"headersandfooters/snowman/snowman_headersandfooters.html#see-also","text":"Passage Events","title":"See Also"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html","text":"\"Headers and Footers\": Sugarcube (v2.18) # Summary # \"Headers and Footers\" demonstrates the use of \" PassageHeader \" and \" PassageFooter \" special names for passages. When these special names are used, the 'Header' is prepended and the 'Footer' name is appended to all passages. Example # Download Twee Code # :: StoryTitle SugarCube: Headers and Footers :: Start This is content between the header and the footer. :: PassageHeader This is the header! :: PassageFooter This is the footer! Twee Download See Also # Passage Events","title":"SugarCube"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html#headers-and-footers-sugarcube-v218","text":"","title":"\"Headers and Footers\": Sugarcube (v2.18)"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html#summary","text":"\"Headers and Footers\" demonstrates the use of \" PassageHeader \" and \" PassageFooter \" special names for passages. When these special names are used, the 'Header' is prepended and the 'Footer' name is appended to all passages.","title":"Summary"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html#example","text":"Download","title":"Example"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html#twee-code","text":":: StoryTitle SugarCube: Headers and Footers :: Start This is content between the header and the footer. :: PassageHeader This is the header! :: PassageFooter This is the footer! Twee Download","title":"Twee Code"},{"location":"headersandfooters/sugarcube/sugarcube_headersandfooters.html#see-also","text":"Passage Events","title":"See Also"},{"location":"hiddenlink/harlowe/harlowe_hiddenlink.html","text":"\"Hidden Link\": Harlowe (v2.0) # Summary # \"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events. The use of a \"footer\" special Passage is also used to run the required JavaScript after each passage is displayed. Harlowe supports a number of different techniques for creating links and the resulting HTML elements generated is different for each of these techniques. The generated HTML falls into two main groups: those that include a <<tw-link>> element, and those that include a \".enchantment-link\" classed element. This example supports both groups. Example # Download Twee Code # :: StoryTitle Harlowe: Hidden Link :: UserStylesheet [stylesheet] .hidden tw-link, .hidden .enchantment-link { color: transparent; } tw-include[title=\"Hidden Link Setup\"] { display: none; } :: Hidden Link Setup [footer] <script> /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); </script> :: Start ''Examples of tw-link element based links'' A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> ''Examples of .enchantment-link CSS class based links'' A hidden link that's always hidden: <span class=\"hidden\">[A hidden link]<link|</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[A hidden link]<link|</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[A hidden link]<link|</span> (click: ?link)[(go-to: \"A hidden link\")] :: A hidden link You found it! Twee Download","title":"Harlowe"},{"location":"hiddenlink/harlowe/harlowe_hiddenlink.html#hidden-link-harlowe-v20","text":"","title":"\"Hidden Link\": Harlowe (v2.0)"},{"location":"hiddenlink/harlowe/harlowe_hiddenlink.html#summary","text":"\"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events. The use of a \"footer\" special Passage is also used to run the required JavaScript after each passage is displayed. Harlowe supports a number of different techniques for creating links and the resulting HTML elements generated is different for each of these techniques. The generated HTML falls into two main groups: those that include a <<tw-link>> element, and those that include a \".enchantment-link\" classed element. This example supports both groups.","title":"Summary"},{"location":"hiddenlink/harlowe/harlowe_hiddenlink.html#example","text":"Download","title":"Example"},{"location":"hiddenlink/harlowe/harlowe_hiddenlink.html#twee-code","text":":: StoryTitle Harlowe: Hidden Link :: UserStylesheet [stylesheet] .hidden tw-link, .hidden .enchantment-link { color: transparent; } tw-include[title=\"Hidden Link Setup\"] { display: none; } :: Hidden Link Setup [footer] <script> /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); </script> :: Start ''Examples of tw-link element based links'' A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> ''Examples of .enchantment-link CSS class based links'' A hidden link that's always hidden: <span class=\"hidden\">[A hidden link]<link|</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[A hidden link]<link|</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[A hidden link]<link|</span> (click: ?link)[(go-to: \"A hidden link\")] :: A hidden link You found it! Twee Download","title":"Twee Code"},{"location":"hiddenlink/snowman/snowman_hiddenlink.html","text":"\"Hidden Link\": Snowman (v1.3.0) # Summary # \"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events. Example # Download Twee Code # :: StoryTitle Snowman: Hidden Link :: UserScript[script] $(function () { /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); }); :: UserStylesheet[stylesheet] .hidden a { color: transparent; /* By default links in Snowman have a border */ border-bottom: 0px; } :: Start A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> :: A hidden link You found it! Twee Download","title":"Snowman"},{"location":"hiddenlink/snowman/snowman_hiddenlink.html#hidden-link-snowman-v130","text":"","title":"\"Hidden Link\": Snowman (v1.3.0)"},{"location":"hiddenlink/snowman/snowman_hiddenlink.html#summary","text":"\"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events.","title":"Summary"},{"location":"hiddenlink/snowman/snowman_hiddenlink.html#example","text":"Download","title":"Example"},{"location":"hiddenlink/snowman/snowman_hiddenlink.html#twee-code","text":":: StoryTitle Snowman: Hidden Link :: UserScript[script] $(function () { /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); }); :: UserStylesheet[stylesheet] .hidden a { color: transparent; /* By default links in Snowman have a border */ border-bottom: 0px; } :: Start A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> :: A hidden link You found it! Twee Download","title":"Twee Code"},{"location":"hiddenlink/sugarcube/sugarcube_hiddenlink.html","text":"\"Hidden Link\": SugarCube (v2.18) # Summary # \"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events. The use of the postdisplay functionality is also used to run JavaScript after each passage is displayed. Example # Download Twee Code # :: StoryTitle SugarCube: Hidden Link :: UserScript[script] postdisplay['hidden-link-setup'] = function () { /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); }; :: UserStylesheet[stylesheet] .hidden a { color: transparent; } :: Start A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> :: A hidden link You found it! Twee Download","title":"SugarCube"},{"location":"hiddenlink/sugarcube/sugarcube_hiddenlink.html#hidden-link-sugarcube-v218","text":"","title":"\"Hidden Link\": SugarCube (v2.18)"},{"location":"hiddenlink/sugarcube/sugarcube_hiddenlink.html#summary","text":"\"Hidden Link\" demonstrates how to create a 'hidden' link that is only revealed when the cursor passes over it. Using CSS and JavaScript, a rule is created for transparent color and applied or removed through using jQuery's on() function with 'mouseenter' and 'mouseleave' events. The use of the postdisplay functionality is also used to run JavaScript after each passage is displayed.","title":"Summary"},{"location":"hiddenlink/sugarcube/sugarcube_hiddenlink.html#example","text":"Download","title":"Example"},{"location":"hiddenlink/sugarcube/sugarcube_hiddenlink.html#twee-code","text":":: StoryTitle SugarCube: Hidden Link :: UserScript[script] postdisplay['hidden-link-setup'] = function () { /* Hidden links that are always hidden: <span class=\"hidden\">[[A hidden link]]</span> */ $('.hidden') .addClass('hidden'); /* Hidden links that hide unless you're hovering over them: <span class=\"hides\">[[A hidden link]]</span> */ $('.hides') .addClass('hidden') .on('mouseenter', function () { $(this).removeClass('hidden'); }) .on('mouseleave', function () { $(this).addClass('hidden'); }); /* Hidden links that reveal themselves when you hover over them: <span class=\"reveals\">[[A hidden link]]</span> */ $('.reveals') .addClass('hidden') .one('mouseenter', function () { $(this).removeClass('hidden'); }); }; :: UserStylesheet[stylesheet] .hidden a { color: transparent; } :: Start A hidden link that's always hidden: <span class=\"hidden\">[[A hidden link]]</span> A hidden link that hides unless you're hovering over it: <span class=\"hides\">[[A hidden link]]</span> A hidden link that reveals itself when you hover over it: <span class=\"reveals\">[[A hidden link]]</span> :: A hidden link You found it! Twee Download","title":"Twee Code"},{"location":"html/reviewing.html","text":"Reviewing HTML # HyperText Markup Language (HTML) describes the structure of document. The language has a series of elements that \"markup\" content to define how it is presented and arranged. Elements # HTML documents start with a <html> element. It has an opening tag and closing tag . < html ></ html > An opening tag begins with a less-than sign, < , the name of the element, and greater-than sign, > . Following the opening tag is any content that is part of the element. It ends with a closing tag, a less-than sign, < , a backslash, / , the name of the element, and a greater-than sign, > . Opening Tag: <html> Content: Closing Tag </html> Elements exist in connection to each other in a parent and child relationship. < html > < body ></ body > </ html > If one or more elements are content inside an element, it is their parent . Parent: <html> Children: <body> Head and Body # HTML documents start with <html> . This element has two children: <head> and <body> . Head # The <head> element contains information about the document such as its title, author, and other details about the document. < html > < head > < title > Example Document! </ title > </ head > </ html > Body # The <body> element contains the content of a document. Anything that is part of the document and not a child of the <head> will be in the <body> element. < html > < body ></ body > </ html > Common HTML Elements # The most current version of HTML allows for new elements to be added and used in a document without issue. However, there are many common HTML elements defined in earlier versions and frequently used to structure documents. <p> : Paragraph element, <p> , is most commonly used to store large groups of text. <strong> : Strong emphasis, <strong> , gives a strong emphasis to its content. <em> : Emphasis, <em> , gives an emphasis to its content. <div> : Division, <div> , \"divides\" up a document. It is very common to use <div> elements to logically separate content in a larger document. <a> : Anchor element. Hyperlinks are created through using anchors , <a> . Attributes # All elements have access to attributes . Inside of the opening tag of an element, values can be used to configure or adjust how the element is displayed or understood. Attributes are written in a property=\"value\" format where the property is assigned a \"value\" inside of quotation marks. < a href = \"https://www.google.com/\" > Link to Google </ a > The most common attribute is href (hyper-reference) as used with <a> . It defines what the hyperlink links to from the anchor. However, there is a large number of possible attributes . id # All elements can use the id attribute. It should be a unique value within the document. It's an identification . < div id = \"example\" > Content </ div > When working with CSS, using the id attribute also allows its unique value to be \"selected\" and styled in certain ways. class # All elements can use the class attribute. It can be a repeating value within the document. It's a classification that can be used across multiple elements. < div class = \"example\" > Content </ div > When working with CSS, using the class attribute also allows its value to be used multiple times. Using HTML in Twine # HTML elements like <p> can be used inside of passages in Twine. In fact, all story formats support using elements to better structure content.","title":"Reviewing HTML"},{"location":"html/reviewing.html#reviewing-html","text":"HyperText Markup Language (HTML) describes the structure of document. The language has a series of elements that \"markup\" content to define how it is presented and arranged.","title":"Reviewing HTML"},{"location":"html/reviewing.html#elements","text":"HTML documents start with a <html> element. It has an opening tag and closing tag . < html ></ html > An opening tag begins with a less-than sign, < , the name of the element, and greater-than sign, > . Following the opening tag is any content that is part of the element. It ends with a closing tag, a less-than sign, < , a backslash, / , the name of the element, and a greater-than sign, > . Opening Tag: <html> Content: Closing Tag </html> Elements exist in connection to each other in a parent and child relationship. < html > < body ></ body > </ html > If one or more elements are content inside an element, it is their parent . Parent: <html> Children: <body>","title":"Elements"},{"location":"html/reviewing.html#head-and-body","text":"HTML documents start with <html> . This element has two children: <head> and <body> .","title":"Head and Body"},{"location":"html/reviewing.html#head","text":"The <head> element contains information about the document such as its title, author, and other details about the document. < html > < head > < title > Example Document! </ title > </ head > </ html >","title":"Head"},{"location":"html/reviewing.html#body","text":"The <body> element contains the content of a document. Anything that is part of the document and not a child of the <head> will be in the <body> element. < html > < body ></ body > </ html >","title":"Body"},{"location":"html/reviewing.html#common-html-elements","text":"The most current version of HTML allows for new elements to be added and used in a document without issue. However, there are many common HTML elements defined in earlier versions and frequently used to structure documents. <p> : Paragraph element, <p> , is most commonly used to store large groups of text. <strong> : Strong emphasis, <strong> , gives a strong emphasis to its content. <em> : Emphasis, <em> , gives an emphasis to its content. <div> : Division, <div> , \"divides\" up a document. It is very common to use <div> elements to logically separate content in a larger document. <a> : Anchor element. Hyperlinks are created through using anchors , <a> .","title":"Common HTML Elements"},{"location":"html/reviewing.html#attributes","text":"All elements have access to attributes . Inside of the opening tag of an element, values can be used to configure or adjust how the element is displayed or understood. Attributes are written in a property=\"value\" format where the property is assigned a \"value\" inside of quotation marks. < a href = \"https://www.google.com/\" > Link to Google </ a > The most common attribute is href (hyper-reference) as used with <a> . It defines what the hyperlink links to from the anchor. However, there is a large number of possible attributes .","title":"Attributes"},{"location":"html/reviewing.html#id","text":"All elements can use the id attribute. It should be a unique value within the document. It's an identification . < div id = \"example\" > Content </ div > When working with CSS, using the id attribute also allows its unique value to be \"selected\" and styled in certain ways.","title":"id"},{"location":"html/reviewing.html#class","text":"All elements can use the class attribute. It can be a repeating value within the document. It's a classification that can be used across multiple elements. < div class = \"example\" > Content </ div > When working with CSS, using the class attribute also allows its value to be used multiple times.","title":"class"},{"location":"html/reviewing.html#using-html-in-twine","text":"HTML elements like <p> can be used inside of passages in Twine. In fact, all story formats support using elements to better structure content.","title":"Using HTML in Twine"},{"location":"html/storyformats/chapbook.html","text":"Chapbook HTML # Chapbook uses a variety of HTML elements and attributes to organize its stories. The following is a snapshot of a Chapbook story for reference and archival purposes. < form id = \"cb-validation\" action = \"javascript:void(0)\" > < button id = \"cb-validation-tester\" hidden = \"\" ></ button > < button id = \"cb-block-enter-key\" hidden = \"\" ></ button > < div id = \"backdrop\" > < div id = \"page\" aria-live = \"polite\" > < header > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ header > < article style = \"position: relative;\" > < div class = \"\" style = \"\" > < p > Double-click this passage to edit it. </ p > </ div > </ article > < ul class = \"warnings\" hidden = \"\" ></ ul > < footer class = \"has-content\" > < div class = \"left\" > < p > < em > Chapbook HTML </ em > </ p > </ div > < div class = \"center\" ></ div > < div class = \"right\" > < p > < a href = \"javascript:void(0)\" data-cb-restart = \"true\" > Restart </ a > </ p > </ div > </ footer > < div id = \"spinner\" > < img src = \"data:image/svg+xml...\" width = \"40\" height = \"40\" alt = \"\" > </ div > </ div > </ div > </ form >","title":"Chapbook"},{"location":"html/storyformats/chapbook.html#chapbook-html","text":"Chapbook uses a variety of HTML elements and attributes to organize its stories. The following is a snapshot of a Chapbook story for reference and archival purposes. < form id = \"cb-validation\" action = \"javascript:void(0)\" > < button id = \"cb-validation-tester\" hidden = \"\" ></ button > < button id = \"cb-block-enter-key\" hidden = \"\" ></ button > < div id = \"backdrop\" > < div id = \"page\" aria-live = \"polite\" > < header > < div class = \"left\" ></ div > < div class = \"center\" ></ div > < div class = \"right\" ></ div > </ header > < article style = \"position: relative;\" > < div class = \"\" style = \"\" > < p > Double-click this passage to edit it. </ p > </ div > </ article > < ul class = \"warnings\" hidden = \"\" ></ ul > < footer class = \"has-content\" > < div class = \"left\" > < p > < em > Chapbook HTML </ em > </ p > </ div > < div class = \"center\" ></ div > < div class = \"right\" > < p > < a href = \"javascript:void(0)\" data-cb-restart = \"true\" > Restart </ a > </ p > </ div > </ footer > < div id = \"spinner\" > < img src = \"data:image/svg+xml...\" width = \"40\" height = \"40\" alt = \"\" > </ div > </ div > </ div > </ form >","title":"Chapbook HTML"},{"location":"html/storyformats/harlowe.html","text":"Harlowe HTML # Harlowe uses a variety of HTML elements and attributes to organize its stories. The following are snapshots of HTML element differences between major versions in Harlowe. Harlowe 1.X # < tw-story > < tw-passage > < tw-sidebar > < tw-icon tabindex = \"0\" class = \"undo\" title = \"Undo\" style = \"visibility: hidden;\" > \u21b6 </ tw-icon > < tw-icon tabindex = \"0\" class = \"redo\" title = \"Redo\" style = \"visibility: hidden;\" > \u21b7 </ tw-icon > </ tw-sidebar > < tw-expression type = \"macro\" name = \"link-goto\" > < tw-link tabindex = \"0\" passage-name = \"Another\" data-raw = \"\" > Another </ tw-link > </ tw-expression > </ tw-passage > </ tw-story > Harlowe 2.X # < tw-story tags = \"\" > < tw-passage tags = \"\" > < tw-sidebar > < tw-icon tabindex = \"0\" class = \"undo\" title = \"Undo\" style = \"visibility: hidden;\" > \u21b6 </ tw-icon > < tw-icon tabindex = \"0\" class = \"redo\" title = \"Redo\" style = \"visibility: hidden;\" > \u21b7 </ tw-icon > </ tw-sidebar > < tw-expression type = \"macro\" name = \"link-goto\" > < tw-link tabindex = \"0\" passage-name = \"Another\" data-raw = \"\" > Another </ tw-link > </ tw-expression > </ tw-passage > </ tw-story > Harlowe 3.X # < tw-story tags = \"\" > < tw-passage tags = \"\" > < tw-sidebar > < tw-icon tabindex = \"0\" class = \"undo\" title = \"Undo\" style = \"visibility: hidden;\" > \u21b6 </ tw-icon > < tw-icon tabindex = \"0\" class = \"redo\" title = \"Redo\" style = \"visibility: hidden;\" > \u21b7 </ tw-icon > </ tw-sidebar > < tw-expression type = \"macro\" name = \"link-goto\" > < tw-link tabindex = \"0\" data-raw = \"\" > Another </ tw-link > </ tw-expression > </ tw-passage > </ tw-story >","title":"Harlowe"},{"location":"html/storyformats/harlowe.html#harlowe-html","text":"Harlowe uses a variety of HTML elements and attributes to organize its stories. The following are snapshots of HTML element differences between major versions in Harlowe.","title":"Harlowe HTML"},{"location":"html/storyformats/harlowe.html#harlowe-1x","text":"< tw-story > < tw-passage > < tw-sidebar > < tw-icon tabindex = \"0\" class = \"undo\" title = \"Undo\" style = \"visibility: hidden;\" > \u21b6 </ tw-icon > < tw-icon tabindex = \"0\" class = \"redo\" title = \"Redo\" style = \"visibility: hidden;\" > \u21b7 </ tw-icon > </ tw-sidebar > < tw-expression type = \"macro\" name = \"link-goto\" > < tw-link tabindex = \"0\" passage-name = \"Another\" data-raw = \"\" > Another </ tw-link > </ tw-expression > </ tw-passage > </ tw-story >","title":"Harlowe 1.X"},{"location":"html/storyformats/harlowe.html#harlowe-2x","text":"< tw-story tags = \"\" > < tw-passage tags = \"\" > < tw-sidebar > < tw-icon tabindex = \"0\" class = \"undo\" title = \"Undo\" style = \"visibility: hidden;\" > \u21b6 </ tw-icon > < tw-icon tabindex = \"0\" class = \"redo\" title = \"Redo\" style = \"visibility: hidden;\" > \u21b7 </ tw-icon > </ tw-sidebar > < tw-expression type = \"macro\" name = \"link-goto\" > < tw-link tabindex = \"0\" passage-name = \"Another\" data-raw = \"\" > Another </ tw-link > </ tw-expression > </ tw-passage > </ tw-story >","title":"Harlowe 2.X"},{"location":"html/storyformats/harlowe.html#harlowe-3x","text":"< tw-story tags = \"\" > < tw-passage tags = \"\" > < tw-sidebar > < tw-icon tabindex = \"0\" class = \"undo\" title = \"Undo\" style = \"visibility: hidden;\" > \u21b6 </ tw-icon > < tw-icon tabindex = \"0\" class = \"redo\" title = \"Redo\" style = \"visibility: hidden;\" > \u21b7 </ tw-icon > </ tw-sidebar > < tw-expression type = \"macro\" name = \"link-goto\" > < tw-link tabindex = \"0\" data-raw = \"\" > Another </ tw-link > </ tw-expression > </ tw-passage > </ tw-story >","title":"Harlowe 3.X"},{"location":"html/storyformats/snowman.html","text":"Snowman HTML # Snowman uses a variety of HTML elements and attributes to organize its stories. The following are snapshots of HTML element differences between major versions in Snowman. Snowman 1.X # < body > < div id = \"main\" > < div class = \"passage\" aria-live = \"polite\" > < p > Double-click this passage to edit it. </ p > </ div > </ div > </ body > Snowman 2.X # < body > < tw-story > < tw-passage class = \"passage\" aria-live = \"polite\" > < p > Double-click this passage to edit it. </ p > </ tw-passage > </ tw-story > </ body >","title":"Snowman"},{"location":"html/storyformats/snowman.html#snowman-html","text":"Snowman uses a variety of HTML elements and attributes to organize its stories. The following are snapshots of HTML element differences between major versions in Snowman.","title":"Snowman HTML"},{"location":"html/storyformats/snowman.html#snowman-1x","text":"< body > < div id = \"main\" > < div class = \"passage\" aria-live = \"polite\" > < p > Double-click this passage to edit it. </ p > </ div > </ div > </ body >","title":"Snowman 1.X"},{"location":"html/storyformats/snowman.html#snowman-2x","text":"< body > < tw-story > < tw-passage class = \"passage\" aria-live = \"polite\" > < p > Double-click this passage to edit it. </ p > </ tw-passage > </ tw-story > </ body >","title":"Snowman 2.X"},{"location":"html/storyformats/sugarcube.html","text":"SugarCube HTML # SugarCube uses a variety of HTML elements and attributes to organize its stories. The following are snapshots of HTML element differences between major versions in SugarCube. SugarCube 1.X # < body > < div id = \"init-screen\" > < p id = \"init-loading\" > Initializing. Please wait\u2026 < br >< progress ></ progress ></ p > </ div > < div id = \"ui-bar\" > < header id = \"title\" role = \"banner\" > < div id = \"story-banner\" ></ div > < h1 id = \"story-title\" > SugarCube HTML </ h1 > < div id = \"story-subtitle\" ></ div > < div id = \"story-title-separator\" ></ div > < p id = \"story-author\" ></ p > </ header > < nav id = \"menu\" role = \"navigation\" > < ul id = \"menu-core\" > < li id = \"menu-saves\" >< a > Saves </ a ></ li > < li id = \"menu-restart\" >< a > Restart </ a ></ li > </ ul > </ nav > </ div > < div id = \"passages\" role = \"main\" > < section id = \"passage-untitled-passage\" class = \"passage\" data-passage = \"Untitled Passage\" style = \"visibility: visible;\" > < header class = \"header\" ></ header > < div class = \"body content\" > Double-click this passage to edit it. </ div > < footer class = \"footer\" ></ footer > </ section > </ div > < div id = \"ui-overlay\" class = \"ui-close\" ></ div > < div id = \"ui-body\" ></ div > < a id = \"ui-body-close\" class = \"ui-close\" > \ue002 </ a > ... </ body > SugarCube 2.X # < body > < div id = \"init-screen\" > < div id = \"init-loading\" > < div > Loading\u2026 </ div > </ div > </ div > ... < div id = \"ui-overlay\" class = \"ui-close\" ></ div > < div id = \"ui-dialog\" tabindex = \"0\" role = \"dialog\" aria-labelledby = \"ui-dialog-title\" > < div id = \"ui-dialog-titlebar\" > < h1 id = \"ui-dialog-title\" ></ h1 > < button id = \"ui-dialog-close\" class = \"ui-close\" tabindex = \"0\" aria-label = \"Close\" > \ue804 </ button > </ div > < div id = \"ui-dialog-body\" ></ div > </ div > < div id = \"ui-bar\" > < div id = \"ui-bar-tray\" > < button id = \"ui-bar-toggle\" tabindex = \"0\" title = \"Toggle the UI bar\" aria-label = \"Toggle the UI bar\" type = \"button\" ></ button > < div id = \"ui-bar-history\" > < button id = \"history-backward\" tabindex = \"0\" title = \"Go backward within the game history\" aria-label = \"Go backward within the game history\" disabled = \"\" aria-disabled = \"true\" type = \"button\" > \ue821 </ button > < button id = \"history-forward\" tabindex = \"0\" title = \"Go forward within the game history\" aria-label = \"Go forward within the game history\" disabled = \"\" aria-disabled = \"true\" type = \"button\" > \ue822 </ button > </ div > </ div > < div id = \"ui-bar-body\" > < header id = \"title\" role = \"banner\" > < div id = \"story-banner\" ></ div > < h1 id = \"story-title\" > SugarCube HTML </ h1 > < div id = \"story-subtitle\" ></ div > < div id = \"story-title-separator\" ></ div > < p id = \"story-author\" ></ p > </ header > < nav id = \"menu\" role = \"navigation\" > < ul id = \"menu-core\" > < li id = \"menu-item-saves\" > < a tabindex = \"0\" > Saves </ a > </ li > < li id = \"menu-item-restart\" > < a tabindex = \"0\" > Restart </ a > </ li > </ ul > </ nav > </ div > </ div > < div id = \"story\" role = \"main\" > < div id = \"passages\" > < div id = \"passage-untitled-passage\" data-passage = \"Untitled Passage\" class = \"passage\" > Double-click this passage to edit it. </ div > </ div > </ div > </ div > ... </ body >","title":"SugarCube"},{"location":"html/storyformats/sugarcube.html#sugarcube-html","text":"SugarCube uses a variety of HTML elements and attributes to organize its stories. The following are snapshots of HTML element differences between major versions in SugarCube.","title":"SugarCube HTML"},{"location":"html/storyformats/sugarcube.html#sugarcube-1x","text":"< body > < div id = \"init-screen\" > < p id = \"init-loading\" > Initializing. Please wait\u2026 < br >< progress ></ progress ></ p > </ div > < div id = \"ui-bar\" > < header id = \"title\" role = \"banner\" > < div id = \"story-banner\" ></ div > < h1 id = \"story-title\" > SugarCube HTML </ h1 > < div id = \"story-subtitle\" ></ div > < div id = \"story-title-separator\" ></ div > < p id = \"story-author\" ></ p > </ header > < nav id = \"menu\" role = \"navigation\" > < ul id = \"menu-core\" > < li id = \"menu-saves\" >< a > Saves </ a ></ li > < li id = \"menu-restart\" >< a > Restart </ a ></ li > </ ul > </ nav > </ div > < div id = \"passages\" role = \"main\" > < section id = \"passage-untitled-passage\" class = \"passage\" data-passage = \"Untitled Passage\" style = \"visibility: visible;\" > < header class = \"header\" ></ header > < div class = \"body content\" > Double-click this passage to edit it. </ div > < footer class = \"footer\" ></ footer > </ section > </ div > < div id = \"ui-overlay\" class = \"ui-close\" ></ div > < div id = \"ui-body\" ></ div > < a id = \"ui-body-close\" class = \"ui-close\" > \ue002 </ a > ... </ body >","title":"SugarCube 1.X"},{"location":"html/storyformats/sugarcube.html#sugarcube-2x","text":"< body > < div id = \"init-screen\" > < div id = \"init-loading\" > < div > Loading\u2026 </ div > </ div > </ div > ... < div id = \"ui-overlay\" class = \"ui-close\" ></ div > < div id = \"ui-dialog\" tabindex = \"0\" role = \"dialog\" aria-labelledby = \"ui-dialog-title\" > < div id = \"ui-dialog-titlebar\" > < h1 id = \"ui-dialog-title\" ></ h1 > < button id = \"ui-dialog-close\" class = \"ui-close\" tabindex = \"0\" aria-label = \"Close\" > \ue804 </ button > </ div > < div id = \"ui-dialog-body\" ></ div > </ div > < div id = \"ui-bar\" > < div id = \"ui-bar-tray\" > < button id = \"ui-bar-toggle\" tabindex = \"0\" title = \"Toggle the UI bar\" aria-label = \"Toggle the UI bar\" type = \"button\" ></ button > < div id = \"ui-bar-history\" > < button id = \"history-backward\" tabindex = \"0\" title = \"Go backward within the game history\" aria-label = \"Go backward within the game history\" disabled = \"\" aria-disabled = \"true\" type = \"button\" > \ue821 </ button > < button id = \"history-forward\" tabindex = \"0\" title = \"Go forward within the game history\" aria-label = \"Go forward within the game history\" disabled = \"\" aria-disabled = \"true\" type = \"button\" > \ue822 </ button > </ div > </ div > < div id = \"ui-bar-body\" > < header id = \"title\" role = \"banner\" > < div id = \"story-banner\" ></ div > < h1 id = \"story-title\" > SugarCube HTML </ h1 > < div id = \"story-subtitle\" ></ div > < div id = \"story-title-separator\" ></ div > < p id = \"story-author\" ></ p > </ header > < nav id = \"menu\" role = \"navigation\" > < ul id = \"menu-core\" > < li id = \"menu-item-saves\" > < a tabindex = \"0\" > Saves </ a > </ li > < li id = \"menu-item-restart\" > < a tabindex = \"0\" > Restart </ a > </ li > </ ul > </ nav > </ div > </ div > < div id = \"story\" role = \"main\" > < div id = \"passages\" > < div id = \"passage-untitled-passage\" data-passage = \"Untitled Passage\" class = \"passage\" > Double-click this passage to edit it. </ div > </ div > </ div > </ div > ... </ body >","title":"SugarCube 2.X"},{"location":"images/chapbook/chapbook_images.html","text":"\"Images\": Chapbook (v1.0.0) # Summary # When using Chapbook, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute. Example # Download Twee Code # :: StoryTitle Images in Chapbook :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a base-64-encoded CSS image background: <div class=\"base64image\"></div> Twee Download","title":"Chapbook"},{"location":"images/chapbook/chapbook_images.html#images-chapbook-v100","text":"","title":"\"Images\": Chapbook (v1.0.0)"},{"location":"images/chapbook/chapbook_images.html#summary","text":"When using Chapbook, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute.","title":"Summary"},{"location":"images/chapbook/chapbook_images.html#example","text":"Download","title":"Example"},{"location":"images/chapbook/chapbook_images.html#twee-code","text":":: StoryTitle Images in Chapbook :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a base-64-encoded CSS image background: <div class=\"base64image\"></div> Twee Download","title":"Twee Code"},{"location":"images/harlowe/harlowe_images.html","text":"\"Images\": Harlowe (v2.0) # Summary # When using Harlowe, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute. Example # Download Twee Code # :: StoryTitle Images in Harlowe :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a base-64-encoded CSS image background: <div class=\"base64image\"></div> Twee Download","title":"Harlowe"},{"location":"images/harlowe/harlowe_images.html#images-harlowe-v20","text":"","title":"\"Images\": Harlowe (v2.0)"},{"location":"images/harlowe/harlowe_images.html#summary","text":"When using Harlowe, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute.","title":"Summary"},{"location":"images/harlowe/harlowe_images.html#example","text":"Download","title":"Example"},{"location":"images/harlowe/harlowe_images.html#twee-code","text":":: StoryTitle Images in Harlowe :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a base-64-encoded CSS image background: <div class=\"base64image\"></div> Twee Download","title":"Twee Code"},{"location":"images/snowman/snowman_images.html","text":"\"Images\": Snowman (v1.3.0) # Summary # When using Snowman, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute. Example # Download Twee Code # :: StoryTitle Images in Snowman :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a Base64-encoded CSS image background: <div class=\"base64image\"></div> Twee Download","title":"Snowman"},{"location":"images/snowman/snowman_images.html#images-snowman-v130","text":"","title":"\"Images\": Snowman (v1.3.0)"},{"location":"images/snowman/snowman_images.html#summary","text":"When using Snowman, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute.","title":"Summary"},{"location":"images/snowman/snowman_images.html#example","text":"Download","title":"Example"},{"location":"images/snowman/snowman_images.html#twee-code","text":":: StoryTitle Images in Snowman :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a Base64-encoded CSS image background: <div class=\"base64image\"></div> Twee Download","title":"Twee Code"},{"location":"images/sugarcube/sugarcube_images.html","text":"\"Images\": SugarCube (v2.18) # Summary # When using SugarCube, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute. Many macros also support using images in SugarCube and their location can be used within wiki syntax. Base64-encoded images are not supported in wiki image syntax. Example # Download Twee Code # :: StoryTitle Images in SugarCube :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a Base64-encoded CSS image background: <div class=\"base64image\"></div> Twee Download","title":"SugarCube"},{"location":"images/sugarcube/sugarcube_images.html#images-sugarcube-v218","text":"","title":"\"Images\": SugarCube (v2.18)"},{"location":"images/sugarcube/sugarcube_images.html#summary","text":"When using SugarCube, images can be displayed through the image HTML element and url() CSS data type when encoded as Base64. When using an image element, its source is either absolutely or relatively located. An absolute reference starts with HTTP or another protocol; a relative reference describes the location of the image in relation to the webpage. Because images are external resources, they need to be included with the webpage as Base64-encoded or in another location. While Base64-encoded images can be embedded in a webpage, it also increases its overall size. External images require additional hosting and are included through their reference in CSS (URL) data type or image (SRC) attribute. Many macros also support using images in SugarCube and their location can be used within wiki syntax. Base64-encoded images are not supported in wiki image syntax.","title":"Summary"},{"location":"images/sugarcube/sugarcube_images.html#example","text":"Download","title":"Example"},{"location":"images/sugarcube/sugarcube_images.html#twee-code","text":":: StoryTitle Images in SugarCube :: UserStylesheet[stylesheet] .base64image { width: 256px; height: 256px; /* Base64 image truncated for example */ /* See Twee file for full version. */ background-image: url('data:image/png;base64...'); } :: Start This is an image element: <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"256\" height=\"256\"> This is a Base64-encoded CSS image background: <div class=\"base64image\"></div> Twee Download","title":"Twee Code"},{"location":"importexternaljs/chapbook/chapbook_importexternaljs.html","text":"\"Importing External JavaScript\": Chapbook (v1.0.0) # Information This example uses code from Three.js , a library for creating 3D graphics in the browser. It is include only for demonstrational purposes and its own documentation should be consulted to understand its functionality. Summary # To include external JavaScript, it must first be loaded. This example uses code from the Mozilla Developer Network to dynamically import scripts . The example library loaded is Three.js. Once loaded, a callback function is used to create a simple Three.js example and, if the browser supports it, shows a rotating 3D cube within the passage. Example # Download Twee Code # :: StoryTitle Chapbook: Importing External JS :: UserScript[script] // The following code is used from MDN for // dynamically importing scripts // https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement#Dynamically_importing_scripts window.setup = {}; setup.loadError = function(oError) { throw new URIError(\"The script \" + oError.target.src + \" didn't load correctly.\"); }; setup.loadScript = function(url, onloadFunction) { var newScript = document.createElement(\"script\"); newScript.onerror = setup.loadError; if (onloadFunction) { newScript.onload = onloadFunction; } document.head.appendChild(newScript); newScript.async = true; newScript.src = url; }; :: Start <div id=\"drawArea\"></div> [JavaScript] setup.loadScript(\"https://ajax.googleapis.com/ajax/libs/threejs/r84/three.min.js\", function() { var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer(); renderer.setSize( 250, 250 ); document.getElementById(\"drawArea\").appendChild( renderer.domElement ); var geometry = new THREE.BoxGeometry( 1, 1, 1 ); var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } ); var cube = new THREE.Mesh( geometry, material ); scene.add( cube ); camera.position.z = 5; var animate = function () { requestAnimationFrame( animate ); cube.rotation.x += 0.01; cube.rotation.y += 0.01; renderer.render( scene, camera ); }; animate(); }); [continued] Twee Download","title":"Chapbook"},{"location":"importexternaljs/chapbook/chapbook_importexternaljs.html#importing-external-javascript-chapbook-v100","text":"Information This example uses code from Three.js , a library for creating 3D graphics in the browser. It is include only for demonstrational purposes and its own documentation should be consulted to understand its functionality.","title":"\"Importing External JavaScript\": Chapbook (v1.0.0)"},{"location":"importexternaljs/chapbook/chapbook_importexternaljs.html#summary","text":"To include external JavaScript, it must first be loaded. This example uses code from the Mozilla Developer Network to dynamically import scripts . The example library loaded is Three.js. Once loaded, a callback function is used to create a simple Three.js example and, if the browser supports it, shows a rotating 3D cube within the passage.","title":"Summary"},{"location":"importexternaljs/chapbook/chapbook_importexternaljs.html#example","text":"Download","title":"Example"},{"location":"importexternaljs/chapbook/chapbook_importexternaljs.html#twee-code","text":":: StoryTitle Chapbook: Importing External JS :: UserScript[script] // The following code is used from MDN for // dynamically importing scripts // https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement#Dynamically_importing_scripts window.setup = {}; setup.loadError = function(oError) { throw new URIError(\"The script \" + oError.target.src + \" didn't load correctly.\"); }; setup.loadScript = function(url, onloadFunction) { var newScript = document.createElement(\"script\"); newScript.onerror = setup.loadError; if (onloadFunction) { newScript.onload = onloadFunction; } document.head.appendChild(newScript); newScript.async = true; newScript.src = url; }; :: Start <div id=\"drawArea\"></div> [JavaScript] setup.loadScript(\"https://ajax.googleapis.com/ajax/libs/threejs/r84/three.min.js\", function() { var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer(); renderer.setSize( 250, 250 ); document.getElementById(\"drawArea\").appendChild( renderer.domElement ); var geometry = new THREE.BoxGeometry( 1, 1, 1 ); var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } ); var cube = new THREE.Mesh( geometry, material ); scene.add( cube ); camera.position.z = 5; var animate = function () { requestAnimationFrame( animate ); cube.rotation.x += 0.01; cube.rotation.y += 0.01; renderer.render( scene, camera ); }; animate(); }); [continued] Twee Download","title":"Twee Code"},{"location":"importexternaljs/harlowe/harlowe_importexternaljs.html","text":"\"Importing External JavaScript\": Harlowe (v2.0) # Information The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library. Summary # \"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the built-in jQuery $.getScript() function to load the library and demonstrates a short example of how to use it. Example # Download Twee Code # :: StoryTitle Harlowe: Importing External JavaScript :: UserScript [script] /* import jQuery UI library. */ $(function () { $.getScript(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\", function (data, textStatus, jqxhr) { console.log('jquery ui file loaded'); } ); }); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <script> $(\"#box\").click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); </script> Twee Download","title":"Harlowe"},{"location":"importexternaljs/harlowe/harlowe_importexternaljs.html#importing-external-javascript-harlowe-v20","text":"Information The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library.","title":"\"Importing External JavaScript\": Harlowe (v2.0)"},{"location":"importexternaljs/harlowe/harlowe_importexternaljs.html#summary","text":"\"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the built-in jQuery $.getScript() function to load the library and demonstrates a short example of how to use it.","title":"Summary"},{"location":"importexternaljs/harlowe/harlowe_importexternaljs.html#example","text":"Download","title":"Example"},{"location":"importexternaljs/harlowe/harlowe_importexternaljs.html#twee-code","text":":: StoryTitle Harlowe: Importing External JavaScript :: UserScript [script] /* import jQuery UI library. */ $(function () { $.getScript(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\", function (data, textStatus, jqxhr) { console.log('jquery ui file loaded'); } ); }); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <script> $(\"#box\").click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); </script> Twee Download","title":"Twee Code"},{"location":"importexternaljs/snowman/snowman_importexternaljs.html","text":"\"Importing External JavaScript\": Snowman (v1.3.0) # Information The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library. Summary # \"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the built-in jQuery $.getScript() function to load the library and demonstrates a short example of how to use it. Example # Download Twee Code # :: StoryTitle Snowman: Importing External JavaScript :: UserScript [script] /* import jQuery UI library. */ $(function () { $.getScript(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\", function (data, textStatus, jqxhr) { console.log('jquery ui file loaded'); } ); }); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <script> $(\"#box\").click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); </script> Twee Download","title":"Snowman"},{"location":"importexternaljs/snowman/snowman_importexternaljs.html#importing-external-javascript-snowman-v130","text":"Information The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library.","title":"\"Importing External JavaScript\": Snowman (v1.3.0)"},{"location":"importexternaljs/snowman/snowman_importexternaljs.html#summary","text":"\"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the built-in jQuery $.getScript() function to load the library and demonstrates a short example of how to use it.","title":"Summary"},{"location":"importexternaljs/snowman/snowman_importexternaljs.html#example","text":"Download","title":"Example"},{"location":"importexternaljs/snowman/snowman_importexternaljs.html#twee-code","text":":: StoryTitle Snowman: Importing External JavaScript :: UserScript [script] /* import jQuery UI library. */ $(function () { $.getScript(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\", function (data, textStatus, jqxhr) { console.log('jquery ui file loaded'); } ); }); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <script> $(\"#box\").click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); </script> Twee Download","title":"Twee Code"},{"location":"importexternaljs/sugarcube/sugarcube_importexternaljs.html","text":"\"Importing External JavaScript\": SugarCube (v2.18) # Information The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library. Summary # \"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the SugarCube importScripts() function to load and integrate the script file's contents. Example # Download Twee Code # :: StoryTitle SugarCube: Importing External JavaScript :: UserScript [script] /* Import the jQuery UI library. */ importScripts(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\"); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <<script>> $(document).one(':passagerender', function (ev) { $(ev.content) .find(\"#box\") .click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); }); <</script>> Twee Download","title":"SugarCube"},{"location":"importexternaljs/sugarcube/sugarcube_importexternaljs.html#importing-external-javascript-sugarcube-v218","text":"Information The successful loading of an external JavaScript file or library commonly produces no visual output. The code within the example passage is not required for the successful loading of an external file or library.","title":"\"Importing External JavaScript\": SugarCube (v2.18)"},{"location":"importexternaljs/sugarcube/sugarcube_importexternaljs.html#summary","text":"\"Importing External JavaScript\" demonstrates how to import an externally stored JavaScript library, jQuery UI . This example uses the SugarCube importScripts() function to load and integrate the script file's contents.","title":"Summary"},{"location":"importexternaljs/sugarcube/sugarcube_importexternaljs.html#example","text":"Download","title":"Example"},{"location":"importexternaljs/sugarcube/sugarcube_importexternaljs.html#twee-code","text":":: StoryTitle SugarCube: Importing External JavaScript :: UserScript [script] /* Import the jQuery UI library. */ importScripts(\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\"); :: Start <p>Click on the grey box below to see it bounce.</p> <div id=\"box\" style=\"width: 100px; height: 100px; background: #ccc;\"></div> <<script>> $(document).one(':passagerender', function (ev) { $(ev.content) .find(\"#box\") .click(function () { $(\"#box\").toggle(\"bounce\", {times: 3}, \"slow\"); }); }); <</script>> Twee Download","title":"Twee Code"},{"location":"introduction/passages.html","text":"Passages # Working in Twine is working with passages. They are foundational to how Twine works, and also what is shown to users when they view a Twine story. A passage is a way of thinking about different parts of a story. They can be rooms in a house, different time periods, or compartments for storage. The connections between them are made by the author or as part of the playing experience by the reader. Passage Anatomy # Passages are divided into three parts. Title # All passages have a title. These are used to connect not only passages together, but, in some story formats, also have special meanings. (See SugarCube documentation on Passage Names .) Tags # Passages can optionally have tags. In generally, these can be used by authors to organize content or imply relationships. In Twine 2, tags can also have colors. When used in this way, the color will be shown on the left-hand side with more colors dividing up the vertical space. (In Harlowe, certain tags have special meaning . SugarCube reserves certain tag names .) Content # The content of a passage is anything within it. While passages can be thought of as content sections, they are also where code goes to change how text appears and how the passage should respond to the user. Writing prose and code both happen within passages. They are not separated in Twine: writing in a passage has the potential to be either or both at the same time. Links # Generally, the action of clicking a link in Twine is a movement between passages. In interactive fiction terminology, this can be thought of as a turn . The act of clicking the link signaled that a choice was made and it is now time to progress to the next content or set of choices.","title":"Passages"},{"location":"introduction/passages.html#passages","text":"Working in Twine is working with passages. They are foundational to how Twine works, and also what is shown to users when they view a Twine story. A passage is a way of thinking about different parts of a story. They can be rooms in a house, different time periods, or compartments for storage. The connections between them are made by the author or as part of the playing experience by the reader.","title":"Passages"},{"location":"introduction/passages.html#passage-anatomy","text":"Passages are divided into three parts.","title":"Passage Anatomy"},{"location":"introduction/passages.html#title","text":"All passages have a title. These are used to connect not only passages together, but, in some story formats, also have special meanings. (See SugarCube documentation on Passage Names .)","title":"Title"},{"location":"introduction/passages.html#tags","text":"Passages can optionally have tags. In generally, these can be used by authors to organize content or imply relationships. In Twine 2, tags can also have colors. When used in this way, the color will be shown on the left-hand side with more colors dividing up the vertical space. (In Harlowe, certain tags have special meaning . SugarCube reserves certain tag names .)","title":"Tags"},{"location":"introduction/passages.html#content","text":"The content of a passage is anything within it. While passages can be thought of as content sections, they are also where code goes to change how text appears and how the passage should respond to the user. Writing prose and code both happen within passages. They are not separated in Twine: writing in a passage has the potential to be either or both at the same time.","title":"Content"},{"location":"introduction/passages.html#links","text":"Generally, the action of clicking a link in Twine is a movement between passages. In interactive fiction terminology, this can be thought of as a turn . The act of clicking the link signaled that a choice was made and it is now time to progress to the next content or set of choices.","title":"Links"},{"location":"introduction/story_formats.html","text":"Story Formats # While using passages are a part of all Twine authoring, there are different collections of rules and styling options called story formats . In Twine 2, they are accessed as part of the Story Menu. Clicking on Change Story Format opens up the options for picking different story formats and, in most cases, also have links to their externally-hosted documentation. Story Format: Dialects # In Twine 1, story formats were different visual layouts. Instead of content appearing one way, it could be changed using a different story format. That changed with Twine 2. Now, story formats are more like dialects of the overall language of Twine along with their own visual changes. Some, like Harlowe, are much more designed for beginners while another, Snowman, is only recommended for more advanced users who want to write they own functionality. Story Format Differences # There are many. Harlowe and Chapbook were created to be more user-friendly in many ways. However, this also means that more advanced functionality is much harder or nearly impossible. SugarCube follows many of the patterns started with Twine 1 with a large, expanded set of functionality, but also expects some knowledge on the part of the author. Snowman comes with very little built-in functionality and expects the author to write or otherwise supply their own. Macros # The main differences between story formats come in how they handle macros . SugarCube, for example, supplies a large number of macros for doing many different things. Harlowe has less macros for authors to use, but is also aimed at a different, more general audience. Chapbook also uses macros but calls them inserts and modifiers. Style Markup # The rules for styling text are often very different between story formats. The \"Style Markup\" examples show a great breakdown of the different options per story format ( Chapbook , Harlowe , SugarCube , and Snowman ).","title":"Story Formats"},{"location":"introduction/story_formats.html#story-formats","text":"While using passages are a part of all Twine authoring, there are different collections of rules and styling options called story formats . In Twine 2, they are accessed as part of the Story Menu. Clicking on Change Story Format opens up the options for picking different story formats and, in most cases, also have links to their externally-hosted documentation.","title":"Story Formats"},{"location":"introduction/story_formats.html#story-format-dialects","text":"In Twine 1, story formats were different visual layouts. Instead of content appearing one way, it could be changed using a different story format. That changed with Twine 2. Now, story formats are more like dialects of the overall language of Twine along with their own visual changes. Some, like Harlowe, are much more designed for beginners while another, Snowman, is only recommended for more advanced users who want to write they own functionality.","title":"Story Format: Dialects"},{"location":"introduction/story_formats.html#story-format-differences","text":"There are many. Harlowe and Chapbook were created to be more user-friendly in many ways. However, this also means that more advanced functionality is much harder or nearly impossible. SugarCube follows many of the patterns started with Twine 1 with a large, expanded set of functionality, but also expects some knowledge on the part of the author. Snowman comes with very little built-in functionality and expects the author to write or otherwise supply their own.","title":"Story Format Differences"},{"location":"introduction/story_formats.html#macros","text":"The main differences between story formats come in how they handle macros . SugarCube, for example, supplies a large number of macros for doing many different things. Harlowe has less macros for authors to use, but is also aimed at a different, more general audience. Chapbook also uses macros but calls them inserts and modifiers.","title":"Macros"},{"location":"introduction/story_formats.html#style-markup","text":"The rules for styling text are often very different between story formats. The \"Style Markup\" examples show a great breakdown of the different options per story format ( Chapbook , Harlowe , SugarCube , and Snowman ).","title":"Style Markup"},{"location":"introduction/twine2_passages_view.html","text":"Using the Editor: Passages View # At the bottom of the Passages View is a menu with access to different functionality. Return to Story Listing # Return to the Story List. Story Menu # The Story Menu gives access to different functionality about the story itself. Edit Story JavaScript # The Edit Story JavaScript screen allows for adding or changing JavaScript code that will be included in the story when run or published in a HTML file. Edit Story Stylesheet # The Edit Story Stylesheet screen allows for adding or changing CSS rules that will be included in the story when run or published in a HTML file. Change Story Format # The Story Format screens allows for changing the story format in use when running and publishing the story in HTML. Rename Story # The Rename Story option allows for changing the name of the story. Select All Passages # The Select All Passages places all passages into a single selection for moving or rearranging them as a group Snap to Grid # The Snap to Grid option turns off or on if passages should move to the closest grid position when moved. Story Statistics # The Story Statistics screen shows data on the story including the number of characters and words. View Proofing Copy # The View Proofing Copy of a story is the text of all passages except for the Story JavaScript and Story Stylesheet. Publish to File # The Publish to File option compiles the current story and any Story JavaScript and Story Stylesheet code into a single HTML file. Quick Find # The Quick Find functionality is used for searching for words or longer phrases across all passages. Find and Replace # The Find and Replace functionality search for words, phrases, or certain expresses for the purpose of replacing them, if found, with other words or longer phrases. Story Structure # The Story Structure view shows the connection between passages only. Passage Titles # The Passage Tiles view shows simply that: passage titles. Titles and Excerpts # The Titles and Excerpts view shows passages, their contents, and excerpts of their contents. Play Story in Test Mode # The \"Play Story in Text Mode\" button starts turns on debugging functionality and starts the story. Play Story # The \"Play Story\" button starts the story in a new tab or window. Create New Passage # The \"Create New Passage\" button creates a new, unconnected passage in the Passage View.","title":"Passages View"},{"location":"introduction/twine2_passages_view.html#using-the-editor-passages-view","text":"At the bottom of the Passages View is a menu with access to different functionality.","title":"Using the Editor: Passages View"},{"location":"introduction/twine2_passages_view.html#return-to-story-listing","text":"Return to the Story List.","title":"Return to Story Listing"},{"location":"introduction/twine2_passages_view.html#story-menu","text":"The Story Menu gives access to different functionality about the story itself.","title":"Story Menu"},{"location":"introduction/twine2_passages_view.html#edit-story-javascript","text":"The Edit Story JavaScript screen allows for adding or changing JavaScript code that will be included in the story when run or published in a HTML file.","title":"Edit Story JavaScript"},{"location":"introduction/twine2_passages_view.html#edit-story-stylesheet","text":"The Edit Story Stylesheet screen allows for adding or changing CSS rules that will be included in the story when run or published in a HTML file.","title":"Edit Story Stylesheet"},{"location":"introduction/twine2_passages_view.html#change-story-format","text":"The Story Format screens allows for changing the story format in use when running and publishing the story in HTML.","title":"Change Story Format"},{"location":"introduction/twine2_passages_view.html#rename-story","text":"The Rename Story option allows for changing the name of the story.","title":"Rename Story"},{"location":"introduction/twine2_passages_view.html#select-all-passages","text":"The Select All Passages places all passages into a single selection for moving or rearranging them as a group","title":"Select All Passages"},{"location":"introduction/twine2_passages_view.html#snap-to-grid","text":"The Snap to Grid option turns off or on if passages should move to the closest grid position when moved.","title":"Snap to Grid"},{"location":"introduction/twine2_passages_view.html#story-statistics","text":"The Story Statistics screen shows data on the story including the number of characters and words.","title":"Story Statistics"},{"location":"introduction/twine2_passages_view.html#view-proofing-copy","text":"The View Proofing Copy of a story is the text of all passages except for the Story JavaScript and Story Stylesheet.","title":"View Proofing Copy"},{"location":"introduction/twine2_passages_view.html#publish-to-file","text":"The Publish to File option compiles the current story and any Story JavaScript and Story Stylesheet code into a single HTML file.","title":"Publish to File"},{"location":"introduction/twine2_passages_view.html#quick-find","text":"The Quick Find functionality is used for searching for words or longer phrases across all passages.","title":"Quick Find"},{"location":"introduction/twine2_passages_view.html#find-and-replace","text":"The Find and Replace functionality search for words, phrases, or certain expresses for the purpose of replacing them, if found, with other words or longer phrases.","title":"Find and Replace"},{"location":"introduction/twine2_passages_view.html#story-structure","text":"The Story Structure view shows the connection between passages only.","title":"Story Structure"},{"location":"introduction/twine2_passages_view.html#passage-titles","text":"The Passage Tiles view shows simply that: passage titles.","title":"Passage Titles"},{"location":"introduction/twine2_passages_view.html#titles-and-excerpts","text":"The Titles and Excerpts view shows passages, their contents, and excerpts of their contents.","title":"Titles and Excerpts"},{"location":"introduction/twine2_passages_view.html#play-story-in-test-mode","text":"The \"Play Story in Text Mode\" button starts turns on debugging functionality and starts the story.","title":"Play Story in Test Mode"},{"location":"introduction/twine2_passages_view.html#play-story","text":"The \"Play Story\" button starts the story in a new tab or window.","title":"Play Story"},{"location":"introduction/twine2_passages_view.html#create-new-passage","text":"The \"Create New Passage\" button creates a new, unconnected passage in the Passage View.","title":"Create New Passage"},{"location":"introduction/twine2_story_listing.html","text":"Using the Editor: Story Listing # The very first screen upon opening Twine 2 in the desktop or online version is the story view or story listing. This shows all of the stories loaded in this version that can be opened and edited. Side Menu # On the right-hand side is a menu for accessing different options in the editor. +Story # Using the \"+Story\" allows the user to name and create a new story that will be added to the story listing. Import From File # Using the \"Import from File\" functionality opens a dialog window to select a file and import it into the story listing. All files published with Twine 1 (starting with 1.4.2) are compatible and can be imported. However, major versions of the editor can only publish files matching its number. Archive # Using the \"Archive\" button will produce a ZIP'd file containing all of the stories currently listed in the view. Formats # \"Formats\" allows for adding to the current listing or changing the current default story format when creating new stories. Story Formats # Opened by default, this tab shows all of the current story formats loaded in Twine 2. Proofing Formats # A listing of all of the current Proofing Formats loaded in Twine 2 as well as which one (if multiple are loaded) is the default for creating a \"Proof Copy\" of a story. Add a New Format # Through pasting or typing out the URL of a new story format and using the \"Add\" button, other story formats can be loaded and used. Depending on if the loaded format was story or proof, it will appear as an option on those tabs once loaded and ready for use. Language # Twine 2 supports over a dozen languages for named entries in its user interface. Selecting one of them will change the current language of the editor and its menus. Help # Clicking on \"Help\" opens a new tab or window in the default browser on the \"Twine 2 Guide\" of the wiki. Theme Options # Twine 2 comes with two themes: dark and light. Clicking on either icon switches the interface to that theme. Current Storage (Online-version only) # When used online, the editor will keep track of how much local storage usage remains for creating and saving stories in Twine 2. Depending on the browser, system, and other settings, this amount can be different. Version Information and Bug Reporting # At the bottom of the menu is the current version of Twine 2 and a link to the Issues page of the GitHub repository.","title":"Story Listing"},{"location":"introduction/twine2_story_listing.html#using-the-editor-story-listing","text":"The very first screen upon opening Twine 2 in the desktop or online version is the story view or story listing. This shows all of the stories loaded in this version that can be opened and edited.","title":"Using the Editor: Story Listing"},{"location":"introduction/twine2_story_listing.html#side-menu","text":"On the right-hand side is a menu for accessing different options in the editor.","title":"Side Menu"},{"location":"introduction/twine2_story_listing.html#story","text":"Using the \"+Story\" allows the user to name and create a new story that will be added to the story listing.","title":"+Story"},{"location":"introduction/twine2_story_listing.html#import-from-file","text":"Using the \"Import from File\" functionality opens a dialog window to select a file and import it into the story listing. All files published with Twine 1 (starting with 1.4.2) are compatible and can be imported. However, major versions of the editor can only publish files matching its number.","title":"Import From File"},{"location":"introduction/twine2_story_listing.html#archive","text":"Using the \"Archive\" button will produce a ZIP'd file containing all of the stories currently listed in the view.","title":"Archive"},{"location":"introduction/twine2_story_listing.html#formats","text":"\"Formats\" allows for adding to the current listing or changing the current default story format when creating new stories.","title":"Formats"},{"location":"introduction/twine2_story_listing.html#story-formats","text":"Opened by default, this tab shows all of the current story formats loaded in Twine 2.","title":"Story Formats"},{"location":"introduction/twine2_story_listing.html#proofing-formats","text":"A listing of all of the current Proofing Formats loaded in Twine 2 as well as which one (if multiple are loaded) is the default for creating a \"Proof Copy\" of a story.","title":"Proofing Formats"},{"location":"introduction/twine2_story_listing.html#add-a-new-format","text":"Through pasting or typing out the URL of a new story format and using the \"Add\" button, other story formats can be loaded and used. Depending on if the loaded format was story or proof, it will appear as an option on those tabs once loaded and ready for use.","title":"Add a New Format"},{"location":"introduction/twine2_story_listing.html#language","text":"Twine 2 supports over a dozen languages for named entries in its user interface. Selecting one of them will change the current language of the editor and its menus.","title":"Language"},{"location":"introduction/twine2_story_listing.html#help","text":"Clicking on \"Help\" opens a new tab or window in the default browser on the \"Twine 2 Guide\" of the wiki.","title":"Help"},{"location":"introduction/twine2_story_listing.html#theme-options","text":"Twine 2 comes with two themes: dark and light. Clicking on either icon switches the interface to that theme.","title":"Theme Options"},{"location":"introduction/twine2_story_listing.html#current-storage-online-version-only","text":"When used online, the editor will keep track of how much local storage usage remains for creating and saving stories in Twine 2. Depending on the browser, system, and other settings, this amount can be different.","title":"Current Storage (Online-version only)"},{"location":"introduction/twine2_story_listing.html#version-information-and-bug-reporting","text":"At the bottom of the menu is the current version of Twine 2 and a link to the Issues page of the GitHub repository.","title":"Version Information and Bug Reporting"},{"location":"js/reviewing.html","text":"Reviewing JavaScript # JavaScript is a programming language available in web browsers. It allows developers to write code that runs when a hypertext document is shown to a user in a web browser. Script Element # JavaScript code appears in the <script> element in HTML. Document Object Model (DOM) # Web browsers provide all JavaScript code with a global object named document . This represents the entire HTML document as an object with properties and method for manipulating its content. This allows code to read and change the document while it is shown to a user in a web browser. Story Formats Are JavaScript # Twine records the contents of a story as HTML. This is read and processed by a story format written in JavaScript. Publishing a HTML file with Twine means bundling the story format and story content together in one file. Story JavaScript # Every story has access to its Story JavaScript . Any JavaScript code added to Story JavaScript will be run before any content of a story. This is a useful space for adding more JavaScript code to a story or preparing values to be used before a story is run.","title":"Reviewing JavaScript"},{"location":"js/reviewing.html#reviewing-javascript","text":"JavaScript is a programming language available in web browsers. It allows developers to write code that runs when a hypertext document is shown to a user in a web browser.","title":"Reviewing JavaScript"},{"location":"js/reviewing.html#script-element","text":"JavaScript code appears in the <script> element in HTML.","title":"Script Element"},{"location":"js/reviewing.html#document-object-model-dom","text":"Web browsers provide all JavaScript code with a global object named document . This represents the entire HTML document as an object with properties and method for manipulating its content. This allows code to read and change the document while it is shown to a user in a web browser.","title":"Document Object Model (DOM)"},{"location":"js/reviewing.html#story-formats-are-javascript","text":"Twine records the contents of a story as HTML. This is read and processed by a story format written in JavaScript. Publishing a HTML file with Twine means bundling the story format and story content together in one file.","title":"Story Formats Are JavaScript"},{"location":"js/reviewing.html#story-javascript","text":"Every story has access to its Story JavaScript . Any JavaScript code added to Story JavaScript will be run before any content of a story. This is a useful space for adding more JavaScript code to a story or preparing values to be used before a story is run.","title":"Story JavaScript"},{"location":"js/storyformats/chapbook.html","text":"Chapbook JavaScript # Chapbook enables JavaScript support through its [JavaScript] modifier . Accessing Variables # Variables are normally accessed and their values changed through the Vars Section of a passages. Chapbook also provides the global object engine.state and its methods set(variable, value) and get(variable) for accessing story variables. Reminder: A story variable is one which exists for as long as the story is running. In Chapbook, they are defined in the Vars Section and remain until the story stops. State Set # The method engine.state.set() will either update a variable's value, if it exists, or create the variable, if it does not. (The name of the variable should be enclosed in quotation marks.) [JavaScript] engine.state.set('example', 'Hi!'); [continued] {example} State Get # The method engine.state.get() will retrieve the value of a variable. If it does not exist, the value returned will be undefined . example: \"Hi!\" -- [JavaScript] let example = engine.state.get('example'); write(example); Writing Values # Chapbook provides the function write() for adding values to the content of a passage inside of the [JavaScript] modifier. Jolene, Jolene, [JavaScript] write(\"Jolene,\"); [continued] Jolene.","title":"Chapbook"},{"location":"js/storyformats/chapbook.html#chapbook-javascript","text":"Chapbook enables JavaScript support through its [JavaScript] modifier .","title":"Chapbook JavaScript"},{"location":"js/storyformats/chapbook.html#accessing-variables","text":"Variables are normally accessed and their values changed through the Vars Section of a passages. Chapbook also provides the global object engine.state and its methods set(variable, value) and get(variable) for accessing story variables. Reminder: A story variable is one which exists for as long as the story is running. In Chapbook, they are defined in the Vars Section and remain until the story stops.","title":"Accessing Variables"},{"location":"js/storyformats/chapbook.html#state-set","text":"The method engine.state.set() will either update a variable's value, if it exists, or create the variable, if it does not. (The name of the variable should be enclosed in quotation marks.) [JavaScript] engine.state.set('example', 'Hi!'); [continued] {example}","title":"State Set"},{"location":"js/storyformats/chapbook.html#state-get","text":"The method engine.state.get() will retrieve the value of a variable. If it does not exist, the value returned will be undefined . example: \"Hi!\" -- [JavaScript] let example = engine.state.get('example'); write(example);","title":"State Get"},{"location":"js/storyformats/chapbook.html#writing-values","text":"Chapbook provides the function write() for adding values to the content of a passage inside of the [JavaScript] modifier. Jolene, Jolene, [JavaScript] write(\"Jolene,\"); [continued] Jolene.","title":"Writing Values"},{"location":"js/storyformats/harlowe.html","text":"Harlowe JavaScript # Harlowe provides many macros for editing how content is displayed or used in a story. The Harlowe documentation purposely does not include instructions for editing or changing the JavaScript code or related values used in the story format. It is strongly recommended to not change the JavaScript code or any of its values in Harlowe.","title":"Harlowe"},{"location":"js/storyformats/harlowe.html#harlowe-javascript","text":"Harlowe provides many macros for editing how content is displayed or used in a story. The Harlowe documentation purposely does not include instructions for editing or changing the JavaScript code or related values used in the story format. It is strongly recommended to not change the JavaScript code or any of its values in Harlowe.","title":"Harlowe JavaScript"},{"location":"js/storyformats/snowman.html","text":"Snowman JavaScript # Snowman does not come with any macros, but it does bundle the libraries of Underscore , JQuery , and Marked . Working with Templates # Because Snowman comes with Underscore, it supports writing JavaScript in passages using its template system. Arbitrary Code # The opening <% and closing %> template tags allow for writing arbitrary JavaScript in a passage. <% let example = \"Hi!\"; print(example); %> Interpolating # The use of the opening <%= tag for templates interpolates any values it encounters. In other words, it is an easy way to include JavaScript values in passages. I've made mistakes, Lord struck me down <%= \"Caught in a landslide, lost underground\" %> I hear them gates, swing open wide <%= \"Come close to midnight, hell fade me down\" %> print() # Underscore provides the function print() inside of any template code. This can be used to \"print\" values from inside an arbitrary code template block. Running from the violence <% print(\"(Oh, oh. \"); print(\"Oh, oh)\"); %> Running from the violence Global s # Inside any use of templates tags also have access to the global variable s . This is a short-hand for window.story.state , and it can be used to create the effect of story variables through creating global properties in JavaScript. Note: Any variables created in a code block or in a <script> element in Snowman are local to that scope. The only way to share values across passages is through global objects like s . :: Untiled Passage <% s.example = \"Hi!\"; %> [[Another]] :: Another <%= s.example %>","title":"Snowman"},{"location":"js/storyformats/snowman.html#snowman-javascript","text":"Snowman does not come with any macros, but it does bundle the libraries of Underscore , JQuery , and Marked .","title":"Snowman JavaScript"},{"location":"js/storyformats/snowman.html#working-with-templates","text":"Because Snowman comes with Underscore, it supports writing JavaScript in passages using its template system.","title":"Working with Templates"},{"location":"js/storyformats/snowman.html#arbitrary-code","text":"The opening <% and closing %> template tags allow for writing arbitrary JavaScript in a passage. <% let example = \"Hi!\"; print(example); %>","title":"Arbitrary Code"},{"location":"js/storyformats/snowman.html#interpolating","text":"The use of the opening <%= tag for templates interpolates any values it encounters. In other words, it is an easy way to include JavaScript values in passages. I've made mistakes, Lord struck me down <%= \"Caught in a landslide, lost underground\" %> I hear them gates, swing open wide <%= \"Come close to midnight, hell fade me down\" %>","title":"Interpolating"},{"location":"js/storyformats/snowman.html#print","text":"Underscore provides the function print() inside of any template code. This can be used to \"print\" values from inside an arbitrary code template block. Running from the violence <% print(\"(Oh, oh. \"); print(\"Oh, oh)\"); %> Running from the violence","title":"print()"},{"location":"js/storyformats/snowman.html#global-s","text":"Inside any use of templates tags also have access to the global variable s . This is a short-hand for window.story.state , and it can be used to create the effect of story variables through creating global properties in JavaScript. Note: Any variables created in a code block or in a <script> element in Snowman are local to that scope. The only way to share values across passages is through global objects like s . :: Untiled Passage <% s.example = \"Hi!\"; %> [[Another]] :: Another <%= s.example %>","title":"Global s"},{"location":"js/storyformats/sugarcube.html","text":"SugarCube JavaScript # The SugarCube documentation provides details for using Scripting Macros with JavaScript code. It also provides multiple application programming interfaces (APIs) for using JavaScript with its own built-in functionality. windows.setup # When working with Story JavaScript , it is strongly recommended, to use the setup object in SugarCube to add functionality. window . setup = window . setup || {}; SugarCube Addons # Working with SugarCube Addons requires using Story JavaScript. The provided instructions with the addon often require copying and pasting code into this area or configuring other options.","title":"SugarCube"},{"location":"js/storyformats/sugarcube.html#sugarcube-javascript","text":"The SugarCube documentation provides details for using Scripting Macros with JavaScript code. It also provides multiple application programming interfaces (APIs) for using JavaScript with its own built-in functionality.","title":"SugarCube JavaScript"},{"location":"js/storyformats/sugarcube.html#windowssetup","text":"When working with Story JavaScript , it is strongly recommended, to use the setup object in SugarCube to add functionality. window . setup = window . setup || {};","title":"windows.setup"},{"location":"js/storyformats/sugarcube.html#sugarcube-addons","text":"Working with SugarCube Addons requires using Story JavaScript. The provided instructions with the addon often require copying and pasting code into this area or configuring other options.","title":"SugarCube Addons"},{"location":"keyboard/chapbook/chapbook_keyboard.html","text":"\"Keyboard Events\": Chapbook (v1.0.0) # Summary # \"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses addEventListener() to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers. Example # Download Twee Code # :: StoryTitle Chapbook: Keyboard :: UserScript[script] (function () { document.addEventListener('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Twee Download","title":"Chapbook"},{"location":"keyboard/chapbook/chapbook_keyboard.html#keyboard-events-chapbook-v100","text":"","title":"\"Keyboard Events\": Chapbook (v1.0.0)"},{"location":"keyboard/chapbook/chapbook_keyboard.html#summary","text":"\"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses addEventListener() to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers.","title":"Summary"},{"location":"keyboard/chapbook/chapbook_keyboard.html#example","text":"Download","title":"Example"},{"location":"keyboard/chapbook/chapbook_keyboard.html#twee-code","text":":: StoryTitle Chapbook: Keyboard :: UserScript[script] (function () { document.addEventListener('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Twee Download","title":"Twee Code"},{"location":"keyboard/harlowe/harlowe_keyboard.html","text":"\"Keyboard Events\": Harlowe (v2.0) # Summary # \"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all keyup events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers. Example # Download Twee Code # :: StoryTitle Harlowe: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Twee Download","title":"Harlowe"},{"location":"keyboard/harlowe/harlowe_keyboard.html#keyboard-events-harlowe-v20","text":"","title":"\"Keyboard Events\": Harlowe (v2.0)"},{"location":"keyboard/harlowe/harlowe_keyboard.html#summary","text":"\"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all keyup events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers.","title":"Summary"},{"location":"keyboard/harlowe/harlowe_keyboard.html#example","text":"Download","title":"Example"},{"location":"keyboard/harlowe/harlowe_keyboard.html#twee-code","text":":: StoryTitle Harlowe: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Twee Download","title":"Twee Code"},{"location":"keyboard/snowman/snowman_keyboard.html","text":"\"Keyboard Events\": Snowman (v1.3.0) # Summary # \"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers. Example # Download Twee Code # :: StoryTitle Snowman: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Twee Download","title":"Snowman"},{"location":"keyboard/snowman/snowman_keyboard.html#keyboard-events-snowman-v130","text":"","title":"\"Keyboard Events\": Snowman (v1.3.0)"},{"location":"keyboard/snowman/snowman_keyboard.html#summary","text":"\"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers.","title":"Summary"},{"location":"keyboard/snowman/snowman_keyboard.html#example","text":"Download","title":"Example"},{"location":"keyboard/snowman/snowman_keyboard.html#twee-code","text":":: StoryTitle Snowman: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Twee Download","title":"Twee Code"},{"location":"keyboard/sugarcube/sugarcube_keyboard.html","text":"\"Keyboard Events\": SugarCube (v2.18) # Summary # \"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers. Example # Download Twee Code # :: StoryTitle SugarCube: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { UI.alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Twee Download","title":"SugarCube"},{"location":"keyboard/sugarcube/sugarcube_keyboard.html#keyboard-events-sugarcube-v218","text":"","title":"\"Keyboard Events\": SugarCube (v2.18)"},{"location":"keyboard/sugarcube/sugarcube_keyboard.html#summary","text":"\"Keyboard Events\" demonstrates how to capture keyboard events and then how to associate individual keys with activities within a story. The example uses jQuery's on() function to monitor for all \"keyup\" events . Once a \"keyup\" event has occurred, two values are available: The keyCode property: the numerical value representing the key presented in its decimal ASCII code supported by effectively all browsers. The key property: the string value of the key presented supported by most modern web-browsers.","title":"Summary"},{"location":"keyboard/sugarcube/sugarcube_keyboard.html#example","text":"Download","title":"Example"},{"location":"keyboard/sugarcube/sugarcube_keyboard.html#twee-code","text":":: StoryTitle SugarCube: Keyboard :: UserScript[script] (function () { $(document).on('keyup', function (ev) { /* the ev variable contains a keyup event object. * * ev.keyCode - contains the ASCII code of the key that was released, this property is supported in effectively all browsers. * ev.key - contains the key value of the key that was released, this property is supported by most modern browsers. * */ /* the following shows an alert when the 'a' key is released. */ if (ev.key === 'a') { UI.alert(\"the 'a' key was released.\"); } }); }()); :: Start Press and release the ''a'' key to show an Alert dialog. Twee Download","title":"Twee Code"},{"location":"loadscreen/sugarcube/sugarcube_loadscreen.html","text":"\"Loading Screen\": SugarCube (v2.18) # Summary # \"Loading Screen\" demonstrates how the LockScreen.lock() and LockScreen.unlock() functions work in SugarCube. (This example also uses the setTimeout() JavaScript function.) Example # Download Twee Code # :: StoryTitle Loading Screen in SugarCube :: UserScript[script] // Lock the screen and save the ID var lockID = LoadScreen.lock(); // Pause for 5 second before unlocking the screen setTimeout(function(){ LoadScreen.unlock(lockID); }, 5000); :: Start You can now see this after the long pause! Twee Download","title":"SugarCube"},{"location":"loadscreen/sugarcube/sugarcube_loadscreen.html#loading-screen-sugarcube-v218","text":"","title":"\"Loading Screen\": SugarCube (v2.18)"},{"location":"loadscreen/sugarcube/sugarcube_loadscreen.html#summary","text":"\"Loading Screen\" demonstrates how the LockScreen.lock() and LockScreen.unlock() functions work in SugarCube. (This example also uses the setTimeout() JavaScript function.)","title":"Summary"},{"location":"loadscreen/sugarcube/sugarcube_loadscreen.html#example","text":"Download","title":"Example"},{"location":"loadscreen/sugarcube/sugarcube_loadscreen.html#twee-code","text":":: StoryTitle Loading Screen in SugarCube :: UserScript[script] // Lock the screen and save the ID var lockID = LoadScreen.lock(); // Pause for 5 second before unlocking the screen setTimeout(function(){ LoadScreen.unlock(lockID); }, 5000); :: Start You can now see this after the long pause! Twee Download","title":"Twee Code"},{"location":"lockandkey_variable/chapbook/chapbook_lockandkey_variable.html","text":"\"Lock and Key: Variable\": Chapbook (v1.0.0) # Summary # \"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( key ) and is initially set to the value \"false\" in the Start passage. When the link \"Pick up key\" is clicked in the \"Back Room\" passage, key is changed to the value \"true\" via embedding the passage \"Key\". When the passage is visited and key is set to the value of \"true\", door link changes from its initial response of \"Locked Door\" to \"Unlock the door\". Example # Download Twee Code # :: StoryTitle Chapbook: Lock and Key: Variable :: Start key: false -- Rooms: [[Front Room]] [[Back Room]] :: Front Room [if key == true] [[Unlock the door->Exit]] [else] *Locked Door* [continued] Rooms: [[Back Room]] :: Back Room [if key == false] Items: {reveal link: 'Pick up key', passage: 'Key'} [else] There is nothing here. [continued] Rooms: [[Front Room]] :: Exit You found the key and went through the door! :: Key key: true -- You picked up the key! Twee Download","title":"Chapbook"},{"location":"lockandkey_variable/chapbook/chapbook_lockandkey_variable.html#lock-and-key-variable-chapbook-v100","text":"","title":"\"Lock and Key: Variable\": Chapbook (v1.0.0)"},{"location":"lockandkey_variable/chapbook/chapbook_lockandkey_variable.html#summary","text":"\"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( key ) and is initially set to the value \"false\" in the Start passage. When the link \"Pick up key\" is clicked in the \"Back Room\" passage, key is changed to the value \"true\" via embedding the passage \"Key\". When the passage is visited and key is set to the value of \"true\", door link changes from its initial response of \"Locked Door\" to \"Unlock the door\".","title":"Summary"},{"location":"lockandkey_variable/chapbook/chapbook_lockandkey_variable.html#example","text":"Download","title":"Example"},{"location":"lockandkey_variable/chapbook/chapbook_lockandkey_variable.html#twee-code","text":":: StoryTitle Chapbook: Lock and Key: Variable :: Start key: false -- Rooms: [[Front Room]] [[Back Room]] :: Front Room [if key == true] [[Unlock the door->Exit]] [else] *Locked Door* [continued] Rooms: [[Back Room]] :: Back Room [if key == false] Items: {reveal link: 'Pick up key', passage: 'Key'} [else] There is nothing here. [continued] Rooms: [[Front Room]] :: Exit You found the key and went through the door! :: Key key: true -- You picked up the key! Twee Download","title":"Twee Code"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html","text":"\"Lock and Key: Variable\": Harlowe (v2.0) # Information This example is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values. Summary # \"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( $key ) and is initially set to the value \"false\" in the Start passage. When the link \"Pick up the key\" is clicked, $key is changed to the value \"true\" and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit. Example # Download Twee Code # :: StoryTitle Lock and Key: Variable in Harlowe :: Start (set: $key to false) Rooms: [[Front Room]] [[Back Room]] :: Front Room (if: $key is true)[ [[Exit]] ] (else:)[ *Locked Door* ] Rooms: [[Back Room]] :: Back Room (if: $key is false)[ Items: (link: \"Pick up key\")[(set: $key to true)You have a key.] ] (else:)[ There is nothing here. ] Rooms: [[Front Room]] :: Exit You found the key and went through the door! Download See Also # Setting and Showing Variables","title":"Harlowe"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html#lock-and-key-variable-harlowe-v20","text":"Information This example is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values.","title":"\"Lock and Key: Variable\": Harlowe (v2.0)"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html#summary","text":"\"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( $key ) and is initially set to the value \"false\" in the Start passage. When the link \"Pick up the key\" is clicked, $key is changed to the value \"true\" and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit.","title":"Summary"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html#example","text":"Download","title":"Example"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html#twee-code","text":":: StoryTitle Lock and Key: Variable in Harlowe :: Start (set: $key to false) Rooms: [[Front Room]] [[Back Room]] :: Front Room (if: $key is true)[ [[Exit]] ] (else:)[ *Locked Door* ] Rooms: [[Back Room]] :: Back Room (if: $key is false)[ Items: (link: \"Pick up key\")[(set: $key to true)You have a key.] ] (else:)[ There is nothing here. ] Rooms: [[Front Room]] :: Exit You found the key and went through the door! Download","title":"Twee Code"},{"location":"lockandkey_variable/harlowe/harlowe_lockandkey_variable.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html","text":"\"Lock and Key: Variable\": Snowman (v1.3) # Summary # \"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( s.key ) and does not initially exist in the Start passage. When the link \"Pick up the key\" is clicked, s.key is changed to the value \"true\" and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit. Example # Download Twee Code # :: StoryTitle Lock and Key: Variable in Snowman :: Start Rooms: - [[Front Room]] - [[Back Room]] :: Front Room <% if (s.key) { %> [[Exit]] <% } else { %> *Locked Door* <% } %> Rooms: - [[Back Room]] :: Back Room <% if (!s.key) { %> Items: - <a href=\"javascript:void(0)\" class=\"key-item\">Pick up key</a> <% } else { %> There is nothing here. <% } %> <% $(function() { $('.key-item').click(function() { s.key = true; $(this).replaceWith('<span>You have a key.</span>'); }); }); %> Rooms: - [[Front Room]] :: Exit You found the key and went through the door! Twee Download See Also # Setting and Showing Variables","title":"Snowman"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html#lock-and-key-variable-snowman-v13","text":"","title":"\"Lock and Key: Variable\": Snowman (v1.3)"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html#summary","text":"\"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( s.key ) and does not initially exist in the Start passage. When the link \"Pick up the key\" is clicked, s.key is changed to the value \"true\" and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit.","title":"Summary"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html#example","text":"Download","title":"Example"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html#twee-code","text":":: StoryTitle Lock and Key: Variable in Snowman :: Start Rooms: - [[Front Room]] - [[Back Room]] :: Front Room <% if (s.key) { %> [[Exit]] <% } else { %> *Locked Door* <% } %> Rooms: - [[Back Room]] :: Back Room <% if (!s.key) { %> Items: - <a href=\"javascript:void(0)\" class=\"key-item\">Pick up key</a> <% } else { %> There is nothing here. <% } %> <% $(function() { $('.key-item').click(function() { s.key = true; $(this).replaceWith('<span>You have a key.</span>'); }); }); %> Rooms: - [[Front Room]] :: Exit You found the key and went through the door! Twee Download","title":"Twee Code"},{"location":"lockandkey_variable/snowman/snowman_lockandkey_variable.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html","text":"\"Lock and Key: Variable\": SugarCube (v2.18) # Information This example is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values. Summary # \"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( $key ) and is initially set to the value false in the Start passage. When the link (created using a <<linkreplace>> macro) \"Pick up the key\" is clicked, $key is changed to the value true and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit. Example # Download Twee Code # :: StoryTitle Lock and Key: Variable in SugarCube :: Start <<set $key to false>> Rooms: [[Back Room]] [[Front Room]] :: Back Room <<if $key is false>> Items: <<linkreplace \"Pick up the key\">><<set $key to true>>You have a key.<</linkreplace>> <<else>> There is nothing here. <</if>> Rooms: [[Front Room]] :: Front Room <<if $key is true>> [[Exit]] <<else>> Locked Door <</if>> Rooms: [[Back Room]] :: Exit You found the key and went through the door! Twee Download See Also # Setting and Showing Variables","title":"SugarCube"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html#lock-and-key-variable-sugarcube-v218","text":"Information This example is affected by history changes in the story. Undoing or re-doing back to a passage containing this recipe has the potential to change its saved values.","title":"\"Lock and Key: Variable\": SugarCube (v2.18)"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html#summary","text":"\"Lock and Key: Variable\" demonstrates how to create the effect of picking up a key and unlocking a door. In this example, the key is a variable ( $key ) and is initially set to the value false in the Start passage. When the link (created using a <<linkreplace>> macro) \"Pick up the key\" is clicked, $key is changed to the value true and the door link changes from its initial response of \"Locked Door\" to a link to the passage Exit.","title":"Summary"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html#example","text":"Download","title":"Example"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html#twee-code","text":":: StoryTitle Lock and Key: Variable in SugarCube :: Start <<set $key to false>> Rooms: [[Back Room]] [[Front Room]] :: Back Room <<if $key is false>> Items: <<linkreplace \"Pick up the key\">><<set $key to true>>You have a key.<</linkreplace>> <<else>> There is nothing here. <</if>> Rooms: [[Front Room]] :: Front Room <<if $key is true>> [[Exit]] <<else>> Locked Door <</if>> Rooms: [[Back Room]] :: Exit You found the key and went through the door! Twee Download","title":"Twee Code"},{"location":"lockandkey_variable/sugarcube/sugarcube_lockandkey_variable.html#see-also","text":"Setting and Showing Variables","title":"See Also"},{"location":"looping/chapbook/chapbook_looping.html","text":"\"Looping\": Chapbook (v1.0.0) # Summary # In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In Chapbook, the modifier [JavaScript] allows for using JavaScript inside a passage. Through using the forEach() function of Arrays and the write() function supplied by Chapbook, each entry within an array can be shown. Example # Download Twee Code # :: StoryTitle Chapbook: Looping :: Start exampleArray: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61] -- The values of the array are: <ul> [JavaScript] exampleArray.forEach(function(value, index){ write(\"<li>\" + value + \"</li>\"); }); [continued] </ul> Twee Download","title":"Chapbook"},{"location":"looping/chapbook/chapbook_looping.html#looping-chapbook-v100","text":"","title":"\"Looping\": Chapbook (v1.0.0)"},{"location":"looping/chapbook/chapbook_looping.html#summary","text":"In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In Chapbook, the modifier [JavaScript] allows for using JavaScript inside a passage. Through using the forEach() function of Arrays and the write() function supplied by Chapbook, each entry within an array can be shown.","title":"Summary"},{"location":"looping/chapbook/chapbook_looping.html#example","text":"Download","title":"Example"},{"location":"looping/chapbook/chapbook_looping.html#twee-code","text":":: StoryTitle Chapbook: Looping :: Start exampleArray: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61] -- The values of the array are: <ul> [JavaScript] exampleArray.forEach(function(value, index){ write(\"<li>\" + value + \"</li>\"); }); [continued] </ul> Twee Download","title":"Twee Code"},{"location":"looping/harlowe/harlowe_looping.html","text":"\"Looping\": Harlowe (v2.0) # Summary # In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In Harlowe, the macros (loop:) and (for:) provide this functionality. Combined with the keywords each , to move through all entries, or \"where,\" to specify some condition, they allow for \"looping\" through data structures like arrays or datamaps. In this example, the variable arrayInventory is set to the value of an array containing the strings \"Bread\", \"Pan\", and \"Book\". The (for:) macro is used with the keyword each to set the values contained in the array to the temporary variable _temp for each value of the spread out array. The text contained in the associated hook to the (for:) macro is shown each loop with the value of _temp changed for each value in the array. Example # Download Twee Code # :: StoryTitle Looping in Harlowe :: Start <!-- Create an array of the strings \"Bread\", \"Pan\", \"Book\" --> (set: $arrayInventory to (a: \"Bread\", \"Pan\", \"Book\") ) <!-- For each entry in the expanded array in turn, --> <!-- set the entry to the temporary variable _temp --> (for: each _temp, ...$arrayInventory)[ You have _temp.] Twee Download","title":"Harlowe"},{"location":"looping/harlowe/harlowe_looping.html#looping-harlowe-v20","text":"","title":"\"Looping\": Harlowe (v2.0)"},{"location":"looping/harlowe/harlowe_looping.html#summary","text":"In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In Harlowe, the macros (loop:) and (for:) provide this functionality. Combined with the keywords each , to move through all entries, or \"where,\" to specify some condition, they allow for \"looping\" through data structures like arrays or datamaps. In this example, the variable arrayInventory is set to the value of an array containing the strings \"Bread\", \"Pan\", and \"Book\". The (for:) macro is used with the keyword each to set the values contained in the array to the temporary variable _temp for each value of the spread out array. The text contained in the associated hook to the (for:) macro is shown each loop with the value of _temp changed for each value in the array.","title":"Summary"},{"location":"looping/harlowe/harlowe_looping.html#example","text":"Download","title":"Example"},{"location":"looping/harlowe/harlowe_looping.html#twee-code","text":":: StoryTitle Looping in Harlowe :: Start <!-- Create an array of the strings \"Bread\", \"Pan\", \"Book\" --> (set: $arrayInventory to (a: \"Bread\", \"Pan\", \"Book\") ) <!-- For each entry in the expanded array in turn, --> <!-- set the entry to the temporary variable _temp --> (for: each _temp, ...$arrayInventory)[ You have _temp.] Twee Download","title":"Twee Code"},{"location":"looping/snowman/snowman_looping.html","text":"\"Looping\": Snowman (v1.3.0) # Summary # In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. Because Snowman does not provide macros, the existing JavaScript for keyword can be used to create loops. Since Snowman also includes the Underscore.js and jQuery libraries, the _.each() and jQuery.each() functions can also be used. In this example, the s global shortcut to the window.story.state variable used. A new property called \"arrayInventory\" is set to the series of values \"Bread\", \"Pan\", and \"Book\". The first example uses the JavaScript for keyword to move through the values. The second example uses the _.each() function in Underscore.js, and the third uses the jQuery.each() function for the same purpose. Live Example # Download Twee Code # :: StoryTitle Looping in Snowman :: Start <% // An array of the strings \"Bread\", \"Pan\", \"Book\" s.arrayInventory = [\"Bread\", \"Pan\", \"Book\"]; // An example using JavaScript for (var i = 0; i < s.arrayInventory.length; i++){ %>You have <%= s.arrayInventory[i] %>.<br> <% } %> <hr> <% // An example using Underscore.js _.each(s.arrayInventory, function(item) { %>You have <%= item %>.<br> <% }); %> <hr> <% // An example using jQuery jQuery.each(s.arrayInventory, function( index, value ) { %>You have <%= value %>.<br> <% }); %> Twee Download","title":"Snowman"},{"location":"looping/snowman/snowman_looping.html#looping-snowman-v130","text":"","title":"\"Looping\": Snowman (v1.3.0)"},{"location":"looping/snowman/snowman_looping.html#summary","text":"In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. Because Snowman does not provide macros, the existing JavaScript for keyword can be used to create loops. Since Snowman also includes the Underscore.js and jQuery libraries, the _.each() and jQuery.each() functions can also be used. In this example, the s global shortcut to the window.story.state variable used. A new property called \"arrayInventory\" is set to the series of values \"Bread\", \"Pan\", and \"Book\". The first example uses the JavaScript for keyword to move through the values. The second example uses the _.each() function in Underscore.js, and the third uses the jQuery.each() function for the same purpose.","title":"Summary"},{"location":"looping/snowman/snowman_looping.html#live-example","text":"Download","title":"Live Example"},{"location":"looping/snowman/snowman_looping.html#twee-code","text":":: StoryTitle Looping in Snowman :: Start <% // An array of the strings \"Bread\", \"Pan\", \"Book\" s.arrayInventory = [\"Bread\", \"Pan\", \"Book\"]; // An example using JavaScript for (var i = 0; i < s.arrayInventory.length; i++){ %>You have <%= s.arrayInventory[i] %>.<br> <% } %> <hr> <% // An example using Underscore.js _.each(s.arrayInventory, function(item) { %>You have <%= item %>.<br> <% }); %> <hr> <% // An example using jQuery jQuery.each(s.arrayInventory, function( index, value ) { %>You have <%= value %>.<br> <% }); %> Twee Download","title":"Twee Code"},{"location":"looping/sugarcube/sugarcube_looping.html","text":"\"Looping\": SugarCube (v2.18) # Summary # In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In SugarCube, the control macro <<for>> provides this functionality. It acts like the for keyword in JavaScript and its usage works in a similar way. In this example, the array arrayInventory is set to the series of strings \"Bread\", \"Pan\", and \"Book\". Using the <<for>> macro, a temporary variable is set to 0 and increased for each loop until its value is no longer less than the length (number of entries) in the array. Inside the macro, the text is shown each time with the value of the entry matching the position of the value of _i in the array substituted. Example # Download Twee Code # :: StoryTitle Looping in SugarCube :: Start <!-- Set the variable $arrayInventory to the array containing \"Bread\", \"Pan\", \"Book\" --> <<set $arrayInventory to [\"Bread\", \"Pan\", \"Book\"]>> <!-- Set the temporary variable _l to 0 and increase it until it is greater than the length of the array $arrayInventory --> <<for _i to 0; _i lt $arrayInventory.length; _i++>> You have $arrayInventory[_i] <</for>> Twee Download","title":"SugarCube"},{"location":"looping/sugarcube/sugarcube_looping.html#looping-sugarcube-v218","text":"","title":"\"Looping\": SugarCube (v2.18)"},{"location":"looping/sugarcube/sugarcube_looping.html#summary","text":"In programming terminology, a \"loop\" is a common technique for iterating, moving through one by one, some type of data. In SugarCube, the control macro <<for>> provides this functionality. It acts like the for keyword in JavaScript and its usage works in a similar way. In this example, the array arrayInventory is set to the series of strings \"Bread\", \"Pan\", and \"Book\". Using the <<for>> macro, a temporary variable is set to 0 and increased for each loop until its value is no longer less than the length (number of entries) in the array. Inside the macro, the text is shown each time with the value of the entry matching the position of the value of _i in the array substituted.","title":"Summary"},{"location":"looping/sugarcube/sugarcube_looping.html#example","text":"Download","title":"Example"},{"location":"looping/sugarcube/sugarcube_looping.html#twee-code","text":":: StoryTitle Looping in SugarCube :: Start <!-- Set the variable $arrayInventory to the array containing \"Bread\", \"Pan\", \"Book\" --> <<set $arrayInventory to [\"Bread\", \"Pan\", \"Book\"]>> <!-- Set the temporary variable _l to 0 and increase it until it is greater than the length of the array $arrayInventory --> <<for _i to 0; _i lt $arrayInventory.length; _i++>> You have $arrayInventory[_i] <</for>> Twee Download","title":"Twee Code"},{"location":"markup/chapbook/chapbook_markup.html","text":"\"Style Markup\": Chapbook (v1.0.0) # Information The Text Formatting section of the Chapbook Guide states you can also use a # character to indicate a Numbered List item. This currently (as of v1.0.0-beta) isn't correct, as that character actually results in a Level 1 Header. Summary # Chapbook uses a customized sub-set of Markdown to support its style formatting. Example # Download Twee Code # :: StoryTitle Style Markup in Chapbook :: Start *Emphasis (aka Italics)* or _using single underscores_ <br> **Strong Emphasis (aka Bold)** or __using double underscores__ <br> Combined Emphasis with **asterisks and _underscores_** <br> <del>Strikethrough text</del> <br> Super<sup>script</sup> <br> Sub<sub>script</sub> <br> `Monospaced Type (aka Code Block)` <br> ~~Small Caps~~ <blockquote>Quote</blockquote> * A Bulleted list item (using asterisk) * Another Bulleted list item (using asterisk) - A Bulleted list item (using minus) - Another Bulleted list item (using minus) + A Bulleted list item (using plus) + Another Bulleted list item (using plus) 1. A Numbered list item 2. Another Numbered list item [align left] Text is left-aligned. [align center] Text is centered / centred. [align right] Text is right-aligned. [Continue] Text-alignment has been reset to the default. Ignoring of \\*Formatting\\* Characters <br> More ignoring of \\_\\_Formatting\\_\\_ Characters Above Section Break is Chapbook specific or standard HTML... *** Below Section Break is supported Markdown extras... # Level 1 Heading ## Level 2 Heading ### Level 3 Heading #### Level 4 Heading ##### Level 5 Heading ###### Level 6 Heading Alternative Level 1 Heading ====== Alternative Level 2 Heading ------ | Table mark-up | with | alignment | | --- | :---: | ---: | | column 1 is | left-aligned | 1 | | col 2 is | centered | 10 | | col 3 is | right-aligned | 100 | Twee Download","title":"Chapbook"},{"location":"markup/chapbook/chapbook_markup.html#style-markup-chapbook-v100","text":"Information The Text Formatting section of the Chapbook Guide states you can also use a # character to indicate a Numbered List item. This currently (as of v1.0.0-beta) isn't correct, as that character actually results in a Level 1 Header.","title":"\"Style Markup\": Chapbook (v1.0.0)"},{"location":"markup/chapbook/chapbook_markup.html#summary","text":"Chapbook uses a customized sub-set of Markdown to support its style formatting.","title":"Summary"},{"location":"markup/chapbook/chapbook_markup.html#example","text":"Download","title":"Example"},{"location":"markup/chapbook/chapbook_markup.html#twee-code","text":":: StoryTitle Style Markup in Chapbook :: Start *Emphasis (aka Italics)* or _using single underscores_ <br> **Strong Emphasis (aka Bold)** or __using double underscores__ <br> Combined Emphasis with **asterisks and _underscores_** <br> <del>Strikethrough text</del> <br> Super<sup>script</sup> <br> Sub<sub>script</sub> <br> `Monospaced Type (aka Code Block)` <br> ~~Small Caps~~ <blockquote>Quote</blockquote> * A Bulleted list item (using asterisk) * Another Bulleted list item (using asterisk) - A Bulleted list item (using minus) - Another Bulleted list item (using minus) + A Bulleted list item (using plus) + Another Bulleted list item (using plus) 1. A Numbered list item 2. Another Numbered list item [align left] Text is left-aligned. [align center] Text is centered / centred. [align right] Text is right-aligned. [Continue] Text-alignment has been reset to the default. Ignoring of \\*Formatting\\* Characters <br> More ignoring of \\_\\_Formatting\\_\\_ Characters Above Section Break is Chapbook specific or standard HTML... *** Below Section Break is supported Markdown extras... # Level 1 Heading ## Level 2 Heading ### Level 3 Heading #### Level 4 Heading ##### Level 5 Heading ###### Level 6 Heading Alternative Level 1 Heading ====== Alternative Level 2 Heading ------ | Table mark-up | with | alignment | | --- | :---: | ---: | | column 1 is | left-aligned | 1 | | col 2 is | centered | 10 | | col 3 is | right-aligned | 100 | Twee Download","title":"Twee Code"},{"location":"markup/harlowe/harlowe_markup.html","text":"\"Style Markup\": Harlowe (v2.0) # Summary # In Harlowe , style markup can take many forms. Covering italics and boldface as basic examples, Harlowe also provides markup for creating alignment and columns as well. Example # Download Twee Code # :: StoryTitle Style Markup in Harlowe :: Start //Italics// ''Boldface'' ~~Strikethrough text~~ *Emphasis* **Strong emphasis** Super^^script^^ ``[[Escaped double square brackets]]`` #Level 1 heading ##Level 2 heading ###Level 3 heading ####Level 4 heading #####Level 5 heading ######Level 6 heading * Bulleted item * Bulleted item 2 ** Indented bulleted item 0. Numbered item 0. Numbered item 2 0.0. Indented numbered item ==> This is right-aligned =><= This is centered <==> This is justified <== This is left-aligned (undoes the above) ===><= This has margins 3/4 left, 1/4 right =><===== This has margins 1/6 left, 5/6 right. |== This is in the leftmost column, which has a right margin of about 2 letters wide. =|||= This is in the next column, which has margins of 1 letter wide. It is three times as wide as the left column. =====|| This is in the right column, which has a right margin of about 5 letters wide. It is twice as wide as the left column. |==| This text is not in columns, but takes up the entire width, as usual. Twee Download","title":"Harlowe"},{"location":"markup/harlowe/harlowe_markup.html#style-markup-harlowe-v20","text":"","title":"\"Style Markup\": Harlowe (v2.0)"},{"location":"markup/harlowe/harlowe_markup.html#summary","text":"In Harlowe , style markup can take many forms. Covering italics and boldface as basic examples, Harlowe also provides markup for creating alignment and columns as well.","title":"Summary"},{"location":"markup/harlowe/harlowe_markup.html#example","text":"Download","title":"Example"},{"location":"markup/harlowe/harlowe_markup.html#twee-code","text":":: StoryTitle Style Markup in Harlowe :: Start //Italics// ''Boldface'' ~~Strikethrough text~~ *Emphasis* **Strong emphasis** Super^^script^^ ``[[Escaped double square brackets]]`` #Level 1 heading ##Level 2 heading ###Level 3 heading ####Level 4 heading #####Level 5 heading ######Level 6 heading * Bulleted item * Bulleted item 2 ** Indented bulleted item 0. Numbered item 0. Numbered item 2 0.0. Indented numbered item ==> This is right-aligned =><= This is centered <==> This is justified <== This is left-aligned (undoes the above) ===><= This has margins 3/4 left, 1/4 right =><===== This has margins 1/6 left, 5/6 right. |== This is in the leftmost column, which has a right margin of about 2 letters wide. =|||= This is in the next column, which has margins of 1 letter wide. It is three times as wide as the left column. =====|| This is in the right column, which has a right margin of about 5 letters wide. It is twice as wide as the left column. |==| This text is not in columns, but takes up the entire width, as usual. Twee Download","title":"Twee Code"},{"location":"markup/snowman/snowman_markup.html","text":"\"Style Markup\": Snowman (v1.3.0) # Summary # Snowman uses a sub-set of markdown for in-line styling. Snowman does not support multi-line markdown variations. Example # Download Twee Code # :: StoryTitle Style Markup in Snowman :: Start *Emphasis* or _Emphasis_. **Strong emphasis** or __Strong emphasis__. ~~Strikethrough~~ 1. First ordered list item 2. Another item # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Escaped code line. Another line of code. | Tables | Are | Cool | | ------------- |:-------------:| -------------:| | col 3 | is | right-aligned | | col 2 | is | centered | | col 1 | is | left-aligned | > Blockquotes are useful. > This line is part of the same quote. Twee Download","title":"Snowman"},{"location":"markup/snowman/snowman_markup.html#style-markup-snowman-v130","text":"","title":"\"Style Markup\": Snowman (v1.3.0)"},{"location":"markup/snowman/snowman_markup.html#summary","text":"Snowman uses a sub-set of markdown for in-line styling. Snowman does not support multi-line markdown variations.","title":"Summary"},{"location":"markup/snowman/snowman_markup.html#example","text":"Download","title":"Example"},{"location":"markup/snowman/snowman_markup.html#twee-code","text":":: StoryTitle Style Markup in Snowman :: Start *Emphasis* or _Emphasis_. **Strong emphasis** or __Strong emphasis__. ~~Strikethrough~~ 1. First ordered list item 2. Another item # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Escaped code line. Another line of code. | Tables | Are | Cool | | ------------- |:-------------:| -------------:| | col 3 | is | right-aligned | | col 2 | is | centered | | col 1 | is | left-aligned | > Blockquotes are useful. > This line is part of the same quote. Twee Download","title":"Twee Code"},{"location":"markup/sugarcane/sugarcane_markup.html","text":"\"Style Markup\": Sugarcane (v1.4.2) # Warning The following example is designed for Twine 1.4.2. Summary # Style formatting in Twine 1.4.2 is supported across all story formats and includes both more basic markup such as emphasis and strong emphasis and the more advanced construction of HTML tables. Example # Download Twee Code # :: Start Italics: //text// Boldface: ''text'' Underline: __text__ Strikethrough: ==text== Subscript: H~~2~~O Superscript: meters/second^^2^^ Comment: /%a comment%/ Error: @@error@@ Inline styling: @@font-weight:bold;text@@ Bulleted list: * one * two Numbered list: # one # two !Heading 1 !!Heading 2 !!!Heading 3 !!!!Heading 4 !!!!!Heading 5 !!!!!!Heading 6 |!table header |!table header |!table header | |row 1|row 1|row 1| |row 2|row 2|row 2| |>|row 3|row 3| |>|>|row 4| |rows 5 and 6|row 5|row 5| |~|row 6|row 6| |rows 7, 8 and 9|>|row 7| |~|>|row 8| |~|row 9|row 9| |table caption|c :: StoryTitle Style Markup :: StoryAuthor Videlais Twee Download","title":"Sugarcane (1.4.2)"},{"location":"markup/sugarcane/sugarcane_markup.html#style-markup-sugarcane-v142","text":"Warning The following example is designed for Twine 1.4.2.","title":"\"Style Markup\": Sugarcane (v1.4.2)"},{"location":"markup/sugarcane/sugarcane_markup.html#summary","text":"Style formatting in Twine 1.4.2 is supported across all story formats and includes both more basic markup such as emphasis and strong emphasis and the more advanced construction of HTML tables.","title":"Summary"},{"location":"markup/sugarcane/sugarcane_markup.html#example","text":"Download","title":"Example"},{"location":"markup/sugarcane/sugarcane_markup.html#twee-code","text":":: Start Italics: //text// Boldface: ''text'' Underline: __text__ Strikethrough: ==text== Subscript: H~~2~~O Superscript: meters/second^^2^^ Comment: /%a comment%/ Error: @@error@@ Inline styling: @@font-weight:bold;text@@ Bulleted list: * one * two Numbered list: # one # two !Heading 1 !!Heading 2 !!!Heading 3 !!!!Heading 4 !!!!!Heading 5 !!!!!!Heading 6 |!table header |!table header |!table header | |row 1|row 1|row 1| |row 2|row 2|row 2| |>|row 3|row 3| |>|>|row 4| |rows 5 and 6|row 5|row 5| |~|row 6|row 6| |rows 7, 8 and 9|>|row 7| |~|>|row 8| |~|row 9|row 9| |table caption|c :: StoryTitle Style Markup :: StoryAuthor Videlais Twee Download","title":"Twee Code"},{"location":"markup/sugarcube/sugarcube_markup.html","text":"\"Style Markup\": SugarCube (v2.18) # Summary # In SugarCube , style markup follows initial rules established in earlier versions of Twine while also adding many new ones. Example # Download Twee Code # :: StoryTitle Style Markup in SugarCube :: Start //Emphasis// ''Strong Emphasis'' ==Strikethrough== Super^^script^^ Sub~~script~~ > Quote >> Nested quote * A list item * Another list item # A list item # Another list item \"\"\"No //format//\"\"\" @@Highlight Inline@@ !Level 1 Heading !!Level 2 Heading !!!Level 3 Heading !!!!Level 4 Heading !!!!!Level 5 Heading !!!!!!Level 6 Heading Twee Download","title":"SugarCube"},{"location":"markup/sugarcube/sugarcube_markup.html#style-markup-sugarcube-v218","text":"","title":"\"Style Markup\": SugarCube (v2.18)"},{"location":"markup/sugarcube/sugarcube_markup.html#summary","text":"In SugarCube , style markup follows initial rules established in earlier versions of Twine while also adding many new ones.","title":"Summary"},{"location":"markup/sugarcube/sugarcube_markup.html#example","text":"Download","title":"Example"},{"location":"markup/sugarcube/sugarcube_markup.html#twee-code","text":":: StoryTitle Style Markup in SugarCube :: Start //Emphasis// ''Strong Emphasis'' ==Strikethrough== Super^^script^^ Sub~~script~~ > Quote >> Nested quote * A list item * Another list item # A list item # Another list item \"\"\"No //format//\"\"\" @@Highlight Inline@@ !Level 1 Heading !!Level 2 Heading !!!Level 3 Heading !!!!Level 4 Heading !!!!!Level 5 Heading !!!!!!Level 6 Heading Twee Download","title":"Twee Code"},{"location":"modal/harlowe/harlowe_modal.html","text":"\"Modal (Pop-up Window)\": Harlowe (v2.0) # Summary # This example creates a re-usable modal window . It can be opened using the combination of (link-repeat:) and (replace:) to create the window in an existing hook, and be 'closed' using the same macros to remove the window. CSS rules are applied with (css:) to style the modal, and to change an enclosing hook into a \"dimmer\" which obscures the rest of the page. Example # Download Twee Code # :: StoryTitle Harlowe: Modal :: Header[header] |modalhooks>[] :: Modal code (replace: ?modalhooks)[{ (css:\" position: fixed; display:block; z-index: 1; left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgba(0,0,0,0.4); \")[ (css:\" display:block; margin: 15% auto; padding: 20px; width: 80%; border: 1px solid white; \")|modal>[ (css:\"float:right\")+(link-repeat:\"\u00d7\")[(replace: ?modalhooks)[]] ] ] }] :: Start (link-repeat:\"Open Modal!\")[(display:\"Modal code\")(append:?modal)[Some text in the modal...]] Twee Download","title":"Harlowe"},{"location":"modal/harlowe/harlowe_modal.html#modal-pop-up-window-harlowe-v20","text":"","title":"\"Modal (Pop-up Window)\": Harlowe (v2.0)"},{"location":"modal/harlowe/harlowe_modal.html#summary","text":"This example creates a re-usable modal window . It can be opened using the combination of (link-repeat:) and (replace:) to create the window in an existing hook, and be 'closed' using the same macros to remove the window. CSS rules are applied with (css:) to style the modal, and to change an enclosing hook into a \"dimmer\" which obscures the rest of the page.","title":"Summary"},{"location":"modal/harlowe/harlowe_modal.html#example","text":"Download","title":"Example"},{"location":"modal/harlowe/harlowe_modal.html#twee-code","text":":: StoryTitle Harlowe: Modal :: Header[header] |modalhooks>[] :: Modal code (replace: ?modalhooks)[{ (css:\" position: fixed; display:block; z-index: 1; left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgba(0,0,0,0.4); \")[ (css:\" display:block; margin: 15% auto; padding: 20px; width: 80%; border: 1px solid white; \")|modal>[ (css:\"float:right\")+(link-repeat:\"\u00d7\")[(replace: ?modalhooks)[]] ] ] }] :: Start (link-repeat:\"Open Modal!\")[(display:\"Modal code\")(append:?modal)[Some text in the modal...]] Twee Download","title":"Twee Code"},{"location":"modal/snowman/snowman_modal.html","text":"\"Modal (Pop-up Window)\": Snowman (1.3.0) # Summary # This example uses the jQuery click() and show()/hide() functions to watch for the user clicking on a button (to open) or \"X\" (to close). Additional CSS rules are used to create the effect of having the content 'behind' the modal window be darkened and unusable until the modal itself is closed. Example # Download Twee Code # :: StoryTitle Snowman: Modal :: UserScript[script] $(function(){ // When the user clicks the button, open the modal $(\"#myBtn\").click(function() { $(\"#myModal\").show(); }); // When the user clicks on <span> (x), close the modal $(\".close\").click(function() { $(\"#myModal\").hide(); }); }); :: UserStylesheet[stylesheet] /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ padding-top: 100px; /* Location of the box */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ } /* Modal Content */ .modal-content { background-color: #fefefe; margin: auto; padding: 20px; border: 1px solid #888; width: 80%; } /* The Close Button */ .close { color: #aaaaaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: #000; text-decoration: none; cursor: pointer; } :: Start <button id=\"myBtn\">Open Modal</button> <div id=\"myModal\" class=\"modal\"> <div class=\"modal-content\"> <span class=\"close\">\u00d7</span> <p>Example text in the modal</p> </div> </div> Twee Download","title":"Snowman"},{"location":"modal/snowman/snowman_modal.html#modal-pop-up-window-snowman-130","text":"","title":"\"Modal (Pop-up Window)\": Snowman (1.3.0)"},{"location":"modal/snowman/snowman_modal.html#summary","text":"This example uses the jQuery click() and show()/hide() functions to watch for the user clicking on a button (to open) or \"X\" (to close). Additional CSS rules are used to create the effect of having the content 'behind' the modal window be darkened and unusable until the modal itself is closed.","title":"Summary"},{"location":"modal/snowman/snowman_modal.html#example","text":"Download","title":"Example"},{"location":"modal/snowman/snowman_modal.html#twee-code","text":":: StoryTitle Snowman: Modal :: UserScript[script] $(function(){ // When the user clicks the button, open the modal $(\"#myBtn\").click(function() { $(\"#myModal\").show(); }); // When the user clicks on <span> (x), close the modal $(\".close\").click(function() { $(\"#myModal\").hide(); }); }); :: UserStylesheet[stylesheet] /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ padding-top: 100px; /* Location of the box */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ } /* Modal Content */ .modal-content { background-color: #fefefe; margin: auto; padding: 20px; border: 1px solid #888; width: 80%; } /* The Close Button */ .close { color: #aaaaaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: #000; text-decoration: none; cursor: pointer; } :: Start <button id=\"myBtn\">Open Modal</button> <div id=\"myModal\" class=\"modal\"> <div class=\"modal-content\"> <span class=\"close\">\u00d7</span> <p>Example text in the modal</p> </div> </div> Twee Download","title":"Twee Code"},{"location":"modal/sugarcube/sugarcube_modal.html","text":"\"Modal (Pop-up Window)\": SugarCube (v2.18) # Summary # This example uses the built-in Dialog object to setup() , add content ( wiki() ), and finally open() the dialog window. SugarCube also comes with additional functionality to adjust other settings. Example # Download Twee Code # :: StoryTitle SugarCube: Modal :: Start <<link \"Open dialog!\">> <<script>> Dialog.setup(\"Dialog\"); Dialog.wiki(\"Text within the dialog window\"); Dialog.open(); <</script>> <</link>> Twee Download","title":"SugarCube"},{"location":"modal/sugarcube/sugarcube_modal.html#modal-pop-up-window-sugarcube-v218","text":"","title":"\"Modal (Pop-up Window)\": SugarCube (v2.18)"},{"location":"modal/sugarcube/sugarcube_modal.html#summary","text":"This example uses the built-in Dialog object to setup() , add content ( wiki() ), and finally open() the dialog window. SugarCube also comes with additional functionality to adjust other settings.","title":"Summary"},{"location":"modal/sugarcube/sugarcube_modal.html#example","text":"Download","title":"Example"},{"location":"modal/sugarcube/sugarcube_modal.html#twee-code","text":":: StoryTitle SugarCube: Modal :: Start <<link \"Open dialog!\">> <<script>> Dialog.setup(\"Dialog\"); Dialog.wiki(\"Text within the dialog window\"); Dialog.open(); <</script>> <</link>> Twee Download","title":"Twee Code"},{"location":"modularity/harlowe/harlowe_modularity.html","text":"\"Modularity\": Harlowe (v2.0) # Summary # In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In Harlowe, this technique can be used through the (display:) macro to print the contents of one passage in another. Parts of a story can often be re-used in this way. Example # Download Twee Code # :: StoryTitle Modularity in Harlowe :: Start (set: $lineOne to \"Give us a verse\") (set: $lineTwo to \"Drop some knowledge\") (display: \"showLineOne\") (display: \"showLineTwo\") :: showLineOne $lineOne :: showLineTwo $lineTwo Twee Download","title":"Harlowe"},{"location":"modularity/harlowe/harlowe_modularity.html#modularity-harlowe-v20","text":"","title":"\"Modularity\": Harlowe (v2.0)"},{"location":"modularity/harlowe/harlowe_modularity.html#summary","text":"In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In Harlowe, this technique can be used through the (display:) macro to print the contents of one passage in another. Parts of a story can often be re-used in this way.","title":"Summary"},{"location":"modularity/harlowe/harlowe_modularity.html#example","text":"Download","title":"Example"},{"location":"modularity/harlowe/harlowe_modularity.html#twee-code","text":":: StoryTitle Modularity in Harlowe :: Start (set: $lineOne to \"Give us a verse\") (set: $lineTwo to \"Drop some knowledge\") (display: \"showLineOne\") (display: \"showLineTwo\") :: showLineOne $lineOne :: showLineTwo $lineTwo Twee Download","title":"Twee Code"},{"location":"modularity/snowman/snowman_modularity.html","text":"\"Modularity\": Snowman (v1.3.0) # Summary # In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In Snowman, this technique can be used through the window.story.render() function to print the contents of one passage in another. Parts of a story can often be re-used in this way. Example # Download Twee Code # :: StoryTitle Modularity in Snowman :: Start <% s.lineOne = \"Give us a verse\"; s.lineTwo = \"Drop some knowledge\"; %> <%= window.story.render(\"showLineOne\") %> <%= window.story.render(\"showLineTwo\") %> :: showLineOne <%= s.lineOne %> :: showLineTwo <%= s.lineTwo %> Twee Download","title":"Snowman"},{"location":"modularity/snowman/snowman_modularity.html#modularity-snowman-v130","text":"","title":"\"Modularity\": Snowman (v1.3.0)"},{"location":"modularity/snowman/snowman_modularity.html#summary","text":"In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In Snowman, this technique can be used through the window.story.render() function to print the contents of one passage in another. Parts of a story can often be re-used in this way.","title":"Summary"},{"location":"modularity/snowman/snowman_modularity.html#example","text":"Download","title":"Example"},{"location":"modularity/snowman/snowman_modularity.html#twee-code","text":":: StoryTitle Modularity in Snowman :: Start <% s.lineOne = \"Give us a verse\"; s.lineTwo = \"Drop some knowledge\"; %> <%= window.story.render(\"showLineOne\") %> <%= window.story.render(\"showLineTwo\") %> :: showLineOne <%= s.lineOne %> :: showLineTwo <%= s.lineTwo %> Twee Download","title":"Twee Code"},{"location":"modularity/sugarcube/sugarcube_modularity.html","text":"\"Modularity\": SugarCube (v2.18) # Summary # In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In SugarCube, this technique can be used through the <<include>> macro to print the contents of one passage in another. Parts of a story can often be re-used in this way. The <<widget>> macro offers a simplified way of creating new, custom macros using other SugarCube macros and TwineScript instead of JavaScript. When compared to <<include>> , widgets have the advantage of accepting arguments and expressions similar to the way other SugarCube macros can. New widgets must be added through passages with the tag widget . Example # Download Twee Code # :: StoryTitle Modularity in SugarCube :: Start <<set $lineOne to \"Give us a verse\">> <<set $lineTwo to \"Drop some knowledge\">> <<include \"showLineOne\">> <<include \"showLineTwo\">> <<showLine 1>> <<showLine 2>> :: showLineWidget [widget] <<widget 'showLine'>>\\ <<nobr>> <<if $args[0] is 1>> $lineOne <<elseif $args[0] is 2>> $lineTwo <</if>> <</nobr>>\\ <</widget>> :: showLineOne $lineOne :: showLineTwo $lineTwo Twee Download","title":"SugarCube"},{"location":"modularity/sugarcube/sugarcube_modularity.html#modularity-sugarcube-v218","text":"","title":"\"Modularity\": SugarCube (v2.18)"},{"location":"modularity/sugarcube/sugarcube_modularity.html#summary","text":"In programming terminology, modularity refers to dividing software into different sections related to their purpose or to better organize the whole. In SugarCube, this technique can be used through the <<include>> macro to print the contents of one passage in another. Parts of a story can often be re-used in this way. The <<widget>> macro offers a simplified way of creating new, custom macros using other SugarCube macros and TwineScript instead of JavaScript. When compared to <<include>> , widgets have the advantage of accepting arguments and expressions similar to the way other SugarCube macros can. New widgets must be added through passages with the tag widget .","title":"Summary"},{"location":"modularity/sugarcube/sugarcube_modularity.html#example","text":"Download","title":"Example"},{"location":"modularity/sugarcube/sugarcube_modularity.html#twee-code","text":":: StoryTitle Modularity in SugarCube :: Start <<set $lineOne to \"Give us a verse\">> <<set $lineTwo to \"Drop some knowledge\">> <<include \"showLineOne\">> <<include \"showLineTwo\">> <<showLine 1>> <<showLine 2>> :: showLineWidget [widget] <<widget 'showLine'>>\\ <<nobr>> <<if $args[0] is 1>> $lineOne <<elseif $args[0] is 2>> $lineTwo <</if>> <</nobr>>\\ <</widget>> :: showLineOne $lineOne :: showLineTwo $lineTwo Twee Download","title":"Twee Code"},{"location":"passageevents/snowman/snowman_passage_events.html","text":"\"Passage Events\": Snowman (v1.4.0) # Summary # Snowman triggers different events as they happen to passages . In this example, a header and footer is created by listening for the 'shown.sm.passage' event with a jQuery event handle and then prepending the content of the passage \"Header\" and appending the content of the passage \"Footer\" to the current passage after it has been initially rendered. Example # Download Twee Code # :: StoryTitle Snowman: Passage Events :: UserScript[script] /* Prepend the content of the passage \"Header\" to every passage. Append the content of the passage \"Footer\" to every passage. */ $(window).on('shown.sm.passage', function (eventObject, passageObject) { var headerContent = window.story.render(\"Header\"); var currentContent = passageObject.passage.render(); var footerContent = window.story.render(\"Footer\"); $('#main').html(headerContent + currentContent + footerContent); }); :: Start [[Another Passage]] :: Another Passage [[Back to Beginning|Start]] :: Header This is the header! :: Footer This is the footer! Twee Download See Also # Headers and Footers","title":"Snowman"},{"location":"passageevents/snowman/snowman_passage_events.html#passage-events-snowman-v140","text":"","title":"\"Passage Events\": Snowman (v1.4.0)"},{"location":"passageevents/snowman/snowman_passage_events.html#summary","text":"Snowman triggers different events as they happen to passages . In this example, a header and footer is created by listening for the 'shown.sm.passage' event with a jQuery event handle and then prepending the content of the passage \"Header\" and appending the content of the passage \"Footer\" to the current passage after it has been initially rendered.","title":"Summary"},{"location":"passageevents/snowman/snowman_passage_events.html#example","text":"Download","title":"Example"},{"location":"passageevents/snowman/snowman_passage_events.html#twee-code","text":":: StoryTitle Snowman: Passage Events :: UserScript[script] /* Prepend the content of the passage \"Header\" to every passage. Append the content of the passage \"Footer\" to every passage. */ $(window).on('shown.sm.passage', function (eventObject, passageObject) { var headerContent = window.story.render(\"Header\"); var currentContent = passageObject.passage.render(); var footerContent = window.story.render(\"Footer\"); $('#main').html(headerContent + currentContent + footerContent); }); :: Start [[Another Passage]] :: Another Passage [[Back to Beginning|Start]] :: Header This is the header! :: Footer This is the footer! Twee Download","title":"Twee Code"},{"location":"passageevents/snowman/snowman_passage_events.html#see-also","text":"Headers and Footers","title":"See Also"},{"location":"passageevents/snowman_2/snowman_passage_events.html","text":"\"Passage Events\": Snowman (v2.0.0) # Summary # Snowman triggers different events as they happen to passages . In this example, a header and footer is created by listening for the 'sm.passage.shown' event with a jQuery event handle and then prepending the content of the passage \"Header\" and appending the content of the passage \"Footer\" to the current passage after it has been initially rendered. Example # Download Twee Code # :: StoryTitle Snowman 2: Passage Events :: UserScript[script] /* Prepend the content of the passage \"Header\" to every passage. Append the content of the passage \"Footer\" to every passage. */ $(window).on('sm.passage.shown', function (eventObject, passageObject) { var headerContent = window.story.render(\"Header\"); var currentContent = passageObject.passage.render(); var footerContent = window.story.render(\"Footer\"); $('tw-passage').html(headerContent + currentContent + footerContent); }); :: Start <p>[[Another Passage]]</p> :: Another Passage [[Back to beginning->Start]] :: Header This is the header! :: Footer This is the footer! Twee Download See Also # Headers and Footers","title":"Snowman (v2.0.2 or later)"},{"location":"passageevents/snowman_2/snowman_passage_events.html#passage-events-snowman-v200","text":"","title":"\"Passage Events\": Snowman (v2.0.0)"},{"location":"passageevents/snowman_2/snowman_passage_events.html#summary","text":"Snowman triggers different events as they happen to passages . In this example, a header and footer is created by listening for the 'sm.passage.shown' event with a jQuery event handle and then prepending the content of the passage \"Header\" and appending the content of the passage \"Footer\" to the current passage after it has been initially rendered.","title":"Summary"},{"location":"passageevents/snowman_2/snowman_passage_events.html#example","text":"Download","title":"Example"},{"location":"passageevents/snowman_2/snowman_passage_events.html#twee-code","text":":: StoryTitle Snowman 2: Passage Events :: UserScript[script] /* Prepend the content of the passage \"Header\" to every passage. Append the content of the passage \"Footer\" to every passage. */ $(window).on('sm.passage.shown', function (eventObject, passageObject) { var headerContent = window.story.render(\"Header\"); var currentContent = passageObject.passage.render(); var footerContent = window.story.render(\"Footer\"); $('tw-passage').html(headerContent + currentContent + footerContent); }); :: Start <p>[[Another Passage]]</p> :: Another Passage [[Back to beginning->Start]] :: Header This is the header! :: Footer This is the footer! Twee Download","title":"Twee Code"},{"location":"passageevents/snowman_2/snowman_passage_events.html#see-also","text":"Headers and Footers","title":"See Also"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html","text":"\"Passage Events\": SugarCube (v2.18) # Summary # SugarCube triggers different events as they happen to passages . Through using jQuery and its own JavaScript event handling , code can be added to work with other, existing functionality. In this example, the \"passagestart\" and \"passagerender\" events are shown. In the event progression, the 'passagestart' event occurs before the PassageHeader prepending its content and the 'passagerender' happens after the PassageFooter . Through using event handling, content is added before the PassageHeader and after the PassageFooter as an example of when events occur in presenting passages. Example # Download Twee Code # :: StoryTitle Passage Events in SugarCube :: UserScript[script] /* Prepend the content of the passage \"New Header\" to every passage. This demonstrates that the 'passagestart' event comes before the PassageHeader prepending. */ $(document).on(':passagestart', function (eventObject) { var headerContent = Story.get(\"New Header\").processText(); $(eventObject.content).wiki(headerContent); }); /* Append the content of the passage \"New Footer\" to every passage. This demonstrates that the 'passagerender' event comes after the PassageFooter appending. */ $(document).on(':passagerender', function (eventObject) { var footerContent = Story.get(\"New Footer\").processText(); $(eventObject.content).wiki(footerContent); }); :: Start [[Another passage]] :: Another passage [[Back to beginning|Start]] :: New Header This is added before the PassageHeader! :: PassageHeader This is the PassageHeader. :: PassageFooter This is the PassageFooter! :: New Footer This is added after the PassageFooter! Twee Download See Also # Headers and Footers","title":"SugarCube"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html#passage-events-sugarcube-v218","text":"","title":"\"Passage Events\": SugarCube (v2.18)"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html#summary","text":"SugarCube triggers different events as they happen to passages . Through using jQuery and its own JavaScript event handling , code can be added to work with other, existing functionality. In this example, the \"passagestart\" and \"passagerender\" events are shown. In the event progression, the 'passagestart' event occurs before the PassageHeader prepending its content and the 'passagerender' happens after the PassageFooter . Through using event handling, content is added before the PassageHeader and after the PassageFooter as an example of when events occur in presenting passages.","title":"Summary"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html#example","text":"Download","title":"Example"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html#twee-code","text":":: StoryTitle Passage Events in SugarCube :: UserScript[script] /* Prepend the content of the passage \"New Header\" to every passage. This demonstrates that the 'passagestart' event comes before the PassageHeader prepending. */ $(document).on(':passagestart', function (eventObject) { var headerContent = Story.get(\"New Header\").processText(); $(eventObject.content).wiki(headerContent); }); /* Append the content of the passage \"New Footer\" to every passage. This demonstrates that the 'passagerender' event comes after the PassageFooter appending. */ $(document).on(':passagerender', function (eventObject) { var footerContent = Story.get(\"New Footer\").processText(); $(eventObject.content).wiki(footerContent); }); :: Start [[Another passage]] :: Another passage [[Back to beginning|Start]] :: New Header This is added before the PassageHeader! :: PassageHeader This is the PassageHeader. :: PassageFooter This is the PassageFooter! :: New Footer This is added after the PassageFooter! Twee Download","title":"Twee Code"},{"location":"passageevents/sugarcube/sugarcube_passage_events.html#see-also","text":"Headers and Footers","title":"See Also"},{"location":"passagesinpassages/chapbook/chapbook_passagesinpassages.html","text":"\"Passages in Passages\": Chapbook (v1.0.0) # Summary # Using the insert {embed passage: } , Chapbook can include one passage in another. Example # Download Twee Code # :: StoryTitle Chapbook: Passages in Passages :: Start This is the Start passage! {embed passage: 'Another'} :: Another And this is another passage! Twee Download","title":"Chapbook"},{"location":"passagesinpassages/chapbook/chapbook_passagesinpassages.html#passages-in-passages-chapbook-v100","text":"","title":"\"Passages in Passages\": Chapbook (v1.0.0)"},{"location":"passagesinpassages/chapbook/chapbook_passagesinpassages.html#summary","text":"Using the insert {embed passage: } , Chapbook can include one passage in another.","title":"Summary"},{"location":"passagesinpassages/chapbook/chapbook_passagesinpassages.html#example","text":"Download","title":"Example"},{"location":"passagesinpassages/chapbook/chapbook_passagesinpassages.html#twee-code","text":":: StoryTitle Chapbook: Passages in Passages :: Start This is the Start passage! {embed passage: 'Another'} :: Another And this is another passage! Twee Download","title":"Twee Code"},{"location":"passagesinpassages/harlowe/harlowe_passagesinpassages.html","text":"\"Passages in Passages\": Harlowe (v1.0) # Summary # The Harlowe story format allows for content in one passage to be displayed in another through the use of the (display:) macro. Given the name of an existing passage, its contents will added wherever the macro is called. Example # Download Twee Code # :: StoryTitle Harlowe: Passages in Passages :: Start This is the Start passage! (display: \"Another\") :: Another And this is another passage! Twee Download","title":"Harlowe"},{"location":"passagesinpassages/harlowe/harlowe_passagesinpassages.html#passages-in-passages-harlowe-v10","text":"","title":"\"Passages in Passages\": Harlowe (v1.0)"},{"location":"passagesinpassages/harlowe/harlowe_passagesinpassages.html#summary","text":"The Harlowe story format allows for content in one passage to be displayed in another through the use of the (display:) macro. Given the name of an existing passage, its contents will added wherever the macro is called.","title":"Summary"},{"location":"passagesinpassages/harlowe/harlowe_passagesinpassages.html#example","text":"Download","title":"Example"},{"location":"passagesinpassages/harlowe/harlowe_passagesinpassages.html#twee-code","text":":: StoryTitle Harlowe: Passages in Passages :: Start This is the Start passage! (display: \"Another\") :: Another And this is another passage! Twee Download","title":"Twee Code"},{"location":"passagesinpassages/snowman/snowman_passagesinpassages.html","text":"\"Passages in Passages: Snowman (v1.3) # Summary # In Snowman, the contents of one passage can be included in another through using the window.story.render() function. This will find and return the source of an existing passage in the story. Combined with the use of Underscore's template system , the returned value can be included directly where the function is used in a passage. Example # Download Twee Code # :: StoryTitle Snowman: Passages in Passages :: Start This is the Start passage! <%= window.story.render(\"Another\") %> :: Another And this is Another passage! Twee Download","title":"Snowman"},{"location":"passagesinpassages/snowman/snowman_passagesinpassages.html#passages-in-passages-snowman-v13","text":"","title":"\"Passages in Passages: Snowman (v1.3)"},{"location":"passagesinpassages/snowman/snowman_passagesinpassages.html#summary","text":"In Snowman, the contents of one passage can be included in another through using the window.story.render() function. This will find and return the source of an existing passage in the story. Combined with the use of Underscore's template system , the returned value can be included directly where the function is used in a passage.","title":"Summary"},{"location":"passagesinpassages/snowman/snowman_passagesinpassages.html#example","text":"Download","title":"Example"},{"location":"passagesinpassages/snowman/snowman_passagesinpassages.html#twee-code","text":":: StoryTitle Snowman: Passages in Passages :: Start This is the Start passage! <%= window.story.render(\"Another\") %> :: Another And this is Another passage! Twee Download","title":"Twee Code"},{"location":"passagesinpassages/sugarcube/sugarcube_passagesinpassages.html","text":"\"Passages in Passages\": SugarCube (v2.2) # Summary # In SugarCube, the contents of a passage can be shown in another through the use of the <<include>> macro. Through using the name of an existing passage, its contents will be included where the macro is called. Example # Download Twee Code # :: StoryTitle SugarCube: Passages in Passages :: Start This is the Start passage! <<include \"Another\">> :: Another And this is Another passage! Twee Download","title":"SugarCube"},{"location":"passagesinpassages/sugarcube/sugarcube_passagesinpassages.html#passages-in-passages-sugarcube-v22","text":"","title":"\"Passages in Passages\": SugarCube (v2.2)"},{"location":"passagesinpassages/sugarcube/sugarcube_passagesinpassages.html#summary","text":"In SugarCube, the contents of a passage can be shown in another through the use of the <<include>> macro. Through using the name of an existing passage, its contents will be included where the macro is called.","title":"Summary"},{"location":"passagesinpassages/sugarcube/sugarcube_passagesinpassages.html#example","text":"Download","title":"Example"},{"location":"passagesinpassages/sugarcube/sugarcube_passagesinpassages.html#twee-code","text":":: StoryTitle SugarCube: Passages in Passages :: Start This is the Start passage! <<include \"Another\">> :: Another And this is Another passage! Twee Download","title":"Twee Code"},{"location":"passagetags/chapbook/chapbook_passagetags.html","text":"\"CSS and Passage Tags\": Chapbook (v1.0.0) # Summary # Using the built-in global variable config , text colors and other CSS properties can be programmatically adjusted using the [JavaScript] modifier in Chapbook. Example # Download Twee Code # :: StoryTitle Chapbook: CSS and Passage Tags :: Start config.style.page.color: \"yellow-4\" -- This is one color! [JavaScript] // Overwrite the default text color config.style.page.color = \"violet-6\"; [continued] And this is the same color! Twee Download","title":"Chapbook"},{"location":"passagetags/chapbook/chapbook_passagetags.html#css-and-passage-tags-chapbook-v100","text":"","title":"\"CSS and Passage Tags\": Chapbook (v1.0.0)"},{"location":"passagetags/chapbook/chapbook_passagetags.html#summary","text":"Using the built-in global variable config , text colors and other CSS properties can be programmatically adjusted using the [JavaScript] modifier in Chapbook.","title":"Summary"},{"location":"passagetags/chapbook/chapbook_passagetags.html#example","text":"Download","title":"Example"},{"location":"passagetags/chapbook/chapbook_passagetags.html#twee-code","text":":: StoryTitle Chapbook: CSS and Passage Tags :: Start config.style.page.color: \"yellow-4\" -- This is one color! [JavaScript] // Overwrite the default text color config.style.page.color = \"violet-6\"; [continued] And this is the same color! Twee Download","title":"Twee Code"},{"location":"passagetags/harlowe/harlowe_passagetags.html","text":"\"CSS and Passage Tags\": Harlowe (v2.0) # Warning The following example is designed for use in Harlowe 2.x and later Summary # This example shows how to use CSS selectors to selectively style different passages based on how they are tagged. In Harlowe, the \"tags\" attribute can be used to create different sets of styles and apply them when shown. Example # Download Twee Code # :: StoryTitle CSS and Passage Tags in Harlowe :: UserStylesheet[stylesheet] [tags=\"grey\"] { background: grey; } [tags=\"yellow\"] { background: yellow; color: black; } :: Start[grey] This passage has a grey background and (default) white text. [[Second]] :: Second[yellow] This passage has a yellow background and black text. Twee Download","title":"Harlowe"},{"location":"passagetags/harlowe/harlowe_passagetags.html#css-and-passage-tags-harlowe-v20","text":"Warning The following example is designed for use in Harlowe 2.x and later","title":"\"CSS and Passage Tags\": Harlowe (v2.0)"},{"location":"passagetags/harlowe/harlowe_passagetags.html#summary","text":"This example shows how to use CSS selectors to selectively style different passages based on how they are tagged. In Harlowe, the \"tags\" attribute can be used to create different sets of styles and apply them when shown.","title":"Summary"},{"location":"passagetags/harlowe/harlowe_passagetags.html#example","text":"Download","title":"Example"},{"location":"passagetags/harlowe/harlowe_passagetags.html#twee-code","text":":: StoryTitle CSS and Passage Tags in Harlowe :: UserStylesheet[stylesheet] [tags=\"grey\"] { background: grey; } [tags=\"yellow\"] { background: yellow; color: black; } :: Start[grey] This passage has a grey background and (default) white text. [[Second]] :: Second[yellow] This passage has a yellow background and black text. Twee Download","title":"Twee Code"},{"location":"passagetags/snowman/snowman_passagetags.html","text":"\"CSS and Passage Tags\": Snowman (v1.3) # Summary # This example shows how to use CSS selectors to style different passages. Snowman does not support tags in passages. However, the effect can be implemented through using jQuery and the toggleClass() function to switch between different pre-defined classes. Example # Download Twee Code # :: StoryTitle CSS and Passage Tags in Snowman :: UserStylesheet[stylesheet] .grey { background: grey; color: white; } .yellow { background: yellow; color: black; } :: Start[grey] <% $(\"body\").toggleClass(\"grey\") %> This passage has a grey background and white text. [[Second]] :: Second[yellow] <% $(\"body\").toggleClass(\"yellow\") %> This passage has a yellow background and black text. Twee Download","title":"Snowman"},{"location":"passagetags/snowman/snowman_passagetags.html#css-and-passage-tags-snowman-v13","text":"","title":"\"CSS and Passage Tags\": Snowman (v1.3)"},{"location":"passagetags/snowman/snowman_passagetags.html#summary","text":"This example shows how to use CSS selectors to style different passages. Snowman does not support tags in passages. However, the effect can be implemented through using jQuery and the toggleClass() function to switch between different pre-defined classes.","title":"Summary"},{"location":"passagetags/snowman/snowman_passagetags.html#example","text":"Download","title":"Example"},{"location":"passagetags/snowman/snowman_passagetags.html#twee-code","text":":: StoryTitle CSS and Passage Tags in Snowman :: UserStylesheet[stylesheet] .grey { background: grey; color: white; } .yellow { background: yellow; color: black; } :: Start[grey] <% $(\"body\").toggleClass(\"grey\") %> This passage has a grey background and white text. [[Second]] :: Second[yellow] <% $(\"body\").toggleClass(\"yellow\") %> This passage has a yellow background and black text. Twee Download","title":"Twee Code"},{"location":"passagetags/sugarcane/sugarcane_passagetags.html","text":"\"CSS and Passage Tags\": Sugarcane (v1.4.2) # Warning The following example is designed for Twine 1.4.2. Summary # This example shows how to use CSS selectors to selectively style different passages based on how they are tagged. In Sugarcane, the \"data-tags\" attribute can be used to create different sets of styles and apply them when shown. Example # Download Twee Code # :: Start [grey] This passage has a grey background and white text. [[Second]] :: Second [yellow] This passage has a yellow background and black text. :: StoryTitle CSS and Passage Tags in Twine 1.4.2 :: Stylesheet [stylesheet] [data-tags=\"grey\"] { background: grey; color: white; } [data-tags=\"yellow\"] { background: yellow; color: black; } :: StoryAuthor Videlais Twee Download","title":"Sugarcane (1.4.2)"},{"location":"passagetags/sugarcane/sugarcane_passagetags.html#css-and-passage-tags-sugarcane-v142","text":"Warning The following example is designed for Twine 1.4.2.","title":"\"CSS and Passage Tags\": Sugarcane (v1.4.2)"},{"location":"passagetags/sugarcane/sugarcane_passagetags.html#summary","text":"This example shows how to use CSS selectors to selectively style different passages based on how they are tagged. In Sugarcane, the \"data-tags\" attribute can be used to create different sets of styles and apply them when shown.","title":"Summary"},{"location":"passagetags/sugarcane/sugarcane_passagetags.html#example","text":"Download","title":"Example"},{"location":"passagetags/sugarcane/sugarcane_passagetags.html#twee-code","text":":: Start [grey] This passage has a grey background and white text. [[Second]] :: Second [yellow] This passage has a yellow background and black text. :: StoryTitle CSS and Passage Tags in Twine 1.4.2 :: Stylesheet [stylesheet] [data-tags=\"grey\"] { background: grey; color: white; } [data-tags=\"yellow\"] { background: yellow; color: black; } :: StoryAuthor Videlais Twee Download","title":"Twee Code"},{"location":"passagetags/sugarcube/sugarcube_passagetags.html","text":"\"CSS and Passage Tags\": SugarCube (v2.18) # Summary # This example shows how to use CSS selectors to style different passages based on how they are tagged. In SugarCube , the tag name is applied to both the body and the passage shown. To style different parts, use either the \"body\" selector or a combination of \"passage\" and the tag name. SugarCube 2.x and later also applies a \"data-tags\" attribute to the <html> , <body> , and elements with the class \".passage\". These can also be used to style the page at different levels. Example # Download Twee Code # :: StoryTitle CSS and Passage Tags in SugarCube :: UserStylesheet[stylesheet] /* Style the entire body when showing passage tagged with grey */ body.grey { color: green; } /* Style only the inner part of the passage tagged with \"grey\" */ .passage.grey { background: grey; } /* Style only the inner part of the passage tagged with \"yellow\" */ .passage.yellow { background: yellow; color: black; } :: Start[grey] This passage has a grey background and green text. [[Second]] :: Second[yellow] This passage has a yellow background and black text. Twee Download","title":"SugarCube"},{"location":"passagetags/sugarcube/sugarcube_passagetags.html#css-and-passage-tags-sugarcube-v218","text":"","title":"\"CSS and Passage Tags\": SugarCube (v2.18)"},{"location":"passagetags/sugarcube/sugarcube_passagetags.html#summary","text":"This example shows how to use CSS selectors to style different passages based on how they are tagged. In SugarCube , the tag name is applied to both the body and the passage shown. To style different parts, use either the \"body\" selector or a combination of \"passage\" and the tag name. SugarCube 2.x and later also applies a \"data-tags\" attribute to the <html> , <body> , and elements with the class \".passage\". These can also be used to style the page at different levels.","title":"Summary"},{"location":"passagetags/sugarcube/sugarcube_passagetags.html#example","text":"Download","title":"Example"},{"location":"passagetags/sugarcube/sugarcube_passagetags.html#twee-code","text":":: StoryTitle CSS and Passage Tags in SugarCube :: UserStylesheet[stylesheet] /* Style the entire body when showing passage tagged with grey */ body.grey { color: green; } /* Style only the inner part of the passage tagged with \"grey\" */ .passage.grey { background: grey; } /* Style only the inner part of the passage tagged with \"yellow\" */ .passage.yellow { background: yellow; color: black; } :: Start[grey] This passage has a grey background and green text. [[Second]] :: Second[yellow] This passage has a yellow background and black text. Twee Download","title":"Twee Code"},{"location":"passagetoelement/snowman/snowman_passagetoelement.html","text":"\"Render Passage to Element\": Snowman (v2.0.0) # Summary # In Snowman, the function renderToSelector() renders the contents of a passage into an element based on its jQuery selector . The event \"sm.passage.shown\" is used in this example to guarantee that the passage has been rendered before acting. Calling the function renderToSelector() inside the jQuery event listener then renders another passage into an existing element. Example # Download Twee Code # :: StoryTitle Snowman: Render to Element :: Start <div id=\"hudID\"></div> <script> $(document).one('sm.passage.shown', function (ev) { // Render the passage named HUD into the element with id of \"hudID\" renderToSelector(\"#hudID\", \"HUD\"); }); </script> :: HUD <h1>This is the HUD!</h1> Twee Download","title":"Snowman (2.0 or later)"},{"location":"passagetoelement/snowman/snowman_passagetoelement.html#render-passage-to-element-snowman-v200","text":"","title":"\"Render Passage to Element\": Snowman (v2.0.0)"},{"location":"passagetoelement/snowman/snowman_passagetoelement.html#summary","text":"In Snowman, the function renderToSelector() renders the contents of a passage into an element based on its jQuery selector . The event \"sm.passage.shown\" is used in this example to guarantee that the passage has been rendered before acting. Calling the function renderToSelector() inside the jQuery event listener then renders another passage into an existing element.","title":"Summary"},{"location":"passagetoelement/snowman/snowman_passagetoelement.html#example","text":"Download","title":"Example"},{"location":"passagetoelement/snowman/snowman_passagetoelement.html#twee-code","text":":: StoryTitle Snowman: Render to Element :: Start <div id=\"hudID\"></div> <script> $(document).one('sm.passage.shown', function (ev) { // Render the passage named HUD into the element with id of \"hudID\" renderToSelector(\"#hudID\", \"HUD\"); }); </script> :: HUD <h1>This is the HUD!</h1> Twee Download","title":"Twee Code"},{"location":"passagetoelement/sugarcube/sugarcube_passagetoelement.html","text":"\"Render Passage to Element\": SugarCube (v2.0.0) # Summary # In SugarCube, the function setPageElement() renders the contents of a passage into an element based on its id . The event \":passagedisplay\" is used in this example to guarantee that the passage has been rendered before acting. Calling the function setPageElement() inside the jQuery event listener then renders another passage into an existing element. Example # Download Twee Code # :: StoryTitle SugarCube: Render Passage to Element :: Start <div id=\"hudID\"></div> <<script>> // Wait for the passage to be displayed $(document).one(':passagedisplay', function (ev) { // Render the passage named HUD into the element with id of \"hudID\" setPageElement(\"hudID\", \"HUD\"); }); <</script>> :: HUD <h1>This is the heads-up display!</h1> Twee Download","title":"SugarCube"},{"location":"passagetoelement/sugarcube/sugarcube_passagetoelement.html#render-passage-to-element-sugarcube-v200","text":"","title":"\"Render Passage to Element\": SugarCube (v2.0.0)"},{"location":"passagetoelement/sugarcube/sugarcube_passagetoelement.html#summary","text":"In SugarCube, the function setPageElement() renders the contents of a passage into an element based on its id . The event \":passagedisplay\" is used in this example to guarantee that the passage has been rendered before acting. Calling the function setPageElement() inside the jQuery event listener then renders another passage into an existing element.","title":"Summary"},{"location":"passagetoelement/sugarcube/sugarcube_passagetoelement.html#example","text":"Download","title":"Example"},{"location":"passagetoelement/sugarcube/sugarcube_passagetoelement.html#twee-code","text":":: StoryTitle SugarCube: Render Passage to Element :: Start <div id=\"hudID\"></div> <<script>> // Wait for the passage to be displayed $(document).one(':passagedisplay', function (ev) { // Render the passage named HUD into the element with id of \"hudID\" setPageElement(\"hudID\", \"HUD\"); }); <</script>> :: HUD <h1>This is the heads-up display!</h1> Twee Download","title":"Twee Code"},{"location":"passagetransitions/harlowe/harlowe_passagetransitions.html","text":"\"Passage Transitions\": Harlowe (v3.0) # Summary # When using the (transition-arrive:) or (transition-depart:) macros with links, the resulting transition effect will be shown to the player upon activating the link (depart) or as it is shown (arrive). Possible transition effects include: \"instant\" (causes the passage to instantly vanish) \"dissolve\" (causes the passage to gently fade out) \"flicker\" (causes the passage to roughly flicker in - don't use with a long (transition-time:))) \"shudder\" (causes the passage to disappear while shaking back and forth) \"rumble\" (causes the passage to instantly appear while shaking up and down) \"slide-right\" (causes the passage to slide in from the right) \"slide-left\" (causes the passage to slide in from the left) \"pulse\" (causes the passage to disappear while pulsating rapidly) Example # Download Twee Code # :: StoryTitle Harlowe 3: Passage Transitions :: Start (transition-depart: \"dissolve\")[[Dissolve Passage]] :: Dissolve Passage (transition-arrive: \"slide-right\")[[Slide-right Passage]] :: Slide-right Passage Double-click this passage to edit it. Twee Download","title":"Harlowe (v3.0.1 or later)"},{"location":"passagetransitions/harlowe/harlowe_passagetransitions.html#passage-transitions-harlowe-v30","text":"","title":"\"Passage Transitions\": Harlowe (v3.0)"},{"location":"passagetransitions/harlowe/harlowe_passagetransitions.html#summary","text":"When using the (transition-arrive:) or (transition-depart:) macros with links, the resulting transition effect will be shown to the player upon activating the link (depart) or as it is shown (arrive). Possible transition effects include: \"instant\" (causes the passage to instantly vanish) \"dissolve\" (causes the passage to gently fade out) \"flicker\" (causes the passage to roughly flicker in - don't use with a long (transition-time:))) \"shudder\" (causes the passage to disappear while shaking back and forth) \"rumble\" (causes the passage to instantly appear while shaking up and down) \"slide-right\" (causes the passage to slide in from the right) \"slide-left\" (causes the passage to slide in from the left) \"pulse\" (causes the passage to disappear while pulsating rapidly)","title":"Summary"},{"location":"passagetransitions/harlowe/harlowe_passagetransitions.html#example","text":"Download","title":"Example"},{"location":"passagetransitions/harlowe/harlowe_passagetransitions.html#twee-code","text":":: StoryTitle Harlowe 3: Passage Transitions :: Start (transition-depart: \"dissolve\")[[Dissolve Passage]] :: Dissolve Passage (transition-arrive: \"slide-right\")[[Slide-right Passage]] :: Slide-right Passage Double-click this passage to edit it. Twee Download","title":"Twee Code"},{"location":"passagetransitions/snowman/snowman_passagetransitions.html","text":"\"Passage Transitions\": Snowman (v1.3) # Summary # In Snowman, the \"showpassage\" event is triggered once a passage is loaded. By listening for this event, jQuery effects can be applied to the passage element to produce a transition. Example # Download Twee Code # :: StoryTitle Snowman: Passage Transitions :: UserScript[script] $(document).on('showpassage', function(event, passage) { $(\"#passage\").hide(0).fadeIn(2000); }); :: Start [[Another Passage]] :: Another Passage [[A Third Passage]] :: A Third Passage Double-click this passage to edit it. Twee Download","title":"Snowman"},{"location":"passagetransitions/snowman/snowman_passagetransitions.html#passage-transitions-snowman-v13","text":"","title":"\"Passage Transitions\": Snowman (v1.3)"},{"location":"passagetransitions/snowman/snowman_passagetransitions.html#summary","text":"In Snowman, the \"showpassage\" event is triggered once a passage is loaded. By listening for this event, jQuery effects can be applied to the passage element to produce a transition.","title":"Summary"},{"location":"passagetransitions/snowman/snowman_passagetransitions.html#example","text":"Download","title":"Example"},{"location":"passagetransitions/snowman/snowman_passagetransitions.html#twee-code","text":":: StoryTitle Snowman: Passage Transitions :: UserScript[script] $(document).on('showpassage', function(event, passage) { $(\"#passage\").hide(0).fadeIn(2000); }); :: Start [[Another Passage]] :: Another Passage [[A Third Passage]] :: A Third Passage Double-click this passage to edit it. Twee Download","title":"Twee Code"},{"location":"passagetransitions/snowman_2/snowman_2_passagetransitions.html","text":"\"Passage Transitions\": Snowman (v2.0) # Summary # In Snowman 2.X, the sm.passage.showing event is triggered once a passage is loaded . By listening for this event, jQuery effects can be applied to the passage element to produce a transition. (In Snowman 2.X, the passage is the tw-passage element .) Example # Download Twee Code # :: StoryTitle Snowman 2: Passage Transitions :: UserScript[script] $(document).on('sm.passage.showing', function(event, passage) { $(\"tw-passage\").hide(0).fadeIn(2000); }); :: Start [[Another Passage]] :: Another Passage [[A Third Passage]] :: A Third Passage Double-click this passage to edit it. Twee Download","title":"Snowman (v2.0 and later)"},{"location":"passagetransitions/snowman_2/snowman_2_passagetransitions.html#passage-transitions-snowman-v20","text":"","title":"\"Passage Transitions\": Snowman (v2.0)"},{"location":"passagetransitions/snowman_2/snowman_2_passagetransitions.html#summary","text":"In Snowman 2.X, the sm.passage.showing event is triggered once a passage is loaded . By listening for this event, jQuery effects can be applied to the passage element to produce a transition. (In Snowman 2.X, the passage is the tw-passage element .)","title":"Summary"},{"location":"passagetransitions/snowman_2/snowman_2_passagetransitions.html#example","text":"Download","title":"Example"},{"location":"passagetransitions/snowman_2/snowman_2_passagetransitions.html#twee-code","text":":: StoryTitle Snowman 2: Passage Transitions :: UserScript[script] $(document).on('sm.passage.showing', function(event, passage) { $(\"tw-passage\").hide(0).fadeIn(2000); }); :: Start [[Another Passage]] :: Another Passage [[A Third Passage]] :: A Third Passage Double-click this passage to edit it. Twee Download","title":"Twee Code"},{"location":"passagetransitions/sugarcube/sugarcube_passagetransitions.html","text":"\"Passage Transitions\": SugarCube (v2.18) # Summary # SugarCube provides multiple ways to address passage transitions. To work with the existing functionality, the Config.passages.transitionOut variable can be set to change the property (height, width, opacity, etc) of the passage element or the amount of time to retain the outgoing passage before removing it with the default transition effect. Through using jQuery event listeners , different functionality can be triggered as part of normal passage events such as rendering or displaying content. Acting on the \":passagerender\" event, for example, could be used to apply a jQuery effect on the passage element after it has been loaded and rendered. Example # Download Twee Code # :: StoryTitle SugarCube: Passage Transitions :: UserScript[script] // Fade in content using jQuery Effects // Hide and then fade in the content over 2000ms (2s) $(document).on(':passagerender', function (event) { $(\".passage\").hide(0).fadeIn(2000); }); :: Start [[Another passage]] :: A third passage No more content! :: Another passage [[A third passage]] Twee Download","title":"SugarCube"},{"location":"passagetransitions/sugarcube/sugarcube_passagetransitions.html#passage-transitions-sugarcube-v218","text":"","title":"\"Passage Transitions\": SugarCube (v2.18)"},{"location":"passagetransitions/sugarcube/sugarcube_passagetransitions.html#summary","text":"SugarCube provides multiple ways to address passage transitions. To work with the existing functionality, the Config.passages.transitionOut variable can be set to change the property (height, width, opacity, etc) of the passage element or the amount of time to retain the outgoing passage before removing it with the default transition effect. Through using jQuery event listeners , different functionality can be triggered as part of normal passage events such as rendering or displaying content. Acting on the \":passagerender\" event, for example, could be used to apply a jQuery effect on the passage element after it has been loaded and rendered.","title":"Summary"},{"location":"passagetransitions/sugarcube/sugarcube_passagetransitions.html#example","text":"Download","title":"Example"},{"location":"passagetransitions/sugarcube/sugarcube_passagetransitions.html#twee-code","text":":: StoryTitle SugarCube: Passage Transitions :: UserScript[script] // Fade in content using jQuery Effects // Hide and then fade in the content over 2000ms (2s) $(document).on(':passagerender', function (event) { $(\".passage\").hide(0).fadeIn(2000); }); :: Start [[Another passage]] :: A third passage No more content! :: Another passage [[A third passage]] Twee Download","title":"Twee Code"},{"location":"passagevisits/chapbook/chapbook_passagevisits.html","text":"\"Passage Visits\": Chapbook (v1.0.0) # Summary # In Chapbook, the lookup passage.visits variable contains the number of times the current passages has been visited by the user. Example # Download Twee Code # :: StoryTitle Chapbook: Passage Visits :: Start [[Another Passage]] :: Another Passage How many times has the current passage been visited? {passage.visits} [[Start]] Twee Download","title":"Chapbook"},{"location":"passagevisits/chapbook/chapbook_passagevisits.html#passage-visits-chapbook-v100","text":"","title":"\"Passage Visits\": Chapbook (v1.0.0)"},{"location":"passagevisits/chapbook/chapbook_passagevisits.html#summary","text":"In Chapbook, the lookup passage.visits variable contains the number of times the current passages has been visited by the user.","title":"Summary"},{"location":"passagevisits/chapbook/chapbook_passagevisits.html#example","text":"Download","title":"Example"},{"location":"passagevisits/chapbook/chapbook_passagevisits.html#twee-code","text":":: StoryTitle Chapbook: Passage Visits :: Start [[Another Passage]] :: Another Passage How many times has the current passage been visited? {passage.visits} [[Start]] Twee Download","title":"Twee Code"},{"location":"passagevisits/harlowe/harlowe_passagevisits.html","text":"\"Passage Visits\": Harlowe (v1.0) # Summary # In Harlowe, the macro (count:) returns the number of times a value appears in an array. The macro (history:) returns an array of any passages visited as part of the story. Combined together, the macro (count:) with the (history:) can return the number of times a certain passage has been visited during the course of the story. Example # Download Twee Code # :: StoryTitle Harlowe: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? (count: (history: ), \"Another Passage\") [[Another Passage]] :: Another Passage [[Start]] Twee Download","title":"Harlowe"},{"location":"passagevisits/harlowe/harlowe_passagevisits.html#passage-visits-harlowe-v10","text":"","title":"\"Passage Visits\": Harlowe (v1.0)"},{"location":"passagevisits/harlowe/harlowe_passagevisits.html#summary","text":"In Harlowe, the macro (count:) returns the number of times a value appears in an array. The macro (history:) returns an array of any passages visited as part of the story. Combined together, the macro (count:) with the (history:) can return the number of times a certain passage has been visited during the course of the story.","title":"Summary"},{"location":"passagevisits/harlowe/harlowe_passagevisits.html#example","text":"Download","title":"Example"},{"location":"passagevisits/harlowe/harlowe_passagevisits.html#twee-code","text":":: StoryTitle Harlowe: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? (count: (history: ), \"Another Passage\") [[Another Passage]] :: Another Passage [[Start]] Twee Download","title":"Twee Code"},{"location":"passagevisits/harlowe_3.1/harlowe_passagevisits.html","text":"\"Passage Visits\": Harlowe (v3.1) # Summary # In Harlowe 3.1, the keyword visits is introduced. This value will contains the number of times the current passage has been visited. In this example, the macro (str:) is used with the keyword visits to show the value. Example # Download Twee Code # :: StoryTitle Harlowe: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? (str: visits) [[Another Passage]] :: Another Passage [[Start]] Twee Download","title":"Harlowe (3.1 or later)"},{"location":"passagevisits/harlowe_3.1/harlowe_passagevisits.html#passage-visits-harlowe-v31","text":"","title":"\"Passage Visits\": Harlowe (v3.1)"},{"location":"passagevisits/harlowe_3.1/harlowe_passagevisits.html#summary","text":"In Harlowe 3.1, the keyword visits is introduced. This value will contains the number of times the current passage has been visited. In this example, the macro (str:) is used with the keyword visits to show the value.","title":"Summary"},{"location":"passagevisits/harlowe_3.1/harlowe_passagevisits.html#example","text":"Download","title":"Example"},{"location":"passagevisits/harlowe_3.1/harlowe_passagevisits.html#twee-code","text":":: StoryTitle Harlowe: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? (str: visits) [[Another Passage]] :: Another Passage [[Start]] Twee Download","title":"Twee Code"},{"location":"passagevisits/snowman/snowman_passagevisits.html","text":"\"Passage Visits\": Snowman (v2.0) # Summary # Starting with Snowman 2.0, the global function visited() returns the number of times one or more passages have been visited during the course of the story. Combined with the use of Underscore template interpolation , the result of a function can be written to a passage. Example # Download Twee Code # :: StoryTitle Snowman: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? <%= visited(\"Another Passage\") %> [[Another Passage]] :: Another Passage [[Start]] Twee Download","title":"Snowman (v2.0.2 and later)"},{"location":"passagevisits/snowman/snowman_passagevisits.html#passage-visits-snowman-v20","text":"","title":"\"Passage Visits\": Snowman (v2.0)"},{"location":"passagevisits/snowman/snowman_passagevisits.html#summary","text":"Starting with Snowman 2.0, the global function visited() returns the number of times one or more passages have been visited during the course of the story. Combined with the use of Underscore template interpolation , the result of a function can be written to a passage.","title":"Summary"},{"location":"passagevisits/snowman/snowman_passagevisits.html#example","text":"Download","title":"Example"},{"location":"passagevisits/snowman/snowman_passagevisits.html#twee-code","text":":: StoryTitle Snowman: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? <%= visited(\"Another Passage\") %> [[Another Passage]] :: Another Passage [[Start]] Twee Download","title":"Twee Code"},{"location":"passagevisits/sugarcube/sugarcube_passagevisits.html","text":"\"Passage Visits\": SugarCube (v2.2) # Summary # In SugarCube, the global function visited() returns the number of times a passage has been visited during the course of the story. Combined with the <<= >> macro expression, the result of a global function can be written to a passage. Example # Download Twee Code # :: StoryTitle SugarCube: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? <<= visited(\"Another Passage\")>> [[Another Passage]] :: Another Passage [[Start]] Twee Download","title":"SugarCube"},{"location":"passagevisits/sugarcube/sugarcube_passagevisits.html#passage-visits-sugarcube-v22","text":"","title":"\"Passage Visits\": SugarCube (v2.2)"},{"location":"passagevisits/sugarcube/sugarcube_passagevisits.html#summary","text":"In SugarCube, the global function visited() returns the number of times a passage has been visited during the course of the story. Combined with the <<= >> macro expression, the result of a global function can be written to a passage.","title":"Summary"},{"location":"passagevisits/sugarcube/sugarcube_passagevisits.html#example","text":"Download","title":"Example"},{"location":"passagevisits/sugarcube/sugarcube_passagevisits.html#twee-code","text":":: StoryTitle SugarCube: Passage Visits :: Start How many times has the passage \"Another Passage\" been visited? <<= visited(\"Another Passage\")>> [[Another Passage]] :: Another Passage [[Start]] Twee Download","title":"Twee Code"},{"location":"playerstatistics/chapbook/chapbook_player_statistics.html","text":"\"Player Statistics\": Chapbook (v1.0.0) # Summary # One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In Chapbook, the values of variables can only be changed as part of the Vars Section or using JavaScript . This example combines the two and uses the {embed passage} modifier to use different passages as sections of code and adjust values based on user interactions. Example # Download Twee Code # :: StoryTitle Chapbook: Player Statistics :: Start {embed passage: \"Setup\"} {embed passage: \"Statistics\"} :: IncreaseEmpathy empathy: empathy + 1 points: points - 1 -- {embed passage: \"Statistics\"} :: DecreaseEmpathy empathy: empathy - 1 points: points + 1 -- {embed passage: \"Statistics\"} :: IncreaseIntelligence intelligence: intelligence + 1 points: points - 1 -- {embed passage: \"Statistics\"} :: DecreaseIntelligence intelligence: intelligence - 1 points: points + 1 -- {embed passage: \"Statistics\"} :: Setup empathy: 10 intelligence: 10 points: 5 -- :: Statistics {embed passage: \"CheckValues\"} [if points > 0 && empathy > 0] Empathy: [[[+]->IncreaseEmpathy]] [[[-]->DecreaseEmpathy]] [continued] [if points > 0 && intelligence > 0] Intelligence: [[[+]->IncreaseIntelligence]] [[[-]->DecreaseIntelligence]] [continued] Empathy: {empathy} Intelligence: {intelligence} Remaining Points: {points} [[Reset Points->Start]] :: CheckValues [JavaScript] let empathy = engine.state.get('empathy'); let intelligence = engine.state.get('intelligence'); let points = engine.state.get('points'); if(empathy > 20){empathy = 20;} if(intelligence > 20){intelligence = 20;} if(points < 0){points = 0;} if(points > 25){points = 25;} engine.state.set('empathy', empathy); engine.state.set('intelligence', intelligence); engine.state.set('points', points); Twee Download","title":"Chapbook"},{"location":"playerstatistics/chapbook/chapbook_player_statistics.html#player-statistics-chapbook-v100","text":"","title":"\"Player Statistics\": Chapbook (v1.0.0)"},{"location":"playerstatistics/chapbook/chapbook_player_statistics.html#summary","text":"One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In Chapbook, the values of variables can only be changed as part of the Vars Section or using JavaScript . This example combines the two and uses the {embed passage} modifier to use different passages as sections of code and adjust values based on user interactions.","title":"Summary"},{"location":"playerstatistics/chapbook/chapbook_player_statistics.html#example","text":"Download","title":"Example"},{"location":"playerstatistics/chapbook/chapbook_player_statistics.html#twee-code","text":":: StoryTitle Chapbook: Player Statistics :: Start {embed passage: \"Setup\"} {embed passage: \"Statistics\"} :: IncreaseEmpathy empathy: empathy + 1 points: points - 1 -- {embed passage: \"Statistics\"} :: DecreaseEmpathy empathy: empathy - 1 points: points + 1 -- {embed passage: \"Statistics\"} :: IncreaseIntelligence intelligence: intelligence + 1 points: points - 1 -- {embed passage: \"Statistics\"} :: DecreaseIntelligence intelligence: intelligence - 1 points: points + 1 -- {embed passage: \"Statistics\"} :: Setup empathy: 10 intelligence: 10 points: 5 -- :: Statistics {embed passage: \"CheckValues\"} [if points > 0 && empathy > 0] Empathy: [[[+]->IncreaseEmpathy]] [[[-]->DecreaseEmpathy]] [continued] [if points > 0 && intelligence > 0] Intelligence: [[[+]->IncreaseIntelligence]] [[[-]->DecreaseIntelligence]] [continued] Empathy: {empathy} Intelligence: {intelligence} Remaining Points: {points} [[Reset Points->Start]] :: CheckValues [JavaScript] let empathy = engine.state.get('empathy'); let intelligence = engine.state.get('intelligence'); let points = engine.state.get('points'); if(empathy > 20){empathy = 20;} if(intelligence > 20){intelligence = 20;} if(points < 0){points = 0;} if(points > 25){points = 25;} engine.state.set('empathy', empathy); engine.state.set('intelligence', intelligence); engine.state.set('points', points); Twee Download","title":"Twee Code"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html","text":"\"Player Statistics\": Harlowe (v2.0) # Summary # One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the (link-repeat:) macro is used multiple times with (replace:) and (set:) macros based on if they are higher than a target value. In a second passage, these values are used in combination with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number. Example # Download Twee Code # :: StoryTitle Player Statistics in Harlowe :: Start Empathy: { (link-repeat: \"|+|\")[ (if: $totalPoints > 0)[ (set: $empathy to it + 1) (set: $totalPoints to it - 1) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] (link-repeat: \"|-|\")[ (if: $empathy > 0)[ (set: $empathy to it - 1) (set: $totalPoints to it + 1) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] } Intelligence: { (link-repeat: \"|+|\")[ (if: $totalPoints > 0)[ (set: $intelligence to it + 1) (set: $totalPoints to it - 1) (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] (link-repeat: \"|-|\")[ (if: $intelligence > 0)[ (set: $intelligence to it - 1) (set: $totalPoints to it + 1) (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] } { (link-repeat: \"|Reset Points|\")[ (set: $empathy to 10) (set: $intelligence to 10) (set: $totalPoints to 5) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] } Empathy: |empathyStat>[10] Intelligence: |intelligenceStat>[10] Remaining Points: |pointsStat>[5] [[Test Stats]] :: Test Stats (link: \"Make an intelligence check?\")[ (set: _result to (random: 1, 6) + $intelligence) (if: _result >= 15)[ Intelligence Success! (_result >= 15) ](else:)[ Intelligence Failure! (_result < 15) ] ] (link: \"Make an empathy check?\")[ (set: _result to (random: 1, 6) + $empathy) (if: _result >= 15)[ Empathy Success! (_result >= 15) ](else:)[ Empathy Failure! (_result < 15) ] ] :: Startup[startup] (set: $empathy to 10) (set: $intelligence to 10) (set: $totalPoints to 5) Twee Download See Also # Conditional Statements , Setting and Showing","title":"Harlowe"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html#player-statistics-harlowe-v20","text":"","title":"\"Player Statistics\": Harlowe (v2.0)"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html#summary","text":"One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the (link-repeat:) macro is used multiple times with (replace:) and (set:) macros based on if they are higher than a target value. In a second passage, these values are used in combination with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number.","title":"Summary"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html#example","text":"Download","title":"Example"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html#twee-code","text":":: StoryTitle Player Statistics in Harlowe :: Start Empathy: { (link-repeat: \"|+|\")[ (if: $totalPoints > 0)[ (set: $empathy to it + 1) (set: $totalPoints to it - 1) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] (link-repeat: \"|-|\")[ (if: $empathy > 0)[ (set: $empathy to it - 1) (set: $totalPoints to it + 1) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] } Intelligence: { (link-repeat: \"|+|\")[ (if: $totalPoints > 0)[ (set: $intelligence to it + 1) (set: $totalPoints to it - 1) (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] (link-repeat: \"|-|\")[ (if: $intelligence > 0)[ (set: $intelligence to it - 1) (set: $totalPoints to it + 1) (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] ] } { (link-repeat: \"|Reset Points|\")[ (set: $empathy to 10) (set: $intelligence to 10) (set: $totalPoints to 5) (replace: ?empathyStat)[|empathyStat>[$empathy]] (replace: ?intelligenceStat)[|intelligenceStat>[$intelligence]] (replace: ?pointsStat)[|pointsStat>[$totalPoints]] ] } Empathy: |empathyStat>[10] Intelligence: |intelligenceStat>[10] Remaining Points: |pointsStat>[5] [[Test Stats]] :: Test Stats (link: \"Make an intelligence check?\")[ (set: _result to (random: 1, 6) + $intelligence) (if: _result >= 15)[ Intelligence Success! (_result >= 15) ](else:)[ Intelligence Failure! (_result < 15) ] ] (link: \"Make an empathy check?\")[ (set: _result to (random: 1, 6) + $empathy) (if: _result >= 15)[ Empathy Success! (_result >= 15) ](else:)[ Empathy Failure! (_result < 15) ] ] :: Startup[startup] (set: $empathy to 10) (set: $intelligence to 10) (set: $totalPoints to 5) Twee Download","title":"Twee Code"},{"location":"playerstatistics/harlowe/harlowe_player_statistics.html#see-also","text":"Conditional Statements , Setting and Showing","title":"See Also"},{"location":"playerstatistics/snowman/snowman_player_statistics.html","text":"\"Player Statistics\": Snowman (v1.3.0) # Information Elements must exist before the attempt to bind to them in order to be successful. This example uses the ready() function to achieve this with the first, starting passage. Summary # One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the jQuery event handler click() is used to bind to multiple buttons. Depending on what was clicked, the content is replaced or values adjusted based on if a conditional statement is true. Values are then tested when combined with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number. Example # Download Twee Code # :: StoryTitle Player Statistics in Snowman :: UserScript[script] $(function() { // Create a global setup object window.setup = window.setup || {}; // Create a global propety on the setup object window.setup.stats = {}; // Create (and overwrite) the use of 's' var s = window.setup.stats; s.empathy = 10; s.intelligence = 10; s.totalPoints = 5; $(\"#empathyIncrease\").click(function(){ if(s.totalPoints > 0) { setup.stats.empathy++; s.totalPoints--; $(\"#empathyStat\").text(s.empathy); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#empathyDecrease\").click(function(){ if(s.empathy > 0) { s.empathy--; s.totalPoints++; $(\"#empathyStat\").text(s.empathy); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#intelligenceIncrease\").click(function(){ if(s.totalPoints > 0) { s.intelligence++; s.totalPoints--; $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#intelligenceDecrease\").click(function(){ if(s.intelligence > 0) { s.intelligence--; s.totalPoints++; $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#pointsReset\").click(function(){ s.empathy = 10; s.intelligence = 10; s.totalPoints = 5; $(\"#empathyStat\").text(s.empathy); $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); }); // Add a randomInt function to the Math global Math.randomInt = function(min, max) { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min)) + min; }; $(\"#testIntelligence\").click(function() { var result = s.intelligence + Math.randomInt(1,6); if(result >= 15) { $(\"#intelligenceResult\").text(\"Success! (\" + result + \" >= 15)\"); } else { $(\"#intelligenceResult\").text(\"Failure! (\" + result + \" < 15)\"); } console.log(\"Test!\"); }); $(\"#testEmpathy\").click(function() { var result = s.empathy + Math.randomInt(1,6); if(result >= 15) { $(\"#empathyResult\").text(\"Success! (\" + result + \" >= 15)\"); } else { $(\"#empathyResult\").text(\"Failure! (\" + result + \" < 15)\"); } }); }); :: Start Empathy: <button id=\"empathyIncrease\">[+]</button> <button id=\"empathyDecrease\">[-]</button> Intelligence: <button id=\"intelligenceIncrease\">[+]</button> <button id=\"intelligenceDecrease\">[-]</button> <button id=\"pointsReset\">[Reset Points]</button> Empathy: <span id=\"empathyStat\">10</span> Intelligence: <span id=\"intelligenceStat\">10</span> Remaining Points: <span id=\"pointsStat\">5</span> <button id=\"testIntelligence\">Make an intelligence check?</button> <div id=\"intelligenceResult\"></div> <button id=\"testEmpathy\">Make an empathy check?</button> <div id=\"empathyResult\"></div> Twee Download See Also # Conditional Statements , Setting and Showing","title":"Snowman"},{"location":"playerstatistics/snowman/snowman_player_statistics.html#player-statistics-snowman-v130","text":"Information Elements must exist before the attempt to bind to them in order to be successful. This example uses the ready() function to achieve this with the first, starting passage.","title":"\"Player Statistics\": Snowman (v1.3.0)"},{"location":"playerstatistics/snowman/snowman_player_statistics.html#summary","text":"One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the jQuery event handler click() is used to bind to multiple buttons. Depending on what was clicked, the content is replaced or values adjusted based on if a conditional statement is true. Values are then tested when combined with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number.","title":"Summary"},{"location":"playerstatistics/snowman/snowman_player_statistics.html#example","text":"Download","title":"Example"},{"location":"playerstatistics/snowman/snowman_player_statistics.html#twee-code","text":":: StoryTitle Player Statistics in Snowman :: UserScript[script] $(function() { // Create a global setup object window.setup = window.setup || {}; // Create a global propety on the setup object window.setup.stats = {}; // Create (and overwrite) the use of 's' var s = window.setup.stats; s.empathy = 10; s.intelligence = 10; s.totalPoints = 5; $(\"#empathyIncrease\").click(function(){ if(s.totalPoints > 0) { setup.stats.empathy++; s.totalPoints--; $(\"#empathyStat\").text(s.empathy); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#empathyDecrease\").click(function(){ if(s.empathy > 0) { s.empathy--; s.totalPoints++; $(\"#empathyStat\").text(s.empathy); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#intelligenceIncrease\").click(function(){ if(s.totalPoints > 0) { s.intelligence++; s.totalPoints--; $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#intelligenceDecrease\").click(function(){ if(s.intelligence > 0) { s.intelligence--; s.totalPoints++; $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); } }); $(\"#pointsReset\").click(function(){ s.empathy = 10; s.intelligence = 10; s.totalPoints = 5; $(\"#empathyStat\").text(s.empathy); $(\"#intelligenceStat\").text(s.intelligence); $(\"#pointsStat\").text(s.totalPoints); }); // Add a randomInt function to the Math global Math.randomInt = function(min, max) { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min)) + min; }; $(\"#testIntelligence\").click(function() { var result = s.intelligence + Math.randomInt(1,6); if(result >= 15) { $(\"#intelligenceResult\").text(\"Success! (\" + result + \" >= 15)\"); } else { $(\"#intelligenceResult\").text(\"Failure! (\" + result + \" < 15)\"); } console.log(\"Test!\"); }); $(\"#testEmpathy\").click(function() { var result = s.empathy + Math.randomInt(1,6); if(result >= 15) { $(\"#empathyResult\").text(\"Success! (\" + result + \" >= 15)\"); } else { $(\"#empathyResult\").text(\"Failure! (\" + result + \" < 15)\"); } }); }); :: Start Empathy: <button id=\"empathyIncrease\">[+]</button> <button id=\"empathyDecrease\">[-]</button> Intelligence: <button id=\"intelligenceIncrease\">[+]</button> <button id=\"intelligenceDecrease\">[-]</button> <button id=\"pointsReset\">[Reset Points]</button> Empathy: <span id=\"empathyStat\">10</span> Intelligence: <span id=\"intelligenceStat\">10</span> Remaining Points: <span id=\"pointsStat\">5</span> <button id=\"testIntelligence\">Make an intelligence check?</button> <div id=\"intelligenceResult\"></div> <button id=\"testEmpathy\">Make an empathy check?</button> <div id=\"empathyResult\"></div> Twee Download","title":"Twee Code"},{"location":"playerstatistics/snowman/snowman_player_statistics.html#see-also","text":"Conditional Statements , Setting and Showing","title":"See Also"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html","text":"\"Player Statistics\": SugarCube (v2.18) # Summary # One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the <<link>> macro is used multiple times to replace content and adjust values based on <<if>> they are greater than a target number. In a second passage, these values are used in combination with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number. Example # Download Twee Code # :: StoryTitle Player Statistics in SugarCube :: Start Empathy: \\ <<link \"[+]\">> <<if $totalPoints gt 0>> <<set $empathy++>> <<set $totalPoints-->> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>>\\ <<link \"[-]\">> <<if $empathy gt 0>> <<set $empathy-->> <<set $totalPoints++>> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>> Intelligence: \\ <<link \"[+]\">> <<if $totalPoints gt 0>> <<set $intelligence++>> <<set $totalPoints-->> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>>\\ <<link \"[-]\">> <<if $intelligence gt 0>> <<set $intelligence-->> <<set $totalPoints++>> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>> <<link \"[Reset Points]\">> <<set $empathy to 10>> <<set $intelligence to 10>> <<set $totalPoints to 5>> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</link>> Empathy: <span id=\"empathyStat\">10</span> Intelligence: <span id=\"intelligenceStat\">10</span> Remaining Points: <span id=\"pointsStat\">5</span> [[Test Stats]] :: StoryInit <<set $empathy to 10>> <<set $intelligence to 10>> <<set $totalPoints to 5>> :: Test Stats <<linkreplace \"Make an intelligence check?\">> <<set _result to random(1, 6) + $intelligence >> <<if _result gte 15>> Intelligence Success! (_result >= 15) <<else>> Intelligence Failure! (_result < 15) <</if>> <</linkreplace>> <<linkreplace \"Make an empathy check?\">> <<set _result to random(1, 6) + $empathy >> <<if _result gte 15>> Emaphy Success! (_result >= 15) <<else>> Empathy Failure! (_result < 15) <</if>> <</linkreplace>> Twee Download See Also # Conditional Statements , Setting and Showing","title":"SugarCube"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html#player-statistics-sugarcube-v218","text":"","title":"\"Player Statistics\": SugarCube (v2.18)"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html#summary","text":"One of the most popular mechanics of table-top role-playing games are those where the player must determine their in-game statistics and then use them to make decisions. In this example, the <<link>> macro is used multiple times to replace content and adjust values based on <<if>> they are greater than a target number. In a second passage, these values are used in combination with a random number between 1 to 6, mimicking a common 1d6 mechanic to check if a value is above a target number.","title":"Summary"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html#example","text":"Download","title":"Example"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html#twee-code","text":":: StoryTitle Player Statistics in SugarCube :: Start Empathy: \\ <<link \"[+]\">> <<if $totalPoints gt 0>> <<set $empathy++>> <<set $totalPoints-->> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>>\\ <<link \"[-]\">> <<if $empathy gt 0>> <<set $empathy-->> <<set $totalPoints++>> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>> Intelligence: \\ <<link \"[+]\">> <<if $totalPoints gt 0>> <<set $intelligence++>> <<set $totalPoints-->> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>>\\ <<link \"[-]\">> <<if $intelligence gt 0>> <<set $intelligence-->> <<set $totalPoints++>> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</if>> <</link>> <<link \"[Reset Points]\">> <<set $empathy to 10>> <<set $intelligence to 10>> <<set $totalPoints to 5>> <<replace \"#empathyStat\">><<print $empathy>><</replace>> <<replace \"#intelligenceStat\">><<print $intelligence>><</replace>> <<replace \"#pointsStat\">><<print $totalPoints>><</replace>> <</link>> Empathy: <span id=\"empathyStat\">10</span> Intelligence: <span id=\"intelligenceStat\">10</span> Remaining Points: <span id=\"pointsStat\">5</span> [[Test Stats]] :: StoryInit <<set $empathy to 10>> <<set $intelligence to 10>> <<set $totalPoints to 5>> :: Test Stats <<linkreplace \"Make an intelligence check?\">> <<set _result to random(1, 6) + $intelligence >> <<if _result gte 15>> Intelligence Success! (_result >= 15) <<else>> Intelligence Failure! (_result < 15) <</if>> <</linkreplace>> <<linkreplace \"Make an empathy check?\">> <<set _result to random(1, 6) + $empathy >> <<if _result gte 15>> Emaphy Success! (_result >= 15) <<else>> Empathy Failure! (_result < 15) <</if>> <</linkreplace>> Twee Download","title":"Twee Code"},{"location":"playerstatistics/sugarcube/sugarcube_player_statistics.html#see-also","text":"Conditional Statements , Setting and Showing","title":"See Also"},{"location":"programmaticundo/harlowe/harlowe_programmaticundo.html","text":"\"Programmatic Undo\": Harlowe (v2.0) # Summary # While Harlowe supports allowing the user to undo and redo moves, the \"undo\" operation can also be accessed through the (undo:) macro. Through its use, changes from the most current action can be \"undone.\" Example # Download Twee Code # :: StoryTitle Programmatic Undo in Harlowe :: Start [[Enter the darkness]] :: Enter the darkness (link: \"You are not ready. Go back!\")[(undo:)] Twee Download","title":"Harlowe"},{"location":"programmaticundo/harlowe/harlowe_programmaticundo.html#programmatic-undo-harlowe-v20","text":"","title":"\"Programmatic Undo\": Harlowe (v2.0)"},{"location":"programmaticundo/harlowe/harlowe_programmaticundo.html#summary","text":"While Harlowe supports allowing the user to undo and redo moves, the \"undo\" operation can also be accessed through the (undo:) macro. Through its use, changes from the most current action can be \"undone.\"","title":"Summary"},{"location":"programmaticundo/harlowe/harlowe_programmaticundo.html#example","text":"Download","title":"Example"},{"location":"programmaticundo/harlowe/harlowe_programmaticundo.html#twee-code","text":":: StoryTitle Programmatic Undo in Harlowe :: Start [[Enter the darkness]] :: Enter the darkness (link: \"You are not ready. Go back!\")[(undo:)] Twee Download","title":"Twee Code"},{"location":"programmaticundo/snowman/snowman_programmaticundo.html","text":"\"Programmatic Undo\": Snowman (v1.3.0) # Information Checkpoints will only affect properties of the s (state) global variable in Snowman. Summary # Snowman comes with no user-facing functionality for undoing and re-doing actions. However, though using jQuery and a combination of the window.story.checkpoint() and window.history.back()* functions, this can be emulated. Live Example # Download Twee Code # :: StoryTitle Programmatic Undo in Snowman :: UserScript[script] $(window).on('showpassage:after', function (e, data) { window.story.checkpoint(data.passage.name); }); :: Start [[Enter the Darkness]] :: Enter the Darkness <a href=\"javascript: window.history.back();\">You are not ready! Go back!</a> Twee Download","title":"Snowman"},{"location":"programmaticundo/snowman/snowman_programmaticundo.html#programmatic-undo-snowman-v130","text":"Information Checkpoints will only affect properties of the s (state) global variable in Snowman.","title":"\"Programmatic Undo\": Snowman (v1.3.0)"},{"location":"programmaticundo/snowman/snowman_programmaticundo.html#summary","text":"Snowman comes with no user-facing functionality for undoing and re-doing actions. However, though using jQuery and a combination of the window.story.checkpoint() and window.history.back()* functions, this can be emulated.","title":"Summary"},{"location":"programmaticundo/snowman/snowman_programmaticundo.html#live-example","text":"Download","title":"Live Example"},{"location":"programmaticundo/snowman/snowman_programmaticundo.html#twee-code","text":":: StoryTitle Programmatic Undo in Snowman :: UserScript[script] $(window).on('showpassage:after', function (e, data) { window.story.checkpoint(data.passage.name); }); :: Start [[Enter the Darkness]] :: Enter the Darkness <a href=\"javascript: window.history.back();\">You are not ready! Go back!</a> Twee Download","title":"Twee Code"},{"location":"programmaticundo/sugarcube/sugarcube_programmaticundo.html","text":"\"Programmatic Undo\": SugarCube (v2.18) # Summary # While SugarCube supports allowing the user to undo and redo moves, the \"undo\" operation can also be accessed through the <<back>> macro. Through its use, changes from the most current action can be \"undone.\" Example # Download Twee Code # :: StoryTitle Programmatic Undo in SugarCube :: Start [[Enter the Darkness]] :: Enter the Darkness <<back \"You are not ready! Go back!\">> Twee Download","title":"SugarCube"},{"location":"programmaticundo/sugarcube/sugarcube_programmaticundo.html#programmatic-undo-sugarcube-v218","text":"","title":"\"Programmatic Undo\": SugarCube (v2.18)"},{"location":"programmaticundo/sugarcube/sugarcube_programmaticundo.html#summary","text":"While SugarCube supports allowing the user to undo and redo moves, the \"undo\" operation can also be accessed through the <<back>> macro. Through its use, changes from the most current action can be \"undone.\"","title":"Summary"},{"location":"programmaticundo/sugarcube/sugarcube_programmaticundo.html#example","text":"Download","title":"Example"},{"location":"programmaticundo/sugarcube/sugarcube_programmaticundo.html#twee-code","text":":: StoryTitle Programmatic Undo in SugarCube :: Start [[Enter the Darkness]] :: Enter the Darkness <<back \"You are not ready! Go back!\">> Twee Download","title":"Twee Code"},{"location":"questions/getting_started.html","text":"Getting Started # Online # Twine 2 can be accessed online . Offline # Twine 2 can also be downloaded and run on Windows, MacOS X, and Linux systems. The latest releases on GitHub has a listing of the current versions per operating system. Twine 1 # Twine 1 is only a desktop application. While it can still be used, it is not currently maintained or under active development. The current version is 1.4.2. Windows MacOS X","title":"How do I get started?"},{"location":"questions/getting_started.html#getting-started","text":"","title":"Getting Started"},{"location":"questions/getting_started.html#online","text":"Twine 2 can be accessed online .","title":"Online"},{"location":"questions/getting_started.html#offline","text":"Twine 2 can also be downloaded and run on Windows, MacOS X, and Linux systems. The latest releases on GitHub has a listing of the current versions per operating system.","title":"Offline"},{"location":"questions/getting_started.html#twine-1","text":"Twine 1 is only a desktop application. While it can still be used, it is not currently maintained or under active development. The current version is 1.4.2. Windows MacOS X","title":"Twine 1"},{"location":"questions/links.html","text":"Links # A link is a connection between one passage and another, both visually in Twine 2 and as a hyperlink a user can click to navigate to a passage of the same name in the published HTML. Passage Link # When something is enclosed within the two sets of opening and closing square brackets, this \"links\" one passage to another of that exact word or phrase. The \"link\" is the name of that other passage. For example, the code below links to the passage named \"Example\": [[Example]] When using Twine 2, it will automatically create the passage if it does not exist when linked from another passage. The Passages View shows the links between them. Routing Links # It is also possible to \"route\" links to different passages. Arrows, -> or <- , can be used to point to the destination of the link and \"away\" from the word or phrase used as the link text. [[Link to another passage->Different Passage Name]] [[Different Passage Name<-Link to another passage]] The pipe character, | , can also be used to route a user to a different passage than shown in the hyperlink. For example, the code below routes to the passage \"Another\" rather than \"Example\" as it would show: [[Example|Another]]","title":"How do I make links?"},{"location":"questions/links.html#links","text":"A link is a connection between one passage and another, both visually in Twine 2 and as a hyperlink a user can click to navigate to a passage of the same name in the published HTML.","title":"Links"},{"location":"questions/links.html#passage-link","text":"When something is enclosed within the two sets of opening and closing square brackets, this \"links\" one passage to another of that exact word or phrase. The \"link\" is the name of that other passage. For example, the code below links to the passage named \"Example\": [[Example]] When using Twine 2, it will automatically create the passage if it does not exist when linked from another passage. The Passages View shows the links between them.","title":"Passage Link"},{"location":"questions/links.html#routing-links","text":"It is also possible to \"route\" links to different passages. Arrows, -> or <- , can be used to point to the destination of the link and \"away\" from the word or phrase used as the link text. [[Link to another passage->Different Passage Name]] [[Different Passage Name<-Link to another passage]] The pipe character, | , can also be used to route a user to a different passage than shown in the hyperlink. For example, the code below routes to the passage \"Another\" rather than \"Example\" as it would show: [[Example|Another]]","title":"Routing Links"},{"location":"questions/making.html","text":"Making with Twine # At its heart, Twine is a tool for creating hypertext . The difference between hypertext and a linear story, the kind found in books and magazines, is that it allows the reader to have some measure of control. In other words, the reader has some ability over what they interact with next. In a story about a haunted house, for example, the reader might be able to tell the protagonist to \"Turn around and run\" or \"Venture deeper into the mausoleum\". In a nonfiction, personal piece, the reader might ask to learn more about my close relationship to my aunt. Readers navigate hypertexts through clicking on links. In this sense, most users are seasoned hypertext readers by navigating to this very page! Because hypertext branches so much, it's easy to get lost in the work. Much of Twine is dedicated to helping keep track of a work's structure visually with a Passages View , so authors see what their readers' experience will be like. Making Games with Twine # Can I make games with Twine? Of course! However, things a little more complicated than they initial appear. Twine itself can be thought of as more or less an editor that helps package up Stories . What provides the underlining conditional logic, variables, and other trappings of game programming are Story Formats .","title":"What can I make with Twine?"},{"location":"questions/making.html#making-with-twine","text":"At its heart, Twine is a tool for creating hypertext . The difference between hypertext and a linear story, the kind found in books and magazines, is that it allows the reader to have some measure of control. In other words, the reader has some ability over what they interact with next. In a story about a haunted house, for example, the reader might be able to tell the protagonist to \"Turn around and run\" or \"Venture deeper into the mausoleum\". In a nonfiction, personal piece, the reader might ask to learn more about my close relationship to my aunt. Readers navigate hypertexts through clicking on links. In this sense, most users are seasoned hypertext readers by navigating to this very page! Because hypertext branches so much, it's easy to get lost in the work. Much of Twine is dedicated to helping keep track of a work's structure visually with a Passages View , so authors see what their readers' experience will be like.","title":"Making with Twine"},{"location":"questions/making.html#making-games-with-twine","text":"Can I make games with Twine? Of course! However, things a little more complicated than they initial appear. Twine itself can be thought of as more or less an editor that helps package up Stories . What provides the underlining conditional logic, variables, and other trappings of game programming are Story Formats .","title":"Making Games with Twine"},{"location":"questions/need_to_know.html","text":"Need to Know # What do I need to know? Nothing! You can make a game, interactive project, or experimental essay without knowing programming or anything other than how to navigate a program and publish HTML using Twine 2! However, getting the most out of Twine 2 can often require some knowledge of HTML, CSS, or JavaScript. All story formats also use markup to style text. HTML, CSS, and JavaScript # This Cookbook has entries on HTML , CSS , and JavaScript as they are used in connection with Twine 2. Markup # All built-in story formats use different ways of marking up text to add some visual emphasize or otherwise style text . These differ between story formats, and it is highly recommended to consult the individual documentation of the story format for more information and examples.","title":"What do I need to know?"},{"location":"questions/need_to_know.html#need-to-know","text":"What do I need to know? Nothing! You can make a game, interactive project, or experimental essay without knowing programming or anything other than how to navigate a program and publish HTML using Twine 2! However, getting the most out of Twine 2 can often require some knowledge of HTML, CSS, or JavaScript. All story formats also use markup to style text.","title":"Need to Know"},{"location":"questions/need_to_know.html#html-css-and-javascript","text":"This Cookbook has entries on HTML , CSS , and JavaScript as they are used in connection with Twine 2.","title":"HTML, CSS, and JavaScript"},{"location":"questions/need_to_know.html#markup","text":"All built-in story formats use different ways of marking up text to add some visual emphasize or otherwise style text . These differ between story formats, and it is highly recommended to consult the individual documentation of the story format for more information and examples.","title":"Markup"},{"location":"questions/stories_saved.html","text":"Saving Stories # Twine 2 # Online # Stories are saved in the local storage of a web browser. This is isolated between a browser and its use of incognito or private windows. Clearing sessions and cookies in a browser may also clear the storage of Twine 2. Using a different browser also means accessing different local storage. Desktop # When used as a desktop application, Twine 2 stores its files under the current user's files. The current collection of Stories can be accessed through the View -> Show Story Library menu option. Twine 1 # As a desktop application, it stores its files in either HTML or as Twee source code on the local computer. It can import and export both HTML and Twee source code ( .twee or .tw ).","title":"Where are my stories saved?"},{"location":"questions/stories_saved.html#saving-stories","text":"","title":"Saving Stories"},{"location":"questions/stories_saved.html#twine-2","text":"","title":"Twine 2"},{"location":"questions/stories_saved.html#online","text":"Stories are saved in the local storage of a web browser. This is isolated between a browser and its use of incognito or private windows. Clearing sessions and cookies in a browser may also clear the storage of Twine 2. Using a different browser also means accessing different local storage.","title":"Online"},{"location":"questions/stories_saved.html#desktop","text":"When used as a desktop application, Twine 2 stores its files under the current user's files. The current collection of Stories can be accessed through the View -> Show Story Library menu option.","title":"Desktop"},{"location":"questions/stories_saved.html#twine-1","text":"As a desktop application, it stores its files in either HTML or as Twee source code on the local computer. It can import and export both HTML and Twee source code ( .twee or .tw ).","title":"Twine 1"},{"location":"questions/style_text.html","text":"Styling Text # Each Story Format uses their own markdown and special characters to format text. Some common examples are included below. Story Format Emphasis Strong Emphasis Verbatim Text Chapbook *Italics* or _Italics_ __Bold__ or **Bold** Any text following a new line and four spaces or a tab until the end of the line. Harlowe *Italics* or //Italics// **Bold** or ''Bold'' Verbatim SugarCube //Italics// ''Bold'' \"\"\"Verbatim\"\"\" or <nowiki>Verbatim</nowiki> Snowman *Italics* **Bold** Any text following a new line and four spaces or a tab until the end of the line.","title":"How do I style text?"},{"location":"questions/style_text.html#styling-text","text":"Each Story Format uses their own markdown and special characters to format text. Some common examples are included below. Story Format Emphasis Strong Emphasis Verbatim Text Chapbook *Italics* or _Italics_ __Bold__ or **Bold** Any text following a new line and four spaces or a tab until the end of the line. Harlowe *Italics* or //Italics// **Bold** or ''Bold'' Verbatim SugarCube //Italics// ''Bold'' \"\"\"Verbatim\"\"\" or <nowiki>Verbatim</nowiki> Snowman *Italics* **Bold** Any text following a new line and four spaces or a tab until the end of the line.","title":"Styling Text"},{"location":"releasenotes/twine1/1.4.1.html","text":"Twine 1.4.1 # Bugfixes # Bugfixes Development program # Potentially fixed the Windows VC++ runtime problem. If you haven't installed the VC++ 9 redistributable, the Twine installer should now correctly contain it. Fixed \u00abendnobr\u00bb consuming the three characters that come after it. Fixed external link syntax highlighting. Fixed syntax highlighting for shorthand \u00abprint\u00bb macros. Fixed unmatched \u00abendif\u00bb and \u00abendsilently\u00bb macros not being syntax-highlighted red. Removed the \"Delete Passage\" menu item in the Story menu, due to an identical entry being in the Edit menu. External links and variable links are no longer considered broken links in the IDE. Fixed annotation passages being drawn too dark in smooth drawing mode. Fixed the monospace font using the normal font's size instead of its own. The StorySettings passage is no longer converted to all-lowercase at build time. This should make HTML exporting/importing more symmetrical. Improved speed of HTML importing. Fixed an error when trying to replace a passage with one from animported file. Fixed importing from HTML sometimes failing to read passages correctly. Now, the \"no Start passage\" warning is suppressed if a StoryIncludes passage is present. Bugfixes Game engine # Fixed passages with names containing quote marks being unrecognised by links. Fixed HTML tables in passages not being constructed correctly. Altered Sugarcane's browser state-saving to avoid a crash in Firefox caused by having lots of variables in your story. Fixed TiddlyWiki emdashes not being rendered correctly. Fixed the \u00abnobr\u00bb macro inserting zero-width space characters into contained macro tags, thus breaking them. Fixed bug preventing custom macros from being usable in StoryMenu etc. Fixed the [img] syntax used in CSS stylesheets inserting a terminating semicolon, preventing further attributes from being used on the same line. Added \"vertical-align:bottom\" to images to compensate for a line-height difference between XHTML Transitional and HTML5. Why is there a line-height difference? The person who can answer that is not on this Earth, but in Heaven. Fixed the \u00abnobr\u00bb macro not working if any text follows it. Fixed \u00abchoice\u00bb . Now, clicking a \u00abchoice\u00bb disables all .choice links in the passage, not just itself. This returns it to 1.3.5 behaviour. Fixed variables used as array indexes not being parsed correctly. Restored the left positioning of the Sugarcane sidebar. Added support for \"javascript:\" and \"data:\" URIs in external links. You can now use external links in the simple link syntax, such as [[http://example.net]] . Possibly broken pretty-links (as in, links with a separate link text and destination) are now no longer assumed to be external URIs unless they contain a protocol (like \"http:\"), or the symbols . / \\ or #. This should make link debugging a bit easier. Fixed the shorthand \u00abdisplay\u00bb macro tag's title sometimes being incorrectly parsed as its first argument. Shorthand \u00abdisplay\u00bb : Attempting to access a parameter() that wasn't supplied will no longer throw an error, on the newly considered basis that it would make \"variadic passages\" (passages that can take multiple optional variables) difficult. Fixed a bug where backslashes would be incorrectly converted to arbitrary letters if passage obfuscation was being used. \u00abback\u00bb now works better when Undo is off in Sugarcane. Previously it would mess up the variable state in cases when link variables were in use. \u00abback\u00bb and \u00abreturn\u00bb now work when restoring a Jonah state via bookmark. \u00abback\u00bb also now works when clicked in a past Jonah passage - previously it would act as if it was in the present passage. \u00abback\u00bb now works in the StoryMenu, StoryAuthor, StoryTitle and StorySubtitle passages. \u00abchoice\u00bb now produces an error message if it's used in the StoryMenu, StoryAuthor, StoryTitle and StorySubtitle passage. Fixed Jonah scrolling in IE 8. Now, only the StoryTitle passage's text content will be used for the window title, instead of its raw code. Now, if a story has no StoryTitle, or the StoryTitle has no text content, it will default to the name of the .tws file used to build it, instead of just \"Untitled Story\". Fixed a bug where putting \"Lookup:\" in the StorySettings could potentially crash the game. Added a sanity check in case a script overrides History.prototype.display() but doesn't pass enough arguments (since in 1.4 it takes 4 arguments instead of 3). Fixed HTML <table> structures in passages not being rendered correctly. Additions # Additions to Development program # IDE tag colours now vary between shades of orange based on the hash of the tags, to help differentiate dissimilarly tagged passages from a distance. Added a Preferences option for showing the faint connector arrows for image and stylesheet passages. Passages displayed via the shorthand \u00abdisplay\u00bb syntax now result in connector arrows being drawn. Additions to Game engine # The StoryMenu now auto-updates when you change passages!! The code is re-executed and re-rendered into the element. This means you could, say, \u00abprint\u00bb a variable inside it, and it would update automatically. (This change also applies to StoryAuthor, StoryTitle and StorySubtitle). Added the tags() function, which takes one or more strings and returns an array of the tags of the given passage (or the current passage if no name is supplied). Added passage(), which simply holds the name of the current passage (If a passage is being \u00abdisplay\u00bbed by another, passage() is the name of the \u201ctopmost\u201d passage.) Added turns(), which provides the number of turns that have elapsed in the current game. Added visitedTag(), which returns the number of times passages with the given tag have been visited. Provide multiple tags to only search for passages that contain both. Added 'header' and 'footer' elements to Jonah's .passage elements, to provide a bit more symmetry with Sugarcane's DOM layout. The CSS selector \u201c:link\u201d in stylesheets is now converted to [class*=Link] at runtime. This is to provide backwards-compatibility for people who used \u201ca:link\u201d to refer to Twine links (which is no longer usable as internal links no longer have href attributes). It's a mean sight of a hack, but so be it - I shan't be adding back the \"javascript:void(0)\" href no matter what you say. Added the \"visitedLink\" class, which is applied to passage links that link to already visited passages. \u201c:visited\u201d is converted to \u201c.visitedLink\u201d much like the above. This provides a surprising amount of power - you can give .visitedLink \u201cdisplay:none\u201d, for instance, to make links to all visited passages disappear automatically. Re-implemented \u00abtextinput\u00bb . It creates an <input> text element which, when a <button> element is pressed, sets the variable to its string contents. It may also have an additional parameter, a link expressed in link syntax, which is used to create a <button> next to it. Examples: <<textinput $name>> , <<textinput $name [[Submit|Next passage]]>> . The previous 1.3.6 \u00abtextinput\u00bb behaviour of triggering the passage change via pressing the Enter key has been removed for now. Added \u00abradio\u00bb . Its arguments are a variable, and a number of strings for each option. When a <button> is pressed, the label of the selected radio button is put into the variable. Example: <<radio $feel \"Strongly agree\" \"Strongly disagree\">> . If you have multiple \u00abradio\u00bb macros that refer to the same variable, they're treated as part of the same set. Added \u00abcheckbox\u00bb . It's similar to \u00abradio\u00bb, having identical syntax - but it sets the variable to an array value containing all of the checked boxes' labels as strings. Example: <<checkbox $weapons \"Pistol\" \"Newspaper\" \"Letter opener\">> . Added \u00abbutton\u00bb , a macro that takes a link as its argument and creates a <button> element. Use it for passages which use \u00abradio\u00bb or \u00abcheckbox\u00bb , or a \u00abtextinput\u00bb set. Example: <<button [[Let's go!|armoury]]>> As a counterpart to the alert() raised when a script fails to load, window.onerror is now set to issue a one-time alert() signifying that a Javascript error has occurred during play. Feel free to contact me or use the forum if you find the message mystifying. StoryMenu now honours the 'nobr' passage tag. Built HTML files are now timestamped. Upgraded the built-in jQuery module to version 1.11. Changed Responsive's footer to a sticky footer, like God and all His hideous bat-faced angels originally intended. Altered Responsive's CSS to make the body background easier to change. Altered the CSS for all targets to make StoryMenu contents display better. Individual script or stylesheet passages may request the inclusion of jQuery or Modernizr, overriding the StorySettings options, by including in their code the case-insensitive string \"requires jQuery\" or \"requires Modernizr\". This enables jQuery-using scripts or Modernizr-using CSS to be easily pasted into stories without requiring any other modifications to the story.","title":"1.4.1"},{"location":"releasenotes/twine1/1.4.1.html#twine-141","text":"","title":"Twine 1.4.1"},{"location":"releasenotes/twine1/1.4.1.html#bugfixes","text":"","title":"Bugfixes"},{"location":"releasenotes/twine1/1.4.1.html#bugfixes-development-program","text":"Potentially fixed the Windows VC++ runtime problem. If you haven't installed the VC++ 9 redistributable, the Twine installer should now correctly contain it. Fixed \u00abendnobr\u00bb consuming the three characters that come after it. Fixed external link syntax highlighting. Fixed syntax highlighting for shorthand \u00abprint\u00bb macros. Fixed unmatched \u00abendif\u00bb and \u00abendsilently\u00bb macros not being syntax-highlighted red. Removed the \"Delete Passage\" menu item in the Story menu, due to an identical entry being in the Edit menu. External links and variable links are no longer considered broken links in the IDE. Fixed annotation passages being drawn too dark in smooth drawing mode. Fixed the monospace font using the normal font's size instead of its own. The StorySettings passage is no longer converted to all-lowercase at build time. This should make HTML exporting/importing more symmetrical. Improved speed of HTML importing. Fixed an error when trying to replace a passage with one from animported file. Fixed importing from HTML sometimes failing to read passages correctly. Now, the \"no Start passage\" warning is suppressed if a StoryIncludes passage is present.","title":"Bugfixes Development program"},{"location":"releasenotes/twine1/1.4.1.html#bugfixes-game-engine","text":"Fixed passages with names containing quote marks being unrecognised by links. Fixed HTML tables in passages not being constructed correctly. Altered Sugarcane's browser state-saving to avoid a crash in Firefox caused by having lots of variables in your story. Fixed TiddlyWiki emdashes not being rendered correctly. Fixed the \u00abnobr\u00bb macro inserting zero-width space characters into contained macro tags, thus breaking them. Fixed bug preventing custom macros from being usable in StoryMenu etc. Fixed the [img] syntax used in CSS stylesheets inserting a terminating semicolon, preventing further attributes from being used on the same line. Added \"vertical-align:bottom\" to images to compensate for a line-height difference between XHTML Transitional and HTML5. Why is there a line-height difference? The person who can answer that is not on this Earth, but in Heaven. Fixed the \u00abnobr\u00bb macro not working if any text follows it. Fixed \u00abchoice\u00bb . Now, clicking a \u00abchoice\u00bb disables all .choice links in the passage, not just itself. This returns it to 1.3.5 behaviour. Fixed variables used as array indexes not being parsed correctly. Restored the left positioning of the Sugarcane sidebar. Added support for \"javascript:\" and \"data:\" URIs in external links. You can now use external links in the simple link syntax, such as [[http://example.net]] . Possibly broken pretty-links (as in, links with a separate link text and destination) are now no longer assumed to be external URIs unless they contain a protocol (like \"http:\"), or the symbols . / \\ or #. This should make link debugging a bit easier. Fixed the shorthand \u00abdisplay\u00bb macro tag's title sometimes being incorrectly parsed as its first argument. Shorthand \u00abdisplay\u00bb : Attempting to access a parameter() that wasn't supplied will no longer throw an error, on the newly considered basis that it would make \"variadic passages\" (passages that can take multiple optional variables) difficult. Fixed a bug where backslashes would be incorrectly converted to arbitrary letters if passage obfuscation was being used. \u00abback\u00bb now works better when Undo is off in Sugarcane. Previously it would mess up the variable state in cases when link variables were in use. \u00abback\u00bb and \u00abreturn\u00bb now work when restoring a Jonah state via bookmark. \u00abback\u00bb also now works when clicked in a past Jonah passage - previously it would act as if it was in the present passage. \u00abback\u00bb now works in the StoryMenu, StoryAuthor, StoryTitle and StorySubtitle passages. \u00abchoice\u00bb now produces an error message if it's used in the StoryMenu, StoryAuthor, StoryTitle and StorySubtitle passage. Fixed Jonah scrolling in IE 8. Now, only the StoryTitle passage's text content will be used for the window title, instead of its raw code. Now, if a story has no StoryTitle, or the StoryTitle has no text content, it will default to the name of the .tws file used to build it, instead of just \"Untitled Story\". Fixed a bug where putting \"Lookup:\" in the StorySettings could potentially crash the game. Added a sanity check in case a script overrides History.prototype.display() but doesn't pass enough arguments (since in 1.4 it takes 4 arguments instead of 3). Fixed HTML <table> structures in passages not being rendered correctly.","title":"Bugfixes Game engine"},{"location":"releasenotes/twine1/1.4.1.html#additions","text":"","title":"Additions"},{"location":"releasenotes/twine1/1.4.1.html#additions-to-development-program","text":"IDE tag colours now vary between shades of orange based on the hash of the tags, to help differentiate dissimilarly tagged passages from a distance. Added a Preferences option for showing the faint connector arrows for image and stylesheet passages. Passages displayed via the shorthand \u00abdisplay\u00bb syntax now result in connector arrows being drawn.","title":"Additions to Development program"},{"location":"releasenotes/twine1/1.4.1.html#additions-to-game-engine","text":"The StoryMenu now auto-updates when you change passages!! The code is re-executed and re-rendered into the element. This means you could, say, \u00abprint\u00bb a variable inside it, and it would update automatically. (This change also applies to StoryAuthor, StoryTitle and StorySubtitle). Added the tags() function, which takes one or more strings and returns an array of the tags of the given passage (or the current passage if no name is supplied). Added passage(), which simply holds the name of the current passage (If a passage is being \u00abdisplay\u00bbed by another, passage() is the name of the \u201ctopmost\u201d passage.) Added turns(), which provides the number of turns that have elapsed in the current game. Added visitedTag(), which returns the number of times passages with the given tag have been visited. Provide multiple tags to only search for passages that contain both. Added 'header' and 'footer' elements to Jonah's .passage elements, to provide a bit more symmetry with Sugarcane's DOM layout. The CSS selector \u201c:link\u201d in stylesheets is now converted to [class*=Link] at runtime. This is to provide backwards-compatibility for people who used \u201ca:link\u201d to refer to Twine links (which is no longer usable as internal links no longer have href attributes). It's a mean sight of a hack, but so be it - I shan't be adding back the \"javascript:void(0)\" href no matter what you say. Added the \"visitedLink\" class, which is applied to passage links that link to already visited passages. \u201c:visited\u201d is converted to \u201c.visitedLink\u201d much like the above. This provides a surprising amount of power - you can give .visitedLink \u201cdisplay:none\u201d, for instance, to make links to all visited passages disappear automatically. Re-implemented \u00abtextinput\u00bb . It creates an <input> text element which, when a <button> element is pressed, sets the variable to its string contents. It may also have an additional parameter, a link expressed in link syntax, which is used to create a <button> next to it. Examples: <<textinput $name>> , <<textinput $name [[Submit|Next passage]]>> . The previous 1.3.6 \u00abtextinput\u00bb behaviour of triggering the passage change via pressing the Enter key has been removed for now. Added \u00abradio\u00bb . Its arguments are a variable, and a number of strings for each option. When a <button> is pressed, the label of the selected radio button is put into the variable. Example: <<radio $feel \"Strongly agree\" \"Strongly disagree\">> . If you have multiple \u00abradio\u00bb macros that refer to the same variable, they're treated as part of the same set. Added \u00abcheckbox\u00bb . It's similar to \u00abradio\u00bb, having identical syntax - but it sets the variable to an array value containing all of the checked boxes' labels as strings. Example: <<checkbox $weapons \"Pistol\" \"Newspaper\" \"Letter opener\">> . Added \u00abbutton\u00bb , a macro that takes a link as its argument and creates a <button> element. Use it for passages which use \u00abradio\u00bb or \u00abcheckbox\u00bb , or a \u00abtextinput\u00bb set. Example: <<button [[Let's go!|armoury]]>> As a counterpart to the alert() raised when a script fails to load, window.onerror is now set to issue a one-time alert() signifying that a Javascript error has occurred during play. Feel free to contact me or use the forum if you find the message mystifying. StoryMenu now honours the 'nobr' passage tag. Built HTML files are now timestamped. Upgraded the built-in jQuery module to version 1.11. Changed Responsive's footer to a sticky footer, like God and all His hideous bat-faced angels originally intended. Altered Responsive's CSS to make the body background easier to change. Altered the CSS for all targets to make StoryMenu contents display better. Individual script or stylesheet passages may request the inclusion of jQuery or Modernizr, overriding the StorySettings options, by including in their code the case-insensitive string \"requires jQuery\" or \"requires Modernizr\". This enables jQuery-using scripts or Modernizr-using CSS to be easily pasted into stories without requiring any other modifications to the story.","title":"Additions to Game engine"},{"location":"releasenotes/twine1/1.4.2.html","text":"Twine 1.4.2 # Bugfixes # Development program # Fatal errors # Now, building games in non-English locales should no longer get an encoding error caused by the built file's timestamp. Thanks to mth for assistance and Cab for the report. StoryIncludes # The Story___ passages are no longer forbidden from being included via StoryIncludes. The StoryIncludes passage is no longer broken on OS X. Importing # Fixed buggy HTML importing for passages that have > symbols in their titles. It is now possible to import from HTML files that use the SugarCube custom header. Fixed imported images having the wrong MIME-type if their filename extensions were in all-caps (such as \"tree.JPG\"). Altered the MIME-type of imported fonts in ttf and otf format to \"application/x-font-...\" instead of \"application/font-...\". Also, unrecognised files are now \"application/octet-stream\". This shouldn't really change anything, but may improve browser support. Story Map # The position of passages created by right-clicking and selecting \"New Passage Here\" should be fixed. Fixed passage names with full stops no longer failing to have incoming link arrows . Selecting \"New Passage\" when a Start passage is missing no longer creates the \"Start\" passage, since it could be irritating for \"partial .tws files\" that are being used in a large StoryIncludes project. Passage editor # Passages with very long names no longer have the left half of their name scrolled out of the title text box when you initially edit them. The passage editor now has a uniform tab width (set to 4 spaces). Fixed a bug where HTML wouldn't be highlighted if its tag names or attribute names contained hyphens (e.g. <div data-tags=\"...\"> ) Game engine # General # Built HTML files now have a UTF-8 byte-order mark. This should cause Dropbox to correctly transmit them with UTF-8 encoding instead of ASCII. Hooray!! Fixed certain page elements (such as StoryTitle and StoryAuthor) not being drawn at the start of a test play build that begins at a non-Start passage. Fixed the image preloader code, which didn't detect whitespace correctly, and thus prevented preloading images in HTML \\<img> tags that had a space between \"src\" and \"=\". Syntax # You should now be able to put a ] character inside the link syntax (e.g. [[\\<\\<$obj[0].x>>|Passage name]]) and put a quoted \">>\" inside the macro syntax (e.g. \\<\\<print \"\\<\\<--cool-->>\" >> ). Shorthand \\<\\<display>> : variable default was causing $vars provided as arguments to mess up horridly. This should fix this. Raw HTML entities (such as or \\< or somesuch) are now correctly preserved, rather than being converted to their symbols during the build process. Macros/Functions # Using Passage() instead of passage() in your code will no longer silently fail instead of producing an error message. \\<\\<choice>>, \\<\\<button>> and \\<\\<textinput>> no longer incorrectly convert Twine operators in the text of the provided link to Javascript operators (e.g. \\<\\<choice [[not]]>> becoming \\<\\<choice [[!]]>>). The undocumented clone() function has been updated to hopefully allow certain native objects to be cloned more effectively. A number of macro error messages are a little clearer - displaying \"$\" instead of state.history[0].variables.\" when referring to the macro invocation. Fixed a bug where certain objects were being passed by reference when used in a setter link - e.g. [[Link][$a = $obj]] caused $a and $obj to point to the same object, with changes to one altering the other. Fixed a bug where object literals as shorthand \\<\\<display>> arguments wouldn't work at all. Fixed a bug where multi-line string or object literals in \\<\\<set>> or \\<\\<print>> macros, etc., would not have Twine operators converted by Wikifier.parse() correctly. History/Back Button # Game history: Added a test for iOS Safari's private browsing mode, which does not disable sessionStorage but does reduce its quota to 0 making it hard to tell if it's actually usable. This causes the \"couldn't save the state\" alert to not pop up if you're playing in private mode. The story state serialisation functions have been rewritten to allow basic Javascript functions stored in Twine variables to be decompiled and stored. Previously, using the Sugarcane back button or a bookmark would cause function variables to lose their value. (Of course, this relies on function decompilation , so bound functions and native functions' serialisation will silently fail. And, when recompiling them, their original scope is lost.) Internals/Scripts # Added Array.prototype.forEach(), Object.create() and Array.isArray() polyfills to the engine, allowing IE 8-compliant scripts to use them. The engine now records the previous value of window.onerror, and restores it once the message has been displayed once. New features # Development program # General # Added StoryInit, a special passage in which to put Twine macros that you want to run before every play - including Test Plays of specific passages. This is generally a more ideal place to put your initial \\<\\<set>> macros instead of the Start passage. Thanks to T. M. Edwards for pioneering this feature. Error checking # Added a very basic passage code error-checking system. When closing a passage, Twine will now report a few possible errors: not matching an \\<\\<if>> macro with an \\<\\<endif>>, using \"=\" instead of \"is\" in the \\<\\<if>> macro, misspelling \"http://\" in a link, and putting HTML \\<script> tags in a script passage. (Less obvious errors can only be identified by your browser's Javascript engine, and will, as usual, only be identified at runtime.) Also, when closing a passage, Twine will now offer to create new passages for each red link in the passage text. This potentially saves you having to create them yourself. Also, when closing a passage, Twine will now offer to import all images, linked from URLs, into the story, and update the [img] references to match. Importing images is recommended because it saves you the bother of hosting the image files, keeps the story from breaking if your image hosting site is down, and allows you to host the HTML file on sites such as http://philome.la , which only allow single HTML files to be uploaded. All of the above checks and helpers can be run from the \"Verify All Passages\" menu item in the Build menu, or the \"Verify Passage\" item in the passage editor's Passage menu. StoryIncludes # Twine now tries to keep track of passages that aren't present in the file, but are included via the StoryIncludes feature (henceforth, \"included passages\"). Links to included passages are now mauve, and passages that link to included passages now have a mauve marker drawn on them in the Story Map. Story Metadata # Added a \"metadata\" option to the Story Menu, which lets you edit some data that is included in the final HTML file. The \"identity\" specifies a noun to use for game interface dialog boxes (the restart confirmation, the error dialog, etc.) If left blank, then \"game\" will be used. The \"description\" provides text to use for a HTML <meta> description element, which is often used by search engines etc. to provide a summary of the page. I've noticed that often Google will, at a loss to find the game content, display odd bits of the storeArea div as a page description in its search results, which is most definitely not a good look. Maybe this will fix things. StorySettings # Story Formats # Custom story formats can now supply a Python file, \"header.py\", which lets various parts of the Twine development program be customised to match the features of the story format. See the base header.py class , which your header.py file should subclass, for details. Game engine # Syntax # You can now use the inline syntax as a shorthand for the <span class=\"...\"> HTML tag. @@.robot;This is a robot-class span@@ is equivalent to <span class=\"robot\">This is a robot-class span</span> . You can also use it alongside style attributes: @@.robot;text-decoration:underline;This is a robot-class span with an underline@@ One bothersome fact about Twine up to now is that there's no real \"bridge\" between the basic Twine link's functionality and raw HTML. There was no convenient way to make a raw <a> link trigger a passage change. So, I've added a \"data-passage\" HTML attribute that you can put on HTML <a> , <img> , <map> and <area> tags. <a data-passage=\"Distant woods\">Some text</a> is equivalent to %%[[Some text|Distant woods]]%% , but allows you to add extra HTML attributes to the link, like \"style\". <img data-passage=\"Trees\"> is equivalent to %%[img[Trees]]%% - thus, you can now refer to imported images in HTML. (If you wish to make an image that links to a passage, put the <img> inside an <a> element.) <area data-passage=\"Trapdoor\" coords=\"...\"> is how you can make an image map area link to a passage. You can also attach data-passage to any other kind of tag to make it serve as a link, too: <span data-passage=\"Secret link\">This looks like ordinary text</span> . To simulate setter-links, you can also add a \"data-setter\" property, too. <span data-passage=\"Cellar\" data-setter=\"$teeth += 2\">Collect teeth</span> . Note that it does nothing without a data-passage attribute as well. It should now be possible to supply variables to the image syntax, as an image passage name or URL - for instance, [img[$pictureName]]. Removed the quote-by-line [[syntax]], on the basis that a good number of people don't really want indenting that often, and would rather have greater-than signs as bullet points. The rest can rely on the indented block syntax ( %%<<<%% ) or HTML <blockquote> tags. Generated HTML # Passage links no longer have ID attributes that reveal the name of the passage they go to, allowing anyone to \"cheat\" by right clicking them and selecting \"Inspect Element\". This has been the case for every previous version of Twine, but not anymore! Jonah: rewind links now have the class \"toolbar-rewind\" instead of \"toolbar-rewind to here\". Default CSS # Mobile Sugarcane layout: I've added a somewhat rudimentary media query to Sugarcane that converts the sidebar to a vertical header, using a minimum of alterations, when viewed on a 640px-width","title":"1.4.2"},{"location":"releasenotes/twine1/1.4.2.html#twine-142","text":"","title":"Twine 1.4.2"},{"location":"releasenotes/twine1/1.4.2.html#bugfixes","text":"","title":"Bugfixes"},{"location":"releasenotes/twine1/1.4.2.html#development-program","text":"","title":"Development program"},{"location":"releasenotes/twine1/1.4.2.html#fatal-errors","text":"Now, building games in non-English locales should no longer get an encoding error caused by the built file's timestamp. Thanks to mth for assistance and Cab for the report.","title":"Fatal errors"},{"location":"releasenotes/twine1/1.4.2.html#storyincludes","text":"The Story___ passages are no longer forbidden from being included via StoryIncludes. The StoryIncludes passage is no longer broken on OS X.","title":"StoryIncludes"},{"location":"releasenotes/twine1/1.4.2.html#importing","text":"Fixed buggy HTML importing for passages that have > symbols in their titles. It is now possible to import from HTML files that use the SugarCube custom header. Fixed imported images having the wrong MIME-type if their filename extensions were in all-caps (such as \"tree.JPG\"). Altered the MIME-type of imported fonts in ttf and otf format to \"application/x-font-...\" instead of \"application/font-...\". Also, unrecognised files are now \"application/octet-stream\". This shouldn't really change anything, but may improve browser support.","title":"Importing"},{"location":"releasenotes/twine1/1.4.2.html#story-map","text":"The position of passages created by right-clicking and selecting \"New Passage Here\" should be fixed. Fixed passage names with full stops no longer failing to have incoming link arrows . Selecting \"New Passage\" when a Start passage is missing no longer creates the \"Start\" passage, since it could be irritating for \"partial .tws files\" that are being used in a large StoryIncludes project.","title":"Story Map"},{"location":"releasenotes/twine1/1.4.2.html#passage-editor","text":"Passages with very long names no longer have the left half of their name scrolled out of the title text box when you initially edit them. The passage editor now has a uniform tab width (set to 4 spaces). Fixed a bug where HTML wouldn't be highlighted if its tag names or attribute names contained hyphens (e.g. <div data-tags=\"...\"> )","title":"Passage editor"},{"location":"releasenotes/twine1/1.4.2.html#game-engine","text":"","title":"Game engine"},{"location":"releasenotes/twine1/1.4.2.html#general","text":"Built HTML files now have a UTF-8 byte-order mark. This should cause Dropbox to correctly transmit them with UTF-8 encoding instead of ASCII. Hooray!! Fixed certain page elements (such as StoryTitle and StoryAuthor) not being drawn at the start of a test play build that begins at a non-Start passage. Fixed the image preloader code, which didn't detect whitespace correctly, and thus prevented preloading images in HTML \\<img> tags that had a space between \"src\" and \"=\".","title":"General"},{"location":"releasenotes/twine1/1.4.2.html#syntax","text":"You should now be able to put a ] character inside the link syntax (e.g. [[\\<\\<$obj[0].x>>|Passage name]]) and put a quoted \">>\" inside the macro syntax (e.g. \\<\\<print \"\\<\\<--cool-->>\" >> ). Shorthand \\<\\<display>> : variable default was causing $vars provided as arguments to mess up horridly. This should fix this. Raw HTML entities (such as or \\< or somesuch) are now correctly preserved, rather than being converted to their symbols during the build process.","title":"Syntax"},{"location":"releasenotes/twine1/1.4.2.html#macrosfunctions","text":"Using Passage() instead of passage() in your code will no longer silently fail instead of producing an error message. \\<\\<choice>>, \\<\\<button>> and \\<\\<textinput>> no longer incorrectly convert Twine operators in the text of the provided link to Javascript operators (e.g. \\<\\<choice [[not]]>> becoming \\<\\<choice [[!]]>>). The undocumented clone() function has been updated to hopefully allow certain native objects to be cloned more effectively. A number of macro error messages are a little clearer - displaying \"$\" instead of state.history[0].variables.\" when referring to the macro invocation. Fixed a bug where certain objects were being passed by reference when used in a setter link - e.g. [[Link][$a = $obj]] caused $a and $obj to point to the same object, with changes to one altering the other. Fixed a bug where object literals as shorthand \\<\\<display>> arguments wouldn't work at all. Fixed a bug where multi-line string or object literals in \\<\\<set>> or \\<\\<print>> macros, etc., would not have Twine operators converted by Wikifier.parse() correctly.","title":"Macros/Functions"},{"location":"releasenotes/twine1/1.4.2.html#historyback-button","text":"Game history: Added a test for iOS Safari's private browsing mode, which does not disable sessionStorage but does reduce its quota to 0 making it hard to tell if it's actually usable. This causes the \"couldn't save the state\" alert to not pop up if you're playing in private mode. The story state serialisation functions have been rewritten to allow basic Javascript functions stored in Twine variables to be decompiled and stored. Previously, using the Sugarcane back button or a bookmark would cause function variables to lose their value. (Of course, this relies on function decompilation , so bound functions and native functions' serialisation will silently fail. And, when recompiling them, their original scope is lost.)","title":"History/Back Button"},{"location":"releasenotes/twine1/1.4.2.html#internalsscripts","text":"Added Array.prototype.forEach(), Object.create() and Array.isArray() polyfills to the engine, allowing IE 8-compliant scripts to use them. The engine now records the previous value of window.onerror, and restores it once the message has been displayed once.","title":"Internals/Scripts"},{"location":"releasenotes/twine1/1.4.2.html#new-features","text":"","title":"New features"},{"location":"releasenotes/twine1/1.4.2.html#development-program_1","text":"","title":"Development program"},{"location":"releasenotes/twine1/1.4.2.html#general_1","text":"Added StoryInit, a special passage in which to put Twine macros that you want to run before every play - including Test Plays of specific passages. This is generally a more ideal place to put your initial \\<\\<set>> macros instead of the Start passage. Thanks to T. M. Edwards for pioneering this feature.","title":"General"},{"location":"releasenotes/twine1/1.4.2.html#error-checking","text":"Added a very basic passage code error-checking system. When closing a passage, Twine will now report a few possible errors: not matching an \\<\\<if>> macro with an \\<\\<endif>>, using \"=\" instead of \"is\" in the \\<\\<if>> macro, misspelling \"http://\" in a link, and putting HTML \\<script> tags in a script passage. (Less obvious errors can only be identified by your browser's Javascript engine, and will, as usual, only be identified at runtime.) Also, when closing a passage, Twine will now offer to create new passages for each red link in the passage text. This potentially saves you having to create them yourself. Also, when closing a passage, Twine will now offer to import all images, linked from URLs, into the story, and update the [img] references to match. Importing images is recommended because it saves you the bother of hosting the image files, keeps the story from breaking if your image hosting site is down, and allows you to host the HTML file on sites such as http://philome.la , which only allow single HTML files to be uploaded. All of the above checks and helpers can be run from the \"Verify All Passages\" menu item in the Build menu, or the \"Verify Passage\" item in the passage editor's Passage menu.","title":"Error checking"},{"location":"releasenotes/twine1/1.4.2.html#storyincludes_1","text":"Twine now tries to keep track of passages that aren't present in the file, but are included via the StoryIncludes feature (henceforth, \"included passages\"). Links to included passages are now mauve, and passages that link to included passages now have a mauve marker drawn on them in the Story Map.","title":"StoryIncludes"},{"location":"releasenotes/twine1/1.4.2.html#story-metadata","text":"Added a \"metadata\" option to the Story Menu, which lets you edit some data that is included in the final HTML file. The \"identity\" specifies a noun to use for game interface dialog boxes (the restart confirmation, the error dialog, etc.) If left blank, then \"game\" will be used. The \"description\" provides text to use for a HTML <meta> description element, which is often used by search engines etc. to provide a summary of the page. I've noticed that often Google will, at a loss to find the game content, display odd bits of the storeArea div as a page description in its search results, which is most definitely not a good look. Maybe this will fix things.","title":"Story Metadata"},{"location":"releasenotes/twine1/1.4.2.html#storysettings","text":"","title":"StorySettings"},{"location":"releasenotes/twine1/1.4.2.html#story-formats","text":"Custom story formats can now supply a Python file, \"header.py\", which lets various parts of the Twine development program be customised to match the features of the story format. See the base header.py class , which your header.py file should subclass, for details.","title":"Story Formats"},{"location":"releasenotes/twine1/1.4.2.html#game-engine_1","text":"","title":"Game engine"},{"location":"releasenotes/twine1/1.4.2.html#syntax_1","text":"You can now use the inline syntax as a shorthand for the <span class=\"...\"> HTML tag. @@.robot;This is a robot-class span@@ is equivalent to <span class=\"robot\">This is a robot-class span</span> . You can also use it alongside style attributes: @@.robot;text-decoration:underline;This is a robot-class span with an underline@@ One bothersome fact about Twine up to now is that there's no real \"bridge\" between the basic Twine link's functionality and raw HTML. There was no convenient way to make a raw <a> link trigger a passage change. So, I've added a \"data-passage\" HTML attribute that you can put on HTML <a> , <img> , <map> and <area> tags. <a data-passage=\"Distant woods\">Some text</a> is equivalent to %%[[Some text|Distant woods]]%% , but allows you to add extra HTML attributes to the link, like \"style\". <img data-passage=\"Trees\"> is equivalent to %%[img[Trees]]%% - thus, you can now refer to imported images in HTML. (If you wish to make an image that links to a passage, put the <img> inside an <a> element.) <area data-passage=\"Trapdoor\" coords=\"...\"> is how you can make an image map area link to a passage. You can also attach data-passage to any other kind of tag to make it serve as a link, too: <span data-passage=\"Secret link\">This looks like ordinary text</span> . To simulate setter-links, you can also add a \"data-setter\" property, too. <span data-passage=\"Cellar\" data-setter=\"$teeth += 2\">Collect teeth</span> . Note that it does nothing without a data-passage attribute as well. It should now be possible to supply variables to the image syntax, as an image passage name or URL - for instance, [img[$pictureName]]. Removed the quote-by-line [[syntax]], on the basis that a good number of people don't really want indenting that often, and would rather have greater-than signs as bullet points. The rest can rely on the indented block syntax ( %%<<<%% ) or HTML <blockquote> tags.","title":"Syntax"},{"location":"releasenotes/twine1/1.4.2.html#generated-html","text":"Passage links no longer have ID attributes that reveal the name of the passage they go to, allowing anyone to \"cheat\" by right clicking them and selecting \"Inspect Element\". This has been the case for every previous version of Twine, but not anymore! Jonah: rewind links now have the class \"toolbar-rewind\" instead of \"toolbar-rewind to here\".","title":"Generated HTML"},{"location":"releasenotes/twine1/1.4.2.html#default-css","text":"Mobile Sugarcane layout: I've added a somewhat rudimentary media query to Sugarcane that converts the sidebar to a vertical header, using a minimum of alterations, when viewed on a 640px-width","title":"Default CSS"},{"location":"releasenotes/twine1/1.4.3.html","text":"Twine 1.4.3 # Bugfixes/alterations # Development program # Story Map # Signficantly improved the performance of the story map, with minor improvements to numerous other features. Thanks to Richard Lake and Maarten ter Huurne for this. Potentially fixed a crash involving dragging passages. Fixed a bug where pasting passages would sometimes place them in incorrect positions. Menus # Added an \"Update StoryIncludes Links\" menu option, allowing StoryIncludes passage availability to be manually refreshed. This menu item will be disabled if StoryIncludes isn't present. Added Option-Command-F as an alternative 'exit fullscreen' key command. StoryIncludes # Now, closing StorySettings will refresh the StoryIncludes links automatically. Now, you can include a .tws which itself contains a StoryIncludes passage. Passage editor # Pressing control-A while typing in the passage title box should now correctly select the title text. If you highlight a link with separate link text and passage title (such as [[link text|passage]]) then press control-L, a new passage named \"passage\" (instead of \"link text|passage\") is created. In the \"create passages\" prompt given when you close a passage containing red links, the 'cancel' button now correctly cancels closing the passage. Importing # Fixed a bug where you couldn't import Twine HTML files which had tags written in uppercase. Fixed a bug where Twine HTML files with storeArea \\<div>s with the attribute \"hidden\" couldn't be imported. Changed the MIME-type of imported TTF font files from \"application/x-font-ttf\" to \"application/font-sfnt\", and added \"format(truetype)\" to the generated @font-face CSS, and made similar changes for OTF fonts. Story formats # Now, Twine will continue instead of crashing if, during startup, the last opened story's format isn't available. Also, it will properly error and quit if zero story formats are available (which should be unlikely). Changed the naming of custom story formats' Python files from [story format name]/[story format name].py to [story format name]/header.py, in order to fix the issue where if a user renames the story format's directory, the custom Header file will no longer be found. However, old story formats which still use [story format name].py should continue to work correctly. Game engine # General # Fixed a missing Y in the \"got itself in a mess\" error message. The storeArea's passage is now read using textContent instead of innerText, fixing a number of minor bugs involving consecutive whitespace in passages being truncated. Syntax # Fixed a bug where the image syntax didn't work with images at external URLs. Macros/Functions # Fixed a bug where variables saved via \u00abremember\u00bb were unwittingly shared over all Twine stories accessed from the same website. Fixed a bug in Jonah where certain internal link","title":"1.4.3"},{"location":"releasenotes/twine1/1.4.3.html#twine-143","text":"","title":"Twine 1.4.3"},{"location":"releasenotes/twine1/1.4.3.html#bugfixesalterations","text":"","title":"Bugfixes/alterations"},{"location":"releasenotes/twine1/1.4.3.html#development-program","text":"","title":"Development program"},{"location":"releasenotes/twine1/1.4.3.html#story-map","text":"Signficantly improved the performance of the story map, with minor improvements to numerous other features. Thanks to Richard Lake and Maarten ter Huurne for this. Potentially fixed a crash involving dragging passages. Fixed a bug where pasting passages would sometimes place them in incorrect positions.","title":"Story Map"},{"location":"releasenotes/twine1/1.4.3.html#menus","text":"Added an \"Update StoryIncludes Links\" menu option, allowing StoryIncludes passage availability to be manually refreshed. This menu item will be disabled if StoryIncludes isn't present. Added Option-Command-F as an alternative 'exit fullscreen' key command.","title":"Menus"},{"location":"releasenotes/twine1/1.4.3.html#storyincludes","text":"Now, closing StorySettings will refresh the StoryIncludes links automatically. Now, you can include a .tws which itself contains a StoryIncludes passage.","title":"StoryIncludes"},{"location":"releasenotes/twine1/1.4.3.html#passage-editor","text":"Pressing control-A while typing in the passage title box should now correctly select the title text. If you highlight a link with separate link text and passage title (such as [[link text|passage]]) then press control-L, a new passage named \"passage\" (instead of \"link text|passage\") is created. In the \"create passages\" prompt given when you close a passage containing red links, the 'cancel' button now correctly cancels closing the passage.","title":"Passage editor"},{"location":"releasenotes/twine1/1.4.3.html#importing","text":"Fixed a bug where you couldn't import Twine HTML files which had tags written in uppercase. Fixed a bug where Twine HTML files with storeArea \\<div>s with the attribute \"hidden\" couldn't be imported. Changed the MIME-type of imported TTF font files from \"application/x-font-ttf\" to \"application/font-sfnt\", and added \"format(truetype)\" to the generated @font-face CSS, and made similar changes for OTF fonts.","title":"Importing"},{"location":"releasenotes/twine1/1.4.3.html#story-formats","text":"Now, Twine will continue instead of crashing if, during startup, the last opened story's format isn't available. Also, it will properly error and quit if zero story formats are available (which should be unlikely). Changed the naming of custom story formats' Python files from [story format name]/[story format name].py to [story format name]/header.py, in order to fix the issue where if a user renames the story format's directory, the custom Header file will no longer be found. However, old story formats which still use [story format name].py should continue to work correctly.","title":"Story formats"},{"location":"releasenotes/twine1/1.4.3.html#game-engine","text":"","title":"Game engine"},{"location":"releasenotes/twine1/1.4.3.html#general","text":"Fixed a missing Y in the \"got itself in a mess\" error message. The storeArea's passage is now read using textContent instead of innerText, fixing a number of minor bugs involving consecutive whitespace in passages being truncated.","title":"General"},{"location":"releasenotes/twine1/1.4.3.html#syntax","text":"Fixed a bug where the image syntax didn't work with images at external URLs.","title":"Syntax"},{"location":"releasenotes/twine1/1.4.3.html#macrosfunctions","text":"Fixed a bug where variables saved via \u00abremember\u00bb were unwittingly shared over all Twine stories accessed from the same website. Fixed a bug in Jonah where certain internal link","title":"Macros/Functions"},{"location":"releasenotes/twine1/1.4.html","text":"Twine 1.4 # Game engine # Syntax # You can now mix HTML tags and passage syntax in your story, without needing the <html> syntax. (It still remains for backwards-compatibility). You can now use variables in place of a passage name in the link syntax - [[Exit|$placeName]] now creates a link to the passage whose name is in the $placeName variable. You can also do [[Back|previous()]] to replicate the <<back>> macro. Also, you can write [[link text|passage name][$var = value]] to make a passage or external link that changes a variable when it's followed! The code section is treated as if it were arguments to a <<set>> macro. This syntax addition should work with <<choice>> macros (but not the [img] syntax). You can set multiple variables by separating them with a semicolon. As a shorthand for <span style=\"...\"> , the TiddlyWiki inline style syntax is available. Type @@ , then list CSS style attributes separated and terminated with semicolons, then put the passage text (including any other formatting and macros) ending with another @@ . Example: @@font-size:2em; text-decoration: underline; Hello there!@@ Ending a line with \\ will cause that line break to be removed from the rendered text. This can be useful when dealing with long chains of <<if>> macros. Macros # <<remember>> now uses HTML5 Local Storage, which means it can now work even in an offline HTML file. Also, it can remember multiple variables given in a compound statement (like <<remember $a = 1, $b = 2>> ). Added <<forget>> , which undoes the effects of <<remember>> . <<choice>> can now accept arguments phrased using the link syntax, e.g: <<choice [[a trapdoor?|falling]]>> . This saves the trouble of having to account for its inconsistent argument order. <<nobr>> and <<endnobr>> remove all the line breaks in the text between them. They should be used instead of <<silently>> to enclose groups of macros. The <<else if>> macro, which can also be written as <<elseif>> , allows you to essentially have multiple <<if>> macros chained together, without needing to nest each of them within the <<else>> / <<endif>> tag pair of the other. You can also use variables in place of a passage name in <<display>> . For instance, <<display $name>> is now valid. Shorthand macros # You can now write a shorthand form of <<print $variable>> like so: <<$variable>>. Note that this only works for printing just variables - not functions or anything else. You can now write a shorthand form of <<display \"Place\">> like so: <<Place>> . Note that this only works for passages whose names do NOT contain spaces. Also, it can only be done with specific named passages - not variables or anything else. You can supply additional arguments to the shorthand <<display>> macro - in effect, you can \"call\" passages as if they were macros. (Note: you cannot supply arguments to the longhand <<display>> because they will be interpreted as part of the passage name - for instance, <<display Cellar 2>> will try to display \"Cellar 2\" instead of \"Cellar\" with an argument of 2.) Macro syntax/functions # You may now use \"to\" in macros instead of \"=\", and \"is\" instead of \"eq\". I think we can all agree it's too easy to confuse \"=\" with \"eq\", so you can instead write <<set $darts to 4>> for more readable code. Strings containing 'and', 'or', '$' and other Twine operator symbols can be used inside macros without them changing into Javascript symbols. Now you can put greater-than signs inside macro tags, such as <<set $arrow to \"-->\">> All new variables are now 0 by default, regardless of whether you've <<set>> them or not. Added either() , a function that randomly picks one of the things given to it. Added visited() , a function that returns the number of times you've visited the given passage. Added previous() , a function that returns the name of the previous passage visited. If this passage is being included by a shorthand <<display>> , the parameter() function returns one of the space-separated terms in the macro invocation, parsed to a value. The function's argument is a zero-based index - parameter() or parameter(0) returns the first parameter, parameter(1) the second, and so forth. Macro coding # setTransitionCSS() replaces the contents of the #transitionCSS \\<script> element with the passed string. This allows you to completely override the default transition CSS without it cascading down. I'm offering this as a JS function because many transitions will also require some extra JS, and being able to provide the complete transition code in just a script is desirable. prerender and postrender are new objects whose function properties are executed every time the passage is rendered. The functions added to them take one argument: the resultant .passage .content element. Their 'this' value is the Passage object being rendered. Passage tags # An alternative Tag CSS approach! Now, taking a stylesheet passage and adding an extra tag to it (in addition to \"stylesheet\") will cause that stylesheet to only be applied for passages with that given tag. (This, I feel, is a bit tidier than the old Tag CSS method - the [data-tags] selector need not be repeated dozens of times in a stylesheet, and applying only to the 'body' or '.passage' selectors. Although, it is slightly less flexible w/r/t tag hierarchies - the :not[data-tags] selector can't really be replicated.) Twine now uses CSS transitions for passages appearing and disappearing. Giving a stylesheet passage the tag \"transition\" will cause that stylesheet to replace the default \"fade-in\" transition CSS, letting you define your own transition without having to override the other one's properties. The special \"nobr\" passage tag removes line breaks from the whole passage. StorySettings # The StorySettings passage enables a number of special story options to be set. Undo: enables the player to \"undo moves\". In Sugarcane, this means being able to use the Back button in the browser. In Jonah, this means being able to use the \"Rewind to here\" link, and being able to click links in previous passages. Bookmark: enables the player to use the \"Bookmark\" link in Sugarcane and Jonah. On by default. Obfuscate: obfuscates the story's HTML source to prevent people from spoiling themselves by reading it. Off by default. jQuery: set this on if you are using custom scripts that rely on the jQuery library. Otherwise, leave off. Note: Twine 1.4 relinquishes control of the \"$\" variable, so jQuery can now use it without $.noConflict(). Modernizr: set this on if you are using custom scripts that rely on the Modernizr library. Otherwise, leave off. Jonah # All passages are now added to the bottom, regardless of where you click the link. Clicking a link that leads to a previously displayed passage will display a new version of the passage at the bottom, instead of scrolling up to the old version. Clicking a link in a past passage in Jonah now rewinds the game state to that passage before following the link. This gives the author a greater level of control over the game state - it's no longer possible to re-use old links from earlier in the story that no longer make sense in the current context. (Note: Switching off the \"Undo\" StorySetting disables all links in past passages.) <<back>> is now usable in Jonah. When used in Jonah, a <<back>> link removes the contained passage, plus any prior passages (as given by the \"steps\" argument or a passage name argument). Sugarcane # Removed the \"Share\" menu. The \"Rewind\" menu is only visible if any passage has been tagged with 'bookmark'. Added a \"Bookmark\" menu item, which produces a link to the current passage. HTML5 History is now used to control the browser's Back and Forward buttons, and the <<back>> and <<return>> macros, in Sugarcane. This means that several bugs related to these are now fixed, and they should now work alongside random macros, player-input macros, and other such things. <<choice>> is now usable in Sugarcane. It now creates a link that can only be clicked once in the whole story. The sidebar now has position:absolute instead of position:fixed. CSS / HTML # Added a <noscript> tag to alert the reader that Javascript is off. Made it so that raw HTML <a> links in stories are styled as if they were proper externalLinks, in case the author unwittingly used the former in ignorance of the latter (a not uncommon occurence). The passage content element, formerly classed \"body\" in Jonah and \"content\" in Sugarcane, now has a class of \"body content\" to match legacy CSS for both. Development program # Visual # Special passages (Start, StoryAuthor, stylesheets, etc.) have different-coloured title bars. I've tried to stick with earthy hues in keeping with the colour scheme of the Twine icon, with redder hues used for stylesheet and script passages. Passage tags are displayed in a peach ribbon along the bottom of the passage box. Annotation passages are non-playable passages tagged with \"annotation\" that hold text to display on the story map, to annotate, comment or document the source code of the game. They have a different colour and size to normal passages. Connection lines representing <<display>> macros are drawn with a bluer tint. The position of newly created passages is much less arbitrary - passages will be placed closer to the expected area. Altered the Greeking of zoomed-out passages to reflect the actual passage text length. Selected passages now have their link arrows thickened to visually offset them. Passage tooltips now display a preview of the passage's text (up to 840 characters). Tagged stylesheets have arrows linking them and any passages with the same tag. Importing/Exporting # Added \"Import From Compiled HTML\" option, letting the author recover passages from built games. Importing .twee source code no longer discards all the passage tags in the imported passages. The \"Proofing Copy\" export option renders a few more markup styles better. Building # The \"Test Play\" menu item builds the game to a temp file, letting you run the story without having to have saved it to a specific filename first. You can also right-click a passage and select \"Test Play From Here\" to start playing from that particular passage. The \"StoryIncludes\" passage allows the passages inside other .tws or .twee files to be imported into this passage during building. If your game is particularly huge, you can divide it into a bunch of smaller .tws/.twee files, then add the filenames of these partial .tws/.twee files to one \"main\" file's StoryIncludes passage. All the passages in those files will then be copied into the main story at build time. Added \"Auto Build\", a menu option that is only available when used with a StoryIncludes passage. If this is set, then when any one of those smaller .tws/.twee files is modified, the story is automatically rebuilt and can be tested in-browser. This requires both files to be open at the same time, though. Passage editing # Passage titles must now be unique. The passage title input will turn red to indicate non-uniqueness. Passage titles may no longer contain the | and ] symbols, due to such names being difficult to link. Vastly improved the passage syntax highlighter. Added very basic stylesheet CSS syntax highlighting. Images and fonts # You can now add image files to the story file. These are stored as 'image passages' which can be included in passages using the image syntax: [img[imageName]] displays the image. Images are also embedded in the final HTML file, and don't need to be hosted elsewhere. Supported image file extensions are GIF, PNG, JPEG, SVG and WebP. You can now embed font files, which can then be used in stylesheets, or, if you don't know CSS, the \\<font> element. Fonts are simply imported as stylesheet passages containing the font file in base64 encoding. Supported font file extensions are TTF, WOFF, OTF and SVG.","title":"1.4"},{"location":"releasenotes/twine1/1.4.html#twine-14","text":"","title":"Twine 1.4"},{"location":"releasenotes/twine1/1.4.html#game-engine","text":"","title":"Game engine"},{"location":"releasenotes/twine1/1.4.html#syntax","text":"You can now mix HTML tags and passage syntax in your story, without needing the <html> syntax. (It still remains for backwards-compatibility). You can now use variables in place of a passage name in the link syntax - [[Exit|$placeName]] now creates a link to the passage whose name is in the $placeName variable. You can also do [[Back|previous()]] to replicate the <<back>> macro. Also, you can write [[link text|passage name][$var = value]] to make a passage or external link that changes a variable when it's followed! The code section is treated as if it were arguments to a <<set>> macro. This syntax addition should work with <<choice>> macros (but not the [img] syntax). You can set multiple variables by separating them with a semicolon. As a shorthand for <span style=\"...\"> , the TiddlyWiki inline style syntax is available. Type @@ , then list CSS style attributes separated and terminated with semicolons, then put the passage text (including any other formatting and macros) ending with another @@ . Example: @@font-size:2em; text-decoration: underline; Hello there!@@ Ending a line with \\ will cause that line break to be removed from the rendered text. This can be useful when dealing with long chains of <<if>> macros.","title":"Syntax"},{"location":"releasenotes/twine1/1.4.html#macros","text":"<<remember>> now uses HTML5 Local Storage, which means it can now work even in an offline HTML file. Also, it can remember multiple variables given in a compound statement (like <<remember $a = 1, $b = 2>> ). Added <<forget>> , which undoes the effects of <<remember>> . <<choice>> can now accept arguments phrased using the link syntax, e.g: <<choice [[a trapdoor?|falling]]>> . This saves the trouble of having to account for its inconsistent argument order. <<nobr>> and <<endnobr>> remove all the line breaks in the text between them. They should be used instead of <<silently>> to enclose groups of macros. The <<else if>> macro, which can also be written as <<elseif>> , allows you to essentially have multiple <<if>> macros chained together, without needing to nest each of them within the <<else>> / <<endif>> tag pair of the other. You can also use variables in place of a passage name in <<display>> . For instance, <<display $name>> is now valid.","title":"Macros"},{"location":"releasenotes/twine1/1.4.html#shorthand-macros","text":"You can now write a shorthand form of <<print $variable>> like so: <<$variable>>. Note that this only works for printing just variables - not functions or anything else. You can now write a shorthand form of <<display \"Place\">> like so: <<Place>> . Note that this only works for passages whose names do NOT contain spaces. Also, it can only be done with specific named passages - not variables or anything else. You can supply additional arguments to the shorthand <<display>> macro - in effect, you can \"call\" passages as if they were macros. (Note: you cannot supply arguments to the longhand <<display>> because they will be interpreted as part of the passage name - for instance, <<display Cellar 2>> will try to display \"Cellar 2\" instead of \"Cellar\" with an argument of 2.)","title":"Shorthand macros"},{"location":"releasenotes/twine1/1.4.html#macro-syntaxfunctions","text":"You may now use \"to\" in macros instead of \"=\", and \"is\" instead of \"eq\". I think we can all agree it's too easy to confuse \"=\" with \"eq\", so you can instead write <<set $darts to 4>> for more readable code. Strings containing 'and', 'or', '$' and other Twine operator symbols can be used inside macros without them changing into Javascript symbols. Now you can put greater-than signs inside macro tags, such as <<set $arrow to \"-->\">> All new variables are now 0 by default, regardless of whether you've <<set>> them or not. Added either() , a function that randomly picks one of the things given to it. Added visited() , a function that returns the number of times you've visited the given passage. Added previous() , a function that returns the name of the previous passage visited. If this passage is being included by a shorthand <<display>> , the parameter() function returns one of the space-separated terms in the macro invocation, parsed to a value. The function's argument is a zero-based index - parameter() or parameter(0) returns the first parameter, parameter(1) the second, and so forth.","title":"Macro syntax/functions"},{"location":"releasenotes/twine1/1.4.html#macro-coding","text":"setTransitionCSS() replaces the contents of the #transitionCSS \\<script> element with the passed string. This allows you to completely override the default transition CSS without it cascading down. I'm offering this as a JS function because many transitions will also require some extra JS, and being able to provide the complete transition code in just a script is desirable. prerender and postrender are new objects whose function properties are executed every time the passage is rendered. The functions added to them take one argument: the resultant .passage .content element. Their 'this' value is the Passage object being rendered.","title":"Macro coding"},{"location":"releasenotes/twine1/1.4.html#passage-tags","text":"An alternative Tag CSS approach! Now, taking a stylesheet passage and adding an extra tag to it (in addition to \"stylesheet\") will cause that stylesheet to only be applied for passages with that given tag. (This, I feel, is a bit tidier than the old Tag CSS method - the [data-tags] selector need not be repeated dozens of times in a stylesheet, and applying only to the 'body' or '.passage' selectors. Although, it is slightly less flexible w/r/t tag hierarchies - the :not[data-tags] selector can't really be replicated.) Twine now uses CSS transitions for passages appearing and disappearing. Giving a stylesheet passage the tag \"transition\" will cause that stylesheet to replace the default \"fade-in\" transition CSS, letting you define your own transition without having to override the other one's properties. The special \"nobr\" passage tag removes line breaks from the whole passage.","title":"Passage tags"},{"location":"releasenotes/twine1/1.4.html#storysettings","text":"The StorySettings passage enables a number of special story options to be set. Undo: enables the player to \"undo moves\". In Sugarcane, this means being able to use the Back button in the browser. In Jonah, this means being able to use the \"Rewind to here\" link, and being able to click links in previous passages. Bookmark: enables the player to use the \"Bookmark\" link in Sugarcane and Jonah. On by default. Obfuscate: obfuscates the story's HTML source to prevent people from spoiling themselves by reading it. Off by default. jQuery: set this on if you are using custom scripts that rely on the jQuery library. Otherwise, leave off. Note: Twine 1.4 relinquishes control of the \"$\" variable, so jQuery can now use it without $.noConflict(). Modernizr: set this on if you are using custom scripts that rely on the Modernizr library. Otherwise, leave off.","title":"StorySettings"},{"location":"releasenotes/twine1/1.4.html#jonah","text":"All passages are now added to the bottom, regardless of where you click the link. Clicking a link that leads to a previously displayed passage will display a new version of the passage at the bottom, instead of scrolling up to the old version. Clicking a link in a past passage in Jonah now rewinds the game state to that passage before following the link. This gives the author a greater level of control over the game state - it's no longer possible to re-use old links from earlier in the story that no longer make sense in the current context. (Note: Switching off the \"Undo\" StorySetting disables all links in past passages.) <<back>> is now usable in Jonah. When used in Jonah, a <<back>> link removes the contained passage, plus any prior passages (as given by the \"steps\" argument or a passage name argument).","title":"Jonah"},{"location":"releasenotes/twine1/1.4.html#sugarcane","text":"Removed the \"Share\" menu. The \"Rewind\" menu is only visible if any passage has been tagged with 'bookmark'. Added a \"Bookmark\" menu item, which produces a link to the current passage. HTML5 History is now used to control the browser's Back and Forward buttons, and the <<back>> and <<return>> macros, in Sugarcane. This means that several bugs related to these are now fixed, and they should now work alongside random macros, player-input macros, and other such things. <<choice>> is now usable in Sugarcane. It now creates a link that can only be clicked once in the whole story. The sidebar now has position:absolute instead of position:fixed.","title":"Sugarcane"},{"location":"releasenotes/twine1/1.4.html#css-html","text":"Added a <noscript> tag to alert the reader that Javascript is off. Made it so that raw HTML <a> links in stories are styled as if they were proper externalLinks, in case the author unwittingly used the former in ignorance of the latter (a not uncommon occurence). The passage content element, formerly classed \"body\" in Jonah and \"content\" in Sugarcane, now has a class of \"body content\" to match legacy CSS for both.","title":"CSS / HTML"},{"location":"releasenotes/twine1/1.4.html#development-program","text":"","title":"Development program"},{"location":"releasenotes/twine1/1.4.html#visual","text":"Special passages (Start, StoryAuthor, stylesheets, etc.) have different-coloured title bars. I've tried to stick with earthy hues in keeping with the colour scheme of the Twine icon, with redder hues used for stylesheet and script passages. Passage tags are displayed in a peach ribbon along the bottom of the passage box. Annotation passages are non-playable passages tagged with \"annotation\" that hold text to display on the story map, to annotate, comment or document the source code of the game. They have a different colour and size to normal passages. Connection lines representing <<display>> macros are drawn with a bluer tint. The position of newly created passages is much less arbitrary - passages will be placed closer to the expected area. Altered the Greeking of zoomed-out passages to reflect the actual passage text length. Selected passages now have their link arrows thickened to visually offset them. Passage tooltips now display a preview of the passage's text (up to 840 characters). Tagged stylesheets have arrows linking them and any passages with the same tag.","title":"Visual"},{"location":"releasenotes/twine1/1.4.html#importingexporting","text":"Added \"Import From Compiled HTML\" option, letting the author recover passages from built games. Importing .twee source code no longer discards all the passage tags in the imported passages. The \"Proofing Copy\" export option renders a few more markup styles better.","title":"Importing/Exporting"},{"location":"releasenotes/twine1/1.4.html#building","text":"The \"Test Play\" menu item builds the game to a temp file, letting you run the story without having to have saved it to a specific filename first. You can also right-click a passage and select \"Test Play From Here\" to start playing from that particular passage. The \"StoryIncludes\" passage allows the passages inside other .tws or .twee files to be imported into this passage during building. If your game is particularly huge, you can divide it into a bunch of smaller .tws/.twee files, then add the filenames of these partial .tws/.twee files to one \"main\" file's StoryIncludes passage. All the passages in those files will then be copied into the main story at build time. Added \"Auto Build\", a menu option that is only available when used with a StoryIncludes passage. If this is set, then when any one of those smaller .tws/.twee files is modified, the story is automatically rebuilt and can be tested in-browser. This requires both files to be open at the same time, though.","title":"Building"},{"location":"releasenotes/twine1/1.4.html#passage-editing","text":"Passage titles must now be unique. The passage title input will turn red to indicate non-uniqueness. Passage titles may no longer contain the | and ] symbols, due to such names being difficult to link. Vastly improved the passage syntax highlighter. Added very basic stylesheet CSS syntax highlighting.","title":"Passage editing"},{"location":"releasenotes/twine1/1.4.html#images-and-fonts","text":"You can now add image files to the story file. These are stored as 'image passages' which can be included in passages using the image syntax: [img[imageName]] displays the image. Images are also embedded in the final HTML file, and don't need to be hosted elsewhere. Supported image file extensions are GIF, PNG, JPEG, SVG and WebP. You can now embed font files, which can then be used in stylesheets, or, if you don't know CSS, the \\<font> element. Fonts are simply imported as stylesheet passages containing the font file in base64 encoding. Supported font file extensions are TTF, WOFF, OTF and SVG.","title":"Images and fonts"},{"location":"releasenotes/twine2/2.0.1.html","text":"Twine 2.0.1 # Editor # Bugfixes # Story formats are now preserved during import (thanks Thomas Michael Edwards). $$ and other esoteric-ish characters in passages are no longer inappropriately transformed during the publishing process (thanks Thomas Michael Edwards). A bug where passage connections would sometimes not update with zoom level changes has been fixed. A cosmetic issue with popup balloons is fixed. The link to the Twine forum on the welcome page is fixed. Features # The editor now checks for an updated version against http://twinery.org/latestversion/2.json once a day and informs users accordingly. Passage connections are now drawn using SVG for improved performance. Built-In Story Formats # Harlowe # TBD Snowman # Now properly uses user-created stylesheets and JavaScript.","title":"2.0.1"},{"location":"releasenotes/twine2/2.0.1.html#twine-201","text":"","title":"Twine 2.0.1"},{"location":"releasenotes/twine2/2.0.1.html#editor","text":"","title":"Editor"},{"location":"releasenotes/twine2/2.0.1.html#bugfixes","text":"Story formats are now preserved during import (thanks Thomas Michael Edwards). $$ and other esoteric-ish characters in passages are no longer inappropriately transformed during the publishing process (thanks Thomas Michael Edwards). A bug where passage connections would sometimes not update with zoom level changes has been fixed. A cosmetic issue with popup balloons is fixed. The link to the Twine forum on the welcome page is fixed.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.0.1.html#features","text":"The editor now checks for an updated version against http://twinery.org/latestversion/2.json once a day and informs users accordingly. Passage connections are now drawn using SVG for improved performance.","title":"Features"},{"location":"releasenotes/twine2/2.0.1.html#built-in-story-formats","text":"","title":"Built-In Story Formats"},{"location":"releasenotes/twine2/2.0.1.html#harlowe","text":"TBD","title":"Harlowe"},{"location":"releasenotes/twine2/2.0.1.html#snowman","text":"Now properly uses user-created stylesheets and JavaScript.","title":"Snowman"},{"location":"releasenotes/twine2/2.0.10.html","text":"Twine 2.0.10 # Twine 2.0.10 has the same changelog as 2.0.9, but it includes Harlowe 1.2.1, which fixes a problem with (else:) invocations.","title":"2.0.10"},{"location":"releasenotes/twine2/2.0.10.html#twine-2010","text":"Twine 2.0.10 has the same changelog as 2.0.9, but it includes Harlowe 1.2.1, which fixes a problem with (else:) invocations.","title":"Twine 2.0.10"},{"location":"releasenotes/twine2/2.0.11.html","text":"Twine 2.0.11 # Features # Includes new localizations for German and Finnish. Updates the included version of Harlowe to 1.2.2. Updates the included version of Snowman to 1.3.0. Updates the included version of SugarCube to 1.3.4. Bugfixes # Resolves several problems in 2.0.10 with Linux. Improves link drawing of certain setter links. Harlowe 1.2.2 changes # Updated the syntax highlighter: placing the cursor on a syntactic token (such as a variable, or an entire hook) will underline the full expanse of that token. Fixed a bug where the (textstyle:) options \"shudder\", \"rumble\" and \"fade-in-out\", as well as all of (transition:)'s options, didn't work at all. Fixed a long-standing bug where (mouseover:) affected elements didn't have a visual indicator that they could be moused-over (a dotted underline). Fixed the (move:) macro corrupting past turns (breaking the in-game undo functionality) when it deletes array or datamap items. Fixed the \\<=== (left-align) markup token erasing the next syntactic structure to follow it. Fixed a bug where attempting to print datamaps using (print:) produced a Javascript error. Fixed a long-standing bug where spreading ... datasets did not, in fact, arrange their values in sort order, but instead in parameter order. Fixed a long-standing bug where a string containing an unmatched `)` inside a macro would abruptly terminate the macro. Giving an empty string to a macro that affects or alters all occurrences of the string in the passage text, such as (replace:) or (click:), will now result in an error (because it otherwise won't affect any part of the passage).","title":"2.0.11"},{"location":"releasenotes/twine2/2.0.11.html#twine-2011","text":"","title":"Twine 2.0.11"},{"location":"releasenotes/twine2/2.0.11.html#features","text":"Includes new localizations for German and Finnish. Updates the included version of Harlowe to 1.2.2. Updates the included version of Snowman to 1.3.0. Updates the included version of SugarCube to 1.3.4.","title":"Features"},{"location":"releasenotes/twine2/2.0.11.html#bugfixes","text":"Resolves several problems in 2.0.10 with Linux. Improves link drawing of certain setter links.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.0.11.html#harlowe-122-changes","text":"Updated the syntax highlighter: placing the cursor on a syntactic token (such as a variable, or an entire hook) will underline the full expanse of that token. Fixed a bug where the (textstyle:) options \"shudder\", \"rumble\" and \"fade-in-out\", as well as all of (transition:)'s options, didn't work at all. Fixed a long-standing bug where (mouseover:) affected elements didn't have a visual indicator that they could be moused-over (a dotted underline). Fixed the (move:) macro corrupting past turns (breaking the in-game undo functionality) when it deletes array or datamap items. Fixed the \\<=== (left-align) markup token erasing the next syntactic structure to follow it. Fixed a bug where attempting to print datamaps using (print:) produced a Javascript error. Fixed a long-standing bug where spreading ... datasets did not, in fact, arrange their values in sort order, but instead in parameter order. Fixed a long-standing bug where a string containing an unmatched `)` inside a macro would abruptly terminate the macro. Giving an empty string to a macro that affects or alters all occurrences of the string in the passage text, such as (replace:) or (click:), will now result in an error (because it otherwise won't affect any part of the passage).","title":"Harlowe 1.2.2 changes"},{"location":"releasenotes/twine2/2.0.2.html","text":"Twine 2.0.2 # Editor # Bugfixes # The storage quota bar on the story list no longer causes slowdown on Chrome. A progress spinner is shown while importing from a file. After an import, the story list automatically updates. If a story is published to an already-existing window or tab, then a notification appears letting the user know that they should look over there for the updated output. Passages are prevented from being moved offscreen. Story formats now timeout on loading at 10 seconds instead of 2. User-added story formats may now be deleted. [[]] is no longer considered a link (previously, a passage with an empty name would be created). Date sorting in the story list now works properly. If publishing a story fails, then an error notification is shown to the user (previously, this would die silently). Clicking a button automatically hides any tooltips for it, to prevent it from blocking any popups from view. Passage connectors now take border width into account (i.e. links drawn from the start passage show properly). Features # Passage connector drawing during a drag has been sped up. SugarCube has been added as a built-in format. The browser's window title changes to match what the user is currently working on. Built-In Story Formats # No changes.","title":"2.0.2"},{"location":"releasenotes/twine2/2.0.2.html#twine-202","text":"","title":"Twine 2.0.2"},{"location":"releasenotes/twine2/2.0.2.html#editor","text":"","title":"Editor"},{"location":"releasenotes/twine2/2.0.2.html#bugfixes","text":"The storage quota bar on the story list no longer causes slowdown on Chrome. A progress spinner is shown while importing from a file. After an import, the story list automatically updates. If a story is published to an already-existing window or tab, then a notification appears letting the user know that they should look over there for the updated output. Passages are prevented from being moved offscreen. Story formats now timeout on loading at 10 seconds instead of 2. User-added story formats may now be deleted. [[]] is no longer considered a link (previously, a passage with an empty name would be created). Date sorting in the story list now works properly. If publishing a story fails, then an error notification is shown to the user (previously, this would die silently). Clicking a button automatically hides any tooltips for it, to prevent it from blocking any popups from view. Passage connectors now take border width into account (i.e. links drawn from the start passage show properly).","title":"Bugfixes"},{"location":"releasenotes/twine2/2.0.2.html#features","text":"Passage connector drawing during a drag has been sped up. SugarCube has been added as a built-in format. The browser's window title changes to match what the user is currently working on.","title":"Features"},{"location":"releasenotes/twine2/2.0.2.html#built-in-story-formats","text":"No changes.","title":"Built-In Story Formats"},{"location":"releasenotes/twine2/2.0.3.html","text":"Twine 2.0.3 # Editor # Bugfixes # Trying to save a passage with a name that another one already has now shows an error message instead of losing work. Newly-created passages now are numbered properly (\"Untitled Passage 1\", \"Untitled Passage 2\", etc.) This bug would also cause data loss. Fix a bug with displaying search results when searching for text including \\< and >. Using Enter to add tags works as many times as you like while editing a passage. Publishing stories now works on Safari. Fix problems with the story stylesheet and story JavaScript editor putting typed text far away from where the cursor appeared. At medium zoom level, passage titles now use the entire space of the box instead of a single line. Fix intermittent problems where link arrows or broken-link status of a passage would not update after editing. Features # If you try to play a story but haven't set a starting point yet, you are now prompted to do so. Window titles have been changed slightly to better distinguish editing a story from playing or testing it. A warning appears if you try to navigate away from editing a passage (i.e. while changes may not have been saved yet). New animations between the story list and editor. Built-In Story Formats # No changes.","title":"2.0.3"},{"location":"releasenotes/twine2/2.0.3.html#twine-203","text":"","title":"Twine 2.0.3"},{"location":"releasenotes/twine2/2.0.3.html#editor","text":"","title":"Editor"},{"location":"releasenotes/twine2/2.0.3.html#bugfixes","text":"Trying to save a passage with a name that another one already has now shows an error message instead of losing work. Newly-created passages now are numbered properly (\"Untitled Passage 1\", \"Untitled Passage 2\", etc.) This bug would also cause data loss. Fix a bug with displaying search results when searching for text including \\< and >. Using Enter to add tags works as many times as you like while editing a passage. Publishing stories now works on Safari. Fix problems with the story stylesheet and story JavaScript editor putting typed text far away from where the cursor appeared. At medium zoom level, passage titles now use the entire space of the box instead of a single line. Fix intermittent problems where link arrows or broken-link status of a passage would not update after editing.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.0.3.html#features","text":"If you try to play a story but haven't set a starting point yet, you are now prompted to do so. Window titles have been changed slightly to better distinguish editing a story from playing or testing it. A warning appears if you try to navigate away from editing a passage (i.e. while changes may not have been saved yet). New animations between the story list and editor.","title":"Features"},{"location":"releasenotes/twine2/2.0.3.html#built-in-story-formats","text":"No changes.","title":"Built-In Story Formats"},{"location":"releasenotes/twine2/2.0.4.html","text":"Twine 2.0.4 # Editor # Bugfixes # The app no longer mistakenly reports an updated version is available immediately after updating. If an error occurs within the library used to save stories, a notification is now shown to the user. Previously, notifications were only shown when an error happened within the Twine app itself. Features # The tooltip for the story menu now shows the most recent date/time the story was saved. The Story Statistics dialog is back, and now includes the IFID for a story. Added experimental native app builds, available for now here only. These builds have not been thoroughly tested; please use at your own risk. These save your stories to your Documents folder, under Twine > Stories. Built-In Story Formats # Updated Snowman to version 1.0.1.","title":"2.0.4"},{"location":"releasenotes/twine2/2.0.4.html#twine-204","text":"","title":"Twine 2.0.4"},{"location":"releasenotes/twine2/2.0.4.html#editor","text":"","title":"Editor"},{"location":"releasenotes/twine2/2.0.4.html#bugfixes","text":"The app no longer mistakenly reports an updated version is available immediately after updating. If an error occurs within the library used to save stories, a notification is now shown to the user. Previously, notifications were only shown when an error happened within the Twine app itself.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.0.4.html#features","text":"The tooltip for the story menu now shows the most recent date/time the story was saved. The Story Statistics dialog is back, and now includes the IFID for a story. Added experimental native app builds, available for now here only. These builds have not been thoroughly tested; please use at your own risk. These save your stories to your Documents folder, under Twine > Stories.","title":"Features"},{"location":"releasenotes/twine2/2.0.4.html#built-in-story-formats","text":"Updated Snowman to version 1.0.1.","title":"Built-In Story Formats"},{"location":"releasenotes/twine2/2.0.5.html","text":"Twine 2.0.5 # Editor # This is the first release in the 2.x series to offer native apps for desktop OSes. There is a known bug with the version of SugarCube bundled with this release. As a workaround, use the Formats option on the right side of the story list and choose Add a New Format at the top. Enter this address: http://www.motoslave.net/sugarcube/1/twine2/format.js This format should be called just \"SugarCube\", and is identical functionally to what is normally bundled. Bugfixes # Fixed a bug where dragging a group of passages caused them to jump to odd locations after the drag. Fixed a bug where passages would jump around after moving from the editor to the story list. The first passage added to a story is always set as its starting point. Better handling is done to recover gracefully when a story format fails to load. In native app builds, the filenames for stories are stripped of any characters that might cause problems (i.e. slashes or colons). New passages are now properly centered, regardless of zoom level. A story with no starting point set now archives properly. Features # New visual previews of stories in the list. You can now rename, test, and duplicate a story from the list instead of having to edit it first. When a passage is renamed, the editor makes its best effort to change links accordingly. This doesn't yet work if the passage is mentioned in a macro. Added rudimentary autocomplete when typing links in the passage editor. This only works right now for links, not macro mentions; this may change in the future. Deleting a passage now prompts the user that they're sure; holding the Shift key while clicking the delete icon bypasses this warning. The grid snap has been made coarser. Pressing Control-Shift-Alt-(or Option)-D in a native app build will open a debugger console.","title":"2.0.5"},{"location":"releasenotes/twine2/2.0.5.html#twine-205","text":"","title":"Twine 2.0.5"},{"location":"releasenotes/twine2/2.0.5.html#editor","text":"This is the first release in the 2.x series to offer native apps for desktop OSes. There is a known bug with the version of SugarCube bundled with this release. As a workaround, use the Formats option on the right side of the story list and choose Add a New Format at the top. Enter this address: http://www.motoslave.net/sugarcube/1/twine2/format.js This format should be called just \"SugarCube\", and is identical functionally to what is normally bundled.","title":"Editor"},{"location":"releasenotes/twine2/2.0.5.html#bugfixes","text":"Fixed a bug where dragging a group of passages caused them to jump to odd locations after the drag. Fixed a bug where passages would jump around after moving from the editor to the story list. The first passage added to a story is always set as its starting point. Better handling is done to recover gracefully when a story format fails to load. In native app builds, the filenames for stories are stripped of any characters that might cause problems (i.e. slashes or colons). New passages are now properly centered, regardless of zoom level. A story with no starting point set now archives properly.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.0.5.html#features","text":"New visual previews of stories in the list. You can now rename, test, and duplicate a story from the list instead of having to edit it first. When a passage is renamed, the editor makes its best effort to change links accordingly. This doesn't yet work if the passage is mentioned in a macro. Added rudimentary autocomplete when typing links in the passage editor. This only works right now for links, not macro mentions; this may change in the future. Deleting a passage now prompts the user that they're sure; holding the Shift key while clicking the delete icon bypasses this warning. The grid snap has been made coarser. Pressing Control-Shift-Alt-(or Option)-D in a native app build will open a debugger console.","title":"Features"},{"location":"releasenotes/twine2/2.0.6.html","text":"Twine 2.0.6 # Editor # Bugfixes # Properly includes SugarCube in local app versions. Fixes a bug in 2.0.5 where clicking links in testing/play versions of stories did not work. Known Bugs # When testing or playing a SugarCube story in an app version, sidebar links do not work. (Resolved on development branch ) Story Formats # Updates the remote URL of SugarCube to the latest. Updates the included version of SugarCube in local app versions to 1.0.23. Updates the included version of Snowman to 1.0.2.","title":"2.0.6"},{"location":"releasenotes/twine2/2.0.6.html#twine-206","text":"","title":"Twine 2.0.6"},{"location":"releasenotes/twine2/2.0.6.html#editor","text":"","title":"Editor"},{"location":"releasenotes/twine2/2.0.6.html#bugfixes","text":"Properly includes SugarCube in local app versions. Fixes a bug in 2.0.5 where clicking links in testing/play versions of stories did not work.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.0.6.html#known-bugs","text":"When testing or playing a SugarCube story in an app version, sidebar links do not work. (Resolved on development branch )","title":"Known Bugs"},{"location":"releasenotes/twine2/2.0.6.html#story-formats","text":"Updates the remote URL of SugarCube to the latest. Updates the included version of SugarCube in local app versions to 1.0.23. Updates the included version of Snowman to 1.0.2.","title":"Story Formats"},{"location":"releasenotes/twine2/2.0.7.html","text":"Twine 2.0.7 # Editor # Features # Twine is now internationalized, and includes a Spanish localization. Interested in adding a localization? Please see the relevant section on the repository . Importing files has been sped up, as well as the startup time of the local app. Bugfixes # Fixes a bug where clicking links in a story generated from the Test and Play buttons would not work. The local application now works properly on Windows 7 Enterprise. Story Formats # Updates the included version of Harlowe to 1.1. Updates the included version of Snowman to 1.1.","title":"2.0.7"},{"location":"releasenotes/twine2/2.0.7.html#twine-207","text":"","title":"Twine 2.0.7"},{"location":"releasenotes/twine2/2.0.7.html#editor","text":"","title":"Editor"},{"location":"releasenotes/twine2/2.0.7.html#features","text":"Twine is now internationalized, and includes a Spanish localization. Interested in adding a localization? Please see the relevant section on the repository . Importing files has been sped up, as well as the startup time of the local app.","title":"Features"},{"location":"releasenotes/twine2/2.0.7.html#bugfixes","text":"Fixes a bug where clicking links in a story generated from the Test and Play buttons would not work. The local application now works properly on Windows 7 Enterprise.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.0.7.html#story-formats","text":"Updates the included version of Harlowe to 1.1. Updates the included version of Snowman to 1.1.","title":"Story Formats"},{"location":"releasenotes/twine2/2.0.8.html","text":"Twine 2.0.8 # Twine 2.0.8 has the same changelog as [[twine_2.0.7_release_notes|2.0.7]], but with two small but important changes: A bug where < and > characters would be garbled in stories in the native app version has been fixed. Harlowe 1.1.1 is included.","title":"2.0.8"},{"location":"releasenotes/twine2/2.0.8.html#twine-208","text":"Twine 2.0.8 has the same changelog as [[twine_2.0.7_release_notes|2.0.7]], but with two small but important changes: A bug where < and > characters would be garbled in stories in the native app version has been fixed. Harlowe 1.1.1 is included.","title":"Twine 2.0.8"},{"location":"releasenotes/twine2/2.0.9.html","text":"Twine 2.0.9 # Editor # Features # Includes new localizations for Brazilian Portuguese, Danish, Dutch, French, and Russian. Updates to CodeMirror 5.4. Bugfixes # A bug where dragging multiple passages would cause them to jump around after the drag completed has been fixed. A visual glitch where passage, JavaScript, and stylesheet editors appeared to have two scrollbars has been fixed. The quick search highlight now updates properly after editing a passage. Global variables set by the editor are now cleaned up, so that they won't interfere with story previews. The passage editor now uses tabs consistently to indent, as opposed to a mix of spaces and tabs. A bug where gray areas would be visible after changing the zoom level of a story map has been fixed. When you change the start passage for a story, link connectors will correctly update based on its new width. The OS X desktop app is now usable for all users, not just the one who installs it. The Windows desktop app is better at finding the user's Documents folder. Desktop apps should no longer complain about running out of space. Handles importing story files that have no IFID gracefully. Story Formats # Updates the included version of Harlowe to 1.2. Updates the included version of Snowman to 1.2. Updates the included version of SugarCube to 1.0.32.","title":"2.0.9"},{"location":"releasenotes/twine2/2.0.9.html#twine-209","text":"","title":"Twine 2.0.9"},{"location":"releasenotes/twine2/2.0.9.html#editor","text":"","title":"Editor"},{"location":"releasenotes/twine2/2.0.9.html#features","text":"Includes new localizations for Brazilian Portuguese, Danish, Dutch, French, and Russian. Updates to CodeMirror 5.4.","title":"Features"},{"location":"releasenotes/twine2/2.0.9.html#bugfixes","text":"A bug where dragging multiple passages would cause them to jump around after the drag completed has been fixed. A visual glitch where passage, JavaScript, and stylesheet editors appeared to have two scrollbars has been fixed. The quick search highlight now updates properly after editing a passage. Global variables set by the editor are now cleaned up, so that they won't interfere with story previews. The passage editor now uses tabs consistently to indent, as opposed to a mix of spaces and tabs. A bug where gray areas would be visible after changing the zoom level of a story map has been fixed. When you change the start passage for a story, link connectors will correctly update based on its new width. The OS X desktop app is now usable for all users, not just the one who installs it. The Windows desktop app is better at finding the user's Documents folder. Desktop apps should no longer complain about running out of space. Handles importing story files that have no IFID gracefully.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.0.9.html#story-formats","text":"Updates the included version of Harlowe to 1.2. Updates the included version of Snowman to 1.2. Updates the included version of SugarCube to 1.0.32.","title":"Story Formats"},{"location":"releasenotes/twine2/2.1.0.html","text":"Twine 2.1.0 # Upgrade Notes # This is a significant update from the 2.0 series. If you're upgrading, please read the notes below before beginning. If you are upgrading, then making a backup copy of your stories folder is recommended. To do this, launch Twine 2.0 and choose Show Library from the Twine menu. Quit Twine, then make a copy of the folder that was revealed. (If you are using Linux and Show Library doesn't work, your stories folder is located in ~/Documents/Twine . If you had added custom story formats previously, you'll need to re-add them after updating to this version. The process works exactly the same as before. Sorry for the inconvenience -- you will only need to do this once. If you do not see any stories after upgrading, double-check your Twine directory by choosing Show Library from the Twine menu. Go up one level from here. You may see two directories: one called \"Stories,\" and another named Stories in another language (hopefully your preferred, non-English one). Move the story files from Stories to the folder with the localized name and they should be back once you re-launch Twine. If you would like to continue using 2.0.11 online, it is still available at https://twinery.org/2.0.11 . Features # Streamlined look and feel. The starting passage now shows a green rocket icon in the passage instead of being slightly bolder. Passages with broken links now show an arrow ending in an X instead of an icon in the passage. Added dark theme for late-night hypertexting. Loading large stories is considerably faster. It's now possible to have multiple versions of story formats installed. Harlowe 2.0.0 is now available. Please visit the documentation for details on changes. By default, newly-created stories will use this format, but this can be changed in the Formats option in the story list. Stories that used Harlowe 1.x will continue to do so after the upgrade. SugarCube 2.1.12 is now available. Please visit the documentation for details on changes. As with Harlowe, stories that previously used SugarCube will continue to do so. If you had installed SugarCube manually under Twine 2.0, this version of Twine will try to update stories that used it to use the built-in version, but you may need to set it manually. You can now use the Chromium web debugger on stories you test inside Twine by right-clicking the window and choosing Inspect from the contextual menu. You can now directly drag a story file onto the story list to import it. The story format version is now recorded in a published story file. You can now drag the story map by holding down the middle button of the mouse instead of the space bar. You can zoom into the story map with the mouse wheel. When dragging passages when snap-to-grid is turned on, the passages will reflect this. If you import a story with the same name as an existing one, then Twine will prompt you if you'd like to replace it. Danish, Italian, and Portuguese localizations have been added. Bugfixes # Passages that link to themselves display a clearer arrow in the story map. The gauge showing the remaining local storage space in the online version now works correctly. It's no longer possible for passages to get pushed offscreen. Renaming a story in the desktop app no longer creates duplicate files. A typo in the German localization has been corrected.","title":"2.1.0"},{"location":"releasenotes/twine2/2.1.0.html#twine-210","text":"","title":"Twine 2.1.0"},{"location":"releasenotes/twine2/2.1.0.html#upgrade-notes","text":"This is a significant update from the 2.0 series. If you're upgrading, please read the notes below before beginning. If you are upgrading, then making a backup copy of your stories folder is recommended. To do this, launch Twine 2.0 and choose Show Library from the Twine menu. Quit Twine, then make a copy of the folder that was revealed. (If you are using Linux and Show Library doesn't work, your stories folder is located in ~/Documents/Twine . If you had added custom story formats previously, you'll need to re-add them after updating to this version. The process works exactly the same as before. Sorry for the inconvenience -- you will only need to do this once. If you do not see any stories after upgrading, double-check your Twine directory by choosing Show Library from the Twine menu. Go up one level from here. You may see two directories: one called \"Stories,\" and another named Stories in another language (hopefully your preferred, non-English one). Move the story files from Stories to the folder with the localized name and they should be back once you re-launch Twine. If you would like to continue using 2.0.11 online, it is still available at https://twinery.org/2.0.11 .","title":"Upgrade Notes"},{"location":"releasenotes/twine2/2.1.0.html#features","text":"Streamlined look and feel. The starting passage now shows a green rocket icon in the passage instead of being slightly bolder. Passages with broken links now show an arrow ending in an X instead of an icon in the passage. Added dark theme for late-night hypertexting. Loading large stories is considerably faster. It's now possible to have multiple versions of story formats installed. Harlowe 2.0.0 is now available. Please visit the documentation for details on changes. By default, newly-created stories will use this format, but this can be changed in the Formats option in the story list. Stories that used Harlowe 1.x will continue to do so after the upgrade. SugarCube 2.1.12 is now available. Please visit the documentation for details on changes. As with Harlowe, stories that previously used SugarCube will continue to do so. If you had installed SugarCube manually under Twine 2.0, this version of Twine will try to update stories that used it to use the built-in version, but you may need to set it manually. You can now use the Chromium web debugger on stories you test inside Twine by right-clicking the window and choosing Inspect from the contextual menu. You can now directly drag a story file onto the story list to import it. The story format version is now recorded in a published story file. You can now drag the story map by holding down the middle button of the mouse instead of the space bar. You can zoom into the story map with the mouse wheel. When dragging passages when snap-to-grid is turned on, the passages will reflect this. If you import a story with the same name as an existing one, then Twine will prompt you if you'd like to replace it. Danish, Italian, and Portuguese localizations have been added.","title":"Features"},{"location":"releasenotes/twine2/2.1.0.html#bugfixes","text":"Passages that link to themselves display a clearer arrow in the story map. The gauge showing the remaining local storage space in the online version now works correctly. It's no longer possible for passages to get pushed offscreen. Renaming a story in the desktop app no longer creates duplicate files. A typo in the German localization has been corrected.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.1.1.html","text":"Twine 2.1.1 # Features # Added Czech, German, Italian, and Portuguese localizations. Updated SugarCube to version 2.14.0. Outdated story formats are now removed automatically. Bugfixes # Improved numerous issues with touch-based devices and Internet Explorer 11 in the story editor. Fixed issues with the quick search field in the story editor. Fixed a bug where sometimes text would disappear in the desktop application. Fixed a bug where the story directory sometimes would not be unlocked when quitting the desktop application.","title":"2.1.1"},{"location":"releasenotes/twine2/2.1.1.html#twine-211","text":"","title":"Twine 2.1.1"},{"location":"releasenotes/twine2/2.1.1.html#features","text":"Added Czech, German, Italian, and Portuguese localizations. Updated SugarCube to version 2.14.0. Outdated story formats are now removed automatically.","title":"Features"},{"location":"releasenotes/twine2/2.1.1.html#bugfixes","text":"Improved numerous issues with touch-based devices and Internet Explorer 11 in the story editor. Fixed issues with the quick search field in the story editor. Fixed a bug where sometimes text would disappear in the desktop application. Fixed a bug where the story directory sometimes would not be unlocked when quitting the desktop application.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.1.2.html","text":"Twine 2.1.2 # If you are upgrading and using a non-English localization, this will cause your stories to be saved to a slightly different folder than before. Instead of Twine -> Stories, they will now be saved to Twine -> [the word \"Stories\" as translated to your language]. You will probably need to move your existing stories into this new folder. Features # Increased the display density of passages at the medium zoom level. The story list can now be sorted in reverse chronological and alphabetical order (thanks Thomas Michael Edwards). Mac users can now create passages in the story editor with force touch (thanks Michael Savich). You can now widen the passage, JavaScript, and stylesheet editor windows. Revised syntax colors in the JavaScript and stylesheet editors to be more readable. Includes SugarCube 2.16.0. Includes Harlowe 1.2.4 and 2.0.1. Bugfixes # When a new story format is added, stories that used an older version are automatically brought up-to-date. This bug would manifest as having no format initially selected in the Story Format dialog. You cannot remove the default story format anymore. (Choose another one as default first.) Issues with non-English localizations where stories would not save correctly, or would not save to the correct folder, have been fixed. External links now do not cause a broken-link arrow to be drawn in the story editor. Special characters (that have meaning in regular expressions) now are handled correctly when searching and replacing. Fixed a bug where publishing a story from the story list wouldn't work. Fixed a bug where clicking the modal dialog background would not save passage title changes. Fixed a bug where clicking the modal dialog background would be treated as a confirmation in deletion modal dialogs. It's now not possible to scroll the main window when a modal dialog is open.","title":"2.1.2"},{"location":"releasenotes/twine2/2.1.2.html#twine-212","text":"If you are upgrading and using a non-English localization, this will cause your stories to be saved to a slightly different folder than before. Instead of Twine -> Stories, they will now be saved to Twine -> [the word \"Stories\" as translated to your language]. You will probably need to move your existing stories into this new folder.","title":"Twine 2.1.2"},{"location":"releasenotes/twine2/2.1.2.html#features","text":"Increased the display density of passages at the medium zoom level. The story list can now be sorted in reverse chronological and alphabetical order (thanks Thomas Michael Edwards). Mac users can now create passages in the story editor with force touch (thanks Michael Savich). You can now widen the passage, JavaScript, and stylesheet editor windows. Revised syntax colors in the JavaScript and stylesheet editors to be more readable. Includes SugarCube 2.16.0. Includes Harlowe 1.2.4 and 2.0.1.","title":"Features"},{"location":"releasenotes/twine2/2.1.2.html#bugfixes","text":"When a new story format is added, stories that used an older version are automatically brought up-to-date. This bug would manifest as having no format initially selected in the Story Format dialog. You cannot remove the default story format anymore. (Choose another one as default first.) Issues with non-English localizations where stories would not save correctly, or would not save to the correct folder, have been fixed. External links now do not cause a broken-link arrow to be drawn in the story editor. Special characters (that have meaning in regular expressions) now are handled correctly when searching and replacing. Fixed a bug where publishing a story from the story list wouldn't work. Fixed a bug where clicking the modal dialog background would not save passage title changes. Fixed a bug where clicking the modal dialog background would be treated as a confirmation in deletion modal dialogs. It's now not possible to scroll the main window when a modal dialog is open.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.1.3.html","text":"Twine 2.1.3 # Bugfixes # An issue causing passages to disappear, be positioned incorrectly, or otherwise become corrupted has been fixed. Problems causing the search and replace dialog to not work correctly have been fixed.","title":"2.1.3"},{"location":"releasenotes/twine2/2.1.3.html#twine-213","text":"","title":"Twine 2.1.3"},{"location":"releasenotes/twine2/2.1.3.html#bugfixes","text":"An issue causing passages to disappear, be positioned incorrectly, or otherwise become corrupted has been fixed. Problems causing the search and replace dialog to not work correctly have been fixed.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.2.0.html","text":"Twine 2.2.0 # Features # Passages can now be wide, tall, or just plain large. Tags can be assigned colors, which show up as a vertical stripe on a passage in the story map. Every tag doesn't need to have a color. You can now press the plus and minus keys to change the zoom level of the story map. A Turkish localization has been added thanks to H. Utku Maden. A number of extraneous libraries have been removed, so the overall file size of the app has been decreased, and it should load faster. The built-in SugarCube story format has been updated to 2.21.0. The built-in Harlowe story format has been updated to 2.1.0. Bugfixes # When you zoom in and out, Twine does a better job of keeping the window centered where you were looking. The zoom level you last set for a story is now remembered by Twine. If for some reason a story format can't be loaded, you can still delete it. The desktop app is more tolerant of story files that it has trouble importing at startup -- it keeps going, so you at least can get to the story list. If the desktop app does run into problems on startup, it shows the error message it should; previously, it would show a blank white page.","title":"2.2.0"},{"location":"releasenotes/twine2/2.2.0.html#twine-220","text":"","title":"Twine 2.2.0"},{"location":"releasenotes/twine2/2.2.0.html#features","text":"Passages can now be wide, tall, or just plain large. Tags can be assigned colors, which show up as a vertical stripe on a passage in the story map. Every tag doesn't need to have a color. You can now press the plus and minus keys to change the zoom level of the story map. A Turkish localization has been added thanks to H. Utku Maden. A number of extraneous libraries have been removed, so the overall file size of the app has been decreased, and it should load faster. The built-in SugarCube story format has been updated to 2.21.0. The built-in Harlowe story format has been updated to 2.1.0.","title":"Features"},{"location":"releasenotes/twine2/2.2.0.html#bugfixes","text":"When you zoom in and out, Twine does a better job of keeping the window centered where you were looking. The zoom level you last set for a story is now remembered by Twine. If for some reason a story format can't be loaded, you can still delete it. The desktop app is more tolerant of story files that it has trouble importing at startup -- it keeps going, so you at least can get to the story list. If the desktop app does run into problems on startup, it shows the error message it should; previously, it would show a blank white page.","title":"Bugfixes"},{"location":"releasenotes/twine2/2.2.1.html","text":"Twine 2.2.1 # Bugfixes # Last modified dates on stories in the desktop app are maintained correctly. Publishing stories with colored tags now works correctly. Publishing stories correctly prefers an HTML version of the story, instead of a ZIP archive (used with iOS only).","title":"2.2.1"},{"location":"releasenotes/twine2/2.2.1.html#twine-221","text":"","title":"Twine 2.2.1"},{"location":"releasenotes/twine2/2.2.1.html#bugfixes","text":"Last modified dates on stories in the desktop app are maintained correctly. Publishing stories with colored tags now works correctly. Publishing stories correctly prefers an HTML version of the story, instead of a ZIP archive (used with iOS only).","title":"Bugfixes"},{"location":"releasenotes/twine2/2.3.0.html","text":"Twine 2.3.0 # See the 2.3.0 project for details on the changes in this release. New features # The desktop app now uses Electron instead of NW.js. This should resolve many crash issues, and also bring improved performance, as saving changes is now done on a separate processing thread than the main user interface. The files in the story directory are now published as full-fledged stories, where possible. Bahasa Malaysia and Russian have been added as locale choices. Harlowe has been updated to 3.0.1. Visit the web site for details. SugarCube has been updated to 2.28.2. Visit the web site for details. Bugs fixed # Issues with passages being placed in strange places after being dragged while Snap to Grid is turned on have been fixed. If you have a test or play version of a story already open when you choose to test or play it again, the window or tab should update with the current version. The welcome screen now scrolls properly when the Next button is used.","title":"2.3.0"},{"location":"releasenotes/twine2/2.3.0.html#twine-230","text":"See the 2.3.0 project for details on the changes in this release.","title":"Twine 2.3.0"},{"location":"releasenotes/twine2/2.3.0.html#new-features","text":"The desktop app now uses Electron instead of NW.js. This should resolve many crash issues, and also bring improved performance, as saving changes is now done on a separate processing thread than the main user interface. The files in the story directory are now published as full-fledged stories, where possible. Bahasa Malaysia and Russian have been added as locale choices. Harlowe has been updated to 3.0.1. Visit the web site for details. SugarCube has been updated to 2.28.2. Visit the web site for details.","title":"New features"},{"location":"releasenotes/twine2/2.3.0.html#bugs-fixed","text":"Issues with passages being placed in strange places after being dragged while Snap to Grid is turned on have been fixed. If you have a test or play version of a story already open when you choose to test or play it again, the window or tab should update with the current version. The welcome screen now scrolls properly when the Next button is used.","title":"Bugs fixed"},{"location":"releasenotes/twine2/2.3.1.html","text":"Twine 2.3.1 # See the 2.3.1 project for details on the changes in this release. Bugs fixed # In the desktop app, file saving is done in a safer manner so that if a problem occurs, any file that would have been overwritten should stay intact. The desktop app now keeps short-term backups of your story library in case a bug occurs that affects the data on disk. It saves a backup copy of your library to a Backups folder in the main Twine folder when you first start it up, and every 20 minutes while Twine is running. It only keeps 10 backups at most, deleting older ones as needed, so this is not a full-fledged backup solution (and is not intended to be). It is intended as a way to restore data in the event of a crash or bug that overwrites data saved on disk. The Chinese localization that should have appeared in 2.3.0 is in this version. Features added # Harlowe has been updated to version 3.0.2.","title":"2.3.1"},{"location":"releasenotes/twine2/2.3.1.html#twine-231","text":"See the 2.3.1 project for details on the changes in this release.","title":"Twine 2.3.1"},{"location":"releasenotes/twine2/2.3.1.html#bugs-fixed","text":"In the desktop app, file saving is done in a safer manner so that if a problem occurs, any file that would have been overwritten should stay intact. The desktop app now keeps short-term backups of your story library in case a bug occurs that affects the data on disk. It saves a backup copy of your library to a Backups folder in the main Twine folder when you first start it up, and every 20 minutes while Twine is running. It only keeps 10 backups at most, deleting older ones as needed, so this is not a full-fledged backup solution (and is not intended to be). It is intended as a way to restore data in the event of a crash or bug that overwrites data saved on disk. The Chinese localization that should have appeared in 2.3.0 is in this version.","title":"Bugs fixed"},{"location":"releasenotes/twine2/2.3.1.html#features-added","text":"Harlowe has been updated to version 3.0.2.","title":"Features added"},{"location":"releasenotes/twine2/2.3.2.html","text":"Twine 2.3.2 # See the 2.3.2 project project for details on the changes in this release. Bugs fixed # Various issues related to playing and testing stories within Twine have been resolved. Twine now opens playable versions of stories in your default browser instead of inside Twine. An error where the editor UI became unresponsive after adding a new passage has been fixed. Story formats with additional build information in their version number (e.g. \"1.0.0-beta1\") are now correctly handled. Extraneous story saving, occurring when a passage was clicked but otherwise not moved or edited, has been removed. The link to report a bug has been corrected to point to GitHub instead of the previous repository. Features added # Twine supports dark mode in macOS at a basic level. The window frame will change to match the system appearance, but you must still use the toggle in the story list to change theme. This may happen automatically in a future release.","title":"2.3.2"},{"location":"releasenotes/twine2/2.3.2.html#twine-232","text":"See the 2.3.2 project project for details on the changes in this release.","title":"Twine 2.3.2"},{"location":"releasenotes/twine2/2.3.2.html#bugs-fixed","text":"Various issues related to playing and testing stories within Twine have been resolved. Twine now opens playable versions of stories in your default browser instead of inside Twine. An error where the editor UI became unresponsive after adding a new passage has been fixed. Story formats with additional build information in their version number (e.g. \"1.0.0-beta1\") are now correctly handled. Extraneous story saving, occurring when a passage was clicked but otherwise not moved or edited, has been removed. The link to report a bug has been corrected to point to GitHub instead of the previous repository.","title":"Bugs fixed"},{"location":"releasenotes/twine2/2.3.2.html#features-added","text":"Twine supports dark mode in macOS at a basic level. The window frame will change to match the system appearance, but you must still use the toggle in the story list to change theme. This may happen automatically in a future release.","title":"Features added"},{"location":"releasenotes/twine2/2.3.3.html","text":"Twine 2.3.3 # See the 2.3.3 project project for details on the changes in this release. Bugs fixed # Proofing stories, broken in 2.3.2, is working again. In previous versions, pressing control- or command-Z immediately after opening a text editor (passage, JavaScript, or stylesheet) would cause all text to be erased. This behavior no longer occurs. The German localization has been improved (thanks to Kai Brueckers). Features added # Added a Catalan localization (thanks to Jordi Mallach). Added a Norwegian localization (thanks to sinwes).","title":"2.3.3"},{"location":"releasenotes/twine2/2.3.3.html#twine-233","text":"See the 2.3.3 project project for details on the changes in this release.","title":"Twine 2.3.3"},{"location":"releasenotes/twine2/2.3.3.html#bugs-fixed","text":"Proofing stories, broken in 2.3.2, is working again. In previous versions, pressing control- or command-Z immediately after opening a text editor (passage, JavaScript, or stylesheet) would cause all text to be erased. This behavior no longer occurs. The German localization has been improved (thanks to Kai Brueckers).","title":"Bugs fixed"},{"location":"releasenotes/twine2/2.3.3.html#features-added","text":"Added a Catalan localization (thanks to Jordi Mallach). Added a Norwegian localization (thanks to sinwes).","title":"Features added"},{"location":"releasenotes/twine2/2.3.4.html","text":"Twine 2.3.4 # See the 2.3.4 project project for details on the changes in this release. Features added # Added Chapbook 1.0.0, a new story format. Upgraded Harlowe to 3.1.0. Upgraded Snowman to 1.4.0 and 2.0.0 respectively. Upgraded SugarCube to 2.29.0. Added Ukrainian localization (thanks to uk123ua).","title":"2.3.4"},{"location":"releasenotes/twine2/2.3.4.html#twine-234","text":"See the 2.3.4 project project for details on the changes in this release.","title":"Twine 2.3.4"},{"location":"releasenotes/twine2/2.3.4.html#features-added","text":"Added Chapbook 1.0.0, a new story format. Upgraded Harlowe to 3.1.0. Upgraded Snowman to 1.4.0 and 2.0.0 respectively. Upgraded SugarCube to 2.29.0. Added Ukrainian localization (thanks to uk123ua).","title":"Features added"},{"location":"releasenotes/twine2/2.3.5.html","text":"Twine 2.3.5 # See the 2.3.5 project for details on the changes in this release. Features added # The built-in version of SugarCube has been upgraded to 2.30.0. Added Slovenian and Japanese localizations. Bugs fixed # A bug where extra blank lines were added to story JavaScript and CSS when importing a story has been fixed. A bug where story formats would load incorrectly in the format dialog or story format chooser has been fixed.","title":"2.3.5"},{"location":"releasenotes/twine2/2.3.5.html#twine-235","text":"See the 2.3.5 project for details on the changes in this release.","title":"Twine 2.3.5"},{"location":"releasenotes/twine2/2.3.5.html#features-added","text":"The built-in version of SugarCube has been upgraded to 2.30.0. Added Slovenian and Japanese localizations.","title":"Features added"},{"location":"releasenotes/twine2/2.3.5.html#bugs-fixed","text":"A bug where extra blank lines were added to story JavaScript and CSS when importing a story has been fixed. A bug where story formats would load incorrectly in the format dialog or story format chooser has been fixed.","title":"Bugs fixed"},{"location":"releasenotes/twine2/2.3.6.html","text":"Twine 2.3.6 # This release is only for the web based version . It adds a warning for users of Safari 13.1 and beyond that their story library is at risk, and they should use a different platform. See this Webkit blog post under the \"7-Day Cap on All Script-Writeable Storage\" heading for technical details. Because of this, there are no downloads here and the main twinery.org homepage won't be updated.","title":"2.3.6"},{"location":"releasenotes/twine2/2.3.6.html#twine-236","text":"This release is only for the web based version . It adds a warning for users of Safari 13.1 and beyond that their story library is at risk, and they should use a different platform. See this Webkit blog post under the \"7-Day Cap on All Script-Writeable Storage\" heading for technical details. Because of this, there are no downloads here and the main twinery.org homepage won't be updated.","title":"Twine 2.3.6"},{"location":"releasenotes/twine2/2.3.7.html","text":"Twine 2.3.7 # This is another tiny maintenance release, updating SugarCube to the latest version. Features added # Updated version of SugarCube story format, 2.31.1.","title":"2.3.7"},{"location":"releasenotes/twine2/2.3.7.html#twine-237","text":"This is another tiny maintenance release, updating SugarCube to the latest version.","title":"Twine 2.3.7"},{"location":"releasenotes/twine2/2.3.7.html#features-added","text":"Updated version of SugarCube story format, 2.31.1.","title":"Features added"},{"location":"releasenotes/twine2/2.3.8.html","text":"Twine 2.3.8 # This is a maintenance release for Twine 2.3. Features Added # The colors used for syntax coloring in the CSS and JavaScript editors now have an improved contrast ratio. On iOS, Twine now prompts to be added to the home screen, which will prevent story data from being automatically deleted after 7 days of inactivity . Updated Chapbook to the latest version, 1.1.0.","title":"2.3.8"},{"location":"releasenotes/twine2/2.3.8.html#twine-238","text":"This is a maintenance release for Twine 2.3.","title":"Twine 2.3.8"},{"location":"releasenotes/twine2/2.3.8.html#features-added","text":"The colors used for syntax coloring in the CSS and JavaScript editors now have an improved contrast ratio. On iOS, Twine now prompts to be added to the home screen, which will prevent story data from being automatically deleted after 7 days of inactivity . Updated Chapbook to the latest version, 1.1.0.","title":"Features Added"},{"location":"savinggames/harlowe/harlowe_savinggames.html","text":"\"Saving Games\": Harlowe (v2.0) # Summary # Harlowe provides macros like (save-game:) and (load-game:) to store and retrieve game \"saves\" of the variables and current passage. (saved-games:) can also be used to check if a certain game save exists. Game saves are stored as cookies in the user's browser. If cookies cannot be stored for some reason, game saves will fail. It is recommended to always check if the game save was stored before trying to retrieve it later. Example # Download Twee Code # :: StoryTitle Saving Games in Harlowe :: Start (link:\"Save game?\")[ (if:(save-game:\"Slot A\"))[ (if: (saved-games:) contains \"Slot A\")[ Slot A is in the saved-games datamap! ] (link: \"Load Slot A?\" )[ (load-game: \"Slot A\") ] ](else: )[ Sorry, I couldn't save your game. ] ] Twee Download","title":"Harlowe"},{"location":"savinggames/harlowe/harlowe_savinggames.html#saving-games-harlowe-v20","text":"","title":"\"Saving Games\": Harlowe (v2.0)"},{"location":"savinggames/harlowe/harlowe_savinggames.html#summary","text":"Harlowe provides macros like (save-game:) and (load-game:) to store and retrieve game \"saves\" of the variables and current passage. (saved-games:) can also be used to check if a certain game save exists. Game saves are stored as cookies in the user's browser. If cookies cannot be stored for some reason, game saves will fail. It is recommended to always check if the game save was stored before trying to retrieve it later.","title":"Summary"},{"location":"savinggames/harlowe/harlowe_savinggames.html#example","text":"Download","title":"Example"},{"location":"savinggames/harlowe/harlowe_savinggames.html#twee-code","text":":: StoryTitle Saving Games in Harlowe :: Start (link:\"Save game?\")[ (if:(save-game:\"Slot A\"))[ (if: (saved-games:) contains \"Slot A\")[ Slot A is in the saved-games datamap! ] (link: \"Load Slot A?\" )[ (load-game: \"Slot A\") ] ](else: )[ Sorry, I couldn't save your game. ] ] Twee Download","title":"Twee Code"},{"location":"savinggames/snowman/snowman_savinggames.html","text":"\"Saving Games\": Snowman (v1.3.0) # Summary # Snowman provides the window.story.saveHash() and window.story.restore() functions to produce a hash of the current story state and then recover it. However, it does not provide a mechanism for saving the hash between sessions. Through using the window.localStorage global variable, this can be accomplished. Example # Download Twee Code # :: StoryTitle Saving Games in Snowman :: UserScript[script] window.storage = { ok: function() { try { var storage = window[\"localStorage\"], x = '__storage_test__'; storage.setItem(x, x); storage.removeItem(x); return true; } catch(e) { return e instanceof DOMException && ( // everything except Firefox e.code === 22 || // Firefox e.code === 1014 || // test name field too, because code might not be present // everything except Firefox e.name === 'QuotaExceededError' || // Firefox e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored storage.length !== 0; } }, save: function(hash) { window.localStorage.setItem('hash', hash); }, restore: function() { return window.localStorage.getItem('hash'); }, delete: function() { window.localStorage.removeItem(\"hash\"); } } :: Start <% if(window.storage.ok()) { %> Window storage works! <% } %> <% if(window.storage.restore()) { %> There is a session saved! <% } %> [[Save the session hash?]] [[Restore from previous session?]] [[Delete previous session?]] :: Save the session hash? The hash is <%= window.story.saveHash() %>. It has been saved! <% if(window.storage.ok()) { window.storage.save(window.story.saveHash()) }%> [[Go back?|Start]] :: Restore from previous session? <% if(window.storage.ok()) { if(window.story.restore(window.storage.restore()) ) { %> The restore was successful! <% } } %> [[Go back?|Start]] :: Delete previous session? <% window.storage.delete() %> [[Go back?|Start]] Twee Download","title":"Snowman"},{"location":"savinggames/snowman/snowman_savinggames.html#saving-games-snowman-v130","text":"","title":"\"Saving Games\": Snowman (v1.3.0)"},{"location":"savinggames/snowman/snowman_savinggames.html#summary","text":"Snowman provides the window.story.saveHash() and window.story.restore() functions to produce a hash of the current story state and then recover it. However, it does not provide a mechanism for saving the hash between sessions. Through using the window.localStorage global variable, this can be accomplished.","title":"Summary"},{"location":"savinggames/snowman/snowman_savinggames.html#example","text":"Download","title":"Example"},{"location":"savinggames/snowman/snowman_savinggames.html#twee-code","text":":: StoryTitle Saving Games in Snowman :: UserScript[script] window.storage = { ok: function() { try { var storage = window[\"localStorage\"], x = '__storage_test__'; storage.setItem(x, x); storage.removeItem(x); return true; } catch(e) { return e instanceof DOMException && ( // everything except Firefox e.code === 22 || // Firefox e.code === 1014 || // test name field too, because code might not be present // everything except Firefox e.name === 'QuotaExceededError' || // Firefox e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored storage.length !== 0; } }, save: function(hash) { window.localStorage.setItem('hash', hash); }, restore: function() { return window.localStorage.getItem('hash'); }, delete: function() { window.localStorage.removeItem(\"hash\"); } } :: Start <% if(window.storage.ok()) { %> Window storage works! <% } %> <% if(window.storage.restore()) { %> There is a session saved! <% } %> [[Save the session hash?]] [[Restore from previous session?]] [[Delete previous session?]] :: Save the session hash? The hash is <%= window.story.saveHash() %>. It has been saved! <% if(window.storage.ok()) { window.storage.save(window.story.saveHash()) }%> [[Go back?|Start]] :: Restore from previous session? <% if(window.storage.ok()) { if(window.story.restore(window.storage.restore()) ) { %> The restore was successful! <% } } %> [[Go back?|Start]] :: Delete previous session? <% window.storage.delete() %> [[Go back?|Start]] Twee Download","title":"Twee Code"},{"location":"savinggames/sugarcube/sugarcube_savinggames.html","text":"\"Saving Games\": SugarCube (v2.18) # Summary # SugarCube provides built-in functionality for saving, viewing, and deleting game saves through its sidebar. However, the Save API also provides programmable access for re-creating this for users through functions like Save.slots.has()* , Save.slots.save() , and *Save.slots.load() . This example also demonstrates the use of the State.variables object to access variables in JavaScript and use them. Example # Download Twee Code # :: StoryTitle Saving Games in SugarCube :: Start <<script>> if (Save.slots.has(0)) { State.variables.slotA = true; } else { State.variables.slotA = false; } <</script>> <<if $slotA is true>> The first game slot exists! (This session was most likely reloaded from a game save.) <</if>> <<link \"Save to the first slot?\">> <<script>> if (Save.slots.ok()) { Save.slots.save(0); } <</script>> <</link>> <<link \"Load from the first slot?\">> <<script>> if (Save.slots.has(0)) { Save.slots.load(0); } <</script>> <</link>> <<link \"Delete first slot and restart story?\">> <<script>> if (Save.slots.has(0)) { Save.slots.delete(0); Engine.restart(); } <</script>> <</link>> Twee Download","title":"SugarCube"},{"location":"savinggames/sugarcube/sugarcube_savinggames.html#saving-games-sugarcube-v218","text":"","title":"\"Saving Games\": SugarCube (v2.18)"},{"location":"savinggames/sugarcube/sugarcube_savinggames.html#summary","text":"SugarCube provides built-in functionality for saving, viewing, and deleting game saves through its sidebar. However, the Save API also provides programmable access for re-creating this for users through functions like Save.slots.has()* , Save.slots.save() , and *Save.slots.load() . This example also demonstrates the use of the State.variables object to access variables in JavaScript and use them.","title":"Summary"},{"location":"savinggames/sugarcube/sugarcube_savinggames.html#example","text":"Download","title":"Example"},{"location":"savinggames/sugarcube/sugarcube_savinggames.html#twee-code","text":":: StoryTitle Saving Games in SugarCube :: Start <<script>> if (Save.slots.has(0)) { State.variables.slotA = true; } else { State.variables.slotA = false; } <</script>> <<if $slotA is true>> The first game slot exists! (This session was most likely reloaded from a game save.) <</if>> <<link \"Save to the first slot?\">> <<script>> if (Save.slots.ok()) { Save.slots.save(0); } <</script>> <</link>> <<link \"Load from the first slot?\">> <<script>> if (Save.slots.has(0)) { Save.slots.load(0); } <</script>> <</link>> <<link \"Delete first slot and restart story?\">> <<script>> if (Save.slots.has(0)) { Save.slots.delete(0); Engine.restart(); } <</script>> <</link>> Twee Download","title":"Twee Code"},{"location":"settingandshowing/chapbook/chapbook_settingandshowing.html","text":"\"Setting and Showing Variables\": Chapbook (v1.0.0) # Summary # In Chapbook all variables are initialised and updated within the Vars Section of a passage, this section is always added at the beginning of the passage and there can only be one such section per passage. The Vars Section is separated from the passage's normal text by two dashes ( -- ); The value of a variable can be displayed using the {insert} insert. Example # Download Twee Code # :: StoryTitle Setting and Showing Variables in Chapbook :: Start numberVariable: 5 wordVariable: \"five\" phraseVariable: \"The value\" -- {phraseVariable} is {numberVariable} and {wordVariable}. {embed passage: \"Increment number\"} The number variable was incremented by one to {numberVariable}. :: Increment number numberVariable: numberVariable + 1 -- Twee Download","title":"Chapbook"},{"location":"settingandshowing/chapbook/chapbook_settingandshowing.html#setting-and-showing-variables-chapbook-v100","text":"","title":"\"Setting and Showing Variables\": Chapbook (v1.0.0)"},{"location":"settingandshowing/chapbook/chapbook_settingandshowing.html#summary","text":"In Chapbook all variables are initialised and updated within the Vars Section of a passage, this section is always added at the beginning of the passage and there can only be one such section per passage. The Vars Section is separated from the passage's normal text by two dashes ( -- ); The value of a variable can be displayed using the {insert} insert.","title":"Summary"},{"location":"settingandshowing/chapbook/chapbook_settingandshowing.html#example","text":"Download","title":"Example"},{"location":"settingandshowing/chapbook/chapbook_settingandshowing.html#twee-code","text":":: StoryTitle Setting and Showing Variables in Chapbook :: Start numberVariable: 5 wordVariable: \"five\" phraseVariable: \"The value\" -- {phraseVariable} is {numberVariable} and {wordVariable}. {embed passage: \"Increment number\"} The number variable was incremented by one to {numberVariable}. :: Increment number numberVariable: numberVariable + 1 -- Twee Download","title":"Twee Code"},{"location":"settingandshowing/harlowe/harlowe_settingandshowing.html","text":"\"Setting and Showing Variables\": Harlowe (v2.0) # Summary # Variables, symbols starting with $ (for story-wide) or _ (for temporary), can be \"set\" using the (set:) macro in Harlowe. $ is used for storing data throughout the story, and _ should be used for data only needed in the current passage. Using _ is useful for not wanting to accidentally overwrite variables elsewhere in the story. They can also help with debugging through not cluttering up the variables list of future passages. In Harlowe, the keyword it can also be used as a shortcut for changing and saving a value in reference to itself. The it refers to the first variable named in the macro. Example # Download Twee Code # :: StoryTitle Setting and Showing Variables in Harlowe :: Start (set: $numberVariable to 5) (set: $textVariable to \"five\") (set: _textVariable to \"The values\") _textVariable are $numberVariable and $textVariable. (set: $numberVariable to it + 1) _textVariable are $numberVariable and $textVariable. Twee Download","title":"Harlowe"},{"location":"settingandshowing/harlowe/harlowe_settingandshowing.html#setting-and-showing-variables-harlowe-v20","text":"","title":"\"Setting and Showing Variables\": Harlowe (v2.0)"},{"location":"settingandshowing/harlowe/harlowe_settingandshowing.html#summary","text":"Variables, symbols starting with $ (for story-wide) or _ (for temporary), can be \"set\" using the (set:) macro in Harlowe. $ is used for storing data throughout the story, and _ should be used for data only needed in the current passage. Using _ is useful for not wanting to accidentally overwrite variables elsewhere in the story. They can also help with debugging through not cluttering up the variables list of future passages. In Harlowe, the keyword it can also be used as a shortcut for changing and saving a value in reference to itself. The it refers to the first variable named in the macro.","title":"Summary"},{"location":"settingandshowing/harlowe/harlowe_settingandshowing.html#example","text":"Download","title":"Example"},{"location":"settingandshowing/harlowe/harlowe_settingandshowing.html#twee-code","text":":: StoryTitle Setting and Showing Variables in Harlowe :: Start (set: $numberVariable to 5) (set: $textVariable to \"five\") (set: _textVariable to \"The values\") _textVariable are $numberVariable and $textVariable. (set: $numberVariable to it + 1) _textVariable are $numberVariable and $textVariable. Twee Download","title":"Twee Code"},{"location":"settingandshowing/snowman/snowman_settingandshowing.html","text":"\"Setting and Showing Variables\": Snowman (v1.3.0) # Summary # In Snowman, the s global variable can be used to store and retrieve values. Properties can be created and assigned freely. The Underscore template functionality can be used to define, change, and show the values of variables. Example # Download Twee Code # :: StoryTitle Setting and Showing Variables in Snowman :: Start <% s.numberVariable = 5; s.wordVariable = \"five\"; s.phraseVariable = \"The value\"; %> <%= s.phraseVariable %> is <%= s.numberVariable %> and <%= s.wordVariable %>. <% s.numberVariable++; %> <%= s.phraseVariable %> is <%= s.numberVariable %> and <%= s.wordVariable%>. Twee Download","title":"Snowman"},{"location":"settingandshowing/snowman/snowman_settingandshowing.html#setting-and-showing-variables-snowman-v130","text":"","title":"\"Setting and Showing Variables\": Snowman (v1.3.0)"},{"location":"settingandshowing/snowman/snowman_settingandshowing.html#summary","text":"In Snowman, the s global variable can be used to store and retrieve values. Properties can be created and assigned freely. The Underscore template functionality can be used to define, change, and show the values of variables.","title":"Summary"},{"location":"settingandshowing/snowman/snowman_settingandshowing.html#example","text":"Download","title":"Example"},{"location":"settingandshowing/snowman/snowman_settingandshowing.html#twee-code","text":":: StoryTitle Setting and Showing Variables in Snowman :: Start <% s.numberVariable = 5; s.wordVariable = \"five\"; s.phraseVariable = \"The value\"; %> <%= s.phraseVariable %> is <%= s.numberVariable %> and <%= s.wordVariable %>. <% s.numberVariable++; %> <%= s.phraseVariable %> is <%= s.numberVariable %> and <%= s.wordVariable%>. Twee Download","title":"Twee Code"},{"location":"settingandshowing/sugarcube/sugarcube_settingandshowing.html","text":"\"Setting and Showing Variables\": SugarCube (v2.18) # Summary # Variables, symbols starting with $ (for normal) or _ (for temporary), can be \"set\" using the <<set>> macro in SugarCube. $ is used for storing data throughout the story, and _ should be used for data only needed in the current passage. Using _ is useful for not wanting to accidentally overwrite variables elsewhere in the story. They can also help with debugging through not cluttering up the variables list of future passages. Example # Download Twee Code # :: StoryTitle Setting and Showing Variables in SugarCube :: Start <<set $numberVariable to 5>> <<set $wordVariable to \"five\">> <<set $phraseVariable to \"The value\">> $phraseVariable is $numberVariable and $wordVariable. <<set $numberVariable to $numberVariable + 1>> $phraseVariable is $numberVariable and $wordVariable. Twee Download","title":"SugarCube"},{"location":"settingandshowing/sugarcube/sugarcube_settingandshowing.html#setting-and-showing-variables-sugarcube-v218","text":"","title":"\"Setting and Showing Variables\": SugarCube (v2.18)"},{"location":"settingandshowing/sugarcube/sugarcube_settingandshowing.html#summary","text":"Variables, symbols starting with $ (for normal) or _ (for temporary), can be \"set\" using the <<set>> macro in SugarCube. $ is used for storing data throughout the story, and _ should be used for data only needed in the current passage. Using _ is useful for not wanting to accidentally overwrite variables elsewhere in the story. They can also help with debugging through not cluttering up the variables list of future passages.","title":"Summary"},{"location":"settingandshowing/sugarcube/sugarcube_settingandshowing.html#example","text":"Download","title":"Example"},{"location":"settingandshowing/sugarcube/sugarcube_settingandshowing.html#twee-code","text":":: StoryTitle Setting and Showing Variables in SugarCube :: Start <<set $numberVariable to 5>> <<set $wordVariable to \"five\">> <<set $phraseVariable to \"The value\">> $phraseVariable is $numberVariable and $wordVariable. <<set $numberVariable to $numberVariable + 1>> $phraseVariable is $numberVariable and $wordVariable. Twee Download","title":"Twee Code"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html","text":"\"Left Sidebar\": Harlowe (both v1.x and v2.x series) # Summary # Harlowe has a built-in left sidebar. Before v2.1.0, however, there was no functionality to add dynamic content. It is possible to re-purpose a \"footer\" tagged passage to act as a custom sidebar to display dynamic content below Harlowe's own sidebar. Example # Download Twee Code # :: StoryTitle Left Sidebar in Harlowe :: UserStylesheet [stylesheet] /* Reposition the Sidebar 'footer' tagged passage. */ tw-include[title=\"Sidebar\"] { position: fixed; top: 0; left: 0; width: 20%; /* padding-right of the tw-story element. */ max-height: 100%; margin-top: calc(5% + 171px); /* padding-top of the tw-story element plus computed height of the tw-sidebar element. */ padding: 0.5em; background-color: transparent; text-align: right; } :: Start (set: $name to \"Jane Doe\", $location to \"Work\")\\ [[Another passage]] :: Sidebar [footer] Name: $name Location: $location :: Another passage (set: $name to \"John Smith\", $location to \"Shop\")\\ [[Start]] Twee Download See Also # CSS and Passage Tags","title":"Harlowe (both v1.x and v2.x series)"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html#left-sidebar-harlowe-both-v1x-and-v2x-series","text":"","title":"\"Left Sidebar\": Harlowe (both v1.x and v2.x series)"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html#summary","text":"Harlowe has a built-in left sidebar. Before v2.1.0, however, there was no functionality to add dynamic content. It is possible to re-purpose a \"footer\" tagged passage to act as a custom sidebar to display dynamic content below Harlowe's own sidebar.","title":"Summary"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html#example","text":"Download","title":"Example"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html#twee-code","text":":: StoryTitle Left Sidebar in Harlowe :: UserStylesheet [stylesheet] /* Reposition the Sidebar 'footer' tagged passage. */ tw-include[title=\"Sidebar\"] { position: fixed; top: 0; left: 0; width: 20%; /* padding-right of the tw-story element. */ max-height: 100%; margin-top: calc(5% + 171px); /* padding-top of the tw-story element plus computed height of the tw-sidebar element. */ padding: 0.5em; background-color: transparent; text-align: right; } :: Start (set: $name to \"Jane Doe\", $location to \"Work\")\\ [[Another passage]] :: Sidebar [footer] Name: $name Location: $location :: Another passage (set: $name to \"John Smith\", $location to \"Shop\")\\ [[Start]] Twee Download","title":"Twee Code"},{"location":"sidebar_left/harlowe/harlowe_sidebar_left.html#see-also","text":"CSS and Passage Tags","title":"See Also"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html","text":"\"Left Sidebar\": Harlowe (only v2.1.0 or later) # Summary # Harlowe v2.1.0 or later includes a built-in named hook named ?Sidebar . When combined with the (append:) macro, dynamic content can be added to the left, blank area containing the default Undo and Redo links. A \"footer\" tagged passage is used to update the dynamic content after each passage transition, and CSS is used to resize and position the existing <tw-sidebar> element. Example # Download Twee Code # :: StoryTitle Left Sidebar in Harlowe (v2.1.0 or later) :: UserStylesheet [stylesheet] /* Reposition the Sidebar 'footer' tagged passage. */ tw-sidebar { position: fixed; top: 0; left: 0; width: 20%; /* padding-right of the tw-story element. */ max-height: 100%; margin-top: 5%; /* padding-top of the tw-story element. */ padding: 0 0.5em 0.5em 0.5em; text-align: right; background-color: transparent; } tw-icon { text-align: right; padding-right: 0.75em; } :: Start (set: $name to \"Jane Doe\", $location to \"Work\")\\ [[Another passage]] :: Sidebar [footer] (append: ?SideBar)[\\ Name: $name Location: $location ] :: Another passage (set: $name to \"John Smith\", $location to \"Shop\")\\ [[Start]] Twee Download See Also # CSS and Passage Tags","title":"Harlowe (v2.1.0 or later)"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html#left-sidebar-harlowe-only-v210-or-later","text":"","title":"\"Left Sidebar\": Harlowe (only v2.1.0 or later)"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html#summary","text":"Harlowe v2.1.0 or later includes a built-in named hook named ?Sidebar . When combined with the (append:) macro, dynamic content can be added to the left, blank area containing the default Undo and Redo links. A \"footer\" tagged passage is used to update the dynamic content after each passage transition, and CSS is used to resize and position the existing <tw-sidebar> element.","title":"Summary"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html#example","text":"Download","title":"Example"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html#twee-code","text":":: StoryTitle Left Sidebar in Harlowe (v2.1.0 or later) :: UserStylesheet [stylesheet] /* Reposition the Sidebar 'footer' tagged passage. */ tw-sidebar { position: fixed; top: 0; left: 0; width: 20%; /* padding-right of the tw-story element. */ max-height: 100%; margin-top: 5%; /* padding-top of the tw-story element. */ padding: 0 0.5em 0.5em 0.5em; text-align: right; background-color: transparent; } tw-icon { text-align: right; padding-right: 0.75em; } :: Start (set: $name to \"Jane Doe\", $location to \"Work\")\\ [[Another passage]] :: Sidebar [footer] (append: ?SideBar)[\\ Name: $name Location: $location ] :: Another passage (set: $name to \"John Smith\", $location to \"Shop\")\\ [[Start]] Twee Download","title":"Twee Code"},{"location":"sidebar_left/harlowe_2/harlowe_sidebar_left.html#see-also","text":"CSS and Passage Tags","title":"See Also"},{"location":"sidebar_left/snowman/snowman_sidebar_left.html","text":"\"Left Sidebar\": Snowman (v1.3.0) # Summary # Snowman does not have a built-in sidebar, but one can be created using JavaScript, jQuery , and CSS. The createElement() function is used to create a new DIV element into which the generated output of the Sidebar passage will later be added. This new DIV is assigned an ID of \"sidebar\" using the attr() function and then inserted into the story's Document Object Model (DOM) using the insertBefore() function. Snowman triggers a \"showpassage:after\" event after each passage is shown. The on() function can be used to monitor for this event. Once it has occurred, a combination of the html() and window.story.render() functions can be used to display the dynamic contents of the Sidebar passage within the \"sidebar\" DIV element. Example # Download Twee Code # :: StoryTitle Left Sidebar in Snowman :: UserScript [script] /* Create the element to display the contents of the Sidebar passage in. */ $(document.createElement('div')) .attr('id', 'sidebar') .insertBefore('#passage'); /* Monitor for the event that is triggered after the current Passage has been shown. */ $(window).on('showpassage:after', function () { $('#sidebar').html(window.story.render(\"Sidebar\")); }); :: UserStylesheet[stylesheet] #passage { margin-left: 20%; } #sidebar { position: fixed; top: 0; left: 0; width: 18%; height: 100%; margin: 0; padding: 0.5em; background-color: black; color: white; } :: Start <% s.name = \"Jane Doe\"; s.location = \"Work\" %> [[Another passage]] :: Sidebar Name: <%= s.name %><br> Location: <%= s.location %> :: Another passage <% s.name = \"John Smith\"; s.location = \"Shop\" %> [[Start]] Twee Download","title":"Snowman"},{"location":"sidebar_left/snowman/snowman_sidebar_left.html#left-sidebar-snowman-v130","text":"","title":"\"Left Sidebar\": Snowman (v1.3.0)"},{"location":"sidebar_left/snowman/snowman_sidebar_left.html#summary","text":"Snowman does not have a built-in sidebar, but one can be created using JavaScript, jQuery , and CSS. The createElement() function is used to create a new DIV element into which the generated output of the Sidebar passage will later be added. This new DIV is assigned an ID of \"sidebar\" using the attr() function and then inserted into the story's Document Object Model (DOM) using the insertBefore() function. Snowman triggers a \"showpassage:after\" event after each passage is shown. The on() function can be used to monitor for this event. Once it has occurred, a combination of the html() and window.story.render() functions can be used to display the dynamic contents of the Sidebar passage within the \"sidebar\" DIV element.","title":"Summary"},{"location":"sidebar_left/snowman/snowman_sidebar_left.html#example","text":"Download","title":"Example"},{"location":"sidebar_left/snowman/snowman_sidebar_left.html#twee-code","text":":: StoryTitle Left Sidebar in Snowman :: UserScript [script] /* Create the element to display the contents of the Sidebar passage in. */ $(document.createElement('div')) .attr('id', 'sidebar') .insertBefore('#passage'); /* Monitor for the event that is triggered after the current Passage has been shown. */ $(window).on('showpassage:after', function () { $('#sidebar').html(window.story.render(\"Sidebar\")); }); :: UserStylesheet[stylesheet] #passage { margin-left: 20%; } #sidebar { position: fixed; top: 0; left: 0; width: 18%; height: 100%; margin: 0; padding: 0.5em; background-color: black; color: white; } :: Start <% s.name = \"Jane Doe\"; s.location = \"Work\" %> [[Another passage]] :: Sidebar Name: <%= s.name %><br> Location: <%= s.location %> :: Another passage <% s.name = \"John Smith\"; s.location = \"Shop\" %> [[Start]] Twee Download","title":"Twee Code"},{"location":"sidebar_left/sugarcube/sugarcube_sidebar_left.html","text":"\"Left Sidebar\": SugarCube (v2.18) # Summary # SugarCube has a built-in left sidebar whose contents can be changed by adding one of several special passages to your story. The following list describes each of the special passages in the order that they appear vertically within the sidebar: StoryBanner appears directly above the story's Title. One use is to show the story's icon/image. StorySubtitle appears directly below the story's Title. One use is to show the story's version information. StoryAuthor is used to show the Author's information. StoryCaption is generally used to show dynamic information about the main character or the story's progress. StoryMenu appears directly above the Save button and is used to show custom menu items. StoryShare appears directly below the Restart button and is used to access a dialog containing Author's social media or web-site links. The sidebar can be manually stowed (hidden) and unstowed (revealed) by selecting the < or > icon in the sidebar's top right corner. The same effect can be achieved programmatically by using the UIBar global object and its UIBar.stow() and UIBar.unstow() functions. Example # Download Twee Code # :: StoryTitle Left Sidebar in SugarCube :: Start <<set $name to \"Jane Doe\", $location to \"Work\">>\\ [[Another passage]] <<link \"Stow the sidebar!\">> <<run UIBar.stow() >> <</link>> <<link \"Unstow the sidebar!\">> <<run UIBar.unstow() >> <</link>> :: StoryBanner <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"64\" height=\"64\"> :: StorySubtitle Version: 0.2.1 :: StoryAuthor by Anonymous :: StoryCaption Name: $name Location: $location :: StoryMenu [[New story link!|Start]] :: StoryShare [[Twinery|https://twinery.org/]] :: Another passage <<set $name to \"John Smith\", $location to \"Shop\">>\\ [[Start]] Twee Download","title":"SugarCube"},{"location":"sidebar_left/sugarcube/sugarcube_sidebar_left.html#left-sidebar-sugarcube-v218","text":"","title":"\"Left Sidebar\": SugarCube (v2.18)"},{"location":"sidebar_left/sugarcube/sugarcube_sidebar_left.html#summary","text":"SugarCube has a built-in left sidebar whose contents can be changed by adding one of several special passages to your story. The following list describes each of the special passages in the order that they appear vertically within the sidebar: StoryBanner appears directly above the story's Title. One use is to show the story's icon/image. StorySubtitle appears directly below the story's Title. One use is to show the story's version information. StoryAuthor is used to show the Author's information. StoryCaption is generally used to show dynamic information about the main character or the story's progress. StoryMenu appears directly above the Save button and is used to show custom menu items. StoryShare appears directly below the Restart button and is used to access a dialog containing Author's social media or web-site links. The sidebar can be manually stowed (hidden) and unstowed (revealed) by selecting the < or > icon in the sidebar's top right corner. The same effect can be achieved programmatically by using the UIBar global object and its UIBar.stow() and UIBar.unstow() functions.","title":"Summary"},{"location":"sidebar_left/sugarcube/sugarcube_sidebar_left.html#example","text":"Download","title":"Example"},{"location":"sidebar_left/sugarcube/sugarcube_sidebar_left.html#twee-code","text":":: StoryTitle Left Sidebar in SugarCube :: Start <<set $name to \"Jane Doe\", $location to \"Work\">>\\ [[Another passage]] <<link \"Stow the sidebar!\">> <<run UIBar.stow() >> <</link>> <<link \"Unstow the sidebar!\">> <<run UIBar.unstow() >> <</link>> :: StoryBanner <img src=\"https://twinery.org/homepage/img/logo.svg\" width=\"64\" height=\"64\"> :: StorySubtitle Version: 0.2.1 :: StoryAuthor by Anonymous :: StoryCaption Name: $name Location: $location :: StoryMenu [[New story link!|Start]] :: StoryShare [[Twinery|https://twinery.org/]] :: Another passage <<set $name to \"John Smith\", $location to \"Shop\">>\\ [[Start]] Twee Download","title":"Twee Code"},{"location":"spaceexploration/chapbook/chapbook_space_exploration.html","text":"\"Space Exploration\": Chapbook (v1.0.0) # Summary # Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example generates a system of four planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can \"Scan System\" and then choose to visit these planets for different outcomes based on a series of choices and the use of the Math.random() function. At the same time, the player must also balance the health of the ship, the number of jumps left, and the current fuel. These are displayed when visiting the \"Statistics\" passage. If any of them drop below 0, the game ends with an ending matching that statistic. This example uses a complex combination of the Vars Section , [JavaScript] modifier, and internal JavaScript functionality in Chapbook, including the use of the function window.go() . Example # Download Twee Code # :: StoryTitle Chapbook: Space Exploration :: UserScript[script] // Add a randomRange // Used from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random Math.randomRange = (min, max) => { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min)) + min; }; :: Start health: 20 fuel: 4 system: [] numberOfJumpsLeft: 10 -- {embed passage: 'GenerateSystem'} [[Explore Space]] :: Explore Space {embed passage: \"CheckStatus\"} Current System: {embed passage: 'DisplaySystem'} <hr> [[Hyperjump]] [[Statistics]] :: GenerateSystem [JavaScript] // There will always be four (4) planets let planets = 4; // Reset global system let system = engine.state.get('system'); system = []; // Add 0 (Red) or 1 (Green) planets for(let i = 0; i < planets; i++) { // Get a random number from 0 to 2 // 0 = RED // 1 = GREEN // 2 = EMPTY system.push(Math.randomRange(0,3)); } // Update the new 'system' engine.state.set('system', system); :: CheckStatus [JavaScript] let health = engine.state.get(\"health\"); let fuel = engine.state.get(\"fuel\"); let numberOfJumpsLeft = engine.state.get(\"numberOfJumpsLeft\"); if(health <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Destroyed\"); }, 10); } if(fuel <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Lost in Space\"); }, 10); } if(numberOfJumpsLeft <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Safe\"); }, 10); } :: Destroyed The ship exploded in flight. Game Over. :: Lost in Space Without fuel, the ship tumbled and spun in the endless black. Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. Success! :: Hyperjump fuel: fuel - 1 numberOfJumpsLeft: numberOfJumpsLeft - 1 -- {embed passage: \"CheckStatus\"} {embed passage: \"GenerateSystem\"} [[Scan System->Explore Space]] :: DisplaySystem [if system[0] == 0] {reveal link: 'RED', passage: 'RED'} [if system[0] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[0] == 2] <br> [if system[1] == 0] {reveal link: 'RED', passage: 'RED'} [if system[1] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[1] == 2] <br> [if system[2] == 0] {reveal link: 'RED', passage: 'RED'} [if system[2] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[2] == 2] <br> [if system[3] == 0] {reveal link: 'RED', passage: 'RED'} [if system[3] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[3] == 2] <br> :: RED REPORT [JavaScript] let percentage = Math.randomRange(0, 11); let foundHealth; let foundFuel; let health = engine.state.get('health'); let fuel = engine.state.get('fuel'); if(percentage >= 6) { foundHealth = Math.randomRange(1, 6); foundFuel = Math.randomRange(1, 3); write(`The hostile environment damaged the ship, but extra fuel was found. (-${foundHealth} to health and +${foundFuel} to fuel.)`); health -= foundHealth; fuel += foundFuel; } if(percentage >= 3 && percentage < 6) { foundHealth = Math.randomRange(2, 8); write(`A hostile ship attacked. (-${foundHealth} to health)`); health -= foundHealth; } if(percentage < 3) { write(\"Nothing happened.\"); } engine.state.set('health', health); engine.state.set('fuel', fuel); [continued] {embed passage: \"CheckStatus\"} :: GREEN REPORT [JavaScript] let percentage = Math.randomRange(0, 11); let foundFuel = 0; let foundHealth = 0; let fuel = engine.state.get('fuel'); let health = engine.state.get('health'); if(percentage < 2) { foundFuel = Math.randomRange(1,3); write(`Fuel was found in some wreckage. (+${foundFuel} to fuel)`); fuel += foundFuel; } if(percentage > 6) { foundHealth = Math.randomRange(1,4); write(`During a brief pause, the ship was able to be repaired. (+${foundHealth} to health)`); health += foundHealth; } if(percentage > 2 && percentage < 6) { write(`Nothing happened.`); } engine.state.set('health', health); engine.state.set('fuel', fuel); [continued] {embed passage: \"CheckStatus\"} :: Statistics Health: {health} Fuel: {fuel} Number of Jumps Left: {numberOfJumpsLeft} {reveal link: 'Statistics', passage: 'Statistics'} Twee Download","title":"Chapbook"},{"location":"spaceexploration/chapbook/chapbook_space_exploration.html#space-exploration-chapbook-v100","text":"","title":"\"Space Exploration\": Chapbook (v1.0.0)"},{"location":"spaceexploration/chapbook/chapbook_space_exploration.html#summary","text":"Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example generates a system of four planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can \"Scan System\" and then choose to visit these planets for different outcomes based on a series of choices and the use of the Math.random() function. At the same time, the player must also balance the health of the ship, the number of jumps left, and the current fuel. These are displayed when visiting the \"Statistics\" passage. If any of them drop below 0, the game ends with an ending matching that statistic. This example uses a complex combination of the Vars Section , [JavaScript] modifier, and internal JavaScript functionality in Chapbook, including the use of the function window.go() .","title":"Summary"},{"location":"spaceexploration/chapbook/chapbook_space_exploration.html#example","text":"Download","title":"Example"},{"location":"spaceexploration/chapbook/chapbook_space_exploration.html#twee-code","text":":: StoryTitle Chapbook: Space Exploration :: UserScript[script] // Add a randomRange // Used from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random Math.randomRange = (min, max) => { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min)) + min; }; :: Start health: 20 fuel: 4 system: [] numberOfJumpsLeft: 10 -- {embed passage: 'GenerateSystem'} [[Explore Space]] :: Explore Space {embed passage: \"CheckStatus\"} Current System: {embed passage: 'DisplaySystem'} <hr> [[Hyperjump]] [[Statistics]] :: GenerateSystem [JavaScript] // There will always be four (4) planets let planets = 4; // Reset global system let system = engine.state.get('system'); system = []; // Add 0 (Red) or 1 (Green) planets for(let i = 0; i < planets; i++) { // Get a random number from 0 to 2 // 0 = RED // 1 = GREEN // 2 = EMPTY system.push(Math.randomRange(0,3)); } // Update the new 'system' engine.state.set('system', system); :: CheckStatus [JavaScript] let health = engine.state.get(\"health\"); let fuel = engine.state.get(\"fuel\"); let numberOfJumpsLeft = engine.state.get(\"numberOfJumpsLeft\"); if(health <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Destroyed\"); }, 10); } if(fuel <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Lost in Space\"); }, 10); } if(numberOfJumpsLeft <= 0) { // Introduce a micro-delay before transition setTimeout(() => { go(\"Safe\"); }, 10); } :: Destroyed The ship exploded in flight. Game Over. :: Lost in Space Without fuel, the ship tumbled and spun in the endless black. Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. Success! :: Hyperjump fuel: fuel - 1 numberOfJumpsLeft: numberOfJumpsLeft - 1 -- {embed passage: \"CheckStatus\"} {embed passage: \"GenerateSystem\"} [[Scan System->Explore Space]] :: DisplaySystem [if system[0] == 0] {reveal link: 'RED', passage: 'RED'} [if system[0] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[0] == 2] <br> [if system[1] == 0] {reveal link: 'RED', passage: 'RED'} [if system[1] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[1] == 2] <br> [if system[2] == 0] {reveal link: 'RED', passage: 'RED'} [if system[2] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[2] == 2] <br> [if system[3] == 0] {reveal link: 'RED', passage: 'RED'} [if system[3] == 1] {reveal link: 'GREEN', passage: 'GREEN'} [if system[3] == 2] <br> :: RED REPORT [JavaScript] let percentage = Math.randomRange(0, 11); let foundHealth; let foundFuel; let health = engine.state.get('health'); let fuel = engine.state.get('fuel'); if(percentage >= 6) { foundHealth = Math.randomRange(1, 6); foundFuel = Math.randomRange(1, 3); write(`The hostile environment damaged the ship, but extra fuel was found. (-${foundHealth} to health and +${foundFuel} to fuel.)`); health -= foundHealth; fuel += foundFuel; } if(percentage >= 3 && percentage < 6) { foundHealth = Math.randomRange(2, 8); write(`A hostile ship attacked. (-${foundHealth} to health)`); health -= foundHealth; } if(percentage < 3) { write(\"Nothing happened.\"); } engine.state.set('health', health); engine.state.set('fuel', fuel); [continued] {embed passage: \"CheckStatus\"} :: GREEN REPORT [JavaScript] let percentage = Math.randomRange(0, 11); let foundFuel = 0; let foundHealth = 0; let fuel = engine.state.get('fuel'); let health = engine.state.get('health'); if(percentage < 2) { foundFuel = Math.randomRange(1,3); write(`Fuel was found in some wreckage. (+${foundFuel} to fuel)`); fuel += foundFuel; } if(percentage > 6) { foundHealth = Math.randomRange(1,4); write(`During a brief pause, the ship was able to be repaired. (+${foundHealth} to health)`); health += foundHealth; } if(percentage > 2 && percentage < 6) { write(`Nothing happened.`); } engine.state.set('health', health); engine.state.set('fuel', fuel); [continued] {embed passage: \"CheckStatus\"} :: Statistics Health: {health} Fuel: {fuel} Number of Jumps Left: {numberOfJumpsLeft} {reveal link: 'Statistics', passage: 'Statistics'} Twee Download","title":"Twee Code"},{"location":"spaceexploration/harlowe/harlowe_space_exploration.html","text":"\"Space Exploration\": Harlowe (v2.0) # Summary # Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the (random:) macro to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the (random:) macro. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the (display:) macro. Finally, to capture the permanence of many rogue-like games, the (go-to:) macro is used to prevent the use of the normal undo/redo operations in Harlowe. Example # Download Twee Code # :: StoryTitle Space Exploration in Harlowe :: Start [[Explore Space!|Explore Space 1]] :: Startup[startup] (set: $health to 20) (set: $fuel to 3) (set: $system to (a:) ) (set: $numberOfJumpsLeft to 10) :: Generate System { <!-- Save a range from 0 to a max of 3 (total of max 4) --> (set: _planets to (range: 0, (random: 1, 3) ) ) <!-- Reset system --> (set: $system to (a:) ) <!-- Create a new system based on the previous random range --> (for: each _i, ..._planets )[ <!-- Add to the new system, setting either RED or GREEN planets --> (set: $system to it + (a: (either: \"RED\", \"GREEN\") ) ) ] } :: HUD Health: $health Fuel: $fuel Number of Jumps Left: $numberOfJumpsLeft (display: \"Check Status\") :: Display System { (for: each _planet, ...$system)[ (if: _planet is \"RED\")[ (link: _planet)[ (display: \"Show Outcome - Red\") ] ] (if: _planet is \"GREEN\")[ (link: _planet)[ (display: \"Show Outcome - Green\") ] ] <br> ] } :: Explore Space 1 (link: \"Hyperjump\")[ (set: $fuel to it - 1) (set: $numberOfJumpsLeft to it - 1) (goto: \"Explore Space 2\") ] [(display: \"HUD\")]<HUD| (display: \"Generate System\") (display: \"Display System\") :: Show Outcome - Green { (set: _percentage to (random: 1, 10) ) (if: _percentage is 1)[ (set: _foundFuel to (random: 1, 2) ) Fuel was found in some wreckage. (+_foundFuel to fuel) (set: $fuel to it + _foundFuel) ] (else-if: _percentage is >= 6)[ (set: _foundHealth to (random: 1, 3) ) During a brief pause, the ship was able to be repaired. (+_foundHealth to health) (set: $health to it + _foundHealth ) ] (else:) [ Nothing happened. ] (replace: ?HUD)[(display: \"HUD\")] } :: Show Outcome - Red { (set: _percentage to (random: 1, 10) ) (if: _percentage is >= 6)[ (set: _foundHealth to (random: 1, 5) ) (set: _foundFuel to (random: 1, 3) ) The hostile environment damaged the ship, but extra fuel was found. (-_foundHealth to health and +_foundFuel to fuel) (set: $health to it - _foundHealth ) (set: $fuel to it + _foundFuel ) ] (else-if: _percentage <= 3)[ (set: _foundHealth to (random: 2, 7) ) A hostile ship attacked. (-_foundHealth to health) (set: $health to it - _foundHealth ) ] (else:)[ Nothing happened. ] (replace: ?HUD)[(display: \"HUD\")] } :: Explore Space 2 (link: \"Hyperjump\")[ (set: $fuel to it - 1) (set: $numberOfJumpsLeft to it - 1) (goto: \"Explore Space 1\") ] [(display: \"HUD\")]<HUD| (display: \"Generate System\") (display: \"Display System\") :: Check Status { (if: $health <= 0)[ (goto: \"Destroyed\") ] (if: $fuel <= 0)[ (goto: \"Lost in space\") ] (if: $numberOfJumpsLeft <= 0)[ (goto: \"Safe\") ] } :: Destroyed The ship exploded in flight. ###Game Over. :: Lost in space Without fuel, the ship tumbled and spun in the endless black. ###Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. ###Success! Twee Download","title":"Harlowe"},{"location":"spaceexploration/harlowe/harlowe_space_exploration.html#space-exploration-harlowe-v20","text":"","title":"\"Space Exploration\": Harlowe (v2.0)"},{"location":"spaceexploration/harlowe/harlowe_space_exploration.html#summary","text":"Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the (random:) macro to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the (random:) macro. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the (display:) macro. Finally, to capture the permanence of many rogue-like games, the (go-to:) macro is used to prevent the use of the normal undo/redo operations in Harlowe.","title":"Summary"},{"location":"spaceexploration/harlowe/harlowe_space_exploration.html#example","text":"Download","title":"Example"},{"location":"spaceexploration/harlowe/harlowe_space_exploration.html#twee-code","text":":: StoryTitle Space Exploration in Harlowe :: Start [[Explore Space!|Explore Space 1]] :: Startup[startup] (set: $health to 20) (set: $fuel to 3) (set: $system to (a:) ) (set: $numberOfJumpsLeft to 10) :: Generate System { <!-- Save a range from 0 to a max of 3 (total of max 4) --> (set: _planets to (range: 0, (random: 1, 3) ) ) <!-- Reset system --> (set: $system to (a:) ) <!-- Create a new system based on the previous random range --> (for: each _i, ..._planets )[ <!-- Add to the new system, setting either RED or GREEN planets --> (set: $system to it + (a: (either: \"RED\", \"GREEN\") ) ) ] } :: HUD Health: $health Fuel: $fuel Number of Jumps Left: $numberOfJumpsLeft (display: \"Check Status\") :: Display System { (for: each _planet, ...$system)[ (if: _planet is \"RED\")[ (link: _planet)[ (display: \"Show Outcome - Red\") ] ] (if: _planet is \"GREEN\")[ (link: _planet)[ (display: \"Show Outcome - Green\") ] ] <br> ] } :: Explore Space 1 (link: \"Hyperjump\")[ (set: $fuel to it - 1) (set: $numberOfJumpsLeft to it - 1) (goto: \"Explore Space 2\") ] [(display: \"HUD\")]<HUD| (display: \"Generate System\") (display: \"Display System\") :: Show Outcome - Green { (set: _percentage to (random: 1, 10) ) (if: _percentage is 1)[ (set: _foundFuel to (random: 1, 2) ) Fuel was found in some wreckage. (+_foundFuel to fuel) (set: $fuel to it + _foundFuel) ] (else-if: _percentage is >= 6)[ (set: _foundHealth to (random: 1, 3) ) During a brief pause, the ship was able to be repaired. (+_foundHealth to health) (set: $health to it + _foundHealth ) ] (else:) [ Nothing happened. ] (replace: ?HUD)[(display: \"HUD\")] } :: Show Outcome - Red { (set: _percentage to (random: 1, 10) ) (if: _percentage is >= 6)[ (set: _foundHealth to (random: 1, 5) ) (set: _foundFuel to (random: 1, 3) ) The hostile environment damaged the ship, but extra fuel was found. (-_foundHealth to health and +_foundFuel to fuel) (set: $health to it - _foundHealth ) (set: $fuel to it + _foundFuel ) ] (else-if: _percentage <= 3)[ (set: _foundHealth to (random: 2, 7) ) A hostile ship attacked. (-_foundHealth to health) (set: $health to it - _foundHealth ) ] (else:)[ Nothing happened. ] (replace: ?HUD)[(display: \"HUD\")] } :: Explore Space 2 (link: \"Hyperjump\")[ (set: $fuel to it - 1) (set: $numberOfJumpsLeft to it - 1) (goto: \"Explore Space 1\") ] [(display: \"HUD\")]<HUD| (display: \"Generate System\") (display: \"Display System\") :: Check Status { (if: $health <= 0)[ (goto: \"Destroyed\") ] (if: $fuel <= 0)[ (goto: \"Lost in space\") ] (if: $numberOfJumpsLeft <= 0)[ (goto: \"Safe\") ] } :: Destroyed The ship exploded in flight. ###Game Over. :: Lost in space Without fuel, the ship tumbled and spun in the endless black. ###Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. ###Success! Twee Download","title":"Twee Code"},{"location":"spaceexploration/snowman/snowman_space_exploration.html","text":"\"Space Exploration\": Snowman (v1.3.0) # Summary # Games in the roguelike genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the _ .random() function to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the _ .random() function. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the window.story.render() function in combination with Underscore.js templating . Example # Download Twee Code # :: StoryTitle Space Exploration in Snowman :: UserScript[script] // Create a global setup object window.setup = window.setup || {}; // Add 'variables' object to setup window.setup.variables = {}; var _vars = window.setup.variables; _vars.health = 20; _vars.fuel = 4; _vars.system = []; _vars.numberOfJumpsLeft = 10; // Create global functions window.setup.functions = {}; var _functions = window.setup.functions; _functions.redOutcome = function() { var _vars = window.setup.variables; var _percentage = _.random(1, 10); var response = \"\"; if( _percentage >= 6) { var _foundHealth = _.random( 1, 5); var _foundFuel = _.random( 1, 3); response = \"The hostile environment damaged the ship, but extra fuel was found. -\" + _foundHealth + \" to health and +\" + _foundFuel + \" to fuel.\"; _vars.health -= _foundHealth; _vars.fuel += _foundFuel; } else { if( _percentage <= 3) { var _foundHealth = _.random(2, 7); response = \"A hostile ship attacked. -\" + _foundHealth + \" to health\"; _vars.health -= _foundHealth; } else { response = \"Nothing happened.\" } } return response; }; _functions.greenOutcome = function() { var _vars = window.setup.variables; var _percentage = _.random(1, 10); var response = \"\"; if( _percentage == 1) { var _foundFuel = _.random( 1, 2); response = \"Fuel was found in some wreckage. + \" + _foundFuel + \"to fuel\"; _vars.fuel += _foundFuel; } else { if( _percentage >= 6) { var _foundHealth = _.random(1, 3); response = \"During a brief pause, the ship was able to be repaired. +\" + _foundHealth + \" to health\"; _vars.health += _foundHealth; } else { response = \"Nothing happened.\" } } return response; }; :: Start [[Explore Space|Explore Space 1]] :: Explore Space 1 <div class=\"gameScreen\"> <% var _vars = window.setup.variables; %> <% _vars.fuel-- %> <% _vars.numberOfJumpsLeft-- %> [[ Hyperjump |Explore Space 2]] <div id=\"HUD\"> <%= window.story.render(\"HUD\") %> </div> <%= window.story.render(\"Generate System\") %> <div id=\"display\"></div> <%= window.story.render(\"Display System\") %> <%= window.story.render(\"Check Status\") %> </div> :: Explore Space 2 <div class=\"gameScreen\"> <% var _vars = window.setup.variables; %> <% _vars.fuel-- %> <% _vars.numberOfJumpsLeft-- %> [[ Hyperjump |Explore Space 1]] <div id=\"HUD\"> <%= window.story.render(\"HUD\") %> </div> <%= window.story.render(\"Generate System\") %> <div id=\"display\"></div> <%= window.story.render(\"Display System\") %> <%= window.story.render(\"Check Status\") %> </div> :: Generate System <script> var _vars = window.setup.variables; var planets =_.random(1, 4); _vars.system = new Array(planets); for(var i = 0; i < _vars.system.length; i++) { _vars.system[i] = _.sample([\"RED\", \"GREEN\"]); } </script> :: Display System <script> var _vars = window.setup.variables; // Wipe out current contents $(\"#display\").html(\"\"); for(var i = 0; i < _vars.system.length; i++) { if(_vars.system[i] == \"RED\") { var link = $(\"<a href='#'>RED</a>\") .click(function(e) { $( this ) .replaceWith( window.story.render(\"Show Outcome - Red\") ); return false; }); $(\"#display\").append( link ); $(\"#display\").append( \"<br>\" ); } if(_vars.system[i] == \"GREEN\") { var link = $(\"<a href='#'>GREEN</a>\") .click(function(e) { $( this ) .replaceWith( window.story.render(\"Show Outcome - Green\") ); return false; }); $(\"#display\").append( link ); $(\"#display\").append( \"<br>\" ); } } </script> :: Show Outcome - Red <%= window.setup.functions.redOutcome() %> <% $(\"#HUD\").html(window.story.render(\"HUD\")) %> <%= window.story.render(\"Check Status\") %> :: Show Outcome - Green <%= window.setup.functions.greenOutcome() %> <% $(\"#HUD\").html(window.story.render(\"HUD\")) %> <%= window.story.render(\"Check Status\") %> :: HUD Health: <%= window.setup.variables.health %> <br> Fuel: <%= window.setup.variables.fuel %> <br> Number of Jumps Left: <%= setup.variables.numberOfJumpsLeft %> <br> :: Destroyed The ship exploded in flight. <h3>Game Over</h3> :: Lost in space Without fuel, the ship tumbled and spun in the endless black. <h3>Game Over</h3> :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. <h3>Success!</h3> :: Check Status <script> var _vars = window.setup.variables; var status = \"\"; if(_vars.health <= 0) { status = window.story.render(\"Destroyed\"); } if(_vars.fuel <= 0) { status = window.story.render(\"Lost in space\"); } if(_vars.numberOfJumpsLeft <= 0) { status = window.story.render(\"Safe\"); } if(status != \"\") { $(\".gameScreen\").html(status); } </script> Twee Download","title":"Snowman"},{"location":"spaceexploration/snowman/snowman_space_exploration.html#space-exploration-snowman-v130","text":"","title":"\"Space Exploration\": Snowman (v1.3.0)"},{"location":"spaceexploration/snowman/snowman_space_exploration.html#summary","text":"Games in the roguelike genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the _ .random() function to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the _ .random() function. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the window.story.render() function in combination with Underscore.js templating .","title":"Summary"},{"location":"spaceexploration/snowman/snowman_space_exploration.html#example","text":"Download","title":"Example"},{"location":"spaceexploration/snowman/snowman_space_exploration.html#twee-code","text":":: StoryTitle Space Exploration in Snowman :: UserScript[script] // Create a global setup object window.setup = window.setup || {}; // Add 'variables' object to setup window.setup.variables = {}; var _vars = window.setup.variables; _vars.health = 20; _vars.fuel = 4; _vars.system = []; _vars.numberOfJumpsLeft = 10; // Create global functions window.setup.functions = {}; var _functions = window.setup.functions; _functions.redOutcome = function() { var _vars = window.setup.variables; var _percentage = _.random(1, 10); var response = \"\"; if( _percentage >= 6) { var _foundHealth = _.random( 1, 5); var _foundFuel = _.random( 1, 3); response = \"The hostile environment damaged the ship, but extra fuel was found. -\" + _foundHealth + \" to health and +\" + _foundFuel + \" to fuel.\"; _vars.health -= _foundHealth; _vars.fuel += _foundFuel; } else { if( _percentage <= 3) { var _foundHealth = _.random(2, 7); response = \"A hostile ship attacked. -\" + _foundHealth + \" to health\"; _vars.health -= _foundHealth; } else { response = \"Nothing happened.\" } } return response; }; _functions.greenOutcome = function() { var _vars = window.setup.variables; var _percentage = _.random(1, 10); var response = \"\"; if( _percentage == 1) { var _foundFuel = _.random( 1, 2); response = \"Fuel was found in some wreckage. + \" + _foundFuel + \"to fuel\"; _vars.fuel += _foundFuel; } else { if( _percentage >= 6) { var _foundHealth = _.random(1, 3); response = \"During a brief pause, the ship was able to be repaired. +\" + _foundHealth + \" to health\"; _vars.health += _foundHealth; } else { response = \"Nothing happened.\" } } return response; }; :: Start [[Explore Space|Explore Space 1]] :: Explore Space 1 <div class=\"gameScreen\"> <% var _vars = window.setup.variables; %> <% _vars.fuel-- %> <% _vars.numberOfJumpsLeft-- %> [[ Hyperjump |Explore Space 2]] <div id=\"HUD\"> <%= window.story.render(\"HUD\") %> </div> <%= window.story.render(\"Generate System\") %> <div id=\"display\"></div> <%= window.story.render(\"Display System\") %> <%= window.story.render(\"Check Status\") %> </div> :: Explore Space 2 <div class=\"gameScreen\"> <% var _vars = window.setup.variables; %> <% _vars.fuel-- %> <% _vars.numberOfJumpsLeft-- %> [[ Hyperjump |Explore Space 1]] <div id=\"HUD\"> <%= window.story.render(\"HUD\") %> </div> <%= window.story.render(\"Generate System\") %> <div id=\"display\"></div> <%= window.story.render(\"Display System\") %> <%= window.story.render(\"Check Status\") %> </div> :: Generate System <script> var _vars = window.setup.variables; var planets =_.random(1, 4); _vars.system = new Array(planets); for(var i = 0; i < _vars.system.length; i++) { _vars.system[i] = _.sample([\"RED\", \"GREEN\"]); } </script> :: Display System <script> var _vars = window.setup.variables; // Wipe out current contents $(\"#display\").html(\"\"); for(var i = 0; i < _vars.system.length; i++) { if(_vars.system[i] == \"RED\") { var link = $(\"<a href='#'>RED</a>\") .click(function(e) { $( this ) .replaceWith( window.story.render(\"Show Outcome - Red\") ); return false; }); $(\"#display\").append( link ); $(\"#display\").append( \"<br>\" ); } if(_vars.system[i] == \"GREEN\") { var link = $(\"<a href='#'>GREEN</a>\") .click(function(e) { $( this ) .replaceWith( window.story.render(\"Show Outcome - Green\") ); return false; }); $(\"#display\").append( link ); $(\"#display\").append( \"<br>\" ); } } </script> :: Show Outcome - Red <%= window.setup.functions.redOutcome() %> <% $(\"#HUD\").html(window.story.render(\"HUD\")) %> <%= window.story.render(\"Check Status\") %> :: Show Outcome - Green <%= window.setup.functions.greenOutcome() %> <% $(\"#HUD\").html(window.story.render(\"HUD\")) %> <%= window.story.render(\"Check Status\") %> :: HUD Health: <%= window.setup.variables.health %> <br> Fuel: <%= window.setup.variables.fuel %> <br> Number of Jumps Left: <%= setup.variables.numberOfJumpsLeft %> <br> :: Destroyed The ship exploded in flight. <h3>Game Over</h3> :: Lost in space Without fuel, the ship tumbled and spun in the endless black. <h3>Game Over</h3> :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. <h3>Success!</h3> :: Check Status <script> var _vars = window.setup.variables; var status = \"\"; if(_vars.health <= 0) { status = window.story.render(\"Destroyed\"); } if(_vars.fuel <= 0) { status = window.story.render(\"Lost in space\"); } if(_vars.numberOfJumpsLeft <= 0) { status = window.story.render(\"Safe\"); } if(status != \"\") { $(\".gameScreen\").html(status); } </script> Twee Download","title":"Twee Code"},{"location":"spaceexploration/sugarcube/sugarcube_space_exploration.html","text":"\"Space Exploration\": SugarCube (v2.18) # Summary # Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the random() function to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the random() function. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the <<include>> macro. Finally, to capture the permanence of many roguelike games, the <<goto>> macro is used to prevent the use of the normal undo/redo in SugarCube. To cleanly present the text, this example also uses both the <<silently>> macro, to disregard all output, and <<nobr>> macro, to collapse the whitespace. Example # Download Twee Code # :: StoryTitle Space Exploration in SugarCube :: Start [[Explore Space|Explore Space 1]] :: StoryInit <<set $health to 20>> <<set $fuel to 4>> <<set $system to [] >> <<set $numberOfJumpsLeft to 10>> :: Explore Space 1 <<link \"Hyperjump\">> <<set $fuel to $fuel - 1>> <<set $numberOfJumpsLeft to $numberOfJumpsLeft - 1>> <<goto \"Explore Space 2\">> <</link>> <div id=\"HUD\"> <<include \"HUD\">> </div> <<include \"Generate System\">> <<include \"Display System\">> :: Explore Space 2 <<link \"Hyperjump\">> <<set $fuel to $fuel - 1>> <<set $numberOfJumpsLeft to $numberOfJumpsLeft - 1>> <<goto \"Explore Space 1\">> <</link>> <div id=\"HUD\"> <<include \"HUD\">> </div> <<include \"Generate System\">> <<include \"Display System\">> :: Generate System <<silently>> <<set _planets to random(1, 4) >> <<set $system to new Array(_planets) >> <<for _i to 0; _i lt _planets; _i++>> <<set $system[_i] to either(\"RED\", \"GREEN\") >> <</for>> <</silently>> :: Display System <<nobr>> <<for _i to 0; _i lt $system.length; _i++>> <<if $system[_i] eq \"RED\">> <<linkreplace $system[_i]>> <<include \"Show Outcome - Red\">> <</linkreplace>> <</if>> <<if $system[_i] eq \"GREEN\">> <<linkreplace $system[_i]>> <<include \"Show Outcome - Green\">> <</linkreplace>> <</if>> <br> <</for>> <</nobr>> :: Show Outcome - Red <<nobr>> <<set _percentage to random(1, 10) >> <<if _percentage gte 6>> <<set _foundHealth to random( 1, 5) >> <<set _foundFuel to random( 1, 3) >> The hostile environment damaged the ship, but extra fuel was found. (-_foundHealth to health and +_foundFuel to fuel) <<set $health to $health - _foundHealth >> <<set $fuel to $fuel + _foundFuel >> <<elseif _percentage lte 3>> <<set _foundHealth to random(2, 7) >> A hostile ship attacked. (-_foundHealth to health) <<set $health to $health - _foundHealth >> <<else>> Nothing happened. <</if>> <<replace \"#HUD\">> <<include \"HUD\">> <</replace>> <</nobr>> :: Show Outcome - Green <<nobr>> <<set _percentage to random(1, 10)>> <<if _percentage eq 1>> <<set _foundFuel to random( 1, 2)>> Fuel was found in some wreckage. (+_foundFuel to fuel) <<set $fuel to $fuel + _foundFuel>> <<elseif _percentage gte 6>> <<set _foundHealth to random( 1, 3) >> During a brief pause, the ship was able to be repaired. (+_foundHealth to health) <<set $health to $health + _foundHealth>> <<else>> Nothing happened. <</if>> <<replace \"#HUD\">> <<include \"HUD\">> <</replace>> <</nobr>> :: HUD Health: $health Fuel: $fuel Number of Jumps Left: $numberOfJumpsLeft <<include \"Check Status\">> :: Destroyed The ship exploded in flight. !!!Game Over. :: Lost in space Without fuel, the ship tumbled and spun in the endless black. !!!Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. !!!Success! :: Check Status <<nobr>> <<if $health lte 0>> <<goto \"Destroyed\">> <</if>> <<if $fuel lte 0>> <<goto \"Lost in space\">> <</if>> <<if $numberOfJumpsLeft lte 0>> <<goto \"Safe\">> <</if>> <</nobr>> Twee Download","title":"SugarCube"},{"location":"spaceexploration/sugarcube/sugarcube_space_exploration.html#space-exploration-sugarcube-v218","text":"","title":"\"Space Exploration\": SugarCube (v2.18)"},{"location":"spaceexploration/sugarcube/sugarcube_space_exploration.html#summary","text":"Games in the rogue-like genre often have random events that influence player choices. Frequently, decisions can have lasting impact or even lead to an ending of play in that session or run depending on these random outcomes. Heavily inspired by FTL: Faster Than Light (2012), this example uses the random() function to generate a system of planets consisting of either RED, more risk and more reward, or GREEN, less risk and less reward. Upon entering a system of planets, the player can choose to visit these planets for different outcomes based on a series of choices and an additional use of the random() function. While traveling, the player must also balance the health of the ship, the number of jumps left, and the current fuel that are all displayed using the <<include>> macro. Finally, to capture the permanence of many roguelike games, the <<goto>> macro is used to prevent the use of the normal undo/redo in SugarCube. To cleanly present the text, this example also uses both the <<silently>> macro, to disregard all output, and <<nobr>> macro, to collapse the whitespace.","title":"Summary"},{"location":"spaceexploration/sugarcube/sugarcube_space_exploration.html#example","text":"Download","title":"Example"},{"location":"spaceexploration/sugarcube/sugarcube_space_exploration.html#twee-code","text":":: StoryTitle Space Exploration in SugarCube :: Start [[Explore Space|Explore Space 1]] :: StoryInit <<set $health to 20>> <<set $fuel to 4>> <<set $system to [] >> <<set $numberOfJumpsLeft to 10>> :: Explore Space 1 <<link \"Hyperjump\">> <<set $fuel to $fuel - 1>> <<set $numberOfJumpsLeft to $numberOfJumpsLeft - 1>> <<goto \"Explore Space 2\">> <</link>> <div id=\"HUD\"> <<include \"HUD\">> </div> <<include \"Generate System\">> <<include \"Display System\">> :: Explore Space 2 <<link \"Hyperjump\">> <<set $fuel to $fuel - 1>> <<set $numberOfJumpsLeft to $numberOfJumpsLeft - 1>> <<goto \"Explore Space 1\">> <</link>> <div id=\"HUD\"> <<include \"HUD\">> </div> <<include \"Generate System\">> <<include \"Display System\">> :: Generate System <<silently>> <<set _planets to random(1, 4) >> <<set $system to new Array(_planets) >> <<for _i to 0; _i lt _planets; _i++>> <<set $system[_i] to either(\"RED\", \"GREEN\") >> <</for>> <</silently>> :: Display System <<nobr>> <<for _i to 0; _i lt $system.length; _i++>> <<if $system[_i] eq \"RED\">> <<linkreplace $system[_i]>> <<include \"Show Outcome - Red\">> <</linkreplace>> <</if>> <<if $system[_i] eq \"GREEN\">> <<linkreplace $system[_i]>> <<include \"Show Outcome - Green\">> <</linkreplace>> <</if>> <br> <</for>> <</nobr>> :: Show Outcome - Red <<nobr>> <<set _percentage to random(1, 10) >> <<if _percentage gte 6>> <<set _foundHealth to random( 1, 5) >> <<set _foundFuel to random( 1, 3) >> The hostile environment damaged the ship, but extra fuel was found. (-_foundHealth to health and +_foundFuel to fuel) <<set $health to $health - _foundHealth >> <<set $fuel to $fuel + _foundFuel >> <<elseif _percentage lte 3>> <<set _foundHealth to random(2, 7) >> A hostile ship attacked. (-_foundHealth to health) <<set $health to $health - _foundHealth >> <<else>> Nothing happened. <</if>> <<replace \"#HUD\">> <<include \"HUD\">> <</replace>> <</nobr>> :: Show Outcome - Green <<nobr>> <<set _percentage to random(1, 10)>> <<if _percentage eq 1>> <<set _foundFuel to random( 1, 2)>> Fuel was found in some wreckage. (+_foundFuel to fuel) <<set $fuel to $fuel + _foundFuel>> <<elseif _percentage gte 6>> <<set _foundHealth to random( 1, 3) >> During a brief pause, the ship was able to be repaired. (+_foundHealth to health) <<set $health to $health + _foundHealth>> <<else>> Nothing happened. <</if>> <<replace \"#HUD\">> <<include \"HUD\">> <</replace>> <</nobr>> :: HUD Health: $health Fuel: $fuel Number of Jumps Left: $numberOfJumpsLeft <<include \"Check Status\">> :: Destroyed The ship exploded in flight. !!!Game Over. :: Lost in space Without fuel, the ship tumbled and spun in the endless black. !!!Game Over :: Safe After 10 hyperjumps, the ship left the hazardous area and called for help. !!!Success! :: Check Status <<nobr>> <<if $health lte 0>> <<goto \"Destroyed\">> <</if>> <<if $fuel lte 0>> <<goto \"Lost in space\">> <</if>> <<if $numberOfJumpsLeft lte 0>> <<goto \"Safe\">> <</if>> <</nobr>> Twee Download","title":"Twee Code"},{"location":"starting/twine2/adding_to_IFDB.html","text":"Adding to IFDB # The IFDB is a user-editable catalog of interactive fiction, starting from the earliest days of Adventure (1976) all the way to contemporary works. People use it to discover and discuss IF, and in particular, the showcase of stories on the twinery.org home page is based on data stored there. The one thing the IFDB is not, though, is an archive to store work. It only contains pointers to resources stored elsewhere on the web. Existing works can be submitted for inclusion in the IFDB by using the submission form . Most of the fields in the form are self-explanatory, but one that might seem confusing at first is the IFID. Note: A IFID is similar to ISBN numbers for books; they uniquely identify a work, no matter its format. In Twine 2, the IFID can be found through opening the story in Twine 2, clicking ont he story menu, and then choosing Story Statistics.","title":"Adding to IFDB"},{"location":"starting/twine2/adding_to_IFDB.html#adding-to-ifdb","text":"The IFDB is a user-editable catalog of interactive fiction, starting from the earliest days of Adventure (1976) all the way to contemporary works. People use it to discover and discuss IF, and in particular, the showcase of stories on the twinery.org home page is based on data stored there. The one thing the IFDB is not, though, is an archive to store work. It only contains pointers to resources stored elsewhere on the web. Existing works can be submitted for inclusion in the IFDB by using the submission form . Most of the fields in the form are self-explanatory, but one that might seem confusing at first is the IFID. Note: A IFID is similar to ISBN numbers for books; they uniquely identify a work, no matter its format. In Twine 2, the IFID can be found through opening the story in Twine 2, clicking ont he story menu, and then choosing Story Statistics.","title":"Adding to IFDB"},{"location":"starting/twine2/creatinglinks.html","text":"Creating Links # The easiest way to connect to passages is through a link . Passage Links # By default, passage links are one-way. Navigating the link means moving away from one to another. Link to Another Passage named \"Link to another passage\" # [[Link to another passage]] Link to Another Passage Named \"Different Passage\" # The pipe, \" | \", can be used to rename a link from its original to some other name for the same purpose. [[Link to another passage|Different Passage]] Link to Another Passage Named \"Different Passage\" Using Routing # Starting in Twine 2, to route links, arrows, \"->\" or \"<-\", can be used to point to the destination of the link. [[Link to another passage->Different Passage]] [[Different Passage<-Link to another passage]] Story Format Additions # SugarCube adds to the existing passage link syntax , allowing TwineScript and other things within links.","title":"Creating Links"},{"location":"starting/twine2/creatinglinks.html#creating-links","text":"The easiest way to connect to passages is through a link .","title":"Creating Links"},{"location":"starting/twine2/creatinglinks.html#passage-links","text":"By default, passage links are one-way. Navigating the link means moving away from one to another.","title":"Passage Links"},{"location":"starting/twine2/creatinglinks.html#link-to-another-passage-named-link-to-another-passage","text":"[[Link to another passage]]","title":"Link to Another Passage named \"Link to another passage\""},{"location":"starting/twine2/creatinglinks.html#link-to-another-passage-named-different-passage","text":"The pipe, \" | \", can be used to rename a link from its original to some other name for the same purpose. [[Link to another passage|Different Passage]]","title":"Link to Another Passage Named \"Different Passage\""},{"location":"starting/twine2/creatinglinks.html#link-to-another-passage-named-different-passage-using-routing","text":"Starting in Twine 2, to route links, arrows, \"->\" or \"<-\", can be used to point to the destination of the link. [[Link to another passage->Different Passage]] [[Different Passage<-Link to another passage]]","title":"Link to Another Passage Named \"Different Passage\" Using Routing"},{"location":"starting/twine2/creatinglinks.html#story-format-additions","text":"SugarCube adds to the existing passage link syntax , allowing TwineScript and other things within links.","title":"Story Format Additions"},{"location":"starting/twine2/firststory.html","text":"Twine 2: How to Create Your First Story # Information Before you create your first story using Twine 2, please consult the Where are my stories saved? page. Starting with a Story # Many Twine 2 projects begin with a story idea. For this example, the story idea will be that the player is an astronaut exploring the galaxy. They will encounter a planet like Earth, but with strange creatures instead of humans! When starting Twine 2, either the online or desktop version, it opens with the Story Listing . This is where all stories are stored and can be accessed. To create a new story, click on the \"+Story\" button on the right-hand sidebar. This will ask for a story title. Name this story Strange Encounter in Space and click on the \"+Add\" button. The new story is now added to the list and the Passages View is opened automatically! Editing Passages # The first passage added in Twine 2 is called \"Untitled Passage\". It will be positioned in the middle of the screen. Double-clicking (or tapping, on mobile) will open the passage for editing. Passages have names, optional tags, and content. By default, a passage will have the content of Double-click this passage to edit it. Change the content to the following: As soon as the hatch of your ship, the Coriolis, opens, you see the creatures swarming around you. There are many of them, more than you can easily count, and they are all continuously in motion. Close the passage editor either with the Escape key, or by clicking or tapping the X in the upper-right corner. Twine 2 automatically saves the passage when you close it! Playing a Story # With the passage closed, it's now time to play it! The bottom menu in the Passage View is the Story Menu. It allows for changing details about the story, navigating back to the Story Listing, and, for right now, playing a story. Click on the \"Play\" button in the bottom, right-hand corner. Twine 2 will the open up the story as a HTML file in a web browser. Playing with Online Twine 2 # When using the online version, the story will open in a new tab. Note: The URL in the online version of Twine 2 will look something like the following: https://twinery.org/2/#!/stories/2f3e4f18-2bde-4213-b29b-08a1e368804c/play . This is not a URL to access the story! The number part of the URL is a key to the local storage of the browser only. The story can be played and the new tab safely closed when done. (For continuing to edit, leave the tab open and Twine 2 will refresh it when the \"Play\" button is clicked again.) Playing with Desktop Twine 2 # When using the desktop version, Twine 2 will open a HTML stored in the temporary files of the operating system and in whatever the default web browser is for the system is. Unlike the online version, the desktop version of Twine 2 will create a new file every time the \"Play\" button is clicked. Connecting Passages # Return to the Passages View. Double-click (or tap, on mobile) the \"Untitled Passage\" again. This time, add the following at the bottom: [[Could this really be Earth!?]] In the background of editing the passage, Twine 2 will create a new passage called \"Could this really be Earth!?\". Note: The above use of double opening and closing square brackets is a passage link . In Twine 2, links connect passages. Close the passage editor either with the Escape key, or by clicking or tapping the X in the upper-right corner. There are now two passages! The first is \"Untitled Passage\" and the second is \"Could this really be Earth!?\". Clicking and dragging either passage shows that they are connected. They are \"linked!\" Play it Again # Click on the \"Play\" button again. In either a new tab or the existing play tab (depending on version or if closed previously), the story will update. A new link is added to the text that reads \"Could this really be Earth!?\". Passage links are not just connections between them, they are also hyperlinks between passages in a story. Clicking on the story will load a new passage. However, this passage, \"Could this really be Earth!?\", still has the default text of \"Double-click this passage to edit it.\" Return to the Passage View and double-click (or tap, on mobile) the \"Could this really be Earth!?\" passage. Change its contents to the following: This sure is a strange planet! It can't possibly be Earth. I must have gotten mixed up on my way here. Close the passage editor either with the Escape key, or by clicking or tapping the X in the upper-right corner. Testing a Passage # This time, instead of clicking on \"Play\", place the cursor over the passage in the Passage View. A new menu will appear with icons. Click on the triangle (\"Test story starting here\") button. Instead of beginning with the original passage, the story will start in the Debug mode and begin the story at the new passage. This is a very useful way to test individual passages and see their contents instead of having to navigate through a story. Testing a Story # Go back to the Passages View. In the lower, right-hand corner, click on the \"Test\" button. Like with testing from a single passage, this will open the story in Debug mode . This will open the story from the starting passage. Congratulations # Using Twine 2 follows the patterns outlined in this page: Starting with a story idea Adding passages and links Playing stories to experience it as a reader Testing both individual passages and the story as a whole","title":"First Story"},{"location":"starting/twine2/firststory.html#twine-2-how-to-create-your-first-story","text":"Information Before you create your first story using Twine 2, please consult the Where are my stories saved? page.","title":"Twine 2: How to Create Your First Story"},{"location":"starting/twine2/firststory.html#starting-with-a-story","text":"Many Twine 2 projects begin with a story idea. For this example, the story idea will be that the player is an astronaut exploring the galaxy. They will encounter a planet like Earth, but with strange creatures instead of humans! When starting Twine 2, either the online or desktop version, it opens with the Story Listing . This is where all stories are stored and can be accessed. To create a new story, click on the \"+Story\" button on the right-hand sidebar. This will ask for a story title. Name this story Strange Encounter in Space and click on the \"+Add\" button. The new story is now added to the list and the Passages View is opened automatically!","title":"Starting with a Story"},{"location":"starting/twine2/firststory.html#editing-passages","text":"The first passage added in Twine 2 is called \"Untitled Passage\". It will be positioned in the middle of the screen. Double-clicking (or tapping, on mobile) will open the passage for editing. Passages have names, optional tags, and content. By default, a passage will have the content of Double-click this passage to edit it. Change the content to the following: As soon as the hatch of your ship, the Coriolis, opens, you see the creatures swarming around you. There are many of them, more than you can easily count, and they are all continuously in motion. Close the passage editor either with the Escape key, or by clicking or tapping the X in the upper-right corner. Twine 2 automatically saves the passage when you close it!","title":"Editing Passages"},{"location":"starting/twine2/firststory.html#playing-a-story","text":"With the passage closed, it's now time to play it! The bottom menu in the Passage View is the Story Menu. It allows for changing details about the story, navigating back to the Story Listing, and, for right now, playing a story. Click on the \"Play\" button in the bottom, right-hand corner. Twine 2 will the open up the story as a HTML file in a web browser.","title":"Playing a Story"},{"location":"starting/twine2/firststory.html#playing-with-online-twine-2","text":"When using the online version, the story will open in a new tab. Note: The URL in the online version of Twine 2 will look something like the following: https://twinery.org/2/#!/stories/2f3e4f18-2bde-4213-b29b-08a1e368804c/play . This is not a URL to access the story! The number part of the URL is a key to the local storage of the browser only. The story can be played and the new tab safely closed when done. (For continuing to edit, leave the tab open and Twine 2 will refresh it when the \"Play\" button is clicked again.)","title":"Playing with Online Twine 2"},{"location":"starting/twine2/firststory.html#playing-with-desktop-twine-2","text":"When using the desktop version, Twine 2 will open a HTML stored in the temporary files of the operating system and in whatever the default web browser is for the system is. Unlike the online version, the desktop version of Twine 2 will create a new file every time the \"Play\" button is clicked.","title":"Playing with Desktop Twine 2"},{"location":"starting/twine2/firststory.html#connecting-passages","text":"Return to the Passages View. Double-click (or tap, on mobile) the \"Untitled Passage\" again. This time, add the following at the bottom: [[Could this really be Earth!?]] In the background of editing the passage, Twine 2 will create a new passage called \"Could this really be Earth!?\". Note: The above use of double opening and closing square brackets is a passage link . In Twine 2, links connect passages. Close the passage editor either with the Escape key, or by clicking or tapping the X in the upper-right corner. There are now two passages! The first is \"Untitled Passage\" and the second is \"Could this really be Earth!?\". Clicking and dragging either passage shows that they are connected. They are \"linked!\"","title":"Connecting Passages"},{"location":"starting/twine2/firststory.html#play-it-again","text":"Click on the \"Play\" button again. In either a new tab or the existing play tab (depending on version or if closed previously), the story will update. A new link is added to the text that reads \"Could this really be Earth!?\". Passage links are not just connections between them, they are also hyperlinks between passages in a story. Clicking on the story will load a new passage. However, this passage, \"Could this really be Earth!?\", still has the default text of \"Double-click this passage to edit it.\" Return to the Passage View and double-click (or tap, on mobile) the \"Could this really be Earth!?\" passage. Change its contents to the following: This sure is a strange planet! It can't possibly be Earth. I must have gotten mixed up on my way here. Close the passage editor either with the Escape key, or by clicking or tapping the X in the upper-right corner.","title":"Play it Again"},{"location":"starting/twine2/firststory.html#testing-a-passage","text":"This time, instead of clicking on \"Play\", place the cursor over the passage in the Passage View. A new menu will appear with icons. Click on the triangle (\"Test story starting here\") button. Instead of beginning with the original passage, the story will start in the Debug mode and begin the story at the new passage. This is a very useful way to test individual passages and see their contents instead of having to navigate through a story.","title":"Testing a Passage"},{"location":"starting/twine2/firststory.html#testing-a-story","text":"Go back to the Passages View. In the lower, right-hand corner, click on the \"Test\" button. Like with testing from a single passage, this will open the story in Debug mode . This will open the story from the starting passage.","title":"Testing a Story"},{"location":"starting/twine2/firststory.html#congratulations","text":"Using Twine 2 follows the patterns outlined in this page: Starting with a story idea Adding passages and links Playing stories to experience it as a reader Testing both individual passages and the story as a whole","title":"Congratulations"},{"location":"starting/twine2/review.html","text":"Reviewing Stories # Twine does more than simply play and publish files. It also provide functionality to produce proofreading versions of stories. Proofing Copy # When in the Passages View, the Story Menu can be accessed for that story. Clicking on the View Proofing Copy option opens the currently selected Proofing Format. Like with testing or playing a story, this will open in a new tab. Note: By default, the proofing format used is Paperthin. This shows the text contents of all passages but does not include the Story JavaScript or Story Stylesheet content. Using Proofing Copies # Proofing copies are designed, as their name implies, for proofreading . For larger, potentially complex stories, often the text content needs to be reviewed or adjusted outside of editing the individual passages within the story. Proofing formats allow an author to produce something that includes only the text of the story itself. This could then be passed to an editor or other people.","title":"Reviewing Stories"},{"location":"starting/twine2/review.html#reviewing-stories","text":"Twine does more than simply play and publish files. It also provide functionality to produce proofreading versions of stories.","title":"Reviewing Stories"},{"location":"starting/twine2/review.html#proofing-copy","text":"When in the Passages View, the Story Menu can be accessed for that story. Clicking on the View Proofing Copy option opens the currently selected Proofing Format. Like with testing or playing a story, this will open in a new tab. Note: By default, the proofing format used is Paperthin. This shows the text contents of all passages but does not include the Story JavaScript or Story Stylesheet content.","title":"Proofing Copy"},{"location":"starting/twine2/review.html#using-proofing-copies","text":"Proofing copies are designed, as their name implies, for proofreading . For larger, potentially complex stories, often the text content needs to be reviewed or adjusted outside of editing the individual passages within the story. Proofing formats allow an author to produce something that includes only the text of the story itself. This could then be passed to an editor or other people.","title":"Using Proofing Copies"},{"location":"starting/twine2/storyformat.html","text":"Choosing a Story Format # A published HTML in Twine 2 does not contain the editor itself. That would be a waste of space! Instead, files are bundled with a Story Format . Explaining a Story Format # Think about a car. A story format is the engine . It drives the story, and works with the existing structure. Without it, the HTML file cannot \"run!\" When a Twine 2 story is published, the story format is encoded and added to the HTML file. When run in a browser, the \"engine\" reads the story from the HTML and shows it to the user. Built-in Story Formats # There are multiple story formats that come with Twine 2, and they serve different purposes. Harlowe is the default story format, and is focused on making it easy to add basic interaction to your stories in a readable, concise way. Snowman is designed to be used by people who are familiar with writing JavaScript and CSS, two broadly-used Web technologies, and makes it easy to build a heavily-customized reading experience. SugarCube comes from the world of Twine 1. It gives readers the ability to save their progress into separate slots and provides a large collection of functionality for authors. Chapbook the first of a \"second-generation\" story formats, it is designed for newer users with advanced functionality built into its inserts and modifiers. Adding New Story Formats # Other developers and communities have created their own story formats. New or versions of existing, loaded story formats can be added through the \"Add a New Format\" Note: Story format URLs must end in .js and, for the online version, be on a public website or service using http:// or https:// . With the desktop version, the file:// protocol can be used. Once added, they can be selected from the Story Menu of a story and used during play, testing, and publishing.","title":"Choosing Story Formats"},{"location":"starting/twine2/storyformat.html#choosing-a-story-format","text":"A published HTML in Twine 2 does not contain the editor itself. That would be a waste of space! Instead, files are bundled with a Story Format .","title":"Choosing a Story Format"},{"location":"starting/twine2/storyformat.html#explaining-a-story-format","text":"Think about a car. A story format is the engine . It drives the story, and works with the existing structure. Without it, the HTML file cannot \"run!\" When a Twine 2 story is published, the story format is encoded and added to the HTML file. When run in a browser, the \"engine\" reads the story from the HTML and shows it to the user.","title":"Explaining a Story Format"},{"location":"starting/twine2/storyformat.html#built-in-story-formats","text":"There are multiple story formats that come with Twine 2, and they serve different purposes. Harlowe is the default story format, and is focused on making it easy to add basic interaction to your stories in a readable, concise way. Snowman is designed to be used by people who are familiar with writing JavaScript and CSS, two broadly-used Web technologies, and makes it easy to build a heavily-customized reading experience. SugarCube comes from the world of Twine 1. It gives readers the ability to save their progress into separate slots and provides a large collection of functionality for authors. Chapbook the first of a \"second-generation\" story formats, it is designed for newer users with advanced functionality built into its inserts and modifiers.","title":"Built-in Story Formats"},{"location":"starting/twine2/storyformat.html#adding-new-story-formats","text":"Other developers and communities have created their own story formats. New or versions of existing, loaded story formats can be added through the \"Add a New Format\" Note: Story format URLs must end in .js and, for the online version, be on a public website or service using http:// or https:// . With the desktop version, the file:// protocol can be used. Once added, they can be selected from the Story Menu of a story and used during play, testing, and publishing.","title":"Adding New Story Formats"},{"location":"statichealthbars/chapbook/chapbook_statichealthbars.html","text":"\"Static Healthbars\": Chapbook (v1.0.0) # Summary # \"Static Healthbars\" demonstrates how to write HTML elements using JavaScript in Chapbook. Through the [JavaScript] can be included in a passage. Chapbook also provides the engine.state.get() and engine.state.set() functions for getting and setting story variables. Using these and the write() function, dynamic values can be created, accessed, and combined to produce static \"healthbars\" using the <progress> and <meter> HTML elements. Example # Download Twee Code # :: StoryTitle Chapbook: Static Healthbars :: Start [JavaScript] // Create a global variable, health engine.state.set('health', 80); // Get the current value of 'health' let health = engine.state.get('health'); // Write description write(\"Show a healthbar using a Progress element:<br>\"); // Write the progress element with dynamic value write('<progress value=\"' + health + '\" max=\"100\"></progress><br>'); // Write description write(\"Show a healthbar using a Meter element:<br>\"); // Write the meter element with dynamic value write('<meter value=\"' + health + '\" min=\"0\" max=\"100\"></meter>'); Twee Download","title":"Chapbook"},{"location":"statichealthbars/chapbook/chapbook_statichealthbars.html#static-healthbars-chapbook-v100","text":"","title":"\"Static Healthbars\": Chapbook (v1.0.0)"},{"location":"statichealthbars/chapbook/chapbook_statichealthbars.html#summary","text":"\"Static Healthbars\" demonstrates how to write HTML elements using JavaScript in Chapbook. Through the [JavaScript] can be included in a passage. Chapbook also provides the engine.state.get() and engine.state.set() functions for getting and setting story variables. Using these and the write() function, dynamic values can be created, accessed, and combined to produce static \"healthbars\" using the <progress> and <meter> HTML elements.","title":"Summary"},{"location":"statichealthbars/chapbook/chapbook_statichealthbars.html#example","text":"Download","title":"Example"},{"location":"statichealthbars/chapbook/chapbook_statichealthbars.html#twee-code","text":":: StoryTitle Chapbook: Static Healthbars :: Start [JavaScript] // Create a global variable, health engine.state.set('health', 80); // Get the current value of 'health' let health = engine.state.get('health'); // Write description write(\"Show a healthbar using a Progress element:<br>\"); // Write the progress element with dynamic value write('<progress value=\"' + health + '\" max=\"100\"></progress><br>'); // Write description write(\"Show a healthbar using a Meter element:<br>\"); // Write the meter element with dynamic value write('<meter value=\"' + health + '\" min=\"0\" max=\"100\"></meter>'); Twee Download","title":"Twee Code"},{"location":"statichealthbars/harlowe/harlowe_statichealthbars.html","text":"\"Static Healthbars\": Harlowe (v2.0) # Summary # \"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, the (print:) macro is used to create <progress> and <meter> elements. A (text:) macro is also used to temporarily convert the current Numeric value of the $heath story variable into a String value. Example # Download Twee Code # :: StoryTitle Static Healthbars for Harlowe :: Start (set: $health to 80) Show a healthbar using a Progress element: (print: '<progress value=\"' + (text: $health) + '\" max=\"100\"></progress>') Show a healthbar using a Meter element: (print: '<meter value=\"' + (text: $health) + '\" min=\"0\" max=\"100\"></meter>') Twee Download","title":"Harlowe"},{"location":"statichealthbars/harlowe/harlowe_statichealthbars.html#static-healthbars-harlowe-v20","text":"","title":"\"Static Healthbars\": Harlowe (v2.0)"},{"location":"statichealthbars/harlowe/harlowe_statichealthbars.html#summary","text":"\"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, the (print:) macro is used to create <progress> and <meter> elements. A (text:) macro is also used to temporarily convert the current Numeric value of the $heath story variable into a String value.","title":"Summary"},{"location":"statichealthbars/harlowe/harlowe_statichealthbars.html#example","text":"Download","title":"Example"},{"location":"statichealthbars/harlowe/harlowe_statichealthbars.html#twee-code","text":":: StoryTitle Static Healthbars for Harlowe :: Start (set: $health to 80) Show a healthbar using a Progress element: (print: '<progress value=\"' + (text: $health) + '\" max=\"100\"></progress>') Show a healthbar using a Meter element: (print: '<meter value=\"' + (text: $health) + '\" min=\"0\" max=\"100\"></meter>') Twee Download","title":"Twee Code"},{"location":"statichealthbars/snowman/snowman_statichealthbars.html","text":"\"Static Healthbars\": Snowman (v1.3) # Summary # \"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, Underscore template functionality is used to create <progress> and <meter> elements. Example # Download Twee Code # :: StoryTitle Static Healthbars in Snowman :: Start <% window.setup = {}; window.setup.health = 80; %> Show a healthbar using a Progress element: <%= '<progress value=\"' + window.setup.health + '\" max=\"100\"></progress>' %> Show a healthbar using a Meter element: <%= '<meter value=\"' + window.setup.health + '\" min=\"0\" max=\"100\"></meter>' %> Twee Download","title":"Snowman"},{"location":"statichealthbars/snowman/snowman_statichealthbars.html#static-healthbars-snowman-v13","text":"","title":"\"Static Healthbars\": Snowman (v1.3)"},{"location":"statichealthbars/snowman/snowman_statichealthbars.html#summary","text":"\"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, Underscore template functionality is used to create <progress> and <meter> elements.","title":"Summary"},{"location":"statichealthbars/snowman/snowman_statichealthbars.html#example","text":"Download","title":"Example"},{"location":"statichealthbars/snowman/snowman_statichealthbars.html#twee-code","text":":: StoryTitle Static Healthbars in Snowman :: Start <% window.setup = {}; window.setup.health = 80; %> Show a healthbar using a Progress element: <%= '<progress value=\"' + window.setup.health + '\" max=\"100\"></progress>' %> Show a healthbar using a Meter element: <%= '<meter value=\"' + window.setup.health + '\" min=\"0\" max=\"100\"></meter>' %> Twee Download","title":"Twee Code"},{"location":"statichealthbars/sugarcube/sugarcube_statichealthbars.html","text":"\"Static Healthbars\": SugarCube (v2.18) # Summary # \"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, Attribute Directive markup is used to inject the current value of the $heath story variable into the <progress> and <meter> elements. Example # Download Twee Code # :: StoryTitle Static Healthbars for SugarCube :: Start <<set $health to 80>> Show a healthbar using a Progress element: <progress @value=\"$health\" max=\"100\"></progress> Show a healthbar using a Meter element: <meter @value=\"$health\" min=\"0\" max=\"100\"></meter> Twee Download","title":"SugarCube"},{"location":"statichealthbars/sugarcube/sugarcube_statichealthbars.html#static-healthbars-sugarcube-v218","text":"","title":"\"Static Healthbars\": SugarCube (v2.18)"},{"location":"statichealthbars/sugarcube/sugarcube_statichealthbars.html#summary","text":"\"Static Healthbars\" demonstrates how to write HTML elements using variable values. In this example, Attribute Directive markup is used to inject the current value of the $heath story variable into the <progress> and <meter> elements.","title":"Summary"},{"location":"statichealthbars/sugarcube/sugarcube_statichealthbars.html#example","text":"Download","title":"Example"},{"location":"statichealthbars/sugarcube/sugarcube_statichealthbars.html#twee-code","text":":: StoryTitle Static Healthbars for SugarCube :: Start <<set $health to 80>> Show a healthbar using a Progress element: <progress @value=\"$health\" max=\"100\"></progress> Show a healthbar using a Meter element: <meter @value=\"$health\" min=\"0\" max=\"100\"></meter> Twee Download","title":"Twee Code"},{"location":"storyandpassage/chapbook/chapbook_storyandpassage.html","text":"\"Story and Passage API\": Chapbook (v1.0.0) # Summary # Often, it can be useful to access information about the story or other passages while it is running. In Chapbook, the engine.story object provides two functions, passageNamed() and passageWithId() , for accessing other passages. Combined with the [JavaScript] modifier, these functions and values they return when given existing passage names, can be used to show the name and source of one passage in another. Example # Download Twee Code # :: StoryTitle Chapbook: Story and Passage API :: Start The title of this story is \"{story.name}\". The title of this passage is \"{passage.name}\". [JavaScript] // Find a passage by name let storagePassage = engine.story.passageNamed(\"Storage\"); // Write the name write('The name of the passage is \"' + storagePassage.name + '\".<br>'); // Write the source write('The name of the passage is \"' + storagePassage.source + '\".<br>'); :: Storage This is content in the storage passage! Twee Download","title":"Chapbook"},{"location":"storyandpassage/chapbook/chapbook_storyandpassage.html#story-and-passage-api-chapbook-v100","text":"","title":"\"Story and Passage API\": Chapbook (v1.0.0)"},{"location":"storyandpassage/chapbook/chapbook_storyandpassage.html#summary","text":"Often, it can be useful to access information about the story or other passages while it is running. In Chapbook, the engine.story object provides two functions, passageNamed() and passageWithId() , for accessing other passages. Combined with the [JavaScript] modifier, these functions and values they return when given existing passage names, can be used to show the name and source of one passage in another.","title":"Summary"},{"location":"storyandpassage/chapbook/chapbook_storyandpassage.html#example","text":"Download","title":"Example"},{"location":"storyandpassage/chapbook/chapbook_storyandpassage.html#twee-code","text":":: StoryTitle Chapbook: Story and Passage API :: Start The title of this story is \"{story.name}\". The title of this passage is \"{passage.name}\". [JavaScript] // Find a passage by name let storagePassage = engine.story.passageNamed(\"Storage\"); // Write the name write('The name of the passage is \"' + storagePassage.name + '\".<br>'); // Write the source write('The name of the passage is \"' + storagePassage.source + '\".<br>'); :: Storage This is content in the storage passage! Twee Download","title":"Twee Code"},{"location":"storyandpassage/snowman/snowman_storyandpassage.html","text":"\"Story and Passage API\": Snowman (v1.4) # Summary # Often, it can be useful to access information about the story or other passages while it is running. The window.story.passage() function and window.passage.name property in Snowman allow for getting this type of information. Example # Download Twee Code # :: StoryTitle Story and Passage API in Snowman :: Start The title of this story is \"<%= window.story.name %>.\" <% window.setup = {}; window.setup.passage = window.story.passage(\"Storage\"); %> The name of the passage is \"<%= setup.passage.name %>.\" The source of the passage is \"<%= setup.passage.source %>\" :: Storage This is content in the storage passage! Twee Download","title":"Snowman"},{"location":"storyandpassage/snowman/snowman_storyandpassage.html#story-and-passage-api-snowman-v14","text":"","title":"\"Story and Passage API\": Snowman (v1.4)"},{"location":"storyandpassage/snowman/snowman_storyandpassage.html#summary","text":"Often, it can be useful to access information about the story or other passages while it is running. The window.story.passage() function and window.passage.name property in Snowman allow for getting this type of information.","title":"Summary"},{"location":"storyandpassage/snowman/snowman_storyandpassage.html#example","text":"Download","title":"Example"},{"location":"storyandpassage/snowman/snowman_storyandpassage.html#twee-code","text":":: StoryTitle Story and Passage API in Snowman :: Start The title of this story is \"<%= window.story.name %>.\" <% window.setup = {}; window.setup.passage = window.story.passage(\"Storage\"); %> The name of the passage is \"<%= setup.passage.name %>.\" The source of the passage is \"<%= setup.passage.source %>\" :: Storage This is content in the storage passage! Twee Download","title":"Twee Code"},{"location":"storyandpassage/sugarcube/sugarcube_storyandpassage.html","text":"\"Story and Passage API\": SugarCube (v2.18) # Summary # Often, it can be useful to access information about the story or other passages while it is running. The Story and Passage APIs in SugarCube allow for getting this type of information. Example # Download Twee Code # :: StoryTitle Story and Passage API in SugarCube :: Start The title of this story is \"<<print Story.title >>.\" <<set $passage to Story.get(\"Storage\")>> The title of the passage is \"<<print $passage.title>>.\" The text of the passage is \"<<print $passage.text >>\" :: Storage This is content in the storage passage! Twee Download","title":"SugarCube"},{"location":"storyandpassage/sugarcube/sugarcube_storyandpassage.html#story-and-passage-api-sugarcube-v218","text":"","title":"\"Story and Passage API\": SugarCube (v2.18)"},{"location":"storyandpassage/sugarcube/sugarcube_storyandpassage.html#summary","text":"Often, it can be useful to access information about the story or other passages while it is running. The Story and Passage APIs in SugarCube allow for getting this type of information.","title":"Summary"},{"location":"storyandpassage/sugarcube/sugarcube_storyandpassage.html#example","text":"Download","title":"Example"},{"location":"storyandpassage/sugarcube/sugarcube_storyandpassage.html#twee-code","text":":: StoryTitle Story and Passage API in SugarCube :: Start The title of this story is \"<<print Story.title >>.\" <<set $passage to Story.get(\"Storage\")>> The title of the passage is \"<<print $passage.title>>.\" The text of the passage is \"<<print $passage.text >>\" :: Storage This is content in the storage passage! Twee Download","title":"Twee Code"},{"location":"storystyling/chapbook/chapbook_storystyling.html","text":"\"Variable Story Styling\": Chapbook (v1.0.0) # Summary # Using the [CSS] modifier in Chapbook, it is possible to combine expressions with variables and change the text and background colors dynamically. This examples creates a variable color and changes its value in the Vars Section of two passages. Example # Download Twee Code # :: StoryTitle Chapbook: Variable Story Styling :: Start color: \"green\" -- [CSS] #page article { color: {color}; } [continued] This text will be in green. [[Switch to red text]] :: Switch to red text color: \"red\" -- [CSS] #page article { color: {color}; } [continued] This text will be in red. [[Switch to green text->Start]] Twee Download","title":"Chapbook"},{"location":"storystyling/chapbook/chapbook_storystyling.html#variable-story-styling-chapbook-v100","text":"","title":"\"Variable Story Styling\": Chapbook (v1.0.0)"},{"location":"storystyling/chapbook/chapbook_storystyling.html#summary","text":"Using the [CSS] modifier in Chapbook, it is possible to combine expressions with variables and change the text and background colors dynamically. This examples creates a variable color and changes its value in the Vars Section of two passages.","title":"Summary"},{"location":"storystyling/chapbook/chapbook_storystyling.html#example","text":"Download","title":"Example"},{"location":"storystyling/chapbook/chapbook_storystyling.html#twee-code","text":":: StoryTitle Chapbook: Variable Story Styling :: Start color: \"green\" -- [CSS] #page article { color: {color}; } [continued] This text will be in green. [[Switch to red text]] :: Switch to red text color: \"red\" -- [CSS] #page article { color: {color}; } [continued] This text will be in red. [[Switch to green text->Start]] Twee Download","title":"Twee Code"},{"location":"storystyling/harlowe/harlowe_storystyling.html","text":"\"Variable Story Styling\": Harlowe (v2.0) # Summary # \"Variable Story Styling\" demonstrates how to combine the (background:) and (color:) macros as storied in a variable. Combined with the (enchant:) macro, the named hook ?Page is used to select the entire page for the application of the background and color changes in each passage. Example # Download Twee Code # :: StoryTitle Variable Story Styling in Harlowe :: Start (set: $storyStyle to (background: white) + (color: green) ) (enchant: ?Page, $storyStyle) This text is green on a white background. [[Next Passage]] :: Next Passage (set: $storyStyle to (background: black) + (color: white) ) (enchant: ?Page, $storyStyle) This text is white on a black background. Twee Download","title":"Harlowe"},{"location":"storystyling/harlowe/harlowe_storystyling.html#variable-story-styling-harlowe-v20","text":"","title":"\"Variable Story Styling\": Harlowe (v2.0)"},{"location":"storystyling/harlowe/harlowe_storystyling.html#summary","text":"\"Variable Story Styling\" demonstrates how to combine the (background:) and (color:) macros as storied in a variable. Combined with the (enchant:) macro, the named hook ?Page is used to select the entire page for the application of the background and color changes in each passage.","title":"Summary"},{"location":"storystyling/harlowe/harlowe_storystyling.html#example","text":"Download","title":"Example"},{"location":"storystyling/harlowe/harlowe_storystyling.html#twee-code","text":":: StoryTitle Variable Story Styling in Harlowe :: Start (set: $storyStyle to (background: white) + (color: green) ) (enchant: ?Page, $storyStyle) This text is green on a white background. [[Next Passage]] :: Next Passage (set: $storyStyle to (background: black) + (color: white) ) (enchant: ?Page, $storyStyle) This text is white on a black background. Twee Download","title":"Twee Code"},{"location":"storystyling/snowman/snowman_storystyling.html","text":"\"Variable Story Styling\": Snowman (v1.3.0) # Summary # \"Variable Story Styling\" demonstrates how to use the toggleClass() jQuery function to switch between two pre-defined style rule-sets. Used with the \u201cbody\u201d selector, the entire page is selected and the classes toggled when the function is called. Example # Download Twee Code # :: StoryTitle Variable Story Styling in Snowman :: UserStylesheet[stylesheet] .green { background: white; color: green; } .white { background: black; color: white; } :: Start This text is green on a white background. <% s.styling = \"green\"; $(\"body\").toggleClass(s.styling); %> [[Next Passage]] :: Next Passage This text is white on a black background. <% s.styling = \"white\"; $(\"body\").toggleClass(s.styling); %> Twee Download","title":"Snowman"},{"location":"storystyling/snowman/snowman_storystyling.html#variable-story-styling-snowman-v130","text":"","title":"\"Variable Story Styling\": Snowman (v1.3.0)"},{"location":"storystyling/snowman/snowman_storystyling.html#summary","text":"\"Variable Story Styling\" demonstrates how to use the toggleClass() jQuery function to switch between two pre-defined style rule-sets. Used with the \u201cbody\u201d selector, the entire page is selected and the classes toggled when the function is called.","title":"Summary"},{"location":"storystyling/snowman/snowman_storystyling.html#example","text":"Download","title":"Example"},{"location":"storystyling/snowman/snowman_storystyling.html#twee-code","text":":: StoryTitle Variable Story Styling in Snowman :: UserStylesheet[stylesheet] .green { background: white; color: green; } .white { background: black; color: white; } :: Start This text is green on a white background. <% s.styling = \"green\"; $(\"body\").toggleClass(s.styling); %> [[Next Passage]] :: Next Passage This text is white on a black background. <% s.styling = \"white\"; $(\"body\").toggleClass(s.styling); %> Twee Download","title":"Twee Code"},{"location":"storystyling/sugarcube/sugarcube_storystyling.html","text":"\"Variable Story Styling\": SugarCube (v2.18) # Summary # \"Variable Story Styling\" demonstrates how to use the <<toggleClass>> macro to switch between two pre-defined style rule-sets. Combined with the \"body\" selector, the entire page is selected and the classes are switched when the macro is used. Example # Download Twee Code # :: StoryTitle Variable Story Styling in SugarCube :: UserStylesheet[stylesheet] .green { background: white; color: green; } .white { background: black; color: white; } :: Start <<set $classToShow to \"green\">> This text is green on a white background. <<toggleclass \"body\" $classToShow>> [[Next Passage]] :: Next Passage <<set $classToShow to \"white\">> This text is white on a black background. <<toggleclass \"body\" $classToShow>> Twee Download","title":"SugarCube"},{"location":"storystyling/sugarcube/sugarcube_storystyling.html#variable-story-styling-sugarcube-v218","text":"","title":"\"Variable Story Styling\": SugarCube (v2.18)"},{"location":"storystyling/sugarcube/sugarcube_storystyling.html#summary","text":"\"Variable Story Styling\" demonstrates how to use the <<toggleClass>> macro to switch between two pre-defined style rule-sets. Combined with the \"body\" selector, the entire page is selected and the classes are switched when the macro is used.","title":"Summary"},{"location":"storystyling/sugarcube/sugarcube_storystyling.html#example","text":"Download","title":"Example"},{"location":"storystyling/sugarcube/sugarcube_storystyling.html#twee-code","text":":: StoryTitle Variable Story Styling in SugarCube :: UserStylesheet[stylesheet] .green { background: white; color: green; } .white { background: black; color: white; } :: Start <<set $classToShow to \"green\">> This text is green on a white background. <<toggleclass \"body\" $classToShow>> [[Next Passage]] :: Next Passage <<set $classToShow to \"white\">> This text is white on a black background. <<toggleclass \"body\" $classToShow>> Twee Download","title":"Twee Code"},{"location":"template_type/sugarcube/sugarcube_templates.html","text":"\"Templates\": SugarCube (v2.29) # Summary # Starting in SugarCube 2.29, Templates can be used to create a new special type of value that looks like a variable but acts like a macro. Templates follow the same rules as variables (limited to letters, numbers, and the underscore), but they start with the question mark, ? , and can contain the hyphen in their name. Note: Templates are added using the Template API in SugarCube. They must be defined before they appear in a story. This example also uses the StoryInit special passage name with the <<script>> macro to create a template before the first passage is shown. Example # Download Twee Code # :: StoryTitle SugarCube: Templates :: Start You see a pirate before you. Pirate: \"?pirate\" :: StoryInit <<script>> Template.add('pirate', function () { return \"Hello, me hardy!\"; }); <</script>> Twee Download","title":"SugarCube"},{"location":"template_type/sugarcube/sugarcube_templates.html#templates-sugarcube-v229","text":"","title":"\"Templates\": SugarCube (v2.29)"},{"location":"template_type/sugarcube/sugarcube_templates.html#summary","text":"Starting in SugarCube 2.29, Templates can be used to create a new special type of value that looks like a variable but acts like a macro. Templates follow the same rules as variables (limited to letters, numbers, and the underscore), but they start with the question mark, ? , and can contain the hyphen in their name. Note: Templates are added using the Template API in SugarCube. They must be defined before they appear in a story. This example also uses the StoryInit special passage name with the <<script>> macro to create a template before the first passage is shown.","title":"Summary"},{"location":"template_type/sugarcube/sugarcube_templates.html#example","text":"Download","title":"Example"},{"location":"template_type/sugarcube/sugarcube_templates.html#twee-code","text":":: StoryTitle SugarCube: Templates :: Start You see a pirate before you. Pirate: \"?pirate\" :: StoryInit <<script>> Template.add('pirate', function () { return \"Hello, me hardy!\"; }); <</script>> Twee Download","title":"Twee Code"},{"location":"terms/terms_cookbook.html","text":"Cookbook # The idea for a Twine Cookbook was heavily inspired by the Inform Recipe Book , a collection of examples to learn Inform. Compiling some of the most requested code solutions across multiple versions, histories, and even years of development, the original editorial team sought to create the same project for Twine. After publishing the first version in August 2017, the Twine Cookbook was born. What this is # The Twine Cookbook is a living document. It has rolling deadlines and is often updated multiple times a year as new requests and solutions to old problems are found and submitted. It is driven by the Twine community and finds inspiration in what others create and share online.","title":"Cookbook"},{"location":"terms/terms_cookbook.html#cookbook","text":"The idea for a Twine Cookbook was heavily inspired by the Inform Recipe Book , a collection of examples to learn Inform. Compiling some of the most requested code solutions across multiple versions, histories, and even years of development, the original editorial team sought to create the same project for Twine. After publishing the first version in August 2017, the Twine Cookbook was born.","title":"Cookbook"},{"location":"terms/terms_cookbook.html#what-this-is","text":"The Twine Cookbook is a living document. It has rolling deadlines and is often updated multiple times a year as new requests and solutions to old problems are found and submitted. It is driven by the Twine community and finds inspiration in what others create and share online.","title":"What this is"},{"location":"terms/terms_css.html","text":"CSS # Cascading Style Sheets (CSS) is programming language for describing the presentation of HTML elements ( i.e. the colors, fonts, spacing, and general layout of a web page). \"Cascading\" means rules move from a parent element to any children. Any specific rules also overrule any general ones. CSS styles are associated with HTML elements using the element's (tag)name, id, classes, and/or other, possibly custom, attributes . Each built-in story format in Twine 2 uses different, sometimes custom, HTML elements to organize the story and then applies its own CSS rules. Story Stylesheet # When using Twine, additional CSS rules can be added through the Story Stylesheet screen. This CSS is inserted into the final story and provides an opportunity to override the color and formatting choices expressed in the story format's own stylesheet. (When using Twee, styles can be added using one or more passages tagged \"stylesheet\".) Considering the complex nature of CSS cascading, it is always highly recommended to use a story format's own macros where possible to change the presentation or layout of a story. Common areas involved in story format styling include the full page or window, a sidebar (if present), and the current passage as a sub-area of the page. Often, there is also a mechanism to style passages according to their tags (as assigned in Twine 2). See the CSS Selectors recipes for more details.","title":"CSS"},{"location":"terms/terms_css.html#css","text":"Cascading Style Sheets (CSS) is programming language for describing the presentation of HTML elements ( i.e. the colors, fonts, spacing, and general layout of a web page). \"Cascading\" means rules move from a parent element to any children. Any specific rules also overrule any general ones. CSS styles are associated with HTML elements using the element's (tag)name, id, classes, and/or other, possibly custom, attributes . Each built-in story format in Twine 2 uses different, sometimes custom, HTML elements to organize the story and then applies its own CSS rules.","title":"CSS"},{"location":"terms/terms_css.html#story-stylesheet","text":"When using Twine, additional CSS rules can be added through the Story Stylesheet screen. This CSS is inserted into the final story and provides an opportunity to override the color and formatting choices expressed in the story format's own stylesheet. (When using Twee, styles can be added using one or more passages tagged \"stylesheet\".) Considering the complex nature of CSS cascading, it is always highly recommended to use a story format's own macros where possible to change the presentation or layout of a story. Common areas involved in story format styling include the full page or window, a sidebar (if present), and the current passage as a sub-area of the page. Often, there is also a mechanism to style passages according to their tags (as assigned in Twine 2). See the CSS Selectors recipes for more details.","title":"Story Stylesheet"},{"location":"terms/terms_html.html","text":"HTML # The HyperText Markup Language ( HTML ) is the standard for all documents designed for a web browser. It consists of a series of elements defining its structure and the layout of its content. Story Format Layout # Each story format handles its own layout and HTML structure. While CSS can be used to style its elements, it is often recommended to use any exisitng macros for this purpose in a story format, if available. Harlowe: Named Hooks SugarCube: CSS Selectors Snowman: HTML Elements Chapbook: Customization Twine 2 HTML # All data of a Twine 2 story is stored as a series of HTML elements within a page according to the HTML Output Specification . Example: < tw-storydata > < style role = \"stylesheet\" id = \"twine-user-stylesheet\" type = \"text/twine-css\" > </ style > < script role = \"script\" id = \"twine-user-script\" type = \"text/twine-javascript\" > </ script > < tw-tag name = \"tagName\" color = \"orange\" > </ tw-tag > < tw-passagedata pid = \"1\" name = \"Start\" tags = \"tag1 tag2\" position = \"102,99\" size = \"100,100\" > Some content </ tw-passagedata > </ tw-storydata >","title":"HTML"},{"location":"terms/terms_html.html#html","text":"The HyperText Markup Language ( HTML ) is the standard for all documents designed for a web browser. It consists of a series of elements defining its structure and the layout of its content.","title":"HTML"},{"location":"terms/terms_html.html#story-format-layout","text":"Each story format handles its own layout and HTML structure. While CSS can be used to style its elements, it is often recommended to use any exisitng macros for this purpose in a story format, if available. Harlowe: Named Hooks SugarCube: CSS Selectors Snowman: HTML Elements Chapbook: Customization","title":"Story Format Layout"},{"location":"terms/terms_html.html#twine-2-html","text":"All data of a Twine 2 story is stored as a series of HTML elements within a page according to the HTML Output Specification . Example: < tw-storydata > < style role = \"stylesheet\" id = \"twine-user-stylesheet\" type = \"text/twine-css\" > </ style > < script role = \"script\" id = \"twine-user-script\" type = \"text/twine-javascript\" > </ script > < tw-tag name = \"tagName\" color = \"orange\" > </ tw-tag > < tw-passagedata pid = \"1\" name = \"Start\" tags = \"tag1 tag2\" position = \"102,99\" size = \"100,100\" > Some content </ tw-passagedata > </ tw-storydata >","title":"Twine 2 HTML"},{"location":"terms/terms_javascript.html","text":"JavaScript # The programming language JavaScript is embedded in all modern web browsers and is a foundational part of how Twine works. Knowledge of JavaScript is not required to create stories using Twine. However, understanding how JavaScript works and the expectations of how things are structured in the language can be helpful when using advanced functionality in SugarCube and when using Snowman. Story JavaScript # When using Twine, extra functionality can be added through the Story JavaScript screen. This is run before the Story is run and provides an opportunity to write specialized code or include external libraries and files. Some story formats, like SugarCube, provide the ability to translate between JavaScript and macro usage in Twine. Others, like Snowman, expect this to be used when creating more complex projects. window.setup # Based on the object provided by SugarCube of the same name , this cookbook suggests using or creating a window.setup global object when working with Story JavaScript in Twine for greater portability between story formats. window.setup Example window . setup = window . setup || {};","title":"JavaScript"},{"location":"terms/terms_javascript.html#javascript","text":"The programming language JavaScript is embedded in all modern web browsers and is a foundational part of how Twine works. Knowledge of JavaScript is not required to create stories using Twine. However, understanding how JavaScript works and the expectations of how things are structured in the language can be helpful when using advanced functionality in SugarCube and when using Snowman.","title":"JavaScript"},{"location":"terms/terms_javascript.html#story-javascript","text":"When using Twine, extra functionality can be added through the Story JavaScript screen. This is run before the Story is run and provides an opportunity to write specialized code or include external libraries and files. Some story formats, like SugarCube, provide the ability to translate between JavaScript and macro usage in Twine. Others, like Snowman, expect this to be used when creating more complex projects.","title":"Story JavaScript"},{"location":"terms/terms_javascript.html#windowsetup","text":"Based on the object provided by SugarCube of the same name , this cookbook suggests using or creating a window.setup global object when working with Story JavaScript in Twine for greater portability between story formats. window.setup Example window . setup = window . setup || {};","title":"window.setup"},{"location":"terms/terms_macros.html","text":"Macros # Macros allow programming code to be intermixed with text shown onscreen. They allow a wide variety of functionality to be added to a story, from changing the appearance of text to reacting to mouse and touch events. Story Formats are often chosen based on the macros they provide and how they can be used together. Twine 1 and SugarCube # In Twine 1, macros were written with two less-than ( << ) and two-greater-than signs ( >> ) around code. ( SugarCube , as a successor of this form, follows the same syntax.) Example: <<display \"Another Passage\">> Harlowe # The Harlowe story format uses a different syntax for macros. They are wrapped in a single open ( and close parenthesis ) , and use brackets, [] , to indicate which text or sections are associated or acted upon by the macro. Example: (font: \"Arial\")[This text will be in Arial.] Snowman # Snowman does not provide macros in the same sense that SugarCube and Harlowe do, but allow mixing JavaScript code in text with <% and %> , with <%= and %> displaying the result on the page. Example: The chalkboard reads 2 + 2 = <%= 2 + 2 %>. Chapbook # Chapbook provides inserts and modifiers to work with variables and other values. However, any variable testing must be done within the vars section itself. Example: largeFamily: cousins > 10 --","title":"Macros"},{"location":"terms/terms_macros.html#macros","text":"Macros allow programming code to be intermixed with text shown onscreen. They allow a wide variety of functionality to be added to a story, from changing the appearance of text to reacting to mouse and touch events. Story Formats are often chosen based on the macros they provide and how they can be used together.","title":"Macros"},{"location":"terms/terms_macros.html#twine-1-and-sugarcube","text":"In Twine 1, macros were written with two less-than ( << ) and two-greater-than signs ( >> ) around code. ( SugarCube , as a successor of this form, follows the same syntax.) Example: <<display \"Another Passage\">>","title":"Twine 1 and SugarCube"},{"location":"terms/terms_macros.html#harlowe","text":"The Harlowe story format uses a different syntax for macros. They are wrapped in a single open ( and close parenthesis ) , and use brackets, [] , to indicate which text or sections are associated or acted upon by the macro. Example: (font: \"Arial\")[This text will be in Arial.]","title":"Harlowe"},{"location":"terms/terms_macros.html#snowman","text":"Snowman does not provide macros in the same sense that SugarCube and Harlowe do, but allow mixing JavaScript code in text with <% and %> , with <%= and %> displaying the result on the page. Example: The chalkboard reads 2 + 2 = <%= 2 + 2 %>.","title":"Snowman"},{"location":"terms/terms_macros.html#chapbook","text":"Chapbook provides inserts and modifiers to work with variables and other values. However, any variable testing must be done within the vars section itself. Example: largeFamily: cousins > 10 --","title":"Chapbook"},{"location":"terms/terms_markdown_and_markup.html","text":"Markdown / Markup # All built-in story formats use a form of markdown or markup. Markdown # John Gruber and Aaron Swartz created Markdown in 2004 with the goal to create a way of adding some extra symbols to text to easily convert it into HTML. Since then, it has become very popular with sites like GitHub supporting it for text input. Snowman and Chapbook use a modified version of Markdown for styling text. Markup # Harlowe and SugarCube use what is known as markup . To change the presentation of text, extra symbols are added to create visual effects like emphasis and a stronger emphasis . Most wiki software and sites like Wikipedia use markup to style text. Differences # Markdown is markup. It is a way of changing the presentation of text through adding extra symbols that have special meaning when other programs read it and convert it into a different format like HTML. The only real difference is that Markdown has a name whereas \"markup\" is a category of all languages that perform the same actions.","title":"Markdown / Markup"},{"location":"terms/terms_markdown_and_markup.html#markdown-markup","text":"All built-in story formats use a form of markdown or markup.","title":"Markdown / Markup"},{"location":"terms/terms_markdown_and_markup.html#markdown","text":"John Gruber and Aaron Swartz created Markdown in 2004 with the goal to create a way of adding some extra symbols to text to easily convert it into HTML. Since then, it has become very popular with sites like GitHub supporting it for text input. Snowman and Chapbook use a modified version of Markdown for styling text.","title":"Markdown"},{"location":"terms/terms_markdown_and_markup.html#markup","text":"Harlowe and SugarCube use what is known as markup . To change the presentation of text, extra symbols are added to create visual effects like emphasis and a stronger emphasis . Most wiki software and sites like Wikipedia use markup to style text.","title":"Markup"},{"location":"terms/terms_markdown_and_markup.html#differences","text":"Markdown is markup. It is a way of changing the presentation of text through adding extra symbols that have special meaning when other programs read it and convert it into a different format like HTML. The only real difference is that Markdown has a name whereas \"markup\" is a category of all languages that perform the same actions.","title":"Differences"},{"location":"terms/terms_passages.html","text":"Passages # Passages can be thought of as divisions of time, space, or combinations of the two. They can also be thought of as blocks of dialogue, sections of code, or simply ways to break up a complicated project into more easily understood parts. In Twine, passages are at the core of any story . Connecting Passages # The simplest way to connect passages is through adding two opening and closing brackets around any collection of letters, numbers, or punctuation. If a passage exists with those exact characters in the same ordering and combination, the passages will be linked together. When viewing the compiled HTML version, there will now be a link to navigate between the two. By default, passage links are one-way. Navigating the link means moving away from one to another. Link to Another Passage named \"Link to another passage\" # [[Link to another passage]] Link to Another Passage Named \"Different Passage\" # The pipe, \" | \", can be used to rename a link from its original to some other name for the same purpose. [[Link to another passage|Different Passage]] Link to Another Passage Named \"Different Passage\" Using Routing # Starting in Twine 2, to route links, arrows, \"->\" or \"<-\", can be used to point to the destination of the link. [[Link to another passage->Different Passage]] [[Different Passage<-Link to another passage]]","title":"Passages"},{"location":"terms/terms_passages.html#passages","text":"Passages can be thought of as divisions of time, space, or combinations of the two. They can also be thought of as blocks of dialogue, sections of code, or simply ways to break up a complicated project into more easily understood parts. In Twine, passages are at the core of any story .","title":"Passages"},{"location":"terms/terms_passages.html#connecting-passages","text":"The simplest way to connect passages is through adding two opening and closing brackets around any collection of letters, numbers, or punctuation. If a passage exists with those exact characters in the same ordering and combination, the passages will be linked together. When viewing the compiled HTML version, there will now be a link to navigate between the two. By default, passage links are one-way. Navigating the link means moving away from one to another.","title":"Connecting Passages"},{"location":"terms/terms_passages.html#link-to-another-passage-named-link-to-another-passage","text":"[[Link to another passage]]","title":"Link to Another Passage named \"Link to another passage\""},{"location":"terms/terms_passages.html#link-to-another-passage-named-different-passage","text":"The pipe, \" | \", can be used to rename a link from its original to some other name for the same purpose. [[Link to another passage|Different Passage]]","title":"Link to Another Passage Named \"Different Passage\""},{"location":"terms/terms_passages.html#link-to-another-passage-named-different-passage-using-routing","text":"Starting in Twine 2, to route links, arrows, \"->\" or \"<-\", can be used to point to the destination of the link. [[Link to another passage->Different Passage]] [[Different Passage<-Link to another passage]]","title":"Link to Another Passage Named \"Different Passage\" Using Routing"},{"location":"terms/terms_stories.html","text":"Stories # Anything made using Twine can be called by any name. They are no rules on naming conventions and everything from experimental games to more traditional novels can be created in Twine. Everything is welcome. In general, the Twine editor calls individual projects Stories. Stories can be published to HTML and are readable in a web browser without Twine. In their published form, they can also be imported into Twine for further editing. IFID # When created, each Story is each given a series of letters and numbers called an Interactive Fiction IDentifier ( IFID ). The IFID is always retained when importing or publishing Stories. This helps authors track their projects on different platforms, or if other authors have copied or tried to claim it as their own without their knowledge or consent.","title":"Stories"},{"location":"terms/terms_stories.html#stories","text":"Anything made using Twine can be called by any name. They are no rules on naming conventions and everything from experimental games to more traditional novels can be created in Twine. Everything is welcome. In general, the Twine editor calls individual projects Stories. Stories can be published to HTML and are readable in a web browser without Twine. In their published form, they can also be imported into Twine for further editing.","title":"Stories"},{"location":"terms/terms_stories.html#ifid","text":"When created, each Story is each given a series of letters and numbers called an Interactive Fiction IDentifier ( IFID ). The IFID is always retained when importing or publishing Stories. This helps authors track their projects on different platforms, or if other authors have copied or tried to claim it as their own without their knowledge or consent.","title":"IFID"},{"location":"terms/terms_storyformats.html","text":"Story Formats # Each story format provides a different visual layout, set of macros , and internal JavaScript functionality. Harlowe # Harlowe is the default story format in Twine 2. It is designed for ease-of-use and for those using Twine 2 for the first time. Harlowe Example: (if: $hasKey)[It looks like the key will open the door.] (else:)[No way forward!] SugarCube # SugarCube continues the traditions of Twine 1 while also expanding the available macros. It has more functionality than Harlowe, but can sometimes require greater knowledge of programming techniques and development patterns for more advanced usage. SugarCube Example: <<if $hasKey>> It looks like the key will open the door. <<else>> No way forward! <</if>> Snowman # Snowman is designed to be written with custom JavaScript and CSS. It has no built-in macros, but includes the Underscore.js , Marked , and jQuery JavaScript libraries. Snowman Example: <% if (s.hasKey) { %> It looks like the key will open the door. <% } else { %> No way forward! <% } %> Chapbook # Chapbook is a \"second-generation\" Twine 2 story format that seperates its functionality into \"inserts\" , which cause text to appear, and \"modifiers\" , functionality that affect text in some way. Chapbook Example: [if hasKey] It looks like the key will open the door. [else] No way forward!","title":"Story Formats"},{"location":"terms/terms_storyformats.html#story-formats","text":"Each story format provides a different visual layout, set of macros , and internal JavaScript functionality.","title":"Story Formats"},{"location":"terms/terms_storyformats.html#harlowe","text":"Harlowe is the default story format in Twine 2. It is designed for ease-of-use and for those using Twine 2 for the first time. Harlowe Example: (if: $hasKey)[It looks like the key will open the door.] (else:)[No way forward!]","title":"Harlowe"},{"location":"terms/terms_storyformats.html#sugarcube","text":"SugarCube continues the traditions of Twine 1 while also expanding the available macros. It has more functionality than Harlowe, but can sometimes require greater knowledge of programming techniques and development patterns for more advanced usage. SugarCube Example: <<if $hasKey>> It looks like the key will open the door. <<else>> No way forward! <</if>>","title":"SugarCube"},{"location":"terms/terms_storyformats.html#snowman","text":"Snowman is designed to be written with custom JavaScript and CSS. It has no built-in macros, but includes the Underscore.js , Marked , and jQuery JavaScript libraries. Snowman Example: <% if (s.hasKey) { %> It looks like the key will open the door. <% } else { %> No way forward! <% } %>","title":"Snowman"},{"location":"terms/terms_storyformats.html#chapbook","text":"Chapbook is a \"second-generation\" Twine 2 story format that seperates its functionality into \"inserts\" , which cause text to appear, and \"modifiers\" , functionality that affect text in some way. Chapbook Example: [if hasKey] It looks like the key will open the door. [else] No way forward!","title":"Chapbook"},{"location":"terms/terms_twee.html","text":"Twee # Twee is the source code of a Twine story . In Twine 1, stories could be exported into its source, changed, and imported again. Twine 2 has moved away from this functionality, but has been heavily influenced through having sections (passages in Twine 1) where the user can add CSS (Story Stylesheet) and JavaScript (Story JavaScript). Notation # Starting with Twee 3, there is a standard for reading and writing Twee when working with Twine 2 passages. Twee 3 notation is written as a series of four parts for the header of each passage: Sigil: (Required) Two colons (\":\") followed by a space Passage Name: (Required) The name of the passage Tags: (Optional) Optional tags Metadata: (Optional) Information about the passage The content of a passage continues until the next header of a passage is found or the input ends with at least a single empty line between passage headers. Example Twee Notation: :: Snoopy [dog peanuts] Snoopy is a dog in the comic Peanuts. :: Charlie Brown [person peanuts] {\"position\":\"600,400\",\"size\":\"100,200\"} Charlie Brown is a person in the comic Peanuts Special Passage Names # Some compilers understand and process certain keywords differently. The following is a common set of case-sensitive reserved passage names across Twine 1 and Twee 3. Start (Twine 1 and Twee 3) # The first passage. :: Start A beginning! StoryTitle (Twine 1 and Twee 3) # The title of the story. :: StoryTitle A Named Story StorySubtitle (Twine 1) # The subtitle of the story. :: StorySubtitle The subtitle of this story StoryAuthor (Twine 1) # The author of the story. :: StoryAuthor John Smith StoryMenu (Twine 1) # Corresponds to the menu that hovers in the upper-right corner of the page in the Jonah story format, or on the left side of the page in the Sugarcane story format. :: StoryMenu Content of the story menu! StorySettings (Twine 1) # Used to specify certain options and settings. Undo: enables the player to \"undo moves.\" In Sugarcane, this means being able to use the Back button in the browser. In Jonah, this means being able to use the \u201cRewind to here\u201d link, and being able to click links in previous passages. Bookmark: enables the player to use the \u201cBookmark\u201d link in Sugarcane and Jonah. On by default. Hash updates: this causes the current passage's bookmark URL to be automatically placed in the player's browser address bar whenever they change passages. This is off by default because the URLs can become very long and ugly quickly. Prompt before closing: If the player tries to reload or close the page, the browser will prompt for confirmation. This is useful for long games - it would be unfortunate if the player lost a lot of progress due to an idle key-press. Don't use default CSS: This removes most of the CSS used by the story format, allowing CSS programmers to write their own stylesheet redesigns more easily. Off by default - but including the text \u201cblank stylesheet\u201d in a stylesheet will set it on automatically. ROT13: obfuscates the story's HTML source to dissuade people from spoiling themselves by reading it. Off by default. jQuery: include the library or not Modernizr: include the the library or not :: StorySettings undo:on bookmark:on hash:on exitprompt:on blankcss:on obfuscate:rot13 jquery:on modernizr:on StoryIncludes (Twine 1) # Includes, \"imports\", other local or remote files during the HTML compilation process. In Twine 1.4.2, both Twine Story (.tws) and Twine Source (.twee) files can be used. :: StoryIncludes localfile.tws StoryData (Twee 3) # A JSON chunk encapsulating various Twine 2-compatible details about the story. ifid: (Required) IFID of the story format: (Optional) Story format format-version: (Optional) Story format version start: (Optional) PID of starting passage tag-colors: (Optional) Pairs of tags and colors zoom: (Optional) Decimal zoom level :: StoryData { \"ifid\": \"D674C58C-DEFA-4F70-B7A2-27742230C0FC\", \"format\": \"SugarCube\", \"format-version\": \"2.28.2\", \"start\": \"My Starting Passage\", \"tag-colors\": { \"bar\": \"green\", \"foo\": \"red\", \"qaz\": \"blue\" }, \"zoom\": 0.25 } Special Tag Names # Twee 3 defines two special case-sensitive lowercase passage tags: stylesheet and script . (Passages are also loaded according to alphabetical order if others exist with the same special passage tags.) Stylesheet # Any additional or overriding CSS rules for the story. :: UserStylesheet[stylesheet] Script # Any additional or overriding JavaScript code for the story. :: UserScript[script]","title":"Twee"},{"location":"terms/terms_twee.html#twee","text":"Twee is the source code of a Twine story . In Twine 1, stories could be exported into its source, changed, and imported again. Twine 2 has moved away from this functionality, but has been heavily influenced through having sections (passages in Twine 1) where the user can add CSS (Story Stylesheet) and JavaScript (Story JavaScript).","title":"Twee"},{"location":"terms/terms_twee.html#notation","text":"Starting with Twee 3, there is a standard for reading and writing Twee when working with Twine 2 passages. Twee 3 notation is written as a series of four parts for the header of each passage: Sigil: (Required) Two colons (\":\") followed by a space Passage Name: (Required) The name of the passage Tags: (Optional) Optional tags Metadata: (Optional) Information about the passage The content of a passage continues until the next header of a passage is found or the input ends with at least a single empty line between passage headers. Example Twee Notation: :: Snoopy [dog peanuts] Snoopy is a dog in the comic Peanuts. :: Charlie Brown [person peanuts] {\"position\":\"600,400\",\"size\":\"100,200\"} Charlie Brown is a person in the comic Peanuts","title":"Notation"},{"location":"terms/terms_twee.html#special-passage-names","text":"Some compilers understand and process certain keywords differently. The following is a common set of case-sensitive reserved passage names across Twine 1 and Twee 3.","title":"Special Passage Names"},{"location":"terms/terms_twee.html#start-twine-1-and-twee-3","text":"The first passage. :: Start A beginning!","title":"Start (Twine 1 and Twee 3)"},{"location":"terms/terms_twee.html#storytitle-twine-1-and-twee-3","text":"The title of the story. :: StoryTitle A Named Story","title":"StoryTitle (Twine 1 and Twee 3)"},{"location":"terms/terms_twee.html#storysubtitle-twine-1","text":"The subtitle of the story. :: StorySubtitle The subtitle of this story","title":"StorySubtitle (Twine 1)"},{"location":"terms/terms_twee.html#storyauthor-twine-1","text":"The author of the story. :: StoryAuthor John Smith","title":"StoryAuthor (Twine 1)"},{"location":"terms/terms_twee.html#storymenu-twine-1","text":"Corresponds to the menu that hovers in the upper-right corner of the page in the Jonah story format, or on the left side of the page in the Sugarcane story format. :: StoryMenu Content of the story menu!","title":"StoryMenu (Twine 1)"},{"location":"terms/terms_twee.html#storysettings-twine-1","text":"Used to specify certain options and settings. Undo: enables the player to \"undo moves.\" In Sugarcane, this means being able to use the Back button in the browser. In Jonah, this means being able to use the \u201cRewind to here\u201d link, and being able to click links in previous passages. Bookmark: enables the player to use the \u201cBookmark\u201d link in Sugarcane and Jonah. On by default. Hash updates: this causes the current passage's bookmark URL to be automatically placed in the player's browser address bar whenever they change passages. This is off by default because the URLs can become very long and ugly quickly. Prompt before closing: If the player tries to reload or close the page, the browser will prompt for confirmation. This is useful for long games - it would be unfortunate if the player lost a lot of progress due to an idle key-press. Don't use default CSS: This removes most of the CSS used by the story format, allowing CSS programmers to write their own stylesheet redesigns more easily. Off by default - but including the text \u201cblank stylesheet\u201d in a stylesheet will set it on automatically. ROT13: obfuscates the story's HTML source to dissuade people from spoiling themselves by reading it. Off by default. jQuery: include the library or not Modernizr: include the the library or not :: StorySettings undo:on bookmark:on hash:on exitprompt:on blankcss:on obfuscate:rot13 jquery:on modernizr:on","title":"StorySettings (Twine 1)"},{"location":"terms/terms_twee.html#storyincludes-twine-1","text":"Includes, \"imports\", other local or remote files during the HTML compilation process. In Twine 1.4.2, both Twine Story (.tws) and Twine Source (.twee) files can be used. :: StoryIncludes localfile.tws","title":"StoryIncludes (Twine 1)"},{"location":"terms/terms_twee.html#storydata-twee-3","text":"A JSON chunk encapsulating various Twine 2-compatible details about the story. ifid: (Required) IFID of the story format: (Optional) Story format format-version: (Optional) Story format version start: (Optional) PID of starting passage tag-colors: (Optional) Pairs of tags and colors zoom: (Optional) Decimal zoom level :: StoryData { \"ifid\": \"D674C58C-DEFA-4F70-B7A2-27742230C0FC\", \"format\": \"SugarCube\", \"format-version\": \"2.28.2\", \"start\": \"My Starting Passage\", \"tag-colors\": { \"bar\": \"green\", \"foo\": \"red\", \"qaz\": \"blue\" }, \"zoom\": 0.25 }","title":"StoryData (Twee 3)"},{"location":"terms/terms_twee.html#special-tag-names","text":"Twee 3 defines two special case-sensitive lowercase passage tags: stylesheet and script . (Passages are also loaded according to alphabetical order if others exist with the same special passage tags.)","title":"Special Tag Names"},{"location":"terms/terms_twee.html#stylesheet","text":"Any additional or overriding CSS rules for the story. :: UserStylesheet[stylesheet]","title":"Stylesheet"},{"location":"terms/terms_twee.html#script","text":"Any additional or overriding JavaScript code for the story. :: UserScript[script]","title":"Script"},{"location":"terms/terms_twine.html","text":"Twine # Twine is an open-source tool for telling interactive, nonlinear stories. Navigation works by clicking (or, on mobile devices, tapping) links to change old, refresh current, or even load new content. Making with Twine # Because Twine produces HTML that web browsers can read, the limitations on Twine are not in what can be developed with the tool, but in the web browsers that run it. Anything that can be done in a web browser can be done in Twine.","title":"Twine"},{"location":"terms/terms_twine.html#twine","text":"Twine is an open-source tool for telling interactive, nonlinear stories. Navigation works by clicking (or, on mobile devices, tapping) links to change old, refresh current, or even load new content.","title":"Twine"},{"location":"terms/terms_twine.html#making-with-twine","text":"Because Twine produces HTML that web browsers can read, the limitations on Twine are not in what can be developed with the tool, but in the web browsers that run it. Anything that can be done in a web browser can be done in Twine.","title":"Making with Twine"},{"location":"terms/terms_variables.html","text":"Variables # In programming terminology, a variable is a container for a value that can change. In Twine, a variable is a way of storing and acting on data of some sort. Anything from a number to a series of characters can be stored in a variable. Unlike other code or text in a Passage , variables most commonly start with either the dollar sign ($) or the underscore ( _ ) in the Harlowe and SugarCube story formats. (In Chapbook, variables are part of a 'vars section' .) Story Variables (Harlowe and SugarCube) # Once created, story variables in Twine can be accessed from any passage at any time. They are globally accessible to all functionality everywhere. Example: $numberVariable Variables are translated into their values when used by themselves in a Passage. To display their value, they can simply be included as part of any other text. Example: The value of the variable is $numberVariable. Temporary Variables (Harlowe and SugarCube) # It can often be useful to work with values in a more controlled manner. For this purpose, temporary variables can be used. They are locally accessible. They only exist while the current passage is shown. They start with an underscore ( _ ). Example: _tempVariable Temporary variables can also be used to display their values with other text like Story Variables. Example: The value of the variable is _numberVariable. Differences in Chapbook # Chapbook handles variables differently. Instead of variables needing to start with the dollar sign $ or an underscore, _ , Chapbook also allows variable names to start with upper or lowercase letters as well. Example: strength: 18 $dexterity: 7 _constitution: 14 Differences in Snowman # Snowman uses JavaScript variables . It provides three global variables: window.story (for working with the story), window.passage (for working with the current passage), and s (as a way to access values across passages). Example: s.strength = 14;","title":"Variables"},{"location":"terms/terms_variables.html#variables","text":"In programming terminology, a variable is a container for a value that can change. In Twine, a variable is a way of storing and acting on data of some sort. Anything from a number to a series of characters can be stored in a variable. Unlike other code or text in a Passage , variables most commonly start with either the dollar sign ($) or the underscore ( _ ) in the Harlowe and SugarCube story formats. (In Chapbook, variables are part of a 'vars section' .)","title":"Variables"},{"location":"terms/terms_variables.html#story-variables-harlowe-and-sugarcube","text":"Once created, story variables in Twine can be accessed from any passage at any time. They are globally accessible to all functionality everywhere. Example: $numberVariable Variables are translated into their values when used by themselves in a Passage. To display their value, they can simply be included as part of any other text. Example: The value of the variable is $numberVariable.","title":"Story Variables (Harlowe and SugarCube)"},{"location":"terms/terms_variables.html#temporary-variables-harlowe-and-sugarcube","text":"It can often be useful to work with values in a more controlled manner. For this purpose, temporary variables can be used. They are locally accessible. They only exist while the current passage is shown. They start with an underscore ( _ ). Example: _tempVariable Temporary variables can also be used to display their values with other text like Story Variables. Example: The value of the variable is _numberVariable.","title":"Temporary Variables (Harlowe and SugarCube)"},{"location":"terms/terms_variables.html#differences-in-chapbook","text":"Chapbook handles variables differently. Instead of variables needing to start with the dollar sign $ or an underscore, _ , Chapbook also allows variable names to start with upper or lowercase letters as well. Example: strength: 18 $dexterity: 7 _constitution: 14","title":"Differences in Chapbook"},{"location":"terms/terms_variables.html#differences-in-snowman","text":"Snowman uses JavaScript variables . It provides three global variables: window.story (for working with the story), window.passage (for working with the current passage), and s (as a way to access values across passages). Example: s.strength = 14;","title":"Differences in Snowman"},{"location":"timedpassages/chapbook/chapbook_timedpassages.html","text":"\"Timed Passages\": Chapbook (v1.0.0) # Summary # Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the JavaScript function setTimeout() and Chapbook's internal go() function to reload a passage every second. It combines the use of the Vars Section with multiple modifiers . Example # Download Twee Code # :: StoryTitle Chapbook: Timed Passages :: Start timeLeft: 11 -- [[Start->Timer]] :: World End The world ended. :: Timer timeLeft: timeLeft - 1 -- [if timeLeft > 0] There are {timeLeft} seconds left. [else] {embed passage: 'World End'} [JavaScript] window.setTimeout(() => go('Timer'), 1000); Twee Download","title":"Chapbook"},{"location":"timedpassages/chapbook/chapbook_timedpassages.html#timed-passages-chapbook-v100","text":"","title":"\"Timed Passages\": Chapbook (v1.0.0)"},{"location":"timedpassages/chapbook/chapbook_timedpassages.html#summary","text":"Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the JavaScript function setTimeout() and Chapbook's internal go() function to reload a passage every second. It combines the use of the Vars Section with multiple modifiers .","title":"Summary"},{"location":"timedpassages/chapbook/chapbook_timedpassages.html#example","text":"Download","title":"Example"},{"location":"timedpassages/chapbook/chapbook_timedpassages.html#twee-code","text":":: StoryTitle Chapbook: Timed Passages :: Start timeLeft: 11 -- [[Start->Timer]] :: World End The world ended. :: Timer timeLeft: timeLeft - 1 -- [if timeLeft > 0] There are {timeLeft} seconds left. [else] {embed passage: 'World End'} [JavaScript] window.setTimeout(() => go('Timer'), 1000); Twee Download","title":"Twee Code"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html","text":"\"Timed Passages\": Harlowe (v2.0) # Summary # Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the (live:) macro to count seconds while checking if the timer has reached zero. If so, the (goto:) macro will immediately go to another passage. Example # Download Twee Code # :: StoryTitle Harlowe: Timed Passages :: StoryStylesheet[stylesheet] tw-include[type=\"startup\"]{ display: none; } tw-sidebar { display:none; } :: Start [[Start Timer|First Passage]] :: World End The world ended. :: First Passage (display: \"Timer\") [[Second Passage]] :: Timer { (live: 1s)[ (if: $timer is 0)[ (stop:) (goto: \"World End\") ] (else: )[ (set: $timer to it - 1) The world will end in $timer seconds ] ] } :: Second Passage (display: \"Timer\") [[First Passage]] :: Startup[startup] (set: $timer to 10) Twee Download See Also # Delayed Text , Typewriter Effect","title":"Harlowe"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html#timed-passages-harlowe-v20","text":"","title":"\"Timed Passages\": Harlowe (v2.0)"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html#summary","text":"Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the (live:) macro to count seconds while checking if the timer has reached zero. If so, the (goto:) macro will immediately go to another passage.","title":"Summary"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html#example","text":"Download","title":"Example"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html#twee-code","text":":: StoryTitle Harlowe: Timed Passages :: StoryStylesheet[stylesheet] tw-include[type=\"startup\"]{ display: none; } tw-sidebar { display:none; } :: Start [[Start Timer|First Passage]] :: World End The world ended. :: First Passage (display: \"Timer\") [[Second Passage]] :: Timer { (live: 1s)[ (if: $timer is 0)[ (stop:) (goto: \"World End\") ] (else: )[ (set: $timer to it - 1) The world will end in $timer seconds ] ] } :: Second Passage (display: \"Timer\") [[First Passage]] :: Startup[startup] (set: $timer to 10) Twee Download","title":"Twee Code"},{"location":"timedpassages/harlowe/harlowe_timedpassages.html#see-also","text":"Delayed Text , Typewriter Effect","title":"See Also"},{"location":"timedpassages/snowman/snowman_timedpassages.html","text":"\"Timed Passages\": Snowman (1.4) # Summary # Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the _ .delay() function to count seconds while checking if the timer has reached zero. If so, the window.story.show() function will immediately transition to another passage. Example # Download Twee Code # :: Start There are <span class=\"time-left\">10</span> seconds left. <% $(function() { var timeLeft = parseInt($('.time-left').text()); function tick() { if (--timeLeft === 0) { story.show('World End'); } else { $('.time-left').text(timeLeft); } _.delay(tick, 1000); } /* Start ticking. */ _.delay(tick, 1000); }); %> :: World End The world ended. Twee Download See Also # Delayed Text , Typewriter Effect","title":"Snowman"},{"location":"timedpassages/snowman/snowman_timedpassages.html#timed-passages-snowman-14","text":"","title":"\"Timed Passages\": Snowman (1.4)"},{"location":"timedpassages/snowman/snowman_timedpassages.html#summary","text":"Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the _ .delay() function to count seconds while checking if the timer has reached zero. If so, the window.story.show() function will immediately transition to another passage.","title":"Summary"},{"location":"timedpassages/snowman/snowman_timedpassages.html#example","text":"Download","title":"Example"},{"location":"timedpassages/snowman/snowman_timedpassages.html#twee-code","text":":: Start There are <span class=\"time-left\">10</span> seconds left. <% $(function() { var timeLeft = parseInt($('.time-left').text()); function tick() { if (--timeLeft === 0) { story.show('World End'); } else { $('.time-left').text(timeLeft); } _.delay(tick, 1000); } /* Start ticking. */ _.delay(tick, 1000); }); %> :: World End The world ended. Twee Download","title":"Twee Code"},{"location":"timedpassages/snowman/snowman_timedpassages.html#see-also","text":"Delayed Text , Typewriter Effect","title":"See Also"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html","text":"\"Timed Passages\": SugarCube (v2.18) # Summary # Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the <<repeat>> macro to repeat while checking if the timer has reached zero. If so, the <<goto>> macro will immediately transition to another passage. Example # Download Twee Code # :: StoryTitle SugarCube: Timed Passages :: StoryJavaScript[script] UIBar.destroy(); :: Start [[Start Timer|First Passage]] :: Timer <span id=\"countdown\">The world will end in $seconds seconds.</span> <<silently>> <<repeat 1s>> <<set $seconds to $seconds - 1>> <<if $seconds gt 0>> <<replace \"#countdown\">>The world will end in $seconds seconds.<</replace>> <<else>> <<replace \"#countdown\">><</replace>> <<goto \"World End\">> <<stop>> <</if>> <</repeat>> <</silently>> :: First Passage <<include \"Timer\">> [[Second Passage]] :: Second Passage <<include \"Timer\">> [[First Passage]] :: World End The world has ended. :: StoryInit <<set $seconds to 10>> Twee Download See Also # Delayed Text , Typewriter Effect","title":"SugarCube"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html#timed-passages-sugarcube-v218","text":"","title":"\"Timed Passages\": SugarCube (v2.18)"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html#summary","text":"Made famous in Queers in Love at the End of the World (2013), \"Timed Passages\" uses the the <<repeat>> macro to repeat while checking if the timer has reached zero. If so, the <<goto>> macro will immediately transition to another passage.","title":"Summary"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html#example","text":"Download","title":"Example"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html#twee-code","text":":: StoryTitle SugarCube: Timed Passages :: StoryJavaScript[script] UIBar.destroy(); :: Start [[Start Timer|First Passage]] :: Timer <span id=\"countdown\">The world will end in $seconds seconds.</span> <<silently>> <<repeat 1s>> <<set $seconds to $seconds - 1>> <<if $seconds gt 0>> <<replace \"#countdown\">>The world will end in $seconds seconds.<</replace>> <<else>> <<replace \"#countdown\">><</replace>> <<goto \"World End\">> <<stop>> <</if>> <</repeat>> <</silently>> :: First Passage <<include \"Timer\">> [[Second Passage]] :: Second Passage <<include \"Timer\">> [[First Passage]] :: World End The world has ended. :: StoryInit <<set $seconds to 10>> Twee Download","title":"Twee Code"},{"location":"timedpassages/sugarcube/sugarcube_timedpassages.html#see-also","text":"Delayed Text , Typewriter Effect","title":"See Also"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html","text":"\"Timed Progress Bars\": Snowman (v1.3.0) # Summary # \"Timed Progress Bars\" creates a global window.setup object and function, timedprogressbars() . Using jQuery within the definition, the function creates outer and inner <div> elements with CSS classes defined in the Story Stylesheet. Using a combination of setInterval() and setTimeout() , a timer is created. The length and color of an inner <div> element is adjusted based on the remaining time each loop. When the timer runs out, the function argument is run and the length of the inner <div> element is reduced to 0. Example # Download Twee Code # :: StoryTitle Timed Progress Bars in Snowman :: UserScript[script] // Use or create window.setup window.setup = window.setup || {}; /* Description: Show a dynamically-created \"progress bar\" that changes colors as its timer runs down. Arguments: duration: time in seconds width: CSS width functionToRun: the function to execute when the timer runs out */ setup.timedprogressbars = function(duration, width, functionToRun) { // Save or generate a default duration var duration = (Number(duration) || 60) * 1000; // Save or generate a width var width = width || \"100%\"; // Generate a unique hash var hash = Math.floor(Math.random() * 0x100000000).toString(16); // Create an outer ID var outerId = \"outer_\" + hash; // Create an inner ID var innerId = \"inner_\" + hash; // Create an outer div, // add an ID, // add a class, // change the CSS width, and // append to the output var progressbar = $(\"<div>\") .attr(\"id\", outerId) .addClass(\"progress-bar\") .css('width', width) .appendTo(\"#passage\"); // Create an inner div, // add an ID, // add a class, // change the CSS width, and // append to the progressbar var progressvalue = $(\"<div>\") .attr(\"id\", innerId) .addClass(\"progress-value\") .css('width', \"100%\") .appendTo(progressbar); // Create a function to convert into hexadecimal var toHex = function(num) { var res = Math.round(Number(num)).toString(16); return (res.length === 1 ? \"0\" + res : res); }; // Watch for the :passagedisplay event once jQuery(document).one(\"showpassage:after\", function() { // Get the current time var timeStarted = (new Date()).getTime(); // Save a reference to the setInterval function var workFunction = setInterval(function() { // Check if the element is still 'connected' if(! progressbar.prop(\"isConnected\") ) { // Navigated away from the passage clearInterval(workFunction); return; } // Figure out how much time has passed var timePassed = (new Date()).getTime() - timeStarted; // Check if the timer has run out if(timePassed >= duration) { // Reduce the inner width to 0 progressvalue.css('width', \"0\"); // Clear interval clearInterval(workFunction); // Run the inner function (if set) setTimeout(functionToRun, 40); return; } // Update the progress percentage var percentage = 100 - 100 * timePassed / duration; // Save the new color var color = \"#\" + toHex(Math.min(255, 510 - 5.1 * percentage)) + toHex(Math.min(255, 5.1 * percentage)) + \"00\"; // Update the background color of the inner div progressvalue.css(\"backgroundColor\", color); // Update the inner div width progressvalue.css(\"width\", (100 - 100 * timePassed / duration) + \"%\"); }, 40); }); }; :: UserStylesheet[stylesheet] .progress-bar { position: relative; border: 1px solid #777; background: black; height: 1em; } .progress-value { position: absolute; top: 0; left: 0; height: 100%; background: #00ff00; } :: Start <script> setup.timedprogressbars(5, \"20em\", function(){ // Hide the progress bar $(\".progress-bar\").css(\"display\", \"none\"); // Display the result $(\"#results\").text(\"Too late!\"); }); </script> <div id=\"results\"></div> Twee Download See Also # Adding Functionality","title":"Snowman"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html#timed-progress-bars-snowman-v130","text":"","title":"\"Timed Progress Bars\": Snowman (v1.3.0)"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html#summary","text":"\"Timed Progress Bars\" creates a global window.setup object and function, timedprogressbars() . Using jQuery within the definition, the function creates outer and inner <div> elements with CSS classes defined in the Story Stylesheet. Using a combination of setInterval() and setTimeout() , a timer is created. The length and color of an inner <div> element is adjusted based on the remaining time each loop. When the timer runs out, the function argument is run and the length of the inner <div> element is reduced to 0.","title":"Summary"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html#example","text":"Download","title":"Example"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html#twee-code","text":":: StoryTitle Timed Progress Bars in Snowman :: UserScript[script] // Use or create window.setup window.setup = window.setup || {}; /* Description: Show a dynamically-created \"progress bar\" that changes colors as its timer runs down. Arguments: duration: time in seconds width: CSS width functionToRun: the function to execute when the timer runs out */ setup.timedprogressbars = function(duration, width, functionToRun) { // Save or generate a default duration var duration = (Number(duration) || 60) * 1000; // Save or generate a width var width = width || \"100%\"; // Generate a unique hash var hash = Math.floor(Math.random() * 0x100000000).toString(16); // Create an outer ID var outerId = \"outer_\" + hash; // Create an inner ID var innerId = \"inner_\" + hash; // Create an outer div, // add an ID, // add a class, // change the CSS width, and // append to the output var progressbar = $(\"<div>\") .attr(\"id\", outerId) .addClass(\"progress-bar\") .css('width', width) .appendTo(\"#passage\"); // Create an inner div, // add an ID, // add a class, // change the CSS width, and // append to the progressbar var progressvalue = $(\"<div>\") .attr(\"id\", innerId) .addClass(\"progress-value\") .css('width', \"100%\") .appendTo(progressbar); // Create a function to convert into hexadecimal var toHex = function(num) { var res = Math.round(Number(num)).toString(16); return (res.length === 1 ? \"0\" + res : res); }; // Watch for the :passagedisplay event once jQuery(document).one(\"showpassage:after\", function() { // Get the current time var timeStarted = (new Date()).getTime(); // Save a reference to the setInterval function var workFunction = setInterval(function() { // Check if the element is still 'connected' if(! progressbar.prop(\"isConnected\") ) { // Navigated away from the passage clearInterval(workFunction); return; } // Figure out how much time has passed var timePassed = (new Date()).getTime() - timeStarted; // Check if the timer has run out if(timePassed >= duration) { // Reduce the inner width to 0 progressvalue.css('width', \"0\"); // Clear interval clearInterval(workFunction); // Run the inner function (if set) setTimeout(functionToRun, 40); return; } // Update the progress percentage var percentage = 100 - 100 * timePassed / duration; // Save the new color var color = \"#\" + toHex(Math.min(255, 510 - 5.1 * percentage)) + toHex(Math.min(255, 5.1 * percentage)) + \"00\"; // Update the background color of the inner div progressvalue.css(\"backgroundColor\", color); // Update the inner div width progressvalue.css(\"width\", (100 - 100 * timePassed / duration) + \"%\"); }, 40); }); }; :: UserStylesheet[stylesheet] .progress-bar { position: relative; border: 1px solid #777; background: black; height: 1em; } .progress-value { position: absolute; top: 0; left: 0; height: 100%; background: #00ff00; } :: Start <script> setup.timedprogressbars(5, \"20em\", function(){ // Hide the progress bar $(\".progress-bar\").css(\"display\", \"none\"); // Display the result $(\"#results\").text(\"Too late!\"); }); </script> <div id=\"results\"></div> Twee Download","title":"Twee Code"},{"location":"timedprogressbars/snowman/snowman_timed_progress_bars.html#see-also","text":"Adding Functionality","title":"See Also"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html","text":"\"Timed Progress Bars\": SugarCube (v2.18) # Summary # \"Timed Progress Bars\" uses the Macro.Add() function in SugarCube to introduce a new macro. Using jQuery within the definition, the new macro records arguments passed to it and creates outer and inner <div> elements with classes defined in the Story Stylesheet. Using a combination of setInterval() and setTimeout() , a timer is created based on the argument passed to the macro. The length and color of an inner <div> element is adjusted based on the remaining time each loop. When the timer runs out, the payload of the macro is run and the length of the inner <div> element is reduced to 0. Example # Download Twee Code # :: StoryTitle Timed Progress Bars in SugarCube :: UserScript[script] /* Macro: timedprogressbar Description: Show a dynamically-created \"progress bar\" that changes colors as its timer runs down. Original design: Akjosch (https://github.com/Akjosch) Arguments: [0]: The time to run in seconds [1]: The length of the progress bar in CSS units (px, em, or %) */ Macro.add(\"timedprogressbar\", { isAsync : true, tags: null, handler: function() { // Filter the payload for newlines and save it for later execution var payload = this.payload[0].contents.replace(/\\n$/, '').trim(); // Save or generate a default duration var duration = (Number(this.args[0]) || 60) * 1000; // Save or generate a width var width = this.args[1] || \"100%\"; // Generate a unique hash var hash = Math.floor(Math.random() * 0x100000000).toString(16); // Create an outer ID var outerId = \"outer_\" + hash; // Create an inner ID var innerId = \"inner_\" + hash; // Create an outer div, // add an ID, // add a class, // change the CSS width, and // append to the output var progressbar = $(\"<div>\") .attr(\"id\", outerId) .addClass(\"progress-bar\") .css('width', width) .appendTo(this.output); // Create an inner div, // add an ID, // add a class, // change the CSS width, and // append to the progressbar var progressvalue = $(\"<div>\") .attr(\"id\", innerId) .addClass(\"progress-value\") .css('width', \"100%\") .appendTo(progressbar); // Create a function to convert into hexadecimal var toHex = function(num) { var res = Math.round(Number(num)).toString(16); return (res.length === 1 ? \"0\" + res : res); }; // Save a reference to possible payload content var functionToRun = this.createShadowWrapper( payload ? function() { Wikifier.wikifyEval(payload); } : null ); // Watch for the :passagedisplay event once jQuery(document).one(\":passagedisplay\", function() { // Get the current time var timeStarted = (new Date()).getTime(); // Save a reference to the setInterval function var workFunction = setInterval(function() { // Check if the element is still 'connected' if(! progressbar.prop(\"isConnected\") ) { // Navigated away from the passage clearInterval(workFunction); return; } // Figure out how much time has passed var timePassed = (new Date()).getTime() - timeStarted; // Check if the timer has run out if(timePassed >= duration) { // Reduce the inner width to 0 progressvalue.css('width', \"0\"); // Clear interval clearInterval(workFunction); // Run the inner function (if set) setTimeout(functionToRun, 40); return; } // Update the progress percentage var percentage = 100 - 100 * timePassed / duration; // Save the new color var color = \"#\" + toHex(Math.min(255, 510 - 5.1 * percentage)) + toHex(Math.min(255, 5.1 * percentage)) + \"00\"; // Update the background color of the inner div progressvalue.css(\"backgroundColor\", color); // Update the inner div width progressvalue.css(\"width\", (100 - 100 * timePassed / duration) + \"%\"); }, 40); }); }, }); :: UserStylesheet[stylesheet] .progress-bar { position: relative; border: 1px solid #777; background: black; height: 1em; } .progress-value { position: absolute; top: 0; left: 0; height: 100%; background: #00ff00; } :: Start <<timedprogressbar 5 20em>> <<run UI.alert(\"Too late!\")>> <</timedprogressbar>> Twee Download See Also # Adding Functionality","title":"SugarCube"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html#timed-progress-bars-sugarcube-v218","text":"","title":"\"Timed Progress Bars\": SugarCube (v2.18)"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html#summary","text":"\"Timed Progress Bars\" uses the Macro.Add() function in SugarCube to introduce a new macro. Using jQuery within the definition, the new macro records arguments passed to it and creates outer and inner <div> elements with classes defined in the Story Stylesheet. Using a combination of setInterval() and setTimeout() , a timer is created based on the argument passed to the macro. The length and color of an inner <div> element is adjusted based on the remaining time each loop. When the timer runs out, the payload of the macro is run and the length of the inner <div> element is reduced to 0.","title":"Summary"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html#example","text":"Download","title":"Example"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html#twee-code","text":":: StoryTitle Timed Progress Bars in SugarCube :: UserScript[script] /* Macro: timedprogressbar Description: Show a dynamically-created \"progress bar\" that changes colors as its timer runs down. Original design: Akjosch (https://github.com/Akjosch) Arguments: [0]: The time to run in seconds [1]: The length of the progress bar in CSS units (px, em, or %) */ Macro.add(\"timedprogressbar\", { isAsync : true, tags: null, handler: function() { // Filter the payload for newlines and save it for later execution var payload = this.payload[0].contents.replace(/\\n$/, '').trim(); // Save or generate a default duration var duration = (Number(this.args[0]) || 60) * 1000; // Save or generate a width var width = this.args[1] || \"100%\"; // Generate a unique hash var hash = Math.floor(Math.random() * 0x100000000).toString(16); // Create an outer ID var outerId = \"outer_\" + hash; // Create an inner ID var innerId = \"inner_\" + hash; // Create an outer div, // add an ID, // add a class, // change the CSS width, and // append to the output var progressbar = $(\"<div>\") .attr(\"id\", outerId) .addClass(\"progress-bar\") .css('width', width) .appendTo(this.output); // Create an inner div, // add an ID, // add a class, // change the CSS width, and // append to the progressbar var progressvalue = $(\"<div>\") .attr(\"id\", innerId) .addClass(\"progress-value\") .css('width', \"100%\") .appendTo(progressbar); // Create a function to convert into hexadecimal var toHex = function(num) { var res = Math.round(Number(num)).toString(16); return (res.length === 1 ? \"0\" + res : res); }; // Save a reference to possible payload content var functionToRun = this.createShadowWrapper( payload ? function() { Wikifier.wikifyEval(payload); } : null ); // Watch for the :passagedisplay event once jQuery(document).one(\":passagedisplay\", function() { // Get the current time var timeStarted = (new Date()).getTime(); // Save a reference to the setInterval function var workFunction = setInterval(function() { // Check if the element is still 'connected' if(! progressbar.prop(\"isConnected\") ) { // Navigated away from the passage clearInterval(workFunction); return; } // Figure out how much time has passed var timePassed = (new Date()).getTime() - timeStarted; // Check if the timer has run out if(timePassed >= duration) { // Reduce the inner width to 0 progressvalue.css('width', \"0\"); // Clear interval clearInterval(workFunction); // Run the inner function (if set) setTimeout(functionToRun, 40); return; } // Update the progress percentage var percentage = 100 - 100 * timePassed / duration; // Save the new color var color = \"#\" + toHex(Math.min(255, 510 - 5.1 * percentage)) + toHex(Math.min(255, 5.1 * percentage)) + \"00\"; // Update the background color of the inner div progressvalue.css(\"backgroundColor\", color); // Update the inner div width progressvalue.css(\"width\", (100 - 100 * timePassed / duration) + \"%\"); }, 40); }); }, }); :: UserStylesheet[stylesheet] .progress-bar { position: relative; border: 1px solid #777; background: black; height: 1em; } .progress-value { position: absolute; top: 0; left: 0; height: 100%; background: #00ff00; } :: Start <<timedprogressbar 5 20em>> <<run UI.alert(\"Too late!\")>> <</timedprogressbar>> Twee Download","title":"Twee Code"},{"location":"timedprogressbars/sugarcube/sugarcube_timed_progress_bars.html#see-also","text":"Adding Functionality","title":"See Also"},{"location":"turncounter/chapbook/chapbook_turncounter.html","text":"\"Turn Counter\": Chapbook (v1.0.0) # Summary # In Chapbook, the global variable trail stores all of the passages visited as an increasing array. For each passage visited, a new entry is added. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (number of passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again. Example # Download Twee Code # :: StoryTitle Chapbook: Turn Counter :: Start hour: trail.length % 24 -- {embed passage: \"Turn Counter\"} Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room {embed passage: \"Turn Counter\"} Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room {embed passage: \"Turn Counter\"} Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room {embed passage: \"Turn Counter\"} Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: Turn Counter hour: trail.length % 24 -- [if hour <= 8] It is morning. [if hour > 8 && hour <= 12] It is mid-morning. [if hour > 12 && hour <= 16] It is afternoon. [if hour > 16] It is night. Twee Download","title":"Chapbook"},{"location":"turncounter/chapbook/chapbook_turncounter.html#turn-counter-chapbook-v100","text":"","title":"\"Turn Counter\": Chapbook (v1.0.0)"},{"location":"turncounter/chapbook/chapbook_turncounter.html#summary","text":"In Chapbook, the global variable trail stores all of the passages visited as an increasing array. For each passage visited, a new entry is added. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (number of passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again.","title":"Summary"},{"location":"turncounter/chapbook/chapbook_turncounter.html#example","text":"Download","title":"Example"},{"location":"turncounter/chapbook/chapbook_turncounter.html#twee-code","text":":: StoryTitle Chapbook: Turn Counter :: Start hour: trail.length % 24 -- {embed passage: \"Turn Counter\"} Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room {embed passage: \"Turn Counter\"} Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room {embed passage: \"Turn Counter\"} Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room {embed passage: \"Turn Counter\"} Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: Turn Counter hour: trail.length % 24 -- [if hour <= 8] It is morning. [if hour > 8 && hour <= 12] It is mid-morning. [if hour > 12 && hour <= 16] It is afternoon. [if hour > 16] It is night. Twee Download","title":"Twee Code"},{"location":"turncounter/harlowe/harlowe_turncounter.html","text":"\"Turn Counter\": Harlowe (v2.0) # Summary # \"Turn Counter\" demonstrates the use of the (history:) macro in keeping track of \"turns\" (number of passages visited). In this example, the length of the array returned by using the (history:) macro is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again. Example # Download Twee Code # :: StoryTitle Turn Counter in Harlowe :: Start Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Turn Counter[header] { (set: $hour to (history:)'s length % 24 ) (if: $hour <= 8)[It is morning.] (if: $hour > 8 and $hour <= 12)[It is mid-morning.] (if: $hour > 12 and $hour <= 16)[It is afternoon.] (if: $hour > 16)[It is night.] } :: Back Room Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] Twee Download","title":"Harlowe"},{"location":"turncounter/harlowe/harlowe_turncounter.html#turn-counter-harlowe-v20","text":"","title":"\"Turn Counter\": Harlowe (v2.0)"},{"location":"turncounter/harlowe/harlowe_turncounter.html#summary","text":"\"Turn Counter\" demonstrates the use of the (history:) macro in keeping track of \"turns\" (number of passages visited). In this example, the length of the array returned by using the (history:) macro is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again.","title":"Summary"},{"location":"turncounter/harlowe/harlowe_turncounter.html#example","text":"Download","title":"Example"},{"location":"turncounter/harlowe/harlowe_turncounter.html#twee-code","text":":: StoryTitle Turn Counter in Harlowe :: Start Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Turn Counter[header] { (set: $hour to (history:)'s length % 24 ) (if: $hour <= 8)[It is morning.] (if: $hour > 8 and $hour <= 12)[It is mid-morning.] (if: $hour > 12 and $hour <= 16)[It is afternoon.] (if: $hour > 16)[It is night.] } :: Back Room Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] Twee Download","title":"Twee Code"},{"location":"turncounter/snowman/snowman_turncounter.html","text":"\"Turn Counter\": Snowman (v1.3.0) # Summary # \"Turn Counter\" demonstrates the use of the window.story.history array in keeping track of \"turns\" (number of passages visited). The window.story.render() function is used to \"display\" or otherwise include another passage at the start of each. In this example, the length of the array window.story.history is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again. Example # Download Twee Code # :: StoryTitle Turn Counter in Snowman :: Start <%= window.story.render(\"Turn Counter\") %> Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: Turn Counter <% var hour = window.story.history.length % 24; if(hour <= 8){%> It is morning. <%} if(hour > 8 && hour <= 12){%> It is mid-morning. <%} if(hour > 12 && hour <= 16){%> It is afternoon. <%} if(hour > 16){%> It is night. <%} %> Twee Download","title":"Snowman"},{"location":"turncounter/snowman/snowman_turncounter.html#turn-counter-snowman-v130","text":"","title":"\"Turn Counter\": Snowman (v1.3.0)"},{"location":"turncounter/snowman/snowman_turncounter.html#summary","text":"\"Turn Counter\" demonstrates the use of the window.story.history array in keeping track of \"turns\" (number of passages visited). The window.story.render() function is used to \"display\" or otherwise include another passage at the start of each. In this example, the length of the array window.story.history is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (passages) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again.","title":"Summary"},{"location":"turncounter/snowman/snowman_turncounter.html#example","text":"Download","title":"Example"},{"location":"turncounter/snowman/snowman_turncounter.html#twee-code","text":":: StoryTitle Turn Counter in Snowman :: Start <%= window.story.render(\"Turn Counter\") %> Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room <%= window.story.render(\"Turn Counter\") %> Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: Turn Counter <% var hour = window.story.history.length % 24; if(hour <= 8){%> It is morning. <%} if(hour > 8 && hour <= 12){%> It is mid-morning. <%} if(hour > 12 && hour <= 16){%> It is afternoon. <%} if(hour > 16){%> It is night. <%} %> Twee Download","title":"Twee Code"},{"location":"turncounter/sugarcube/sugarcube_turncounter.html","text":"\"Turn Counter\": SugarCube (v2.18) # Summary # \"Turn Counter\" demonstrates the use of the State.turns attribute of the State object to keep track of the \"turns\" (moments within the story). In this example, the State.turns property is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (moments) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" This example also uses the special name \" PassageHeader \" as a named passage that is prepended to each passage in the story. The results of the modulo 24 calculation and clock string is displayed on every passage. By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again. Example # Download Twee Code # :: StoryTitle SugarCube: Turn Counter :: Start Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: PassageHeader <<set $hour to State.turns % 24>> <<if $hour <= 8>>It is morning.<</if>> <<if $hour > 8 and $hour <= 12>>It is mid-morning.<</if>> <<if $hour > 12 and $hour <= 16>>It is afternoon.<</if>> <<if $hour > 16>>It is night.<</if>> Twee Download","title":"SugarCube"},{"location":"turncounter/sugarcube/sugarcube_turncounter.html#turn-counter-sugarcube-v218","text":"","title":"\"Turn Counter\": SugarCube (v2.18)"},{"location":"turncounter/sugarcube/sugarcube_turncounter.html#summary","text":"\"Turn Counter\" demonstrates the use of the State.turns attribute of the State object to keep track of the \"turns\" (moments within the story). In this example, the State.turns property is compared to its modulo 24 value. Sometimes known as \"wrap around,\" the modulus operator (%) is used to get the remainder of the number of \"turns\" (moments) divided by 24. This creates a clock where its value shows one of a series of strings representing \"morning\", \"mid-morning\", \"afternoon\", or \"night.\" This example also uses the special name \" PassageHeader \" as a named passage that is prepended to each passage in the story. The results of the modulo 24 calculation and clock string is displayed on every passage. By visiting other passages, the turn count is increased and the hour reaches 23 before being reset back to 0 before increasing again.","title":"Summary"},{"location":"turncounter/sugarcube/sugarcube_turncounter.html#example","text":"Download","title":"Example"},{"location":"turncounter/sugarcube/sugarcube_turncounter.html#twee-code","text":":: StoryTitle SugarCube: Turn Counter :: Start Rooms: [[Back Room]] [[Left Room]] [[Right Room]] :: Back Room Rooms: [[Left Room]] [[Right Room]] [[Front Room|Start]] :: Left Room Rooms: [[Right Room]] [[Back Room]] [[Front Room|Start]] :: Right Room Rooms: [[Left Room]] [[Back Room]] [[Front Room|Start]] :: PassageHeader <<set $hour to State.turns % 24>> <<if $hour <= 8>>It is morning.<</if>> <<if $hour > 8 and $hour <= 12>>It is mid-morning.<</if>> <<if $hour > 12 and $hour <= 16>>It is afternoon.<</if>> <<if $hour > 16>>It is night.<</if>> Twee Download","title":"Twee Code"},{"location":"twine1/editor/browser_support.html","text":"Browser Support # The Twine 1.4+ runtime engine (that is, the Javascript engine used to play built Twine games) has the following official browser support: Browser Basic Usage Embedded Images HTML5-based history CSS Transitions IE 7 Will not run IE 8 \u2714 \\< 32KB each IE 9 \u2714 \u2714 IE 10+ \u2714 \u2714 \u2714 \u2714 Current versions of desktop Chrome, Firefox and Opera \u2714 \u2714 \u2714 \u2714 Safari 5.1+ \u2714 \u2714 \u2714 \u2714 iOS Safari 6+ \u2714 \u2714 Only if private browsing is off \u2714 Other browsers are not officially supported. Their adherence to these features is unknown. HTML5 history fallback # Since IE 8 and IE 9 do not support HTML5 History, they will fallback to the old hashstring-based history method used in Twine 1.3.5. Every time the player changes passages, a new hashstring containing an encoding of the current game state is added to the page's URL. This creates a new entry in the browser's history, and allows the back button to return to previous passages. However, it is bug-prone: whenever the back button is used, the entire page is reloaded and the game state is re-computed from the hash. This may cause certain custom macros (such as audio macros) to fail.","title":"Browser Support"},{"location":"twine1/editor/browser_support.html#browser-support","text":"The Twine 1.4+ runtime engine (that is, the Javascript engine used to play built Twine games) has the following official browser support: Browser Basic Usage Embedded Images HTML5-based history CSS Transitions IE 7 Will not run IE 8 \u2714 \\< 32KB each IE 9 \u2714 \u2714 IE 10+ \u2714 \u2714 \u2714 \u2714 Current versions of desktop Chrome, Firefox and Opera \u2714 \u2714 \u2714 \u2714 Safari 5.1+ \u2714 \u2714 \u2714 \u2714 iOS Safari 6+ \u2714 \u2714 Only if private browsing is off \u2714 Other browsers are not officially supported. Their adherence to these features is unknown.","title":"Browser Support"},{"location":"twine1/editor/browser_support.html#html5-history-fallback","text":"Since IE 8 and IE 9 do not support HTML5 History, they will fallback to the old hashstring-based history method used in Twine 1.3.5. Every time the player changes passages, a new hashstring containing an encoding of the current game state is added to the page's URL. This creates a new entry in the browser's history, and allows the back button to return to previous passages. However, it is bug-prone: whenever the back button is used, the entire page is reloaded and the game state is re-computed from the hash. This may cause certain custom macros (such as audio macros) to fail.","title":"HTML5 history fallback"},{"location":"twine1/editor/choosing_between_twine_and_twee.html","text":"Choosing Between Twine and Twee # There are two types of applications for creating stories. Both have almost identical capabilities; they differ only in the interface you use to create a story. Twine provides a visual interface,a map of the story and easily visualize connections between passages. It includes an integrated text editor for editing passages. Most people will want to use Twine. Twee Compilers are meant to be run from the command line, after writing specially-formatted text files with a text editor. Creating stories with twee can also be automated or included in other scripts much more easily than Twine can.","title":"Twine and Twee"},{"location":"twine1/editor/choosing_between_twine_and_twee.html#choosing-between-twine-and-twee","text":"There are two types of applications for creating stories. Both have almost identical capabilities; they differ only in the interface you use to create a story. Twine provides a visual interface,a map of the story and easily visualize connections between passages. It includes an integrated text editor for editing passages. Most people will want to use Twine. Twee Compilers are meant to be run from the command line, after writing specially-formatted text files with a text editor. Creating stories with twee can also be automated or included in other scripts much more easily than Twine can.","title":"Choosing Between Twine and Twee"},{"location":"twine1/editor/code.html","text":"Code # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Using only text, many stories can be created! However, how would the following example be created? As you reach the door you hear the crash of a giant stone slab as it falls from the ceiling. Turning around, you see that your exit is now blocked. If you have a Silver Key, you may try to open the door by turning to 158. If you do not possess a Silver Key, turn to 259. (Joe Dever, Flight from the Dark ) Readers could be asked to click a link, but having the story remember would be better. Using code helps with this! In Twine, code takes the form of macros the story's text. These are set off by double angle brackets, <<like this>> , in a manner resembling HTML tags. When a passage is displayed, the macro invocation is not displayed; instead, its code runs. For example, this source code would produce something akin to the text quoted above: As you reach the door you hear the crash of a giant stone slab as it falls from the ceiling. Turning around, you see that your exit is now blocked. <<if $hasSilverKey>>\\ * [[Open the door with your key]] <<else>>\\ * [[Try to force the door open]] <<endif>>","title":"Why use code?"},{"location":"twine1/editor/code.html#code","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Using only text, many stories can be created! However, how would the following example be created? As you reach the door you hear the crash of a giant stone slab as it falls from the ceiling. Turning around, you see that your exit is now blocked. If you have a Silver Key, you may try to open the door by turning to 158. If you do not possess a Silver Key, turn to 259. (Joe Dever, Flight from the Dark ) Readers could be asked to click a link, but having the story remember would be better. Using code helps with this! In Twine, code takes the form of macros the story's text. These are set off by double angle brackets, <<like this>> , in a manner resembling HTML tags. When a passage is displayed, the macro invocation is not displayed; instead, its code runs. For example, this source code would produce something akin to the text quoted above: As you reach the door you hear the crash of a giant stone slab as it falls from the ceiling. Turning around, you see that your exit is now blocked. <<if $hasSilverKey>>\\ * [[Open the door with your key]] <<else>>\\ * [[Try to force the door open]] <<endif>>","title":"Code"},{"location":"twine1/editor/css.html","text":"CSS # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Cascading StyleSheets (CSS) is used to change the color, typeface, or other parts of the story's visual appearance. When a story is first loaded, all passages tagged stylesheet are added to the page's CSS. Note: Tags are case-sensitive, so tagging a passage Stylesheet or STYLESHEET will have no effect. There is also no guaranteed order in which rules are added, so conflicting rules may produce unpredictable results. CSS Summary # CSS is written with declarations and selectors . A declaration \"declares\" something, associates a property with a value, and a selector \"selects\" through defining what the declarations affects in HTML. SELECTORS { property-name : value ; property-name : value ; } There are three primary forms of selectors in CSS: type: these select different elements like <p> or <div> . They are written using the form of p {} or div {} . class: these select elements based on their class attribute. They are written using the form .className . id : these select elements based on their id attribute. They are written using the form #idName . Example Selectors # Selector Description .passage All the passages on the page. In Sugarcane, unlike Jonah, there's only ever one such passage. Note that this element fades in whenever you change passages, whereas #passages remains constant. .passage:last-child In Jonah, this solely targets the \"current\" passage - the one at the bottom of the page. .passage:not(:last-child) In Jonah, this solely targets the past passages. .passage .title The passage title in Jonah. .passage .toolbar The passage toolbar in Jonah. .passage a Every link in a passage. .passage a:hover A link that the cursor is hovering over. .passage a:active A link that is in the midst of being clicked. (You can use this to make a link \"light up\" when clicked.) .passage a.internalLink Only links to other passages (and not, say, other websites). .passage a.visitedLink Every link to another passage that the player's visited at least once. .passage a.internalLink:not(.visitedLink) Every link to another passage that the player's not visited yet. .passage a.externalLink Only external links. Doesn't include HTML <a> links. .passage li Bulleted or numbered list items in a passage. .passage img Images in a passage. .passage hr Horizontal lines in a passage. .disabled Links that are not longer available to the reader, created through the <<choice>> macro, or by turning the Undo StorySetting to off. #passages A container for all passages displayed on the page. body The body of the HTML page -- a great place to change the typeface for the entire page. But, individual elements' styles will usually override this. #sidebar The Sugarcane sidebar, containing the StoryMenu. #sidebar li List items inside the Sugarcane sidebar. #floater The Jonah StoryMenu (which usually only contains 'Restart Story') #footer The footer at the bottom of Jonah (e.g. \"This story was built with Twine and is powered by TiddlyWiki\"). #credits The credits in Sugarcane's sidebar (e.g. \"This story was built with Twine and is powered by TiddlyWiki\"). Example CSS code # This hides all passage titles, except for the current passage , from view in the Jonah story format: . passage : not ( : last-child ) . title { display : none } Tagged Stylesheets # Normally, every stylesheet applies to all of the passages. If a passage has additional tags apart from stylesheet (for instance, stylesheet forest ), then it will only apply to passages which themselves have that tag. This allows for easily making different sections of a story have different styles to distinguish them. A note about Jonah # Tagged CSS in Jonah that uses the .passage selector will continue to affect the tagged passage even when the player advances to a different-tagged passage. But, CSS that targets the whole page, such as the body element, will not be retained. So, for instance, different link colours for a passage will remain on the passage as the game progresses, but changes to the page background will not. Transition stylesheets # A special tag exists: transition . If a stylesheet has this tag, then its styling will replace the default passage transition animation. Selector Description .transition-out A passage that is disappearing. This is only used in Sugarcane and similar formats. The styles in this CSS block define the final state of the passage's appearance - for instance, if this passage is fading out, its .transition-out style could have opacity: 0; . .transition-in A passage that is appearing. The styles in this CSS block define the initial state of the passage's appearance - for instance, if this passage is fading in, its .transition-in style could have opacity: 0; . .passage Passages should have additional CSS attributes: transition (used by most browsers) and -webkit-transition (used by certain older mobile browsers). This defines how long and in what manner the .transition-in styles are removed when passages appear, and how the .transition-out styles are added when passages disappear. See this documentation . As an example, the following CSS defines a smooth \"dissolve\" transition: . transition-in { opacity : 0 ; position : absolute ; } . passage { transition : 1 s ; -webkit- transition : 1 s ; } . transition-out { opacity : 0 !important ; position : absolute ; }","title":"CSS"},{"location":"twine1/editor/css.html#css","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Cascading StyleSheets (CSS) is used to change the color, typeface, or other parts of the story's visual appearance. When a story is first loaded, all passages tagged stylesheet are added to the page's CSS. Note: Tags are case-sensitive, so tagging a passage Stylesheet or STYLESHEET will have no effect. There is also no guaranteed order in which rules are added, so conflicting rules may produce unpredictable results.","title":"CSS"},{"location":"twine1/editor/css.html#css-summary","text":"CSS is written with declarations and selectors . A declaration \"declares\" something, associates a property with a value, and a selector \"selects\" through defining what the declarations affects in HTML. SELECTORS { property-name : value ; property-name : value ; } There are three primary forms of selectors in CSS: type: these select different elements like <p> or <div> . They are written using the form of p {} or div {} . class: these select elements based on their class attribute. They are written using the form .className . id : these select elements based on their id attribute. They are written using the form #idName .","title":"CSS Summary"},{"location":"twine1/editor/css.html#example-selectors","text":"Selector Description .passage All the passages on the page. In Sugarcane, unlike Jonah, there's only ever one such passage. Note that this element fades in whenever you change passages, whereas #passages remains constant. .passage:last-child In Jonah, this solely targets the \"current\" passage - the one at the bottom of the page. .passage:not(:last-child) In Jonah, this solely targets the past passages. .passage .title The passage title in Jonah. .passage .toolbar The passage toolbar in Jonah. .passage a Every link in a passage. .passage a:hover A link that the cursor is hovering over. .passage a:active A link that is in the midst of being clicked. (You can use this to make a link \"light up\" when clicked.) .passage a.internalLink Only links to other passages (and not, say, other websites). .passage a.visitedLink Every link to another passage that the player's visited at least once. .passage a.internalLink:not(.visitedLink) Every link to another passage that the player's not visited yet. .passage a.externalLink Only external links. Doesn't include HTML <a> links. .passage li Bulleted or numbered list items in a passage. .passage img Images in a passage. .passage hr Horizontal lines in a passage. .disabled Links that are not longer available to the reader, created through the <<choice>> macro, or by turning the Undo StorySetting to off. #passages A container for all passages displayed on the page. body The body of the HTML page -- a great place to change the typeface for the entire page. But, individual elements' styles will usually override this. #sidebar The Sugarcane sidebar, containing the StoryMenu. #sidebar li List items inside the Sugarcane sidebar. #floater The Jonah StoryMenu (which usually only contains 'Restart Story') #footer The footer at the bottom of Jonah (e.g. \"This story was built with Twine and is powered by TiddlyWiki\"). #credits The credits in Sugarcane's sidebar (e.g. \"This story was built with Twine and is powered by TiddlyWiki\").","title":"Example Selectors"},{"location":"twine1/editor/css.html#example-css-code","text":"This hides all passage titles, except for the current passage , from view in the Jonah story format: . passage : not ( : last-child ) . title { display : none }","title":"Example CSS code"},{"location":"twine1/editor/css.html#tagged-stylesheets","text":"Normally, every stylesheet applies to all of the passages. If a passage has additional tags apart from stylesheet (for instance, stylesheet forest ), then it will only apply to passages which themselves have that tag. This allows for easily making different sections of a story have different styles to distinguish them.","title":"Tagged Stylesheets"},{"location":"twine1/editor/css.html#a-note-about-jonah","text":"Tagged CSS in Jonah that uses the .passage selector will continue to affect the tagged passage even when the player advances to a different-tagged passage. But, CSS that targets the whole page, such as the body element, will not be retained. So, for instance, different link colours for a passage will remain on the passage as the game progresses, but changes to the page background will not.","title":"A note about Jonah"},{"location":"twine1/editor/css.html#transition-stylesheets","text":"A special tag exists: transition . If a stylesheet has this tag, then its styling will replace the default passage transition animation. Selector Description .transition-out A passage that is disappearing. This is only used in Sugarcane and similar formats. The styles in this CSS block define the final state of the passage's appearance - for instance, if this passage is fading out, its .transition-out style could have opacity: 0; . .transition-in A passage that is appearing. The styles in this CSS block define the initial state of the passage's appearance - for instance, if this passage is fading in, its .transition-in style could have opacity: 0; . .passage Passages should have additional CSS attributes: transition (used by most browsers) and -webkit-transition (used by certain older mobile browsers). This defines how long and in what manner the .transition-in styles are removed when passages appear, and how the .transition-out styles are added when passages disappear. See this documentation . As an example, the following CSS defines a smooth \"dissolve\" transition: . transition-in { opacity : 0 ; position : absolute ; } . passage { transition : 1 s ; -webkit- transition : 1 s ; } . transition-out { opacity : 0 !important ; position : absolute ; }","title":"Transition stylesheets"},{"location":"twine1/editor/editing_passages.html","text":"Editing Passages # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. To edit a passage, double-click it on the story map or select it, then choose Edit Passage from the Story menu. The editor window has three main fields: the title of the passage, any tags that it has, and the body text. As changes are made here, the story map will update itself automatically. Close the window to finish. The editor window's Passage menu contains a list of passages currently being editing (the Outgoing Links submenu), other passages that link to this one ( Incoming Links ), and links from this passage that don't have matching passages ( Broken Links ). Selecting a passage title from these menus will open it if it already exists, or create a new passage with the appropriate title if it does not. To concentrate just on a passage's text, choose View Fullscreen from the Passage menu. In the fullscreen view, press the Escape key to close the passage and return to the story map, or press F12 to switch back to the windowed view. Adding Links # A shortcut exists for adding links: Select the text to add the link and then drag and drop the link text into the story map. This adds square brackets around the text selected, creates a new passage for the link to go to, and opens it for editing. If a passage contains a broken link -- that is, it has a link pointing outward that does not have a matching passage -- then an exclamation point emblem will appear on the passage on the story map, to warn there is a problem. To remove a link, just delete the double brackets around the text.","title":"Editing Passages"},{"location":"twine1/editor/editing_passages.html#editing-passages","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. To edit a passage, double-click it on the story map or select it, then choose Edit Passage from the Story menu. The editor window has three main fields: the title of the passage, any tags that it has, and the body text. As changes are made here, the story map will update itself automatically. Close the window to finish. The editor window's Passage menu contains a list of passages currently being editing (the Outgoing Links submenu), other passages that link to this one ( Incoming Links ), and links from this passage that don't have matching passages ( Broken Links ). Selecting a passage title from these menus will open it if it already exists, or create a new passage with the appropriate title if it does not. To concentrate just on a passage's text, choose View Fullscreen from the Passage menu. In the fullscreen view, press the Escape key to close the passage and return to the story map, or press F12 to switch back to the windowed view.","title":"Editing Passages"},{"location":"twine1/editor/editing_passages.html#adding-links","text":"A shortcut exists for adding links: Select the text to add the link and then drag and drop the link text into the story map. This adds square brackets around the text selected, creates a new passage for the link to go to, and opens it for editing. If a passage contains a broken link -- that is, it has a link pointing outward that does not have a matching passage -- then an exclamation point emblem will appear on the passage on the story map, to warn there is a problem. To remove a link, just delete the double brackets around the text.","title":"Adding Links"},{"location":"twine1/editor/expressions.html","text":"Expressions # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Expressions are the ways data is provided to macros in stories. An expression is a lot like a mathematical formula. When a computer sees an expression, it simplifies it into a single value. <<print 2 + 2>> When Twine processes this <<print>> macro tag, it results in the number 4. This process is called evaluation . <<print (1 + 2) * 4 + (3 + 2) / 5>> This evaluates to the number 13. The computer follows the normal order of operations in mathematics: first multiplying and dividing, then adding and subtracting. Sub-expressions together and force them to be evaluated first with parentheses. Operator Function Example + Addition. 5 + 5 (is 10) - Subtraction. Can also be used to negate a number. 5 - -5 (is 10) * Multiplication. 5 * 5 (is 25) / Division. 5 / 5 (is 1) % Modulo (remainder of a division). 5 % 26 (is 1) ( and ) Brackets/parentheses (causes an expression to be evaluated earlier). (5 + 10) * 2 (is 30, not 25) Modulo # Modulo may seem somewhat obtuse an operator. Starting with a sequence of numbers: 0, 1, 2, 3, 4, 5, 6... , and did % 3 to each of them, they would become 0, 1, 2, 0, 1, 2, 0... - that is, a constantly looping sequence. This ability to simplify rising sequences allows to perform some otherwise complicated calculations easily. Strings of Text # A string is a bunch of characters strung together, demarcated by matching pairs of either double or single quotes. <<print \"The\" + ' former ' + \"Prime Minister's\">> This expression pushes the strings together, and evaluates to \"The former Prime Minister's\". Notice that spaces had to be added between the words in order to produce a properly spaced final string. Also, notice that strings can only be added. They cannot be subtracted, multiplied, or divided. Printing Lists # Print content of lists: <<set $myarray = [\"this\", \"that\"]>> <<print $myarray.join(\", \")>> This will print the following: this,that Functions # Twine has some built-in functions. For instance, there exists a built-in function named either() , which randomly picks one of the values given to it. You have found a pistol! It's got <<print either(1,2,3,4,5,6)>> bullets. Logical Operators # Computers can perform more than just mathematical tasks - they are also virtuosos in classical logic. Much as how arithmetic involves manipulating numbers with addition, multiplication and such, logic involves manipulating the values \"true\" and \"false\" using its own operators. An expression that evaluates to \"true\" or \"false\" is called a condition is is a logical operator that's short for 'equals.' Just as + adds the two numbers on each side of it, is compares two values on each side and evaluates to true or false depending on whether they're identical. It works equally well with strings and numbers, but beware -- the character \"2\" is not equal to the number 2. Operator(s) Function Example is Evaluates to true if both sides are equal. $bullets is 5 neq Evaluates to true if both sides are not equal. $friends neq $enemies > , gt Evaluates to true if the left side is greater than the right side. $money > 3.75 >= , gte Evaluates to true if the left side is greater than or equal to the right side. $apples >= $carrots + 5 < , lt Evaluates to true if the left side is less than the right side. $shoes < $people * 2 <= , lte Evaluates to true if the left side is less than or equal to the right side. 65 <= $age and Evaluates to true if both sides evaluates to true. $hasFriends and $hasFamily or Evaluates to true if either side is true. $fruit or $vegetable not Flips a true value to a false value, and vice versa. not visited(\"Waterfall\") eq An older synonym of is that is no longer recommended for use. $fingers eq 5 Conditions can quickly become complicated. The best way to keep things straight is to use parentheses to group things: <<if ($master is 'Selator') and ($berries > 2)>> Use \"is\" instead of \"=\" # Twine also supports using the keyword is for the use of = to set values. The = sign is a JavaScript operator which functions as a synonym of to used by the <<set>> macro, and causes unexpected behavior to occur if used outside of the macro. (It should be noted that the Javascript double-equals sign == can be used as a synonym of is , but is not recommended for use as it is too easily confused with the single-equals sign.) Invalid \"and\" and \"or\" Usage # Care should be taken when writing expressions to remember what the \"and\" and \"or\" keywords are capable of. An example: <<if $health > 2 and < 4 >> This macro tag's expression is invalid because the > and < operators (and indeed, all expression operators except not ) require a distinct value to be on both sides of it. In a sense, the expression is interpreted as ($health > 2) and ( < 4) , which is obviously nonsensical. It must be rewritten as $health > 2 and $health < 4 . Another example: <<if $name is \"Perone\" or \"Pavone\" >> This macro tag's expression is also invalid , for a different reason: it will be interpreted as ($name is \"Perone\") or (\"Pavone\") - which is to say, it is true if $name is \"Perone\", or if the string \"Pavone\" is not false. This, of course, means that it's always true - an undesirable outcome. It must be rewritten as $name is \"Perone\" or $name is \"Pavone\" . Treating Numbers and Strings as Conditions # Some macros, such as <<if>> , are designed to only accept conditions. But, if such macros receive an expression, then, depending on the value, it can be treated as if it was a condition in and of itself. The number 0, and a string with no characters in it \"\" , are both treated as false . The other numbers, and every other string, are treated as true . This means that you can simplify a number of expressions: <<if $numberOfJavelins > 0>> can simply become <<if$numberOfJavelins>> .","title":"Expressions"},{"location":"twine1/editor/expressions.html#expressions","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Expressions are the ways data is provided to macros in stories. An expression is a lot like a mathematical formula. When a computer sees an expression, it simplifies it into a single value. <<print 2 + 2>> When Twine processes this <<print>> macro tag, it results in the number 4. This process is called evaluation . <<print (1 + 2) * 4 + (3 + 2) / 5>> This evaluates to the number 13. The computer follows the normal order of operations in mathematics: first multiplying and dividing, then adding and subtracting. Sub-expressions together and force them to be evaluated first with parentheses. Operator Function Example + Addition. 5 + 5 (is 10) - Subtraction. Can also be used to negate a number. 5 - -5 (is 10) * Multiplication. 5 * 5 (is 25) / Division. 5 / 5 (is 1) % Modulo (remainder of a division). 5 % 26 (is 1) ( and ) Brackets/parentheses (causes an expression to be evaluated earlier). (5 + 10) * 2 (is 30, not 25)","title":"Expressions"},{"location":"twine1/editor/expressions.html#modulo","text":"Modulo may seem somewhat obtuse an operator. Starting with a sequence of numbers: 0, 1, 2, 3, 4, 5, 6... , and did % 3 to each of them, they would become 0, 1, 2, 0, 1, 2, 0... - that is, a constantly looping sequence. This ability to simplify rising sequences allows to perform some otherwise complicated calculations easily.","title":"Modulo"},{"location":"twine1/editor/expressions.html#strings-of-text","text":"A string is a bunch of characters strung together, demarcated by matching pairs of either double or single quotes. <<print \"The\" + ' former ' + \"Prime Minister's\">> This expression pushes the strings together, and evaluates to \"The former Prime Minister's\". Notice that spaces had to be added between the words in order to produce a properly spaced final string. Also, notice that strings can only be added. They cannot be subtracted, multiplied, or divided.","title":"Strings of Text"},{"location":"twine1/editor/expressions.html#printing-lists","text":"Print content of lists: <<set $myarray = [\"this\", \"that\"]>> <<print $myarray.join(\", \")>> This will print the following: this,that","title":"Printing Lists"},{"location":"twine1/editor/expressions.html#functions","text":"Twine has some built-in functions. For instance, there exists a built-in function named either() , which randomly picks one of the values given to it. You have found a pistol! It's got <<print either(1,2,3,4,5,6)>> bullets.","title":"Functions"},{"location":"twine1/editor/expressions.html#logical-operators","text":"Computers can perform more than just mathematical tasks - they are also virtuosos in classical logic. Much as how arithmetic involves manipulating numbers with addition, multiplication and such, logic involves manipulating the values \"true\" and \"false\" using its own operators. An expression that evaluates to \"true\" or \"false\" is called a condition is is a logical operator that's short for 'equals.' Just as + adds the two numbers on each side of it, is compares two values on each side and evaluates to true or false depending on whether they're identical. It works equally well with strings and numbers, but beware -- the character \"2\" is not equal to the number 2. Operator(s) Function Example is Evaluates to true if both sides are equal. $bullets is 5 neq Evaluates to true if both sides are not equal. $friends neq $enemies > , gt Evaluates to true if the left side is greater than the right side. $money > 3.75 >= , gte Evaluates to true if the left side is greater than or equal to the right side. $apples >= $carrots + 5 < , lt Evaluates to true if the left side is less than the right side. $shoes < $people * 2 <= , lte Evaluates to true if the left side is less than or equal to the right side. 65 <= $age and Evaluates to true if both sides evaluates to true. $hasFriends and $hasFamily or Evaluates to true if either side is true. $fruit or $vegetable not Flips a true value to a false value, and vice versa. not visited(\"Waterfall\") eq An older synonym of is that is no longer recommended for use. $fingers eq 5 Conditions can quickly become complicated. The best way to keep things straight is to use parentheses to group things: <<if ($master is 'Selator') and ($berries > 2)>>","title":"Logical Operators"},{"location":"twine1/editor/expressions.html#use-is-instead-of","text":"Twine also supports using the keyword is for the use of = to set values. The = sign is a JavaScript operator which functions as a synonym of to used by the <<set>> macro, and causes unexpected behavior to occur if used outside of the macro. (It should be noted that the Javascript double-equals sign == can be used as a synonym of is , but is not recommended for use as it is too easily confused with the single-equals sign.)","title":"Use \"is\" instead of \"=\""},{"location":"twine1/editor/expressions.html#invalid-and-and-or-usage","text":"Care should be taken when writing expressions to remember what the \"and\" and \"or\" keywords are capable of. An example: <<if $health > 2 and < 4 >> This macro tag's expression is invalid because the > and < operators (and indeed, all expression operators except not ) require a distinct value to be on both sides of it. In a sense, the expression is interpreted as ($health > 2) and ( < 4) , which is obviously nonsensical. It must be rewritten as $health > 2 and $health < 4 . Another example: <<if $name is \"Perone\" or \"Pavone\" >> This macro tag's expression is also invalid , for a different reason: it will be interpreted as ($name is \"Perone\") or (\"Pavone\") - which is to say, it is true if $name is \"Perone\", or if the string \"Pavone\" is not false. This, of course, means that it's always true - an undesirable outcome. It must be rewritten as $name is \"Perone\" or $name is \"Pavone\" .","title":"Invalid \"and\" and \"or\" Usage"},{"location":"twine1/editor/expressions.html#treating-numbers-and-strings-as-conditions","text":"Some macros, such as <<if>> , are designed to only accept conditions. But, if such macros receive an expression, then, depending on the value, it can be treated as if it was a condition in and of itself. The number 0, and a string with no characters in it \"\" , are both treated as false . The other numbers, and every other string, are treated as true . This means that you can simplify a number of expressions: <<if $numberOfJavelins > 0>> can simply become <<if$numberOfJavelins>> .","title":"Treating Numbers and Strings as Conditions"},{"location":"twine1/editor/functions.html","text":"Functions # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When writing code in your stories, functions are special devices that can be used in expressions in place of variables or values. Syntactically, they consist of: a name, which is subject to the same rules that variable names are under, followed by a ( left bracket, followed by zero or more other expressions separated by commas, followed by a ) right bracket. Technically speaking, any Javascript built-in function is available to the Twine author: parseInt() , JSON.stringify() , document.createElement() and all the rest are accessible, as are any functions that have been added by scripts.","title":"Functions"},{"location":"twine1/editor/functions.html#functions","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When writing code in your stories, functions are special devices that can be used in expressions in place of variables or values. Syntactically, they consist of: a name, which is subject to the same rules that variable names are under, followed by a ( left bracket, followed by zero or more other expressions separated by commas, followed by a ) right bracket. Technically speaking, any Javascript built-in function is available to the Twine author: parseInt() , JSON.stringify() , document.createElement() and all the rest are accessible, as are any functions that have been added by scripts.","title":"Functions"},{"location":"twine1/editor/general_questions.html","text":"GENERAL QUESTIONS # How do I install some new CSS code / a new stylesheet? # All CSS used in a Twine project must live in a passage with the tag stylesheet . Passages that have the right stylesheet tag have a purple frame. Create a new stylesheet passage by right-clicking in your Twine workspace and choosing \"New Passage Here\" from the context menu. (You can also make an ordinary passage and manually enter stylesheet in the \"tags\" input.) Copy the CSS code you want to add, and paste it into the stylesheet passage you just created. That's it! This CSS will now be available to your entire Twine project. Note that stylesheet passages must contain only CSS code. Putting HTML or JavaScript in a stylesheet passage may cause unexpected results. You can add as many stylesheet passages as you like, or you can keep all your CSS in one stylesheet passage--whichever is more convenient for you to use. In CSS, what do the dots and number signs mean? # A dot (.) indicates a class name. There can be many elements of the same class within an HTML page. For example, a class named \"smurf\" would look like this in the CSS: . smurf { color : blue ; } And like this in the HTML: < div class = \"smurf\" > Clumsy </ div > < div class = \"smurf\" > Brainy </ div > A number sign (#) indicates an id. This means it's a unique name. There can be only one element with the given id in an HTML page. For example, an id named \"highlander\" would look like this in the CSS: # highlander { color : red ; } And like this in the HTML: < div id = \"highlander\" > Connor </ div > If the HTML also contained < div id = \"highlander\" > The Kurgan </ div > you would have a problem! (A <div> is just a general division in HTML. A nice thing about a <div> is that it doesn't have any effect on the contents of the tag except what's defined by the specified CSS class.) How do I install some new JavaScript code? # All JavaScript used in a Twine project must live in a passage with the tag script . Passages that have the right script tag have a brown frame. Create a new script passage by right-clicking in your Twine workspace and choosing \"New Script Here\" from the context menu. (You can also make an ordinary passage and manually enter script in the \"tags\" input.) Copy the JavaScript code you want to add, and paste it into the script passage you just created. That's it! This JavaScript will now be available to your entire Twine project. Note that script passages must contain only JavaScript code. Putting HTML or CSS in a script passage may cause unexpected results. You can add as many script passages as you like, or you can keep all your JavaScript in one script passage--whichever is more convenient for you to use. How can I make my Twine playable offline? / How do I import jQuery? # In Twine, go to the menu Story > Special Passages > StorySetting , scroll down to \"Include the jQuery script library?\" and check the box beside it. OR Add the text \"requires jQuery\" to any script passage. Doing this will install a copy of jQuery 1.11 into the built HTML file, rather than using a Google CDN reference. This means the game will be playable even without an internet connection. How do I import a new font from my local computer? # In Twine, go to the menu Story > Import Font . This will open a file browser window for you to choose the file of the font you'd like to add (for example, myFunFont.ttf ). Select the desired font file and click \"Open.\" Now you can use the font family in the CSS of a stylesheet passage, like this: . passage { font-family : \"myFunFont\" , sans-serif ; } You can do one or the other, but you don't have to do both! Note: No matter what the name of your passage is, you must refer to the imported font by the name it was imported as. Note: While all modern browsers support the font file formats TTF, OTF and WOFF, the font file format SVG is not supported by IE or Firefox, and the font file format E////OT is supported only by IE. How do I import a Google web font? # Browse the Google Webfont page for the font you want. For a single font, you can click the little middle \"Quick Use\" button (a right arrow in a box). If you want multiple fonts, it's handy to add them to a collection and work with the CSS of that collection. Once you've chosen your Google font, choose the @import tab to view the CSS code for the font. Copy this CSS code and paste it into a stylesheet passage. (See the top of this FAQ for how to make a stylesheet passage.) Also, if you wish to use multiple fonts, you should, for convenience, add them all to a 'collection' while browing GFonts, and obtain the code specific to that collection. Once the @import code is added to a stylesheet passage in your project, you may use it in CSS or HTML anywhere in the project. Note : In 1.4.1 or earlier, the @import code had to appear at the very start of the stylesheet passage that came first alphabetically. In 1.4.2 the @import code can appear anywhere (Twine manually hoists it where it needs to be.) How do I use an image as the story page's background? # This CSS example sets the background image to be http://www.funimages.com/images/happyLittleTree.png body { background-image : url ( \"http://www.funimages.com/images/happyLittleTree.png\" ); } If you've imported the image into your project, you can use the imported image syntax in your CSS: body { background-image: [img[happyLittleTree]]; } CSS provides a lot of other background properties (such as background-attachment , background-position , background-repeat and background-size ) that can be used as well. How do I add hover text to some text in my passage? # Here's sample HTML for your passage: < abbr title = \"This hover text will appear on mouse over\" > This text is shown as usual. </ abbr > How do I disable the standard syntax so I can show ASCII art? # You can use the monospace syntax like so: {{{ <<(@__@)>> }}} How can the reader change a variable without navigating away from a passage? # You may want to look into the SugarCube story format extension. It provides click and button macros that can be used like so: <<click \"Lose money\">><<set $money -= 1>><</click>> <<button \"Make money\">><<set $money += 1>><</button>>","title":"General Questions"},{"location":"twine1/editor/general_questions.html#general-questions","text":"","title":"GENERAL QUESTIONS"},{"location":"twine1/editor/general_questions.html#how-do-i-install-some-new-css-code-a-new-stylesheet","text":"All CSS used in a Twine project must live in a passage with the tag stylesheet . Passages that have the right stylesheet tag have a purple frame. Create a new stylesheet passage by right-clicking in your Twine workspace and choosing \"New Passage Here\" from the context menu. (You can also make an ordinary passage and manually enter stylesheet in the \"tags\" input.) Copy the CSS code you want to add, and paste it into the stylesheet passage you just created. That's it! This CSS will now be available to your entire Twine project. Note that stylesheet passages must contain only CSS code. Putting HTML or JavaScript in a stylesheet passage may cause unexpected results. You can add as many stylesheet passages as you like, or you can keep all your CSS in one stylesheet passage--whichever is more convenient for you to use.","title":"How do I install some new CSS code / a new stylesheet?"},{"location":"twine1/editor/general_questions.html#in-css-what-do-the-dots-and-number-signs-mean","text":"A dot (.) indicates a class name. There can be many elements of the same class within an HTML page. For example, a class named \"smurf\" would look like this in the CSS: . smurf { color : blue ; } And like this in the HTML: < div class = \"smurf\" > Clumsy </ div > < div class = \"smurf\" > Brainy </ div > A number sign (#) indicates an id. This means it's a unique name. There can be only one element with the given id in an HTML page. For example, an id named \"highlander\" would look like this in the CSS: # highlander { color : red ; } And like this in the HTML: < div id = \"highlander\" > Connor </ div > If the HTML also contained < div id = \"highlander\" > The Kurgan </ div > you would have a problem! (A <div> is just a general division in HTML. A nice thing about a <div> is that it doesn't have any effect on the contents of the tag except what's defined by the specified CSS class.)","title":"In CSS, what do the dots and number signs mean?"},{"location":"twine1/editor/general_questions.html#how-do-i-install-some-new-javascript-code","text":"All JavaScript used in a Twine project must live in a passage with the tag script . Passages that have the right script tag have a brown frame. Create a new script passage by right-clicking in your Twine workspace and choosing \"New Script Here\" from the context menu. (You can also make an ordinary passage and manually enter script in the \"tags\" input.) Copy the JavaScript code you want to add, and paste it into the script passage you just created. That's it! This JavaScript will now be available to your entire Twine project. Note that script passages must contain only JavaScript code. Putting HTML or CSS in a script passage may cause unexpected results. You can add as many script passages as you like, or you can keep all your JavaScript in one script passage--whichever is more convenient for you to use.","title":"How do I install some new JavaScript code?"},{"location":"twine1/editor/general_questions.html#how-can-i-make-my-twine-playable-offline-how-do-i-import-jquery","text":"In Twine, go to the menu Story > Special Passages > StorySetting , scroll down to \"Include the jQuery script library?\" and check the box beside it. OR Add the text \"requires jQuery\" to any script passage. Doing this will install a copy of jQuery 1.11 into the built HTML file, rather than using a Google CDN reference. This means the game will be playable even without an internet connection.","title":"How can I make my Twine playable offline? / How do I import jQuery?"},{"location":"twine1/editor/general_questions.html#how-do-i-import-a-new-font-from-my-local-computer","text":"In Twine, go to the menu Story > Import Font . This will open a file browser window for you to choose the file of the font you'd like to add (for example, myFunFont.ttf ). Select the desired font file and click \"Open.\" Now you can use the font family in the CSS of a stylesheet passage, like this: . passage { font-family : \"myFunFont\" , sans-serif ; } You can do one or the other, but you don't have to do both! Note: No matter what the name of your passage is, you must refer to the imported font by the name it was imported as. Note: While all modern browsers support the font file formats TTF, OTF and WOFF, the font file format SVG is not supported by IE or Firefox, and the font file format E////OT is supported only by IE.","title":"How do I import a new font from my local computer?"},{"location":"twine1/editor/general_questions.html#how-do-i-import-a-google-web-font","text":"Browse the Google Webfont page for the font you want. For a single font, you can click the little middle \"Quick Use\" button (a right arrow in a box). If you want multiple fonts, it's handy to add them to a collection and work with the CSS of that collection. Once you've chosen your Google font, choose the @import tab to view the CSS code for the font. Copy this CSS code and paste it into a stylesheet passage. (See the top of this FAQ for how to make a stylesheet passage.) Also, if you wish to use multiple fonts, you should, for convenience, add them all to a 'collection' while browing GFonts, and obtain the code specific to that collection. Once the @import code is added to a stylesheet passage in your project, you may use it in CSS or HTML anywhere in the project. Note : In 1.4.1 or earlier, the @import code had to appear at the very start of the stylesheet passage that came first alphabetically. In 1.4.2 the @import code can appear anywhere (Twine manually hoists it where it needs to be.)","title":"How do I import a Google web font?"},{"location":"twine1/editor/general_questions.html#how-do-i-use-an-image-as-the-story-pages-background","text":"This CSS example sets the background image to be http://www.funimages.com/images/happyLittleTree.png body { background-image : url ( \"http://www.funimages.com/images/happyLittleTree.png\" ); } If you've imported the image into your project, you can use the imported image syntax in your CSS: body { background-image: [img[happyLittleTree]]; } CSS provides a lot of other background properties (such as background-attachment , background-position , background-repeat and background-size ) that can be used as well.","title":"How do I use an image as the story page's background?"},{"location":"twine1/editor/general_questions.html#how-do-i-add-hover-text-to-some-text-in-my-passage","text":"Here's sample HTML for your passage: < abbr title = \"This hover text will appear on mouse over\" > This text is shown as usual. </ abbr >","title":"How do I add hover text to some text in my passage?"},{"location":"twine1/editor/general_questions.html#how-do-i-disable-the-standard-syntax-so-i-can-show-ascii-art","text":"You can use the monospace syntax like so: {{{ <<(@__@)>> }}}","title":"How do I disable the standard syntax so I can show ASCII art?"},{"location":"twine1/editor/general_questions.html#how-can-the-reader-change-a-variable-without-navigating-away-from-a-passage","text":"You may want to look into the SugarCube story format extension. It provides click and button macros that can be used like so: <<click \"Lose money\">><<set $money -= 1>><</click>> <<button \"Make money\">><<set $money += 1>><</button>>","title":"How can the reader change a variable without navigating away from a passage?"},{"location":"twine1/editor/images.html","text":"Images # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. It is said that the most important tag in early World Wide Web history was <img> . With it, web pages could finally stop looking like structured documents and start looking like anything they wanted to look like. This was the Web's defining advantage over its competitors. In that sense, images and hypertext are intimately intwined, and in Twine their relevance is not diminished. Importing images # Images can serve many purposes in a story or game - passage illustrations, page backgrounds, interstitial GIF animations, a title logo, and so forth. Given their vital importance, Twine enables incorporating images into a project's story file, as separate \"passages\" alongside text. Images stored in the story file will be embedded inside a finished story's built HTML - guaranteeing that the images will always be visible in the story, even if the HTML file is uploaded to a site or service. An image asset can be added using the \"Import Image\" menu items in the Story menu, or by dragging and dropping an image file into the Story Map. Note: In Twine 1.4.2 or above, the program will ask, when a passage is closed, if it can automatically import the external images used in it - the images referred to by URLs. Image assets appear in as passages with teal titles. A note about formats # Since Twine games run in a web browser, any format that the browser supports can be displayed. However, the Twine development program only supports the following formats as imported image assets: PNG, GIF, JPEG, WebP and SVG. Furthermore, due to limitations in wxPython, WebP and SVG images will not display in the Story Map (but will remain usable in the browser). Usage # Once imported, an image can be referred to it by its name using this syntax: [[img[*image name*]] Making an image that is also a link to another passage: [img[*image name*][*Passage name*]] Putting the < or > symbols in front of 'img', it will be floated to the left or right, insetting it in the passage text: [<img[*image name*]] [>img[*image name*]] You can add \"alt text\" (title text) to the image like so: [img[*alt text*|*image name*]] And, you can refer to external image URLs with this syntax, too. [img[*http://example.com/icon.png*]] This syntax is mostly a shorthand for the HTML <img\\> element. If you need to customize the image further (for instance, by adding a class or style attribute) then you can fall back to <img\\> - but note that you can't refer to imported image assets with it: < img src = \"image URL\" \\ >","title":"Working with Images"},{"location":"twine1/editor/images.html#images","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. It is said that the most important tag in early World Wide Web history was <img> . With it, web pages could finally stop looking like structured documents and start looking like anything they wanted to look like. This was the Web's defining advantage over its competitors. In that sense, images and hypertext are intimately intwined, and in Twine their relevance is not diminished.","title":"Images"},{"location":"twine1/editor/images.html#importing-images","text":"Images can serve many purposes in a story or game - passage illustrations, page backgrounds, interstitial GIF animations, a title logo, and so forth. Given their vital importance, Twine enables incorporating images into a project's story file, as separate \"passages\" alongside text. Images stored in the story file will be embedded inside a finished story's built HTML - guaranteeing that the images will always be visible in the story, even if the HTML file is uploaded to a site or service. An image asset can be added using the \"Import Image\" menu items in the Story menu, or by dragging and dropping an image file into the Story Map. Note: In Twine 1.4.2 or above, the program will ask, when a passage is closed, if it can automatically import the external images used in it - the images referred to by URLs. Image assets appear in as passages with teal titles.","title":"Importing images"},{"location":"twine1/editor/images.html#a-note-about-formats","text":"Since Twine games run in a web browser, any format that the browser supports can be displayed. However, the Twine development program only supports the following formats as imported image assets: PNG, GIF, JPEG, WebP and SVG. Furthermore, due to limitations in wxPython, WebP and SVG images will not display in the Story Map (but will remain usable in the browser).","title":"A note about formats"},{"location":"twine1/editor/images.html#usage","text":"Once imported, an image can be referred to it by its name using this syntax: [[img[*image name*]] Making an image that is also a link to another passage: [img[*image name*][*Passage name*]] Putting the < or > symbols in front of 'img', it will be floated to the left or right, insetting it in the passage text: [<img[*image name*]] [>img[*image name*]] You can add \"alt text\" (title text) to the image like so: [img[*alt text*|*image name*]] And, you can refer to external image URLs with this syntax, too. [img[*http://example.com/icon.png*]] This syntax is mostly a shorthand for the HTML <img\\> element. If you need to customize the image further (for instance, by adding a class or style attribute) then you can fall back to <img\\> - but note that you can't refer to imported image assets with it: < img src = \"image URL\" \\ >","title":"Usage"},{"location":"twine1/editor/installing.html","text":"Installing Twine # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Windows # To install Twine on a Windows computer, run the .exe file. This installer will copy the necessary files and add an entry to your Start menu for Twine. To uninstall it, open the Add/Remove Programs control panel (on Windows XP) or the Programs and Features control panel (in Vista and later), find Twine in the list of applications, and then click the Uninstall button. MacOS X # To install Twine on an OS X computer, expand the archive file and then copy the entire Twine folder to the Applications folder. To uninstall it, simply delete the folder. Linux # Although there is no official Linux package for Twine, it could be installed through checking out a copy of the Twine source code , then running the app.py file with Python. wxPython 2.9.5.0 (or later) will also need to be installed.","title":"Installing"},{"location":"twine1/editor/installing.html#installing-twine","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only.","title":"Installing Twine"},{"location":"twine1/editor/installing.html#windows","text":"To install Twine on a Windows computer, run the .exe file. This installer will copy the necessary files and add an entry to your Start menu for Twine. To uninstall it, open the Add/Remove Programs control panel (on Windows XP) or the Programs and Features control panel (in Vista and later), find Twine in the list of applications, and then click the Uninstall button.","title":"Windows"},{"location":"twine1/editor/installing.html#macos-x","text":"To install Twine on an OS X computer, expand the archive file and then copy the entire Twine folder to the Applications folder. To uninstall it, simply delete the folder.","title":"MacOS X"},{"location":"twine1/editor/installing.html#linux","text":"Although there is no official Linux package for Twine, it could be installed through checking out a copy of the Twine source code , then running the app.py file with Python. wxPython 2.9.5.0 (or later) will also need to be installed.","title":"Linux"},{"location":"twine1/editor/proofing.html","text":"Proofing Work # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. To create an output file that is readable in a Web browser, choose Build Story from the Story menu. This prompts to choose where to save the finished story; make sure to give the file a .html file extension. After saving, Twine will open it in a Web browser. Once the story has been built, it cane be quickly rebuilt to reflect changes by choosing Rebuild Story from the Story menu. For ease of access, this menu item also appears in the Passage menu of passage editing windows. Reminder: Reload the output story in the Web browser once rebuilding it. View Last Build menu item will open the last build. Story Statistics shows detail about the Story . This counts how many words, passages, and links the story contains. It also displays how many broken links there are. A RTF version of a story suitable for proofreading can be created through choosing Export Proofing Copy from the File menu. This compiles all the passage text only into a single document that can be opened up in another program.","title":"Proofing Work"},{"location":"twine1/editor/proofing.html#proofing-work","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. To create an output file that is readable in a Web browser, choose Build Story from the Story menu. This prompts to choose where to save the finished story; make sure to give the file a .html file extension. After saving, Twine will open it in a Web browser. Once the story has been built, it cane be quickly rebuilt to reflect changes by choosing Rebuild Story from the Story menu. For ease of access, this menu item also appears in the Passage menu of passage editing windows. Reminder: Reload the output story in the Web browser once rebuilding it. View Last Build menu item will open the last build. Story Statistics shows detail about the Story . This counts how many words, passages, and links the story contains. It also displays how many broken links there are. A RTF version of a story suitable for proofreading can be created through choosing Export Proofing Copy from the File menu. This compiles all the passage text only into a single document that can be opened up in another program.","title":"Proofing Work"},{"location":"twine1/editor/replacing_text.html","text":"Finding and Replacing Text # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The Quick Find field in the story map's toolbar caa be used to find passages whose text matches what is entered. These will turn yellow. Use the window icon on the right side of the search field to bring up a fuller-featured dialog box. The Find and Replace Dialog # Typing text into the Search For field will instantly show a list of matching passages. To see the exact match, use the plus sign icon beside a passage name. Quickly show and hide match detail with the icons beside the Replace All button. Below the search field are a few options: Include passage names: performs the search on passage names as well as their text. Match case: requires matches to have the same mix of uppercase and lowercase letters. Regular expression: interprets the search field as a regular expression . To replace the text being searched for with something else, enter it into the Replace With field. Use the Replace All button to do all replacements at once, or use the Replace in Passage link that appears when pointing at a passage with the mouse, or tapping it on a touch-based device, to perform the replacement in a single passage. When done, close the Find and Replace dialog with the close button in its upper-right corner or by pressing Escape.","title":"Finding and Replacing Text"},{"location":"twine1/editor/replacing_text.html#finding-and-replacing-text","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The Quick Find field in the story map's toolbar caa be used to find passages whose text matches what is entered. These will turn yellow. Use the window icon on the right side of the search field to bring up a fuller-featured dialog box.","title":"Finding and Replacing Text"},{"location":"twine1/editor/replacing_text.html#the-find-and-replace-dialog","text":"Typing text into the Search For field will instantly show a list of matching passages. To see the exact match, use the plus sign icon beside a passage name. Quickly show and hide match detail with the icons beside the Replace All button. Below the search field are a few options: Include passage names: performs the search on passage names as well as their text. Match case: requires matches to have the same mix of uppercase and lowercase letters. Regular expression: interprets the search field as a regular expression . To replace the text being searched for with something else, enter it into the Replace With field. Use the Replace All button to do all replacements at once, or use the Replace in Passage link that appears when pointing at a passage with the mouse, or tapping it on a touch-based device, to perform the replacement in a single passage. When done, close the Find and Replace dialog with the close button in its upper-right corner or by pressing Escape.","title":"The Find and Replace Dialog"},{"location":"twine1/editor/story_files.html","text":"Story Files # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. There are two kinds of files that Twine works with: Story: Editable versions opened with Twine; .tws file extension Output: Read-only versions opened in a web browser; a .html extension File Menu # File -> Save Story and File -> Save Story saves Story. File -> Open Story opens a Story Build # Build -> \"Build Story...\" creates an HTML file Build -> Rebuild Story updates the last build with any latest content Build -> Test opens the Story in a debugging mode Build -> \"Test Play from Here...\" opens the Story in a debugging mode from the currently selected passage","title":"Story Files"},{"location":"twine1/editor/story_files.html#story-files","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. There are two kinds of files that Twine works with: Story: Editable versions opened with Twine; .tws file extension Output: Read-only versions opened in a web browser; a .html extension","title":"Story Files"},{"location":"twine1/editor/story_files.html#file-menu","text":"File -> Save Story and File -> Save Story saves Story. File -> Open Story opens a Story","title":"File Menu"},{"location":"twine1/editor/story_files.html#build","text":"Build -> \"Build Story...\" creates an HTML file Build -> Rebuild Story updates the last build with any latest content Build -> Test opens the Story in a debugging mode Build -> \"Test Play from Here...\" opens the Story in a debugging mode from the currently selected passage","title":"Build"},{"location":"twine1/editor/story_map.html","text":"Story Map # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When a story is open in Twine 1, it shows the story map . This is a series of boxes that can be arranged in different ways. Passages are connected with a line is shown between them. Using either a passage link or the <<display>> macro creates this line. Zooming # Using the secondary menu, clicking on the Zoom In, Zoom Out, Zoom so all passages are visible, and Zoom to 100% to change the size of all passages. Story Menu # New passages can be added to the Story through the Story menu. Use Story -> New -> Passage to add a new passage. Right-clicking and go to and selecting New Passage Here also creates a new passage. Arrangement # Passages can be moved into any arrangement. This does not affect the output! Any passage can be clicked and dragged to a different place. Multiple passages can be selected through clicking and dragging a square selection to enclose multiple passages. Once selected, they can be arranged.","title":"Story Map"},{"location":"twine1/editor/story_map.html#story-map","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When a story is open in Twine 1, it shows the story map . This is a series of boxes that can be arranged in different ways. Passages are connected with a line is shown between them. Using either a passage link or the <<display>> macro creates this line.","title":"Story Map"},{"location":"twine1/editor/story_map.html#zooming","text":"Using the secondary menu, clicking on the Zoom In, Zoom Out, Zoom so all passages are visible, and Zoom to 100% to change the size of all passages.","title":"Zooming"},{"location":"twine1/editor/story_map.html#story-menu","text":"New passages can be added to the Story through the Story menu. Use Story -> New -> Passage to add a new passage. Right-clicking and go to and selecting New Passage Here also creates a new passage.","title":"Story Menu"},{"location":"twine1/editor/story_map.html#arrangement","text":"Passages can be moved into any arrangement. This does not affect the output! Any passage can be clicked and dragged to a different place. Multiple passages can be selected through clicking and dragging a square selection to enclose multiple passages. Once selected, they can be arranged.","title":"Arrangement"},{"location":"twine1/editor/writing_macros.html","text":"Custom Macros # It's possible to write macros for use in your stories. Doing so requires knowledge of both JavaScript and the Twine engine. The following is an example passage that creates a macro named <<hello>> that, when invoked in another passage, displays an alert that greets the reader. :: Hello macro [script] macros['hello'] = { handler: function() { alert('Hi, reader!'); } } :: Start <<hello>> Browsing the source code repository may be helpful, too.","title":"Writing Macros"},{"location":"twine1/editor/writing_macros.html#custom-macros","text":"It's possible to write macros for use in your stories. Doing so requires knowledge of both JavaScript and the Twine engine. The following is an example passage that creates a macro named <<hello>> that, when invoked in another passage, displays an alert that greets the reader. :: Hello macro [script] macros['hello'] = { handler: function() { alert('Hi, reader!'); } } :: Start <<hello>> Browsing the source code repository may be helpful, too.","title":"Custom Macros"},{"location":"twine1/functions/alert.html","text":"alert(string) # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Displays an alert box, with the given text string displayed. This is a browser built-in. It has no value - feel free to use it by simply writing <<set alert(\"message\")>> .","title":"alert"},{"location":"twine1/functions/alert.html#alertstring","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Displays an alert box, with the given text string displayed. This is a browser built-in. It has no value - feel free to use it by simply writing <<set alert(\"message\")>> .","title":"alert(string)"},{"location":"twine1/functions/confirm.html","text":"confirm(string) # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Displays a yes/no dialog box. If you click Yes, the function's value is true. Otherwise, it is false. The provided string is the question shown to the player. This is a browser built-in.","title":"confirm"},{"location":"twine1/functions/confirm.html#confirmstring","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Displays a yes/no dialog box. If you click Yes, the function's value is true. Otherwise, it is false. The provided string is the question shown to the player. This is a browser built-in.","title":"confirm(string)"},{"location":"twine1/functions/either.html","text":"either(value, value, ...) # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Give the either() function several string or number values, separated by commas, and it will pick one of them randomly. This allows a good degree of randomness to be inserted into the story, while still being fairly readable. You can use either() with <<print>> to print a random message or phrase... \"I sentence you to be buried alive in <<print either(\"rhinoceros\",\"buffalo\",\"triceratops\")>> <<print either(\"vomit\", \"sweat\", \"snot\")>>!\" the JudgeBot crackles noisily. You can also use either() with <<set>> to set variables to random values: <<set $playerMoxie to either(2, 4, 6)>> <<set $playerAttire to either(\"green\", \"black\", \"rainbow\")>> You have <<print $playerMoxie>> moxie points, and <<print $playerAttire>> armour. And, in addition to macros, you can use either() with the link syntax to make a link that goes to a random passage: You plunge into the [[glowing vortex|either(\"12000 BC\",\"The Future\",\"2AM Yesterday\")]]","title":"either"},{"location":"twine1/functions/either.html#eithervalue-value","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Give the either() function several string or number values, separated by commas, and it will pick one of them randomly. This allows a good degree of randomness to be inserted into the story, while still being fairly readable. You can use either() with <<print>> to print a random message or phrase... \"I sentence you to be buried alive in <<print either(\"rhinoceros\",\"buffalo\",\"triceratops\")>> <<print either(\"vomit\", \"sweat\", \"snot\")>>!\" the JudgeBot crackles noisily. You can also use either() with <<set>> to set variables to random values: <<set $playerMoxie to either(2, 4, 6)>> <<set $playerAttire to either(\"green\", \"black\", \"rainbow\")>> You have <<print $playerMoxie>> moxie points, and <<print $playerAttire>> armour. And, in addition to macros, you can use either() with the link syntax to make a link that goes to a random passage: You plunge into the [[glowing vortex|either(\"12000 BC\",\"The Future\",\"2AM Yesterday\")]]","title":"either(value, value, ...)"},{"location":"twine1/functions/open.html","text":"open(string) # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When given a URL in string form, it opens a new browser tab containing that web page. This is a browser built-in. It has no value - feel free to use it by simply writing <<set open(\"url\")>> .","title":"open"},{"location":"twine1/functions/open.html#openstring","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When given a URL in string form, it opens a new browser tab containing that web page. This is a browser built-in. It has no value - feel free to use it by simply writing <<set open(\"url\")>> .","title":"open(string)"},{"location":"twine1/functions/parameter.html","text":"parameter(number) # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. This is an interesting one. Suppose you're <<display>> ing a passage using the shorthand, and you include some extra values at the end of the tag: <<CaramelCanoe \"oars\" \"satchel\">> With parameter() , you can access these extra values and use them inside the displayed passage: ::CaramelCanoe You're canoeing down the caramel river, rowing with <<print parameter(0)>>, your <<print parameter(1)>> by your side. Running the aforementioned <<display>> will show \"You're canoeing down the caramel river, rowing with oars, your satchel by your side.\" This allows you to subtly alter a passage depending on where and how it's <<display>> ed, without using variables. You can, for instance, make a passage that describes the character's clothes, and you can supply different adjectives to the passage, just by including them in the shorthand <<display>> .","title":"parameter"},{"location":"twine1/functions/parameter.html#parameternumber","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. This is an interesting one. Suppose you're <<display>> ing a passage using the shorthand, and you include some extra values at the end of the tag: <<CaramelCanoe \"oars\" \"satchel\">> With parameter() , you can access these extra values and use them inside the displayed passage: ::CaramelCanoe You're canoeing down the caramel river, rowing with <<print parameter(0)>>, your <<print parameter(1)>> by your side. Running the aforementioned <<display>> will show \"You're canoeing down the caramel river, rowing with oars, your satchel by your side.\" This allows you to subtly alter a passage depending on where and how it's <<display>> ed, without using variables. You can, for instance, make a passage that describes the character's clothes, and you can supply different adjectives to the passage, just by including them in the shorthand <<display>> .","title":"parameter(number)"},{"location":"twine1/functions/passage.html","text":"passage() # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to the current passage's name. If used inside a <<display>> ed passage, then it will be the name of the \"top\" passage - the one that is causing it to be displayed.","title":"passage"},{"location":"twine1/functions/passage.html#passage","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to the current passage's name. If used inside a <<display>> ed passage, then it will be the name of the \"top\" passage - the one that is causing it to be displayed.","title":"passage()"},{"location":"twine1/functions/previous.html","text":"previous() # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to the name of the last passage the player visited. You can use this with the link syntax to make a link that goes back to the previous passage: The snowballs are useless against this lava beast! Undo! [[Undo!|previous()]]","title":"previous"},{"location":"twine1/functions/previous.html#previous","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to the name of the last passage the player visited. You can use this with the link syntax to make a link that goes back to the previous passage: The snowballs are useless against this lava beast! Undo! [[Undo!|previous()]]","title":"previous()"},{"location":"twine1/functions/prompt.html","text":"prompt(string, string) # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Displays a text input dialog box. The text entered here will be the value of the function. The first string you give it is the message to display to the player. The second is the default value for the text input. This is a browser built-in. <<set $name to prompt(\"What's your name?\",\"Alyssa P. Hacker\")>> As an alternative to a browser dialog box, you can instead use the <<textinput>> macro.","title":"prompt"},{"location":"twine1/functions/prompt.html#promptstring-string","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Displays a text input dialog box. The text entered here will be the value of the function. The first string you give it is the message to display to the player. The second is the default value for the text input. This is a browser built-in. <<set $name to prompt(\"What's your name?\",\"Alyssa P. Hacker\")>> As an alternative to a browser dialog box, you can instead use the <<textinput>> macro.","title":"prompt(string, string)"},{"location":"twine1/functions/random.html","text":"random(value, value) # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When given two positive numbers, this produces a positive whole number randomly selected between the two, inclusive. This function can (and should only) be used to generate random numbers within a wide range - such as 1 to 100. Prior to version 1.4.2, you had to use the cumbersome Math.random(value)*value idiom to do this, which wasn't that memorable or succinct. You have a <<print random(1,99)>> percent chance of complete and utter defeat!","title":"random"},{"location":"twine1/functions/random.html#randomvalue-value","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When given two positive numbers, this produces a positive whole number randomly selected between the two, inclusive. This function can (and should only) be used to generate random numbers within a wide range - such as 1 to 100. Prior to version 1.4.2, you had to use the cumbersome Math.random(value)*value idiom to do this, which wasn't that memorable or succinct. You have a <<print random(1,99)>> percent chance of complete and utter defeat!","title":"random(value, value)"},{"location":"twine1/functions/rot13.html","text":"rot13(string) # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When given a string, it performs the ROT13 transformation on it, which simultaneously encodes normal text and decodes ROT13 text. (This is not expected to be a widely used function, but is available anyway.)","title":"rot13"},{"location":"twine1/functions/rot13.html#rot13string","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When given a string, it performs the ROT13 transformation on it, which simultaneously encodes normal text and decodes ROT13 text. (This is not expected to be a widely used function, but is available anyway.)","title":"rot13(string)"},{"location":"twine1/functions/tags.html","text":"tags() # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to an array containing the current passage's tags. The meaning of \"current passage\" is the same as it is for passage() . Since this is a Javascript array, you will need to use built-in array functions to obtain values from it. Usually, you'd simply want to do something like this: <<if tags().indexOf(\"thunder\") > -1>>\\ Thunder is crackling above! <<endif>>\\","title":"tags"},{"location":"twine1/functions/tags.html#tags","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to an array containing the current passage's tags. The meaning of \"current passage\" is the same as it is for passage() . Since this is a Javascript array, you will need to use built-in array functions to obtain values from it. Usually, you'd simply want to do something like this: <<if tags().indexOf(\"thunder\") > -1>>\\ Thunder is crackling above! <<endif>>\\","title":"tags()"},{"location":"twine1/functions/turns.html","text":"turns() # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to the number of moves the player has made - that is, the number of times a link to another passage has been followed by the player.","title":"turns"},{"location":"twine1/functions/turns.html#turns","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to the number of moves the player has made - that is, the number of times a link to another passage has been followed by the player.","title":"turns()"},{"location":"twine1/functions/visited.html","text":"visited(string, string...) # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to the number of times you've visited the named passage. It's fairly useful - this can eliminate or greatly reduce the need to use \"counter variables\" to keep track of the player's actions. If the passage name is omitted, as in visited() , then its value is for the current passage. If multiple strings are supplied to it, then it will return the value for the passage that was visited the least. You've visited this passage <<print visited()>> times. You've visited the Pond <<print visited(\"Pond\")>> times. Since visited() returns the value for the passage visited the least, then if the below result is greater than 0 (i.e. not false), then both passages must have been visited at least once. <<if visited(\"Armoury\", \"Haberdasher\")>>\\ With your sword and hat, nothing can stop you! <<endif>>\\ Advanced use: if you want to display something on every third time you visit a passage (no matter if you visit it 3 times, 10 times, or 100 times), then you can use the modulo operator % to transform the number: <<if visited() % 3 is 0>>\\ \"Every 3 visits to this passage, I walk the Earth again,\" croons Count Dracula. <<endif>>\\ Feel free to modify the \"3\" to any number you wish, to make something happen on every four visits, every ten visits, etc.","title":"visited"},{"location":"twine1/functions/visited.html#visitedstring-string","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to the number of times you've visited the named passage. It's fairly useful - this can eliminate or greatly reduce the need to use \"counter variables\" to keep track of the player's actions. If the passage name is omitted, as in visited() , then its value is for the current passage. If multiple strings are supplied to it, then it will return the value for the passage that was visited the least. You've visited this passage <<print visited()>> times. You've visited the Pond <<print visited(\"Pond\")>> times. Since visited() returns the value for the passage visited the least, then if the below result is greater than 0 (i.e. not false), then both passages must have been visited at least once. <<if visited(\"Armoury\", \"Haberdasher\")>>\\ With your sword and hat, nothing can stop you! <<endif>>\\ Advanced use: if you want to display something on every third time you visit a passage (no matter if you visit it 3 times, 10 times, or 100 times), then you can use the modulo operator % to transform the number: <<if visited() % 3 is 0>>\\ \"Every 3 visits to this passage, I walk the Earth again,\" croons Count Dracula. <<endif>>\\ Feel free to modify the \"3\" to any number you wish, to make something happen on every four visits, every ten visits, etc.","title":"visited(string, string...)"},{"location":"twine1/functions/visitedtag.html","text":"visitedTag(string, string...) # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to the number of times you've visited passages with the given tags. If you use tags to delineate parts of your story, this can be a useful variant of visited() . Hard to believe you spent <<print visitedTag(\"Swamp\")>> turns inside the swamp! <<if visitedTag(\"church\",\"death\")>>\\ You died in the church, for some reason. <<endif>>\\","title":"visitedtag"},{"location":"twine1/functions/visitedtag.html#visitedtagstring-string","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Has a value equal to the number of times you've visited passages with the given tags. If you use tags to delineate parts of your story, this can be a useful variant of visited() . Hard to believe you spent <<print visitedTag(\"Swamp\")>> turns inside the swamp! <<if visitedTag(\"church\",\"death\")>>\\ You died in the church, for some reason. <<endif>>\\","title":"visitedTag(string, string...)"},{"location":"twine1/macros/back.html","text":"<<back>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<back>> macro provides a \"\u2190 back\" link and will, upon being clicked, either move backward one passage in the history of the story or, when given a parameter, will go back to that exact passage in the history of the story. (See also: <<return>> macro ) Previous Passage Example # <<back>> Going back to \"Start\" Passage Example: <<back \"Start\">>","title":"back"},{"location":"twine1/macros/back.html#ltltbackgtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<back>> macro provides a \"\u2190 back\" link and will, upon being clicked, either move backward one passage in the history of the story or, when given a parameter, will go back to that exact passage in the history of the story. (See also: <<return>> macro )","title":"&amp;lt;&amp;lt;back&amp;gt;&amp;gt;"},{"location":"twine1/macros/back.html#previous-passage-example","text":"<<back>> Going back to \"Start\" Passage Example: <<back \"Start\">>","title":"Previous Passage Example"},{"location":"twine1/macros/button.html","text":"<<button>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<button>> macro creates a button, a special type of link that, when clicked, sets the data entered into other form macros in the passage ( <<textinput>> , <<radio>> , <<checkbox>> ), and moves to another passage. Usage # The <<button>> macro should be provided with the familiar link syntax: <<button [[displayed text|passage name]]>> The resulting button behaves identically to a normal link, but, when clicked, additionally causes the data entered into <<textinput>> , <<radio>> and <<checkbox>> macros to be placed in the variables. For instance, if the macro <<textinput $FoodName>> appears in the same passage with a <<button>> , and the text \"pretzels\" has been entered into the input box, then clicking the button will, in addition to changing passages, run the equivalent of <<set $FoodName to \"pretzels\">> .","title":"button"},{"location":"twine1/macros/button.html#ltltbuttongtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<button>> macro creates a button, a special type of link that, when clicked, sets the data entered into other form macros in the passage ( <<textinput>> , <<radio>> , <<checkbox>> ), and moves to another passage.","title":"&amp;lt;&amp;lt;button&amp;gt;&amp;gt;"},{"location":"twine1/macros/button.html#usage","text":"The <<button>> macro should be provided with the familiar link syntax: <<button [[displayed text|passage name]]>> The resulting button behaves identically to a normal link, but, when clicked, additionally causes the data entered into <<textinput>> , <<radio>> and <<checkbox>> macros to be placed in the variables. For instance, if the macro <<textinput $FoodName>> appears in the same passage with a <<button>> , and the text \"pretzels\" has been entered into the input box, then clicking the button will, in addition to changing passages, run the equivalent of <<set $FoodName to \"pretzels\">> .","title":"Usage"},{"location":"twine1/macros/checkbox.html","text":"<<checkbox>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<checkbox>> macro creates a 'checkbox' <input> HTML element starting from the macro to the end of the current line. (See also: <<radio>> macro ) Example # <<checkbox>>This is a checkbox input","title":"checkbox"},{"location":"twine1/macros/checkbox.html#ltltcheckboxgtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<checkbox>> macro creates a 'checkbox' <input> HTML element starting from the macro to the end of the current line. (See also: <<radio>> macro )","title":"&amp;lt;&amp;lt;checkbox&amp;gt;&amp;gt;"},{"location":"twine1/macros/checkbox.html#example","text":"<<checkbox>>This is a checkbox input","title":"Example"},{"location":"twine1/macros/choice.html","text":"<<choice>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. <<choice>> creates a branching path in the story through creating a link to another passage. When clicked, the story will transition to the passage. However, if the story is transitioned backward or it returns to the same passage, the other choices will no longer be available. <<choice \"Test 1\">> <<choice \"Test 2\">> <<choice \"Test 3\">>","title":"choice"},{"location":"twine1/macros/choice.html#ltltchoicegtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. <<choice>> creates a branching path in the story through creating a link to another passage. When clicked, the story will transition to the passage. However, if the story is transitioned backward or it returns to the same passage, the other choices will no longer be available. <<choice \"Test 1\">> <<choice \"Test 2\">> <<choice \"Test 3\">>","title":"&amp;lt;&amp;lt;choice&amp;gt;&amp;gt;"},{"location":"twine1/macros/display.html","text":"<<display>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<display>> macro lets you display the full contents of a passage inside another passage. Usage # Long form: <<display expression>> Shorthand form (see below): <<string [value \u2026]>> Motivating example # Suppose you have a block of text or code which appears identically in multiple passages. It can be a pain to have to keep track of each instance in which it was used, especially when fixing spelling or link names. <<display>> provides you with an elegant means of reusing this text: simply place it in another passage, and then use <<display>> in each of the places it is used. A note about tags # What the <<display>> macro actually does is copy the text from the given passage into the current passage. It doesn't actually display the passage in its own right. What this means is that, if a passage has tag-based CSS styling specific to it, then that styling will not be applied to the current passage! Using a variable to display a passage # The <<display>> macro treats its argument as a code expression. This means that you can put a passage name in a variable and then display it: With a rush of wind, you arrive in the <<print $destination>> ! <<display $destination>> If, say, $destination contained the string \"Cellar\", and a Cellar passage existed, it would print \"With a rush of wind, you arrive in the Cellar!\" and display the Cellar passage. Shorthand form # The <<display>> macro is special among Twine macros because it has a shorthand form. Instead of writing <<display \"passage\">> , you can simply write <<passage>> , as if it was another macro. However, to avoid conflicts with other aspects of Twine syntax, you can only use the shorthand to display passages whose names adhere to these rules: The passage name must not contain spaces. The passage name must not conflict with the name of an actual macro (so, you can't display a passage titled \"print\"). Displaying a script passage # If you attempt to <<display>> a passage containing a Javascript script, something special will happen: the script code will not be displayed, but will instead be re-executed. Avoid the <<display>> loop # It is possible to lock up a reader's Web browser by using the \u00abdisplay\u00bb macro improperly, like this: :: Oops <<display \"Oops\">> When displayed, the passage will keep attempting to display itself over and over until the reader force quits his Web browser. This doesn't do permanent damage, but it will not endear yourself to your reader.","title":"display"},{"location":"twine1/macros/display.html#ltltdisplaygtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<display>> macro lets you display the full contents of a passage inside another passage.","title":"&amp;lt;&amp;lt;display&amp;gt;&amp;gt;"},{"location":"twine1/macros/display.html#usage","text":"Long form: <<display expression>> Shorthand form (see below): <<string [value \u2026]>>","title":"Usage"},{"location":"twine1/macros/display.html#motivating-example","text":"Suppose you have a block of text or code which appears identically in multiple passages. It can be a pain to have to keep track of each instance in which it was used, especially when fixing spelling or link names. <<display>> provides you with an elegant means of reusing this text: simply place it in another passage, and then use <<display>> in each of the places it is used.","title":"Motivating example"},{"location":"twine1/macros/display.html#a-note-about-tags","text":"What the <<display>> macro actually does is copy the text from the given passage into the current passage. It doesn't actually display the passage in its own right. What this means is that, if a passage has tag-based CSS styling specific to it, then that styling will not be applied to the current passage!","title":"A note about tags"},{"location":"twine1/macros/display.html#using-a-variable-to-display-a-passage","text":"The <<display>> macro treats its argument as a code expression. This means that you can put a passage name in a variable and then display it: With a rush of wind, you arrive in the <<print $destination>> ! <<display $destination>> If, say, $destination contained the string \"Cellar\", and a Cellar passage existed, it would print \"With a rush of wind, you arrive in the Cellar!\" and display the Cellar passage.","title":"Using a variable to display a passage"},{"location":"twine1/macros/display.html#shorthand-form","text":"The <<display>> macro is special among Twine macros because it has a shorthand form. Instead of writing <<display \"passage\">> , you can simply write <<passage>> , as if it was another macro. However, to avoid conflicts with other aspects of Twine syntax, you can only use the shorthand to display passages whose names adhere to these rules: The passage name must not contain spaces. The passage name must not conflict with the name of an actual macro (so, you can't display a passage titled \"print\").","title":"Shorthand form"},{"location":"twine1/macros/display.html#displaying-a-script-passage","text":"If you attempt to <<display>> a passage containing a Javascript script, something special will happen: the script code will not be displayed, but will instead be re-executed.","title":"Displaying a script passage"},{"location":"twine1/macros/display.html#avoid-the-ltltdisplaygtgt-loop","text":"It is possible to lock up a reader's Web browser by using the \u00abdisplay\u00bb macro improperly, like this: :: Oops <<display \"Oops\">> When displayed, the passage will keep attempting to display itself over and over until the reader force quits his Web browser. This doesn't do permanent damage, but it will not endear yourself to your reader.","title":"Avoid the &amp;lt;&amp;lt;display&amp;gt;&amp;gt; loop"},{"location":"twine1/macros/else.html","text":"<<else>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. <<else>> is a macro that is used to indicate text that should be displayed if the condition is false. It is paired with <<if>> or <<endif>> . The door to the left leads to the pantry. <<if visited(\"Pantry\")>> No way are you going back in there! <<else>> Sounds like a good place to search... <<endif>> The <<else>> macro can itself contain another \"if condition\", which causes the contents to only display if THAT condition is true: <<if $health is 3>>\\ You're in tip-top condition - fighting fit and frankly fearsome. No human or god can lick you! <<else if $health is 2>>\\ DOOMED! You're DOOMED, puny player!! You've lost already! YOU CANNOT WIN!! MWAHAHAHAHA! <<endif>>\\ You can insert as many <<else if>> 's as you want inside an <<if>> / <<endif>> pair. ( Note: if you prefer, you can also write \"else if\" as \"elseif\".)","title":"else"},{"location":"twine1/macros/else.html#ltltelsegtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. <<else>> is a macro that is used to indicate text that should be displayed if the condition is false. It is paired with <<if>> or <<endif>> . The door to the left leads to the pantry. <<if visited(\"Pantry\")>> No way are you going back in there! <<else>> Sounds like a good place to search... <<endif>> The <<else>> macro can itself contain another \"if condition\", which causes the contents to only display if THAT condition is true: <<if $health is 3>>\\ You're in tip-top condition - fighting fit and frankly fearsome. No human or god can lick you! <<else if $health is 2>>\\ DOOMED! You're DOOMED, puny player!! You've lost already! YOU CANNOT WIN!! MWAHAHAHAHA! <<endif>>\\ You can insert as many <<else if>> 's as you want inside an <<if>> / <<endif>> pair. ( Note: if you prefer, you can also write \"else if\" as \"elseif\".)","title":"&amp;lt;&amp;lt;else&amp;gt;&amp;gt;"},{"location":"twine1/macros/endif.html","text":"<<endif>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. <<endif>> closes the usage of the <<if>> macro. Usage # The <<if>> macro can be used in formats like these: <<if expression>> Text <<endif>> <<if expression>> Text <<else>> Text <<endif>> <<if expression>> Text <<else if expression>> Text ... <<endif>> expression is an expression that can evaluate to true or false. Text is any amount of passage text that you wish to display only if the condition is true. <<endif>> is a macro tag indicating the end of the <<if>> macro invocation. Note that the Text can contain any Twine code, including an inner <<if>> invocation: <<if $body is \"wounded\">>You are <<if $blood <= 5>>about to die<<else>>bleeding<<endif>>. Seek help <<endif>>","title":"endif"},{"location":"twine1/macros/endif.html#ltltendifgtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. <<endif>> closes the usage of the <<if>> macro.","title":"&amp;lt;&amp;lt;endif&amp;gt;&amp;gt;"},{"location":"twine1/macros/endif.html#usage","text":"The <<if>> macro can be used in formats like these: <<if expression>> Text <<endif>> <<if expression>> Text <<else>> Text <<endif>> <<if expression>> Text <<else if expression>> Text ... <<endif>> expression is an expression that can evaluate to true or false. Text is any amount of passage text that you wish to display only if the condition is true. <<endif>> is a macro tag indicating the end of the <<if>> macro invocation. Note that the Text can contain any Twine code, including an inner <<if>> invocation: <<if $body is \"wounded\">>You are <<if $blood <= 5>>about to die<<else>>bleeding<<endif>>. Seek help <<endif>>","title":"Usage"},{"location":"twine1/macros/endsilently.html","text":"<<endsilently>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. <<endsilently>> works with the <<silently>> macro to clear the space normally taken up by the use of macros within a passage. <<silently>> <<set $name to \"Name\">> <<endsilently>>","title":"endsilently"},{"location":"twine1/macros/endsilently.html#ltltendsilentlygtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. <<endsilently>> works with the <<silently>> macro to clear the space normally taken up by the use of macros within a passage. <<silently>> <<set $name to \"Name\">> <<endsilently>>","title":"&amp;lt;&amp;lt;endsilently&amp;gt;&amp;gt;"},{"location":"twine1/macros/forget.html","text":"<<forget>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<forget>> macro \"forgets\" a variable previously \"remembered\" through the use of the <<remember>> macro. <<forget $meals>>","title":"forget"},{"location":"twine1/macros/forget.html#ltltforgetgtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<forget>> macro \"forgets\" a variable previously \"remembered\" through the use of the <<remember>> macro. <<forget $meals>>","title":"&amp;lt;&amp;lt;forget&amp;gt;&amp;gt;"},{"location":"twine1/macros/if.html","text":"<<if>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<if>> macro is used to control what text the player sees when they visit a passage, or what macros are run when the passage loads. Usage # The <<if>> macro can be used in formats like these: <<if expression>> Text <<endif>> <<if expression>> Text <<else>> Text <<endif>> <<if expression>> Text <<else if expression>> Text... <<endif>> expression is an expression that can evaluate to true or false. Text is any amount of passage text that you wish to display only if the condition is true. <<endif>> is a macro tag indicating the end of the <<if>> macro invocation. Note that the Text can contain any Twine code, including an inner <<if>> invocation: <<if $body is \"wounded\">>You are <<if $blood <= 5>>about to die<<else>>bleeding<<endif>>. Seek help!<<endif>> Motivating example # Consider a passage like this: You return to Selator's hut. A merry fire is crackling in the kitchen, and something is cooking that smells delicious. He greets you warmly and asks, \u201cHave you got the berry?\u201d If you have got the purple berry of the Antherica plant, turn to 175. If not, turn to 52. (Steve Jackson and Ian Livingstone, Scorpion Swamp) It would be nice if the story could track whether the protagonist found the berry or not, and branch accordingly. We can do this by simply noting the name of the passage where the berry was found: :: Antherica You have no doubt, from Selator's description, that you have found the Antherica plant. Half your mission is completed. Now you must return to the village with the precious berry. Then we can use the <<if>> macro and the visited() function to display a passage indicating victory: You return to Selator's hut. A merry fire is crackling in the kitchen, and something is cooking that smells delicious. He greets you warmly and asks, \"Have you got the berry?\" <<if visited(\"Antherica\")>> \"Wonderful!\" he exclaims... <<endif>> A note about line breaks # When a passage containing an <<if>> macro is displayed, the <<if>> and <<endif>> macro tags are removed from the text. But, the line on which the tags was placed will remain - thus, if it was by itself on a line, it will create a blank line. You can choose to fix this by ending the tags' lines with a backslash: You leap over the sawblade with deft ease. <<if $alive>>\\ She laughs. \"Still not dead? How callous of you to scorn Death's loving embrace!\" <<endif>>\\ You may, for larger <<if>> constructions, use the <<nobr>> macro instead: You glare at the alien control panel. <<nobr>> <<if $red>> The red button blinks <<if $earplugs>> and hisses<<endif>> at you. <<endif>> <<endnobr>>","title":"if"},{"location":"twine1/macros/if.html#ltltifgtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<if>> macro is used to control what text the player sees when they visit a passage, or what macros are run when the passage loads.","title":"&amp;lt;&amp;lt;if&amp;gt;&amp;gt;"},{"location":"twine1/macros/if.html#usage","text":"The <<if>> macro can be used in formats like these: <<if expression>> Text <<endif>> <<if expression>> Text <<else>> Text <<endif>> <<if expression>> Text <<else if expression>> Text... <<endif>> expression is an expression that can evaluate to true or false. Text is any amount of passage text that you wish to display only if the condition is true. <<endif>> is a macro tag indicating the end of the <<if>> macro invocation. Note that the Text can contain any Twine code, including an inner <<if>> invocation: <<if $body is \"wounded\">>You are <<if $blood <= 5>>about to die<<else>>bleeding<<endif>>. Seek help!<<endif>>","title":"Usage"},{"location":"twine1/macros/if.html#motivating-example","text":"Consider a passage like this: You return to Selator's hut. A merry fire is crackling in the kitchen, and something is cooking that smells delicious. He greets you warmly and asks, \u201cHave you got the berry?\u201d If you have got the purple berry of the Antherica plant, turn to 175. If not, turn to 52. (Steve Jackson and Ian Livingstone, Scorpion Swamp) It would be nice if the story could track whether the protagonist found the berry or not, and branch accordingly. We can do this by simply noting the name of the passage where the berry was found: :: Antherica You have no doubt, from Selator's description, that you have found the Antherica plant. Half your mission is completed. Now you must return to the village with the precious berry. Then we can use the <<if>> macro and the visited() function to display a passage indicating victory: You return to Selator's hut. A merry fire is crackling in the kitchen, and something is cooking that smells delicious. He greets you warmly and asks, \"Have you got the berry?\" <<if visited(\"Antherica\")>> \"Wonderful!\" he exclaims... <<endif>>","title":"Motivating example"},{"location":"twine1/macros/if.html#a-note-about-line-breaks","text":"When a passage containing an <<if>> macro is displayed, the <<if>> and <<endif>> macro tags are removed from the text. But, the line on which the tags was placed will remain - thus, if it was by itself on a line, it will create a blank line. You can choose to fix this by ending the tags' lines with a backslash: You leap over the sawblade with deft ease. <<if $alive>>\\ She laughs. \"Still not dead? How callous of you to scorn Death's loving embrace!\" <<endif>>\\ You may, for larger <<if>> constructions, use the <<nobr>> macro instead: You glare at the alien control panel. <<nobr>> <<if $red>> The red button blinks <<if $earplugs>> and hisses<<endif>> at you. <<endif>> <<endnobr>>","title":"A note about line breaks"},{"location":"twine1/macros/nobr.html","text":"<<nobr>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<nobr>> macro removes all of the line breaks in the enclosed text. Usage # <<nobr>> Text <<endnobr>> Motivating example # In some cases, you'll want to do several things with macros at once. For example, in this passage: All you possess is an Axe (note under Weapons on your Action Chart) and a Backpack containing 1 Meal (note under Meals on your Action Chart). (Joe Dever, Flight from the Dark) You'd probably want to set both the protagonist's weapon and number of meals. You can do this without any extraneous whitespace appearing in your story by putting all the <<set>> statements on the same line: All you possess is an Axe and a Backpack containing 1 Meal. <<set $meals to 1>> <<set $weapon to \"axe\">> This is not particularly readable, however. The <<nobr>> macro can help in these situations, like so: All you possess is an Axe and a Backpack containing 1 Meal. <<nobr>> <<set $meals to 1>> <<set $weapon to \"axe\">> <<endnobr>> All the line breaks between <<nobr>> and <<endnobr>> are eliminated. See also # The nobr passage tag can be applied if you want every line break in the passage to be removed, without having to insert the macro tags around the entire text. The <<silently>> macro was used for roughly the same purposes as \u00abnobr\u00bb prior to version 1.4.0.","title":"nobr"},{"location":"twine1/macros/nobr.html#ltltnobrgtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<nobr>> macro removes all of the line breaks in the enclosed text.","title":"&amp;lt;&amp;lt;nobr&amp;gt;&amp;gt;"},{"location":"twine1/macros/nobr.html#usage","text":"<<nobr>> Text <<endnobr>>","title":"Usage"},{"location":"twine1/macros/nobr.html#motivating-example","text":"In some cases, you'll want to do several things with macros at once. For example, in this passage: All you possess is an Axe (note under Weapons on your Action Chart) and a Backpack containing 1 Meal (note under Meals on your Action Chart). (Joe Dever, Flight from the Dark) You'd probably want to set both the protagonist's weapon and number of meals. You can do this without any extraneous whitespace appearing in your story by putting all the <<set>> statements on the same line: All you possess is an Axe and a Backpack containing 1 Meal. <<set $meals to 1>> <<set $weapon to \"axe\">> This is not particularly readable, however. The <<nobr>> macro can help in these situations, like so: All you possess is an Axe and a Backpack containing 1 Meal. <<nobr>> <<set $meals to 1>> <<set $weapon to \"axe\">> <<endnobr>> All the line breaks between <<nobr>> and <<endnobr>> are eliminated.","title":"Motivating example"},{"location":"twine1/macros/nobr.html#see-also","text":"The nobr passage tag can be applied if you want every line break in the passage to be removed, without having to insert the macro tags around the entire text. The <<silently>> macro was used for roughly the same purposes as \u00abnobr\u00bb prior to version 1.4.0.","title":"See also"},{"location":"twine1/macros/print.html","text":"<<print>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<print>> macro lets you print expressions, pure and simple. Usage: <<print expression>> The expression's value is calculated and printed into the passage. If an error occurred while calculating, an error message will be printed instead. Basic examples # \"So, <<print $playerName>>, we meet again!\" booms the Wrestlemaster. Alas! <<print visited()>> time(s) you've fallen in this damned pit! Changing values while printing them # The <<print>> macro has an extra feature: if you use \"to\", \"+=\", or other operators common to the <<set>> macro in the <<print>> 's expression, then it will change the variables and print the new values. For example: After the transfusion, you have <<set $blood -= 7>><<print $blood>> litres of blood left. can be potentially rewritten as: After the transfusion, you have <<print $blood -= 7>> litres of blood left. Shorthand form # You may find yourself frequently using \u00abprint\u00bb to simply print a variable, without alteration. <<print>> has a convenient shorthand form for this single case: you simply omit the word \"print\", leaving just the variable within the angle brackets. For instance, <<print $beers>> can become simply <<$beers>> . This allows you to write Twine stories in a \"template\" style: Your superior officer approaches. \"<<$name>>, you've done a fine job. No, a superlative job. <<$species>> like you have no place on this cruel Earth, that rewards only greed and selfishness.\" Note: you can only perform this shorthand form using variables! You cannot, for instance, write <<visited()>> .","title":"print"},{"location":"twine1/macros/print.html#ltltprintgtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<print>> macro lets you print expressions, pure and simple. Usage: <<print expression>> The expression's value is calculated and printed into the passage. If an error occurred while calculating, an error message will be printed instead.","title":"&amp;lt;&amp;lt;print&amp;gt;&amp;gt;"},{"location":"twine1/macros/print.html#basic-examples","text":"\"So, <<print $playerName>>, we meet again!\" booms the Wrestlemaster. Alas! <<print visited()>> time(s) you've fallen in this damned pit!","title":"Basic examples"},{"location":"twine1/macros/print.html#changing-values-while-printing-them","text":"The <<print>> macro has an extra feature: if you use \"to\", \"+=\", or other operators common to the <<set>> macro in the <<print>> 's expression, then it will change the variables and print the new values. For example: After the transfusion, you have <<set $blood -= 7>><<print $blood>> litres of blood left. can be potentially rewritten as: After the transfusion, you have <<print $blood -= 7>> litres of blood left.","title":"Changing values while printing them"},{"location":"twine1/macros/print.html#shorthand-form","text":"You may find yourself frequently using \u00abprint\u00bb to simply print a variable, without alteration. <<print>> has a convenient shorthand form for this single case: you simply omit the word \"print\", leaving just the variable within the angle brackets. For instance, <<print $beers>> can become simply <<$beers>> . This allows you to write Twine stories in a \"template\" style: Your superior officer approaches. \"<<$name>>, you've done a fine job. No, a superlative job. <<$species>> like you have no place on this cruel Earth, that rewards only greed and selfishness.\" Note: you can only perform this shorthand form using variables! You cannot, for instance, write <<visited()>> .","title":"Shorthand form"},{"location":"twine1/macros/radio.html","text":"<<radio>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<radio>> macro lets you offer your reader with a familiar radio button input. While a <<checkbox>> set lets the reader make multiple choices, radio buttons are mutually exclusive\u2013your reader can choose only one option. Note that, in order for the value to be stored, there must be a <<button>> in the passage, and the user must click it. This code sample: Would you like to see some radio buttons? <<radio $choice \"yes\">> <<radio $choice \"no\">> <<radio $choice \"maybe\">> <<button [[Go on|go_on]]>> In this example, the variable $choice is the name for this set of radio buttons. You can set this to any variable name you like. You see each input has a value\u2013in this example, \"yes,\" \"no,\" and \"maybe.\" These are what will be displayed to the reader AND stored in the variable ( $choice ) to be used in the next passage. Thus if a reader chooses \"maybe\" and clicks the button \"Go on,\" it's the same as telling Twine this: <<set $choice = \"maybe\">> Twine 1 forces a line break between radio buttons. To work around this, you can set your radio buttons in an HTML table: < table > < tr > < td > Sound? </ td >< td > < < radio $ sound \" yes \" > > </ td >< td > < < radio $ sound \" no \" > > </ td > </ tr > < tr > < td > Color effects? </ td >< td > < < radio $ color_effects \" yes \" > > </ td >< td > < < radio $ color_effects \" no \" > > </ td > </ tr > </ table > < < button [[ Begin the Game | Begin ]] > > There is no native option to mark a radio button as selected before your reader makes their choice. One option to work around this in Twine natively is to initialize your variable to the default value and offer the reader only the other choice(s): <<set $sound = \"no\">>\\ <<set $color_effects = \"no\">> <table> <tr> <td>Sound?</td><td></td><td><<radio $sound \"yes\">></td> </tr> <tr> <td>Color effects?</td><td></td><td><<radio $color_effects \"yes\">></td> </tr> </table> <<button [[Start the Game|start_game]]>> A disadvantage of this approach is that, once the option is checked, it can't be unchecked back to whatever you set as the default.","title":"radio"},{"location":"twine1/macros/radio.html#ltltradiogtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<radio>> macro lets you offer your reader with a familiar radio button input. While a <<checkbox>> set lets the reader make multiple choices, radio buttons are mutually exclusive\u2013your reader can choose only one option. Note that, in order for the value to be stored, there must be a <<button>> in the passage, and the user must click it. This code sample: Would you like to see some radio buttons? <<radio $choice \"yes\">> <<radio $choice \"no\">> <<radio $choice \"maybe\">> <<button [[Go on|go_on]]>> In this example, the variable $choice is the name for this set of radio buttons. You can set this to any variable name you like. You see each input has a value\u2013in this example, \"yes,\" \"no,\" and \"maybe.\" These are what will be displayed to the reader AND stored in the variable ( $choice ) to be used in the next passage. Thus if a reader chooses \"maybe\" and clicks the button \"Go on,\" it's the same as telling Twine this: <<set $choice = \"maybe\">> Twine 1 forces a line break between radio buttons. To work around this, you can set your radio buttons in an HTML table: < table > < tr > < td > Sound? </ td >< td > < < radio $ sound \" yes \" > > </ td >< td > < < radio $ sound \" no \" > > </ td > </ tr > < tr > < td > Color effects? </ td >< td > < < radio $ color_effects \" yes \" > > </ td >< td > < < radio $ color_effects \" no \" > > </ td > </ tr > </ table > < < button [[ Begin the Game | Begin ]] > > There is no native option to mark a radio button as selected before your reader makes their choice. One option to work around this in Twine natively is to initialize your variable to the default value and offer the reader only the other choice(s): <<set $sound = \"no\">>\\ <<set $color_effects = \"no\">> <table> <tr> <td>Sound?</td><td></td><td><<radio $sound \"yes\">></td> </tr> <tr> <td>Color effects?</td><td></td><td><<radio $color_effects \"yes\">></td> </tr> </table> <<button [[Start the Game|start_game]]>> A disadvantage of this approach is that, once the option is checked, it can't be unchecked back to whatever you set as the default.","title":"&amp;lt;&amp;lt;radio&amp;gt;&amp;gt;"},{"location":"twine1/macros/remember.html","text":"<<remember>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Variables are reset every time the reader restarts a story. If you'd like to remember the value of a variable after the game, use the <<remember>> macro. It works exactly the same way as <<set>> , except it stores the variable in browser storage that remains between sessions. At long last, you have escaped the dungeons. <<remember $escapes += 1>> So far, you have escaped the dungeons <<print $escapes>> times. If you are only interested in remembering the current state of a variable, you don't need to include an assignment: <<remember $meals>>","title":"remember"},{"location":"twine1/macros/remember.html#ltltremembergtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Variables are reset every time the reader restarts a story. If you'd like to remember the value of a variable after the game, use the <<remember>> macro. It works exactly the same way as <<set>> , except it stores the variable in browser storage that remains between sessions. At long last, you have escaped the dungeons. <<remember $escapes += 1>> So far, you have escaped the dungeons <<print $escapes>> times. If you are only interested in remembering the current state of a variable, you don't need to include an assignment: <<remember $meals>>","title":"&amp;lt;&amp;lt;remember&amp;gt;&amp;gt;"},{"location":"twine1/macros/return.html","text":"<<return>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<return>> macro provides a \"return\" link to move backward one passage in the history of the story. (See also: <<back>> macro ) Previous Passage Example # <<return>>","title":"return"},{"location":"twine1/macros/return.html#ltltreturngtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<return>> macro provides a \"return\" link to move backward one passage in the history of the story. (See also: <<back>> macro )","title":"&amp;lt;&amp;lt;return&amp;gt;&amp;gt;"},{"location":"twine1/macros/return.html#previous-passage-example","text":"<<return>>","title":"Previous Passage Example"},{"location":"twine1/macros/set.html","text":"<<set>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<set>> macro \"sets\" a value into a variable. Any value that can be stored like numbers, strings, and even arrays can be \"set.\" Example: <<set $variableName to \"Value\">>","title":"set"},{"location":"twine1/macros/set.html#ltltsetgtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<set>> macro \"sets\" a value into a variable. Any value that can be stored like numbers, strings, and even arrays can be \"set.\" Example: <<set $variableName to \"Value\">>","title":"&amp;lt;&amp;lt;set&amp;gt;&amp;gt;"},{"location":"twine1/macros/silently.html","text":"<<silently>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<silently>> macro clears the space normally taken up by the use of macros within a passage up to the corresponding <<endsilently>> . <<silently>> <<set $name to \"Name\">> <<endsilently>>","title":"silently"},{"location":"twine1/macros/silently.html#ltltsilentlygtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<silently>> macro clears the space normally taken up by the use of macros within a passage up to the corresponding <<endsilently>> . <<silently>> <<set $name to \"Name\">> <<endsilently>>","title":"&amp;lt;&amp;lt;silently&amp;gt;&amp;gt;"},{"location":"twine1/macros/textinput.html","text":"<<textinput>> # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<textinput>> macro creates a standard HTML text box that allows the player to enter text. The text will be set to a variable once a <<button>> macro is clicked. Usage # <<textinput $variable>> When a button is clicked, the text entered into the textbox will be set into the variable. Clicking normal links will ignore the text. (This allows normal links to serve as a \"cancel\" or \"go back\" operation, allowing the player to navigate without unintentionally altering the variables.) Button shorthand # As mentioned, the inputted text is ignored by Twine unless a button is clicked, which acts as a way to \"submit\" the text into the given variable. There is a way to create a button without using an extra <<button>> macro. Simply add a link as an extra argument to the macro: <<textinput $variable [[link text|passage name]] >> This creates a button immediately after the text box, which functions accordingly.","title":"textinput"},{"location":"twine1/macros/textinput.html#ltlttextinputgtgt","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. The <<textinput>> macro creates a standard HTML text box that allows the player to enter text. The text will be set to a variable once a <<button>> macro is clicked.","title":"&amp;lt;&amp;lt;textinput&amp;gt;&amp;gt;"},{"location":"twine1/macros/textinput.html#usage","text":"<<textinput $variable>> When a button is clicked, the text entered into the textbox will be set into the variable. Clicking normal links will ignore the text. (This allows normal links to serve as a \"cancel\" or \"go back\" operation, allowing the player to navigate without unintentionally altering the variables.)","title":"Usage"},{"location":"twine1/macros/textinput.html#button-shorthand","text":"As mentioned, the inputted text is ignored by Twine unless a button is clicked, which acts as a way to \"submit\" the text into the given variable. There is a way to create a button without using an extra <<button>> macro. Simply add a link as an extra argument to the macro: <<textinput $variable [[link text|passage name]] >> This creates a button immediately after the text box, which functions accordingly.","title":"Button shorthand"},{"location":"twine1/storyformats/jonah/index.html","text":"Jonah # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Visual Description # This displays the story with black text on a chrome background, and as a player clicks links in the story, the text expands. A player can review earlier passages of the story by scrolling upwards. This approach is called stretch-text. Players can rewind to past passages to try different choices by simply clicking the links in those passages. (This can be optionally disabled in StorySettings). The StoryMenu in Jonah is simply the box in the upper-right corner. CSS # Base CSS # # passages { position : relative ; padding-bottom : 12 em ; } . content a { color : #4d6ad8 ; } a . internalLink , a . externalLink , a . back , a . return , [ data-passage ] { cursor : pointer ; } a . brokenLink { background-color : red ; color : black ; } . marked { background-color : pink ; margin-right : 12 px ; } . marked [ title ] { cursor : help ; } # floater { position : fixed ; right : 0 ; top : 0 ; z-index : 5 ; background-color : #fff ; } . toolbar { padding : 0 ; visibility : hidden ; } . toolbar a { cursor : pointer ; } . passage : hover . toolbar { visibility : visible ; } . passage li [ data-bullet ] { list-style-type : none ; } . passage li [ data-bullet ] : before { content : attr ( data - bullet ); position : relative ; left : -1 em ; } . toolbar a { margin-left : 12 px ; } # storeArea { display : none ; } img { vertical-align : bottom ; } # noscript { font-size : 120 % ; font-weight : bold ; } # loadingbar { position : fixed ; top : 0 ; left : 0 ; border-top : solid #4d6ad8 6 px ; transition : width 0.5 s ; } Default CSS # This CSS completes the default Jonah look-and-feel. This code is removed if \"Don't use the Story Format's default CSS\" is selected in StorySettings or if the words \"blank stylesheet\" appear anywhere within a comment in the story's stylesheets. body { font-family : Verdana , sans-serif ; font-size : 62.5 % ; margin : 0 ; background-color : #f8f8f8 ; color : #303030 ; text-align : center ; } h1 , h2 , h3 { color : #000 ; font-weight : normal ; text-align : center ; } # content1 { text-align : left ; } h1 { font-size : 4 em ; line-height : 1.2 em ; margin-bottom : 0 ; margin-top : 1 em ; } h2 { font-size : 1.4 em ; font-style : italic ; margin-top : 1 em ; } h3 { font-size : 1.3 em ; margin-bottom : 5 em ; margin-top : .8 em ; } . passage { background-color : #f8f8f8 ; font-size : 1.3 em ; line-height : 175 % ; margin-bottom : 2 em ; } . content a { font-weight : bold ; text-decoration : none ; } . content a : hover { text-decoration : underline ; color : #8ea6ff ; } . passage : not ( : last-child ) : not ( : hover ) { opacity : 0.4 ; transition : 0.5 s ; -webkit- transition : 0.5 s ; } . passage center { max-width : 50 % ; margin : auto ; } input , button { font-size : 1.2 em ; } button { padding : 0.2 em 0.8 em ; } input [ type = text ] { width : 20 % ; } . toolbar a { color : #999 ; text-decoration : none ; } . toolbar a : hover { text-decoration : underline ; color : #8ea6ff ; } . title { color : #000 ; font : bold 1.4 em Verdana , sans-serif ; line-height : 200 % ; } # footer { font-size : 1.1 em ; font-style : italic ; margin-top : 5 em ; text-align : center ; } # footer a . externalLink { border-bottom : 1 px solid #464646 ; color : #464646 ; font-weight : normal ; } # floater { border-left : 1 px solid #ddd ; border-bottom : 2 px solid #aaa ; font-size : 1.1 em ; padding : 0 20 px ; text-align : center ; line-height : 100 % ; } # floater ul { text-align : left ; } # floater a { color : #999 ; cursor : pointer ; font-weight : bold ; text-decoration : none ; } # floater a : hover { color : #8ea6ff ; text-decoration : underline ; } # content1 { margin : 0 12.7 % 1 em 12.7 % ; text-align : left ; } . passage table { border-collapse : collapse ; font-size : 100 % ; margin : .8 em 1.0 em ; } . passage th , . passage td , . passage tr , . passage caption { padding : 3 px ; } . passage hr { height : 1 px ; } . toolbar { font-size : .5 em ; } . toolbar a { margin-left : 12 px ; } . passage ul , . passage ol { margin-left : .5 em ; padding-left : 1.5 em ; } li { list-style-type : square ; }","title":"Jonah"},{"location":"twine1/storyformats/jonah/index.html#jonah","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only.","title":"Jonah"},{"location":"twine1/storyformats/jonah/index.html#visual-description","text":"This displays the story with black text on a chrome background, and as a player clicks links in the story, the text expands. A player can review earlier passages of the story by scrolling upwards. This approach is called stretch-text. Players can rewind to past passages to try different choices by simply clicking the links in those passages. (This can be optionally disabled in StorySettings). The StoryMenu in Jonah is simply the box in the upper-right corner.","title":"Visual Description"},{"location":"twine1/storyformats/jonah/index.html#css","text":"","title":"CSS"},{"location":"twine1/storyformats/jonah/index.html#base-css","text":"# passages { position : relative ; padding-bottom : 12 em ; } . content a { color : #4d6ad8 ; } a . internalLink , a . externalLink , a . back , a . return , [ data-passage ] { cursor : pointer ; } a . brokenLink { background-color : red ; color : black ; } . marked { background-color : pink ; margin-right : 12 px ; } . marked [ title ] { cursor : help ; } # floater { position : fixed ; right : 0 ; top : 0 ; z-index : 5 ; background-color : #fff ; } . toolbar { padding : 0 ; visibility : hidden ; } . toolbar a { cursor : pointer ; } . passage : hover . toolbar { visibility : visible ; } . passage li [ data-bullet ] { list-style-type : none ; } . passage li [ data-bullet ] : before { content : attr ( data - bullet ); position : relative ; left : -1 em ; } . toolbar a { margin-left : 12 px ; } # storeArea { display : none ; } img { vertical-align : bottom ; } # noscript { font-size : 120 % ; font-weight : bold ; } # loadingbar { position : fixed ; top : 0 ; left : 0 ; border-top : solid #4d6ad8 6 px ; transition : width 0.5 s ; }","title":"Base CSS"},{"location":"twine1/storyformats/jonah/index.html#default-css","text":"This CSS completes the default Jonah look-and-feel. This code is removed if \"Don't use the Story Format's default CSS\" is selected in StorySettings or if the words \"blank stylesheet\" appear anywhere within a comment in the story's stylesheets. body { font-family : Verdana , sans-serif ; font-size : 62.5 % ; margin : 0 ; background-color : #f8f8f8 ; color : #303030 ; text-align : center ; } h1 , h2 , h3 { color : #000 ; font-weight : normal ; text-align : center ; } # content1 { text-align : left ; } h1 { font-size : 4 em ; line-height : 1.2 em ; margin-bottom : 0 ; margin-top : 1 em ; } h2 { font-size : 1.4 em ; font-style : italic ; margin-top : 1 em ; } h3 { font-size : 1.3 em ; margin-bottom : 5 em ; margin-top : .8 em ; } . passage { background-color : #f8f8f8 ; font-size : 1.3 em ; line-height : 175 % ; margin-bottom : 2 em ; } . content a { font-weight : bold ; text-decoration : none ; } . content a : hover { text-decoration : underline ; color : #8ea6ff ; } . passage : not ( : last-child ) : not ( : hover ) { opacity : 0.4 ; transition : 0.5 s ; -webkit- transition : 0.5 s ; } . passage center { max-width : 50 % ; margin : auto ; } input , button { font-size : 1.2 em ; } button { padding : 0.2 em 0.8 em ; } input [ type = text ] { width : 20 % ; } . toolbar a { color : #999 ; text-decoration : none ; } . toolbar a : hover { text-decoration : underline ; color : #8ea6ff ; } . title { color : #000 ; font : bold 1.4 em Verdana , sans-serif ; line-height : 200 % ; } # footer { font-size : 1.1 em ; font-style : italic ; margin-top : 5 em ; text-align : center ; } # footer a . externalLink { border-bottom : 1 px solid #464646 ; color : #464646 ; font-weight : normal ; } # floater { border-left : 1 px solid #ddd ; border-bottom : 2 px solid #aaa ; font-size : 1.1 em ; padding : 0 20 px ; text-align : center ; line-height : 100 % ; } # floater ul { text-align : left ; } # floater a { color : #999 ; cursor : pointer ; font-weight : bold ; text-decoration : none ; } # floater a : hover { color : #8ea6ff ; text-decoration : underline ; } # content1 { margin : 0 12.7 % 1 em 12.7 % ; text-align : left ; } . passage table { border-collapse : collapse ; font-size : 100 % ; margin : .8 em 1.0 em ; } . passage th , . passage td , . passage tr , . passage caption { padding : 3 px ; } . passage hr { height : 1 px ; } . toolbar { font-size : .5 em ; } . toolbar a { margin-left : 12 px ; } . passage ul , . passage ol { margin-left : .5 em ; padding-left : 1.5 em ; } li { list-style-type : square ; }","title":"Default CSS"},{"location":"twine1/storyformats/jonah/questions.html","text":"Questions # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. How do I remove all Jonah passage titles?* # This CSS sample makes the passage titles invisible: . passage . title { display : none ; } How do I remove all Jonah passage titles but the current one? # This CSS sample makes all passage titles invisible except for the current one: . passage : not ( : last-child ) . title { display : none ; }","title":"Common Questions"},{"location":"twine1/storyformats/jonah/questions.html#questions","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only.","title":"Questions"},{"location":"twine1/storyformats/jonah/questions.html#how-do-i-remove-all-jonah-passage-titles","text":"This CSS sample makes the passage titles invisible: . passage . title { display : none ; }","title":"How do I remove all Jonah passage titles?*"},{"location":"twine1/storyformats/jonah/questions.html#how-do-i-remove-all-jonah-passage-titles-but-the-current-one","text":"This CSS sample makes all passage titles invisible except for the current one: . passage : not ( : last-child ) . title { display : none ; }","title":"How do I remove all Jonah passage titles but the current one?"},{"location":"twine1/storyformats/sugarcane/index.html","text":"Sugarcane # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Visual Description # This displays the story with white text on a black background. Players can only see one passage at a time, though they ca use their browsers' back buttons to return to a previous passage. Sugarcane has a sidebar menu that may contain these entries: Bookmark: This serves as a link directly to the current passage, and is automatically updated throughout the game. Players can save their game by copying the URL from this link. (If the StorySettings disallows the ability to undo, then this is unavailable to players, as bookmarking can obviously be used to undo moves. Rewind: If a Sugarcane passage has the tag \"bookmark\", then each visit to this passage will create an entry in the Rewind menu as a 'checkpoint'. By using that menu, they can rewind the game to that particular state. For obvious reasons, this is not particularly useful if the StorySettings allows the Bookmark menu to also be present. CSS # Base CSS # /* Sidebar */ # sidebar { position : fixed ; list-style : none ; width : 12 em ; } # sidebar # title , # sidebar # credits { cursor : auto ; } # sidebar # storySubtitle , # sidebar # storyMenu { display : block ; } . menu { position : absolute ; display : none ; z-index : 5 ; } /* Passages container */ # passages { margin-left : 18.2 em ; position : relative ; } /* Links */ . passage a { color : #4d6ad8 ; } a . internalLink , a . externalLink , a . back , a . return , [ data-passage ], . menu div { cursor : pointer ; } a . brokenLink { background-color : red ; color : #000 ; } . marked { background-color : #f66 ; color : #000 ; } . marked [ title ] { cursor : help ; } . passage li [ data-bullet ] { list-style-type : none ; } . passage li [ data-bullet ] : before { content : attr ( data - bullet ); position : relative ; left : -1 em ; } # storeArea { display : none ; } # noscript { margin-left : 18.2 em ; font-size : 1.2 em ; font-weight : bold ; } /* HTML4 compatibility */ img { vertical-align : bottom ; } @ media screen and ( max-width : 640px ) { # sidebar { position : static ; margin : 0 auto ; padding : 0 ; } body # sidebar li { text-align : center ; } # passages { min-height : 100 vh ; margin-left : 0 em ; } } # loadingbar { position : fixed ; top : 0 ; left : 0 ; border-top : solid #4d6ad8 6 px ; transition : width 0.5 s ; } Default CSS # This CSS completes the default Sugarcane look-and-feel. This code is removed if \"Don't use the Story Format's default CSS\" is selected in StorySettings or if the words \"blank stylesheet\" appear anywhere within a comment in the story's stylesheets. body { background-color : #000 ; color : #fff ; font-family : Verdana , sans-serif ; font-size : 62.5 % ; margin : 4 em 15 % 5 % 5 em ; } # sidebar { left : 7.5 em ; margin : 0 ; padding : 0 1 em 0 0 ; font : bold 1.1 em Verdana , sans-serif ; } # sidebar ul { padding : 0 ; } # sidebar li { color : #333 ; text-align : right ; background-repeat : no-repeat ; margin-bottom : 1 em ; line-height : 1.4 em ; list-style : none ; } # sidebar li a { color : #333 ; text-decoration : none ; } # sidebar li a : hover , # sidebar # title a : hover , # snapback : hover , # restart : hover { color : #fff ; cursor : pointer ; text-decoration : none ; } # sidebar # title { font-size : 150 % ; } # sidebar # title , # sidebar # title : hover , # sidebar # title a { color : #999 ; } # sidebar # storySubtitle { font-size : 75 % ; } # storyAuthor { font-size : 50 % ; } # sidebar # storyMenu { line-height : 2.5 em ; margin-bottom : .5 em ; color : #999 ; cursor : auto ; } # sidebar # credits { padding-top : 2 em ; font-weight : normal ; font-size : 80 % ; } # sidebar # credits : hover { color : #333 ; } # sidebar # credits a { text-decoration : none ; } # passages { border-left : 1 px solid #333 ; padding-left : 1.5 em ; } . menu { background-color : #343434 ; color : #fff ; opacity : .9 ; border : 1 px solid #fff ; text-align : left ; font : 1.1 em Verdana ; line-height : 2 em ; } . menu div { padding : 0 .4 em ; } . menu div : hover { cursor : pointer ; background-color : #fff ; color : #343434 ; } . passage { font-size : 1.2 em ; line-height : 175 % ; margin-bottom : 2 em ; text-align : left ; } . passage a { font-weight : bold ; text-decoration : none ; } . passage a : hover { color : #8ea6ff ; text-decoration : underline ; } . content > ul { padding-top : 1.3 em ; } . passage ul , . passage ol { margin-left : .5 em ; padding-left : 1.5 em ; } . passage li { margin-right : 6 em ; } . passage table { border-collapse : collapse ; font-size : 100 % ; margin : .8 em 1.0 em ; } . passage th , . passage td , . passage tr , . passage caption { padding : 3 px ; } . passage hr { height : 1 px ; } . passage center { max-width : 50 % ; margin : auto ; } . marked { margin-right : 12 px ; padding : 3 px ; } . disabled { font-weight : bold ; color : #333 ; } @ media screen and ( max-width : 640px ) { body { margin : 5 % ; } # sidebar { width : 100 % ; margin : 0 ; border-bottom : 1 px solid #333 ; } # passages { padding-top : 2 em ; border-left : 0 ; } }","title":"Sugarcane"},{"location":"twine1/storyformats/sugarcane/index.html#sugarcane","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only.","title":"Sugarcane"},{"location":"twine1/storyformats/sugarcane/index.html#visual-description","text":"This displays the story with white text on a black background. Players can only see one passage at a time, though they ca use their browsers' back buttons to return to a previous passage. Sugarcane has a sidebar menu that may contain these entries: Bookmark: This serves as a link directly to the current passage, and is automatically updated throughout the game. Players can save their game by copying the URL from this link. (If the StorySettings disallows the ability to undo, then this is unavailable to players, as bookmarking can obviously be used to undo moves. Rewind: If a Sugarcane passage has the tag \"bookmark\", then each visit to this passage will create an entry in the Rewind menu as a 'checkpoint'. By using that menu, they can rewind the game to that particular state. For obvious reasons, this is not particularly useful if the StorySettings allows the Bookmark menu to also be present.","title":"Visual Description"},{"location":"twine1/storyformats/sugarcane/index.html#css","text":"","title":"CSS"},{"location":"twine1/storyformats/sugarcane/index.html#base-css","text":"/* Sidebar */ # sidebar { position : fixed ; list-style : none ; width : 12 em ; } # sidebar # title , # sidebar # credits { cursor : auto ; } # sidebar # storySubtitle , # sidebar # storyMenu { display : block ; } . menu { position : absolute ; display : none ; z-index : 5 ; } /* Passages container */ # passages { margin-left : 18.2 em ; position : relative ; } /* Links */ . passage a { color : #4d6ad8 ; } a . internalLink , a . externalLink , a . back , a . return , [ data-passage ], . menu div { cursor : pointer ; } a . brokenLink { background-color : red ; color : #000 ; } . marked { background-color : #f66 ; color : #000 ; } . marked [ title ] { cursor : help ; } . passage li [ data-bullet ] { list-style-type : none ; } . passage li [ data-bullet ] : before { content : attr ( data - bullet ); position : relative ; left : -1 em ; } # storeArea { display : none ; } # noscript { margin-left : 18.2 em ; font-size : 1.2 em ; font-weight : bold ; } /* HTML4 compatibility */ img { vertical-align : bottom ; } @ media screen and ( max-width : 640px ) { # sidebar { position : static ; margin : 0 auto ; padding : 0 ; } body # sidebar li { text-align : center ; } # passages { min-height : 100 vh ; margin-left : 0 em ; } } # loadingbar { position : fixed ; top : 0 ; left : 0 ; border-top : solid #4d6ad8 6 px ; transition : width 0.5 s ; }","title":"Base CSS"},{"location":"twine1/storyformats/sugarcane/index.html#default-css","text":"This CSS completes the default Sugarcane look-and-feel. This code is removed if \"Don't use the Story Format's default CSS\" is selected in StorySettings or if the words \"blank stylesheet\" appear anywhere within a comment in the story's stylesheets. body { background-color : #000 ; color : #fff ; font-family : Verdana , sans-serif ; font-size : 62.5 % ; margin : 4 em 15 % 5 % 5 em ; } # sidebar { left : 7.5 em ; margin : 0 ; padding : 0 1 em 0 0 ; font : bold 1.1 em Verdana , sans-serif ; } # sidebar ul { padding : 0 ; } # sidebar li { color : #333 ; text-align : right ; background-repeat : no-repeat ; margin-bottom : 1 em ; line-height : 1.4 em ; list-style : none ; } # sidebar li a { color : #333 ; text-decoration : none ; } # sidebar li a : hover , # sidebar # title a : hover , # snapback : hover , # restart : hover { color : #fff ; cursor : pointer ; text-decoration : none ; } # sidebar # title { font-size : 150 % ; } # sidebar # title , # sidebar # title : hover , # sidebar # title a { color : #999 ; } # sidebar # storySubtitle { font-size : 75 % ; } # storyAuthor { font-size : 50 % ; } # sidebar # storyMenu { line-height : 2.5 em ; margin-bottom : .5 em ; color : #999 ; cursor : auto ; } # sidebar # credits { padding-top : 2 em ; font-weight : normal ; font-size : 80 % ; } # sidebar # credits : hover { color : #333 ; } # sidebar # credits a { text-decoration : none ; } # passages { border-left : 1 px solid #333 ; padding-left : 1.5 em ; } . menu { background-color : #343434 ; color : #fff ; opacity : .9 ; border : 1 px solid #fff ; text-align : left ; font : 1.1 em Verdana ; line-height : 2 em ; } . menu div { padding : 0 .4 em ; } . menu div : hover { cursor : pointer ; background-color : #fff ; color : #343434 ; } . passage { font-size : 1.2 em ; line-height : 175 % ; margin-bottom : 2 em ; text-align : left ; } . passage a { font-weight : bold ; text-decoration : none ; } . passage a : hover { color : #8ea6ff ; text-decoration : underline ; } . content > ul { padding-top : 1.3 em ; } . passage ul , . passage ol { margin-left : .5 em ; padding-left : 1.5 em ; } . passage li { margin-right : 6 em ; } . passage table { border-collapse : collapse ; font-size : 100 % ; margin : .8 em 1.0 em ; } . passage th , . passage td , . passage tr , . passage caption { padding : 3 px ; } . passage hr { height : 1 px ; } . passage center { max-width : 50 % ; margin : auto ; } . marked { margin-right : 12 px ; padding : 3 px ; } . disabled { font-weight : bold ; color : #333 ; } @ media screen and ( max-width : 640px ) { body { margin : 5 % ; } # sidebar { width : 100 % ; margin : 0 ; border-bottom : 1 px solid #333 ; } # passages { padding-top : 2 em ; border-left : 0 ; } }","title":"Default CSS"},{"location":"twine1/storyformats/sugarcane/questions.html","text":"Questions # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. How do I change the horizontal alignment of the text in all my passages in Sugarcane? # This CSS example will change the text's horizontal alignment to the center: # passages { box-sizing : border-box ; padding : 0 25 % } . passage { text-align : center ; } Other options instead of \"center\" are \"right\" and \"left.\" How do I change the maximum width of passage text in Sugarcane? # This CSS example sets the maximum width of passage text to 50%. . passage { max-width : 50 % ; } You can also use whole numbers (e.g. 300px will make the text container 300 pixels wide.) How do I change the width of just the text that's centered (placed in <center> elements) in Sugarcane? # This example sets the maximum width of passage text in <center> elements to 50%. . passage div { max-width : 50 % ; } You can also use whole numbers (e.g. 300 will make the text container 300 pixels wide.) How do I remove the Sugarcane sidebar? # This CSS example makes the sidebar invisible and moves the main text container to the center: # sidebar { display : none ; } # passages { margin-left : 0 ; } How do I vertically center the text of all passages in Sugarcane? # CSS: html , body { height : 100 % ; margin-top : 0 !important ; } # passages { display : table ; height : 100 % ; } . passage { display : table-cell ; vertical-align : middle ; } Be advised this is a bit of a hack, and it may have unexpected behavior in some custom stylesheets. How do I remove the vertical line to the left of Sugarcane passages (between the passages and the sidebar)? # # passages { border-left : 0 px ; padding-left : 0 ; } How do I disable the browser's 'back' button in Sugarcane? # In Twine 1.4: Under the menu Story > Special Passages > StorySetting , uncheck the box next to \"Let the player undo moves.\" How can I change the style of just one passage in Sugarcane? # The simplest way may be to inject your CSS directly in the passage to have the special style: HTML (inside the passage): < style > background { color : red ;}</ style > Be advised using <style> tags outside of the page's <head> is technically invalid, but it's still supported by all browsers. The other way is described directly below. How do I change the styles for multiple, specific passages in Sugarcane? # In Twine 1.4, you can add a new tag to a stylesheet passage and tag the desired story passages with that tag name. Only the passages with tagged with the class name will be affected by the stylesheet.","title":"Common Questions"},{"location":"twine1/storyformats/sugarcane/questions.html#questions","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only.","title":"Questions"},{"location":"twine1/storyformats/sugarcane/questions.html#how-do-i-change-the-horizontal-alignment-of-the-text-in-all-my-passages-in-sugarcane","text":"This CSS example will change the text's horizontal alignment to the center: # passages { box-sizing : border-box ; padding : 0 25 % } . passage { text-align : center ; } Other options instead of \"center\" are \"right\" and \"left.\"","title":"How do I change the horizontal alignment of the text in all my passages in Sugarcane?"},{"location":"twine1/storyformats/sugarcane/questions.html#how-do-i-change-the-maximum-width-of-passage-text-in-sugarcane","text":"This CSS example sets the maximum width of passage text to 50%. . passage { max-width : 50 % ; } You can also use whole numbers (e.g. 300px will make the text container 300 pixels wide.)","title":"How do I change the maximum width of passage text in Sugarcane?"},{"location":"twine1/storyformats/sugarcane/questions.html#how-do-i-change-the-width-of-just-the-text-thats-centered-placed-in-ltcentergt-elements-in-sugarcane","text":"This example sets the maximum width of passage text in <center> elements to 50%. . passage div { max-width : 50 % ; } You can also use whole numbers (e.g. 300 will make the text container 300 pixels wide.)","title":"How do I change the width of just the text that's centered (placed in &amp;lt;center&amp;gt; elements) in Sugarcane?"},{"location":"twine1/storyformats/sugarcane/questions.html#how-do-i-remove-the-sugarcane-sidebar","text":"This CSS example makes the sidebar invisible and moves the main text container to the center: # sidebar { display : none ; } # passages { margin-left : 0 ; }","title":"How do I remove the Sugarcane sidebar?"},{"location":"twine1/storyformats/sugarcane/questions.html#how-do-i-vertically-center-the-text-of-all-passages-in-sugarcane","text":"CSS: html , body { height : 100 % ; margin-top : 0 !important ; } # passages { display : table ; height : 100 % ; } . passage { display : table-cell ; vertical-align : middle ; } Be advised this is a bit of a hack, and it may have unexpected behavior in some custom stylesheets.","title":"How do I vertically center the text of all passages in Sugarcane?"},{"location":"twine1/storyformats/sugarcane/questions.html#how-do-i-remove-the-vertical-line-to-the-left-of-sugarcane-passages-between-the-passages-and-the-sidebar","text":"# passages { border-left : 0 px ; padding-left : 0 ; }","title":"How do I remove the vertical line to the left of Sugarcane passages (between the passages and the sidebar)?"},{"location":"twine1/storyformats/sugarcane/questions.html#how-do-i-disable-the-browsers-back-button-in-sugarcane","text":"In Twine 1.4: Under the menu Story > Special Passages > StorySetting , uncheck the box next to \"Let the player undo moves.\"","title":"How do I disable the browser's 'back' button in Sugarcane?"},{"location":"twine1/storyformats/sugarcane/questions.html#how-can-i-change-the-style-of-just-one-passage-in-sugarcane","text":"The simplest way may be to inject your CSS directly in the passage to have the special style: HTML (inside the passage): < style > background { color : red ;}</ style > Be advised using <style> tags outside of the page's <head> is technically invalid, but it's still supported by all browsers. The other way is described directly below.","title":"How can I change the style of just one passage in Sugarcane?"},{"location":"twine1/storyformats/sugarcane/questions.html#how-do-i-change-the-styles-for-multiple-specific-passages-in-sugarcane","text":"In Twine 1.4, you can add a new tag to a stylesheet passage and tag the desired story passages with that tag name. Only the passages with tagged with the class name will be affected by the stylesheet.","title":"How do I change the styles for multiple, specific passages in Sugarcane?"},{"location":"twine1/terms/formatting.html","text":"Formatting # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Special characters can be applied to text to change its formatting. Formatting Source Code Appears As Resulting HTML Italics //text// text \\<em>text\\</em> Boldface ''text'' text \\<strong>text\\</strong> Underline __text__ \\ text \\<u>text\\</u> Strikethrough \\==text== ~~text~~ \\<strike>text\\</strike> Subscript H\\~\\~2\\~\\~O H\\ 2 O %%H\\ 2 O %% Superscript meters/second^^2^^ meters/second\\ 2 meters/second\\<sup>2\\</sup> Monospace {{{a //word//}}} a //word// \\<code>a //word//\\</code> Comment /%a comment%/ Error @@error@@ error \\<span class=marked>error\\</span> Inline styling @@font-weight:bold;text@@ text \\<span style=\"font-weight:bold\">text\\</span> Additional Syntax # Formatting Source Code Resulting HTML Bulleted list * one * two <ul><li>one</li><li>two</li></ul> Numbered list # one # two <ol><li>one</li><li>two</li></ol> Horizontal line ---- <hr> Indented text >Text <blockquote>Text</blockquote> Doubly indented text >>Text <blockquote><blockquote>Text</blockquote></blockquote> Heading 1 !Title <h1>Title</h1> Heading 2 !!Title <h2>Title</h2> Heading 3 !!!Title <h3>Title</h3> Heading 4 !!!!Title <h4>Title</h4> Heading 5 !!!!!Title <h5>Title</h5> Escaped Line Breaks # One extra piece of syntax, separate from the above tables, is available: ending a line with a backslash \\ will cause both the backslash and the line break to be removed from the passage, thus \"joining together\" both lines. The main purpose of this will become apparent when you use macros.","title":"Formatting"},{"location":"twine1/terms/formatting.html#formatting","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Special characters can be applied to text to change its formatting. Formatting Source Code Appears As Resulting HTML Italics //text// text \\<em>text\\</em> Boldface ''text'' text \\<strong>text\\</strong> Underline __text__ \\ text \\<u>text\\</u> Strikethrough \\==text== ~~text~~ \\<strike>text\\</strike> Subscript H\\~\\~2\\~\\~O H\\ 2 O %%H\\ 2 O %% Superscript meters/second^^2^^ meters/second\\ 2 meters/second\\<sup>2\\</sup> Monospace {{{a //word//}}} a //word// \\<code>a //word//\\</code> Comment /%a comment%/ Error @@error@@ error \\<span class=marked>error\\</span> Inline styling @@font-weight:bold;text@@ text \\<span style=\"font-weight:bold\">text\\</span>","title":"Formatting"},{"location":"twine1/terms/formatting.html#additional-syntax","text":"Formatting Source Code Resulting HTML Bulleted list * one * two <ul><li>one</li><li>two</li></ul> Numbered list # one # two <ol><li>one</li><li>two</li></ol> Horizontal line ---- <hr> Indented text >Text <blockquote>Text</blockquote> Doubly indented text >>Text <blockquote><blockquote>Text</blockquote></blockquote> Heading 1 !Title <h1>Title</h1> Heading 2 !!Title <h2>Title</h2> Heading 3 !!!Title <h3>Title</h3> Heading 4 !!!!Title <h4>Title</h4> Heading 5 !!!!!Title <h5>Title</h5>","title":"Additional Syntax"},{"location":"twine1/terms/formatting.html#escaped-line-breaks","text":"One extra piece of syntax, separate from the above tables, is available: ending a line with a backslash \\ will cause both the backslash and the line break to be removed from the passage, thus \"joining together\" both lines. The main purpose of this will become apparent when you use macros.","title":"Escaped Line Breaks"},{"location":"twine1/terms/links.html","text":"Links # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Links are the player's means of moving between passages and affecting the story. They are the equivalent of being told to turn to another page in a nonlinear book; in gamebooks, for example, these are clicked to make decisions for the main character. This is not the only possible kind of link. Usage # Links are marked like so: [[displayed text|title of passage]] The two square brackets enclose the whole link, and the pipe symbol separates the displayed text from the passage title. There is also a shorter form of the link syntax -- [[passage title]] -- where the displayed link text matches the title of the passage it links to. If a story has a broken link in it, it is displayed with a red background, and clicking it shows this message: The passage 'The newspaper' doesn't exist. External links # Links to external sites can also be added. [[DuckDuckGo|http://www.duckduckgo.com/]] [[http://www.duckduckgo.com/]] Setting Variables with Setter-Links # It can be very useful to make certain variables be altered by the act of clicking a link. Inserting an additional square bracket pair into the syntax like so: [[displayed text|title of passage][$variable = expression]] The 'code' portion of the link syntax is treated as if it was a <<set>> macro. A link with a piece of code attached like this is called a setter link , and the attached code is called its tail . Much like the <<set>> macro, multiple variable-settings by separating either commas or semicolons: * I choose the [[Garb of the Hawk][$hat = \"beak\"; $shoes = \"talons\"]] * I choose the [[Attire of the Mire][$hat = \"mud\"; $shoes = \"gumboots\"]] Clicking either of the above links will set both variables simultaneously. Printing Links # Setter-links occurs when referred to a variable for any reason other than to set its value. The problem arises because the setter statement is executed with the current values of the variables at the end of the passage - not the values they had when the link statement occurred. <<set $actor to \"Fred\">> <if $location[$actor] is passage()>> [[Talk to <<$actor>>|Talk_Fred][$chat = $actor]] <<endif>> <<set $actor to \"Ginger\">> <<if $location[$actor] is passage()>> [[Talk to <<$actor>>|Talk_Ginger][$chat = $actor]] <<endif>> In this case, regardless of which link, $chat would end up getting set to \"Ginger\" - the value of $actor at the end of the passage. Although there is a trivial fix that could be used in this example (simply hard code the actors names), the general solution is to use a print macro to write the link statement with the resolved values of the variables: <<set $actor to \"Fred\">> <<if $location[$actor] is passage()>> <<print \"[[Talk to \" + $actor + \"|Talk_\" + $actor + \"][$chat to '\" + $actor + \"']]\">> <<endif>> <<set $actor to \"Ginger\">> <<if $location[$actor] is passage()>> <<print \"[[Talk to \" + $actor + \"|Talk_\" + $actor + \"][$chat to '\" + $actor + \"']]\">> <<endif>> Table Syntax # Some shorthand syntax for creating HTML tables exists, and is used like so: | Table header 1 | table header 2 | | *row 1* | *row 1* | | *row 2* | *row 2* | |*table caption | The text content of the table is emphasized in the above sample. Note : The first | character in each line does not have any whitespace before it. Comments # Comments are used to leave remarks about particular parts of a passage. They are not displayed when the player views the passage. HTML # HTML elements can directly be used in Twine 1: The sign reads: < div style = \"padding:1em; border: 1px solid white;\" > TICKTOCKERSON INSTITUTE OF TEMPORAL FREEZING </ div > It hangs in midair, detached from the wall and tilted askew, as if some cosmic video watcher clicked the Pause button as it began to fall. HTML Produces \\<center>Text\\</center> Horizontally centered text \\<span style=\\\"text-align:right\\\">Text\\</span> Right-aligned text \\<span style=\\\"text-align:justify\\\">Text\\</span> Fully justified text \\<small>Text\\</small> Smaller text \\<big>Text\\</big> Bigger text \\<br> A line break (best used in a [\\<\\<nobr>>] block) Inline Styling # Inline styling is a shorthand way to apply one-off CSS styles to a span of text. <span style=\"color:magenta;letter-spacing:3px;font-size:1.5em;\">Some text</span> Becomes: @@color:magenta;letter-spacing:3px;font-size:1.5em;Some text@@ Any text between the first @@ and the final ; is usually interpreted as CSS style properties to apply to the span. Note Reusing CSS is best done with a passage tagged with stylesheet .","title":"Links"},{"location":"twine1/terms/links.html#links","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Links are the player's means of moving between passages and affecting the story. They are the equivalent of being told to turn to another page in a nonlinear book; in gamebooks, for example, these are clicked to make decisions for the main character. This is not the only possible kind of link.","title":"Links"},{"location":"twine1/terms/links.html#usage","text":"Links are marked like so: [[displayed text|title of passage]] The two square brackets enclose the whole link, and the pipe symbol separates the displayed text from the passage title. There is also a shorter form of the link syntax -- [[passage title]] -- where the displayed link text matches the title of the passage it links to. If a story has a broken link in it, it is displayed with a red background, and clicking it shows this message: The passage 'The newspaper' doesn't exist.","title":"Usage"},{"location":"twine1/terms/links.html#external-links","text":"Links to external sites can also be added. [[DuckDuckGo|http://www.duckduckgo.com/]] [[http://www.duckduckgo.com/]]","title":"External links"},{"location":"twine1/terms/links.html#setting-variables-with-setter-links","text":"It can be very useful to make certain variables be altered by the act of clicking a link. Inserting an additional square bracket pair into the syntax like so: [[displayed text|title of passage][$variable = expression]] The 'code' portion of the link syntax is treated as if it was a <<set>> macro. A link with a piece of code attached like this is called a setter link , and the attached code is called its tail . Much like the <<set>> macro, multiple variable-settings by separating either commas or semicolons: * I choose the [[Garb of the Hawk][$hat = \"beak\"; $shoes = \"talons\"]] * I choose the [[Attire of the Mire][$hat = \"mud\"; $shoes = \"gumboots\"]] Clicking either of the above links will set both variables simultaneously.","title":"Setting Variables with Setter-Links"},{"location":"twine1/terms/links.html#printing-links","text":"Setter-links occurs when referred to a variable for any reason other than to set its value. The problem arises because the setter statement is executed with the current values of the variables at the end of the passage - not the values they had when the link statement occurred. <<set $actor to \"Fred\">> <if $location[$actor] is passage()>> [[Talk to <<$actor>>|Talk_Fred][$chat = $actor]] <<endif>> <<set $actor to \"Ginger\">> <<if $location[$actor] is passage()>> [[Talk to <<$actor>>|Talk_Ginger][$chat = $actor]] <<endif>> In this case, regardless of which link, $chat would end up getting set to \"Ginger\" - the value of $actor at the end of the passage. Although there is a trivial fix that could be used in this example (simply hard code the actors names), the general solution is to use a print macro to write the link statement with the resolved values of the variables: <<set $actor to \"Fred\">> <<if $location[$actor] is passage()>> <<print \"[[Talk to \" + $actor + \"|Talk_\" + $actor + \"][$chat to '\" + $actor + \"']]\">> <<endif>> <<set $actor to \"Ginger\">> <<if $location[$actor] is passage()>> <<print \"[[Talk to \" + $actor + \"|Talk_\" + $actor + \"][$chat to '\" + $actor + \"']]\">> <<endif>>","title":"Printing Links"},{"location":"twine1/terms/links.html#table-syntax","text":"Some shorthand syntax for creating HTML tables exists, and is used like so: | Table header 1 | table header 2 | | *row 1* | *row 1* | | *row 2* | *row 2* | |*table caption | The text content of the table is emphasized in the above sample. Note : The first | character in each line does not have any whitespace before it.","title":"Table Syntax"},{"location":"twine1/terms/links.html#comments","text":"Comments are used to leave remarks about particular parts of a passage. They are not displayed when the player views the passage.","title":"Comments"},{"location":"twine1/terms/links.html#html","text":"HTML elements can directly be used in Twine 1: The sign reads: < div style = \"padding:1em; border: 1px solid white;\" > TICKTOCKERSON INSTITUTE OF TEMPORAL FREEZING </ div > It hangs in midair, detached from the wall and tilted askew, as if some cosmic video watcher clicked the Pause button as it began to fall. HTML Produces \\<center>Text\\</center> Horizontally centered text \\<span style=\\\"text-align:right\\\">Text\\</span> Right-aligned text \\<span style=\\\"text-align:justify\\\">Text\\</span> Fully justified text \\<small>Text\\</small> Smaller text \\<big>Text\\</big> Bigger text \\<br> A line break (best used in a [\\<\\<nobr>>] block)","title":"HTML"},{"location":"twine1/terms/links.html#inline-styling","text":"Inline styling is a shorthand way to apply one-off CSS styles to a span of text. <span style=\"color:magenta;letter-spacing:3px;font-size:1.5em;\">Some text</span> Becomes: @@color:magenta;letter-spacing:3px;font-size:1.5em;Some text@@ Any text between the first @@ and the final ; is usually interpreted as CSS style properties to apply to the span. Note Reusing CSS is best done with a passage tagged with stylesheet .","title":"Inline Styling"},{"location":"twine1/terms/passages.html","text":"Passages # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Introduction # The basic narrative unit of a book is a chapter. Although there are books that don't divide themselves up into chapters, most do, and it's a useful way for writers and readers to keep track of a book's structure. The corresponding unit for hypertext is a choice and the text that leads to it. In Choose Your Own Adventure books, this unit was a single printed page: If you decide to explore the ledge where the Seeker has come to rest, turn to page 6. If you decide to cut loose from the Maray and dive with the Seeker into the canyon in the ocean floor, turn to page 4. (R. A. Montgomery, Journey Under the Sea) As these books became more complex, more pages were required \u2013 and some of these pages didn't need to be terribly long. Gamebooks like the Fighting Fantasy series began to use numbered passages, several of which might be printed on a single page: You hear the sound of running feet approaching rapidly; you cannot yet see who or what is coming. Will you run through the nearest archway (turn to 17), or hold your ground and draw your sword (turn to 30)? (Steve Jackson, Talisman of Death) Using numbers to keep track of what to read next made sense for readers who had to locate the next part of the story themselves. But when hypertext leapt onto computer screens, choices could be made just by clicking underlined text: Scholar and showman, Urquhart knew in all his most sensitive bones that this was the time . There was a furious logic to this day-after-the-day, a logic he would have recognized even without Tate's nudge and a wink and \"my friends around the Beltway\" over lunch. He could feel the timing. He could feel a lot of things. Something had been at work in the world, some wavefront of rapid change only dimly felt but no less powerful for that. The waves passed through everything and everyone, transforming as they went. You only had to check the mirror. (Stuart Moulthrop, Victory Garden) There have been many names for these individual parts of text that readers navigate through. In Twine, they are known as passages, a word that both means a section of a written work as well as a route one might pass through. Details # In Twine, passages are distinguished by their title. Passage titles are case-sensitive, which means that \u201cThis door\u201d and \u201cTHIS DOOR\u201d are two different passages. They also cannot contain the \u201c]\u201d and \u201c|\u201d symbols, or any line breaks. Passage titles must also be unique - trying to give two passages the same name will, usually, fail. Passages may also possess one or more tags. Consult the tags article to learn more about them. Passages are usually drawn in the Story Map with blue title bars. Terminus passages - passages which contain no links leading out of them - are drawn with a darker title. The Start passage is drawn with a green bar.","title":"Passages"},{"location":"twine1/terms/passages.html#passages","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only.","title":"Passages"},{"location":"twine1/terms/passages.html#introduction","text":"The basic narrative unit of a book is a chapter. Although there are books that don't divide themselves up into chapters, most do, and it's a useful way for writers and readers to keep track of a book's structure. The corresponding unit for hypertext is a choice and the text that leads to it. In Choose Your Own Adventure books, this unit was a single printed page: If you decide to explore the ledge where the Seeker has come to rest, turn to page 6. If you decide to cut loose from the Maray and dive with the Seeker into the canyon in the ocean floor, turn to page 4. (R. A. Montgomery, Journey Under the Sea) As these books became more complex, more pages were required \u2013 and some of these pages didn't need to be terribly long. Gamebooks like the Fighting Fantasy series began to use numbered passages, several of which might be printed on a single page: You hear the sound of running feet approaching rapidly; you cannot yet see who or what is coming. Will you run through the nearest archway (turn to 17), or hold your ground and draw your sword (turn to 30)? (Steve Jackson, Talisman of Death) Using numbers to keep track of what to read next made sense for readers who had to locate the next part of the story themselves. But when hypertext leapt onto computer screens, choices could be made just by clicking underlined text: Scholar and showman, Urquhart knew in all his most sensitive bones that this was the time . There was a furious logic to this day-after-the-day, a logic he would have recognized even without Tate's nudge and a wink and \"my friends around the Beltway\" over lunch. He could feel the timing. He could feel a lot of things. Something had been at work in the world, some wavefront of rapid change only dimly felt but no less powerful for that. The waves passed through everything and everyone, transforming as they went. You only had to check the mirror. (Stuart Moulthrop, Victory Garden) There have been many names for these individual parts of text that readers navigate through. In Twine, they are known as passages, a word that both means a section of a written work as well as a route one might pass through.","title":"Introduction"},{"location":"twine1/terms/passages.html#details","text":"In Twine, passages are distinguished by their title. Passage titles are case-sensitive, which means that \u201cThis door\u201d and \u201cTHIS DOOR\u201d are two different passages. They also cannot contain the \u201c]\u201d and \u201c|\u201d symbols, or any line breaks. Passage titles must also be unique - trying to give two passages the same name will, usually, fail. Passages may also possess one or more tags. Consult the tags article to learn more about them. Passages are usually drawn in the Story Map with blue title bars. Terminus passages - passages which contain no links leading out of them - are drawn with a darker title. The Start passage is drawn with a green bar.","title":"Details"},{"location":"twine1/terms/scripts.html","text":"Scripts # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Just as a passage with the tag stylesheet will have its contents treated as CSS style rules, the script tag to include custom Javascript in your story. All passage with this tag are executed when the game first loads, which can do two things: Define custom macros made in Javascript by other Twine users. Modify how the Twine engine will work. To do this properly requires careful inspection of the Twine engine. The execution order of passages tagged script is based on the alphabetical order of the script passages' names. Note: script passages must only contain Javascript. Requesting jQuery # jQuery can be used in scripts to manipulate the page's structure, use AJAX, or just make general coding easier. jQuery can be requested through simply using the case-insensitive words \"requires jQuery\" in a comment or a string inside the code: //requires jquery Note: Modernizr can be used with \"requires Modernizr\". prerender and postrender # Two objects exist in the Twine engine that are designed for custom script writers: prerender and postrender . These JavaScript function properties will be run every time a passage is rendered. A postrender function looks something like this: postrender . hello = function ( a ) { ... a . className += \"hello\" ; // An example of 'a' console . log ( this . title ); // An example of 'this' ... }; When postrender.hello() is called, this is the Passage object which is currently being rendered, and the first argument, a , is the <div class=\"body content\"> element into which the passage's code has been rendered. postrender functions are called just after the passage's code is rendered into the <div> . prerender functions are called just before then. Passage Objects # Passage objects have the following structure (plus some other less useful properties): title : the string name of the passage. tags : an array of strings representing the passage's tags. text : the raw code of the passage. processText() : the code of the passage with some substitutions made the \"nobr\" tag, if present, removes line breaks, and imported image syntax has the image's base64 data inserted.","title":"Scripts"},{"location":"twine1/terms/scripts.html#scripts","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Just as a passage with the tag stylesheet will have its contents treated as CSS style rules, the script tag to include custom Javascript in your story. All passage with this tag are executed when the game first loads, which can do two things: Define custom macros made in Javascript by other Twine users. Modify how the Twine engine will work. To do this properly requires careful inspection of the Twine engine. The execution order of passages tagged script is based on the alphabetical order of the script passages' names. Note: script passages must only contain Javascript.","title":"Scripts"},{"location":"twine1/terms/scripts.html#requesting-jquery","text":"jQuery can be used in scripts to manipulate the page's structure, use AJAX, or just make general coding easier. jQuery can be requested through simply using the case-insensitive words \"requires jQuery\" in a comment or a string inside the code: //requires jquery Note: Modernizr can be used with \"requires Modernizr\".","title":"Requesting jQuery"},{"location":"twine1/terms/scripts.html#prerender-and-postrender","text":"Two objects exist in the Twine engine that are designed for custom script writers: prerender and postrender . These JavaScript function properties will be run every time a passage is rendered. A postrender function looks something like this: postrender . hello = function ( a ) { ... a . className += \"hello\" ; // An example of 'a' console . log ( this . title ); // An example of 'this' ... }; When postrender.hello() is called, this is the Passage object which is currently being rendered, and the first argument, a , is the <div class=\"body content\"> element into which the passage's code has been rendered. postrender functions are called just after the passage's code is rendered into the <div> . prerender functions are called just before then.","title":"prerender and postrender"},{"location":"twine1/terms/scripts.html#passage-objects","text":"Passage objects have the following structure (plus some other less useful properties): title : the string name of the passage. tags : an array of strings representing the passage's tags. text : the raw code of the passage. processText() : the code of the passage with some substitutions made the \"nobr\" tag, if present, removes line breaks, and imported image syntax has the image's base64 data inserted.","title":"Passage Objects"},{"location":"twine1/terms/specialpassages.html","text":"Special Passages # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. There are certain passage names that have special meaning make stories look more polished. The most important is Start. It is the first passage displayed when a story is first loaded by a reader. StoryTitle, StorySubtitle, StoryAuthor # StoryTitle is where to set a story's title. StorySubtitle lets an author enter a brief subheading under the story, and StoryAuthor lets yan author write credit. Note that if an insert macro tags in these passages, they will be re-run every time the player changes passages. StoryMenu # The StoryMenu passage lets an author add items to the the menu that hovers in the upper-right corner of the page in the Jonah story format, or on the left side of the page in the Sugarcane story format. An author can link directly to passages in a story from this menu. An author might, for instance, put an \"About the author\" link in the menu that links to a passage containing a personal blurb. Take care with the length of the menu items. A link will be displayed on a single line, even if it means that it will overlap a story's text. Again, if an author puts macro tags in this passages, it will be re-run every time the player changes passages. This lets them make a \"dynamic menu\" that alters itself depending on the player's progress in the story. StorySettings # The StorySettings passage enables a number of special story options to be set. Undo: enables the player to \"undo moves\". In Sugarcane, this means being able to use the Back button in the browser. In Jonah, this means being able to use the \"Rewind to here\" link, and being able to click links in previous passages. Bookmark: enables the player to use the \"Bookmark\" link in Sugarcane and Jonah. On by default. Hash updates: this causes the current passage's bookmark URL to be automatically placed in the player's browser address bar whenever they change passages. This is off by default because the URLs can become very long and ugly quickly - opting against including the sidebar's \"Bookmark\" link, this may provide a useful alternative. Prompt before closing: If the player tries to reload or close the page, the browser will prompt for confirmation. This is useful for long games - it would be unfortunate if the player lost a lot of progress due to an idle key-press. Don't use default CSS: This removes most of the CSS used by the story format, allowing CSS programmers to write their own stylesheet redesigns more easily. Off by default - but including the text \"blank stylesheet\" in a stylesheet will set it on automatically. ROT13: obfuscates the story's HTML source to dissuade people from spoiling themselves by reading it. Off by default. jQuery: set this on if using custom scripts that rely on the jQuery library. Otherwise, leave off. Note: Twine 1.4 does not use the \"$\" variable, so jQuery can use it without $.noConflict(). Modernizr: set this on if using custom scripts or stylesheets that rely on the Modernizr library. Otherwise, leave off. StoryIncludes # This passage is inspired by the \"import\" feature of various programming languages. It allows an author to merge the passages from other .tws or .twee files into a story's HTML file at build time. This lets an author work on a Twine project split into multiple files, each being edited independently of the other, but which are built into a single story. It also lets an author import a Twine file from a web URL without having to personally download it. List the file paths and URLs that to include, line by line, in the StoryIncludes passage. If an included file contains a passage with the same name as another included file's passage, an error will be raised when built. Annotations # There are times during Twine authors may wish to leave design notes for themselves or document certain aspects of a story map for future reference. Annotation passages should be used for this purpose. They are drawn large on the story map, allowing most of their contained text to be read without opening the editor. Give a passage the tag \"annotation\" to make it an annotation passage.","title":"Special Passages"},{"location":"twine1/terms/specialpassages.html#special-passages","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. There are certain passage names that have special meaning make stories look more polished. The most important is Start. It is the first passage displayed when a story is first loaded by a reader.","title":"Special Passages"},{"location":"twine1/terms/specialpassages.html#storytitle-storysubtitle-storyauthor","text":"StoryTitle is where to set a story's title. StorySubtitle lets an author enter a brief subheading under the story, and StoryAuthor lets yan author write credit. Note that if an insert macro tags in these passages, they will be re-run every time the player changes passages.","title":"StoryTitle, StorySubtitle, StoryAuthor"},{"location":"twine1/terms/specialpassages.html#storymenu","text":"The StoryMenu passage lets an author add items to the the menu that hovers in the upper-right corner of the page in the Jonah story format, or on the left side of the page in the Sugarcane story format. An author can link directly to passages in a story from this menu. An author might, for instance, put an \"About the author\" link in the menu that links to a passage containing a personal blurb. Take care with the length of the menu items. A link will be displayed on a single line, even if it means that it will overlap a story's text. Again, if an author puts macro tags in this passages, it will be re-run every time the player changes passages. This lets them make a \"dynamic menu\" that alters itself depending on the player's progress in the story.","title":"StoryMenu"},{"location":"twine1/terms/specialpassages.html#storysettings","text":"The StorySettings passage enables a number of special story options to be set. Undo: enables the player to \"undo moves\". In Sugarcane, this means being able to use the Back button in the browser. In Jonah, this means being able to use the \"Rewind to here\" link, and being able to click links in previous passages. Bookmark: enables the player to use the \"Bookmark\" link in Sugarcane and Jonah. On by default. Hash updates: this causes the current passage's bookmark URL to be automatically placed in the player's browser address bar whenever they change passages. This is off by default because the URLs can become very long and ugly quickly - opting against including the sidebar's \"Bookmark\" link, this may provide a useful alternative. Prompt before closing: If the player tries to reload or close the page, the browser will prompt for confirmation. This is useful for long games - it would be unfortunate if the player lost a lot of progress due to an idle key-press. Don't use default CSS: This removes most of the CSS used by the story format, allowing CSS programmers to write their own stylesheet redesigns more easily. Off by default - but including the text \"blank stylesheet\" in a stylesheet will set it on automatically. ROT13: obfuscates the story's HTML source to dissuade people from spoiling themselves by reading it. Off by default. jQuery: set this on if using custom scripts that rely on the jQuery library. Otherwise, leave off. Note: Twine 1.4 does not use the \"$\" variable, so jQuery can use it without $.noConflict(). Modernizr: set this on if using custom scripts or stylesheets that rely on the Modernizr library. Otherwise, leave off.","title":"StorySettings"},{"location":"twine1/terms/specialpassages.html#storyincludes","text":"This passage is inspired by the \"import\" feature of various programming languages. It allows an author to merge the passages from other .tws or .twee files into a story's HTML file at build time. This lets an author work on a Twine project split into multiple files, each being edited independently of the other, but which are built into a single story. It also lets an author import a Twine file from a web URL without having to personally download it. List the file paths and URLs that to include, line by line, in the StoryIncludes passage. If an included file contains a passage with the same name as another included file's passage, an error will be raised when built.","title":"StoryIncludes"},{"location":"twine1/terms/specialpassages.html#annotations","text":"There are times during Twine authors may wish to leave design notes for themselves or document certain aspects of a story map for future reference. Annotation passages should be used for this purpose. They are drawn large on the story map, allowing most of their contained text to be read without opening the editor. Give a passage the tag \"annotation\" to make it an annotation passage.","title":"Annotations"},{"location":"twine1/terms/storyformats.html","text":"Story Formats # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When you publish your story to an HTML file, you can choose between story formats. These story formats control both the basic appearance and behavior of your story, though you can customize both of these via individual changes you make to your story. There are two main story formats to choose from: Sugarcane and Jonah. Adding Formats # People have shared several story formats to date, the most famous being SugarCube. These can easily be added to become accessible from inside Twine. On Windows # Locate the \"targets\" folder in Twine's installation folder. Inside \"targets\", create a folder with a header.html file here. For example, Program Files(x86)/Twine/targets/sugarcube/header.html After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu. Once you restart, from the menu choose Story and then Story Format and select the folder name you created (i.e. sugarcube) On MacOS # Locate Twine.app where you installed it, most likely the Applications folder. Right-click/control-click on Twine.app and click \"Show Package Contents\". Navigate to the \"targets\" folder (in Contents > Resources) Inside \"targets\", create a folder with a header.html file here. After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu. On MacOS X # Locate Twine.app where you installed it, most likely the Applications folder. Create a folder called \"targets\" in the same folder. Inside \"targets\", create a folder with a header.html file here. After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu.","title":"Story Formats"},{"location":"twine1/terms/storyformats.html#story-formats","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. When you publish your story to an HTML file, you can choose between story formats. These story formats control both the basic appearance and behavior of your story, though you can customize both of these via individual changes you make to your story. There are two main story formats to choose from: Sugarcane and Jonah.","title":"Story Formats"},{"location":"twine1/terms/storyformats.html#adding-formats","text":"People have shared several story formats to date, the most famous being SugarCube. These can easily be added to become accessible from inside Twine.","title":"Adding Formats"},{"location":"twine1/terms/storyformats.html#on-windows","text":"Locate the \"targets\" folder in Twine's installation folder. Inside \"targets\", create a folder with a header.html file here. For example, Program Files(x86)/Twine/targets/sugarcube/header.html After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu. Once you restart, from the menu choose Story and then Story Format and select the folder name you created (i.e. sugarcube)","title":"On Windows"},{"location":"twine1/terms/storyformats.html#on-macos","text":"Locate Twine.app where you installed it, most likely the Applications folder. Right-click/control-click on Twine.app and click \"Show Package Contents\". Navigate to the \"targets\" folder (in Contents > Resources) Inside \"targets\", create a folder with a header.html file here. After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu.","title":"On MacOS"},{"location":"twine1/terms/storyformats.html#on-macos-x","text":"Locate Twine.app where you installed it, most likely the Applications folder. Create a folder called \"targets\" in the same folder. Inside \"targets\", create a folder with a header.html file here. After making any changes inside the \"targets\" folder, Twine will need to be restarted to update the Story Format menu.","title":"On MacOS X"},{"location":"twine1/terms/tags.html","text":"Tags # Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Sometimes, it can be useful to add information about a passage that is not visible to readers. Tags are a way to do this. They function as labels stuck on the side of a passage, visible to only the author while writing. A tag can be any series of letters, numbers, or punctuation without spaces. Passages can have multiple tags. Special tags # There are some tags that have special meaning to Twine. They change how the story behaves or appears. These special tags are described below. annotation : An annotation stylesheet : A CSS stylesheet. Additional tags (excluding transition) can be applied to restrict this stylesheet to specific passages. transition : Signifies that the stylesheet defines a CSS transition. Should only appear alongside the stylesheet tag. Has no particular meaning when applied to an ordinary passage. script : A JavaScript script that will be run before the story starts. Used primarily to install custom scripts or macros. bookmark : A passage that will appear in Sugarcane's Rewind menu nobr : Causes all of the line breaks in the passage to be removed, as if the entire passage was contained in a <<nobr>> macro. Twine.private : A passage which will not be included at all in the compiled HTML file startup : Signifies that the passage can be used to initialize variables. Currently a feature only on Harlowe","title":"Tags"},{"location":"twine1/terms/tags.html#tags","text":"Warning You are reading documentation for Twine 1. This is maintained for archival purposes only. Sometimes, it can be useful to add information about a passage that is not visible to readers. Tags are a way to do this. They function as labels stuck on the side of a passage, visible to only the author while writing. A tag can be any series of letters, numbers, or punctuation without spaces. Passages can have multiple tags.","title":"Tags"},{"location":"twine1/terms/tags.html#special-tags","text":"There are some tags that have special meaning to Twine. They change how the story behaves or appears. These special tags are described below. annotation : An annotation stylesheet : A CSS stylesheet. Additional tags (excluding transition) can be applied to restrict this stylesheet to specific passages. transition : Signifies that the stylesheet defines a CSS transition. Should only appear alongside the stylesheet tag. Has no particular meaning when applied to an ordinary passage. script : A JavaScript script that will be run before the story starts. Used primarily to install custom scripts or macros. bookmark : A passage that will appear in Sugarcane's Rewind menu nobr : Causes all of the line breaks in the passage to be removed, as if the entire passage was contained in a <<nobr>> macro. Twine.private : A passage which will not be included at all in the compiled HTML file startup : Signifies that the passage can be used to initialize variables. Currently a feature only on Harlowe","title":"Special tags"},{"location":"typewriter/chapbook/chapbook_typewriter.html","text":"\"Typewriter Effect\": Chapbook (v1.0.0) # Summary # \"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Chapbook, new modifiers can be added through the engine.extend() function. This examples creates a new modifier called [typewriter] that accepts a time in milliseconds. The [typewriter] modifier creates a series of <span> elements for each character found within the output of the modifier and sets an animation-delay equal to the time given to the modifier multiplied by the position of the character within the total length of the text output. When used, each character will appear within the passage as if \"typed\" based on the time given to the modifier. Example # Download Twee Code # :: StoryTitle Chapbook: Typewriter :: Start [JavaScript] engine.extend('1.0.0', () => { config.template.modifiers = [{ match: /^typewriter\\s/i, process(output, {invocation}) { // Get the time let time = invocation.replace(/^typewriter\\s/i, ''); // Save original text let text = output.text; // Get length of original text let length = text.length; // Set initial index let index = 0; // Wipe out output to start output.text = \"\"; // Loop through the text // -- Add a new <span> for each character // -- Set the class \"fade-in\" // -- Set the delay as equal to time multiplied position for(let i = 0; i < length; i++) { output.text += `<span class='fade-in' style='animation-delay: ${time * i}ms'>${text[i]}</span>`; } } }, ...config.template.modifiers]; }); [continued] [[Start TypeWriter]] :: Start TypeWriter [typewriter 1000] Hello, world! [continued] Twee Download","title":"Chapbook"},{"location":"typewriter/chapbook/chapbook_typewriter.html#typewriter-effect-chapbook-v100","text":"","title":"\"Typewriter Effect\": Chapbook (v1.0.0)"},{"location":"typewriter/chapbook/chapbook_typewriter.html#summary","text":"\"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Chapbook, new modifiers can be added through the engine.extend() function. This examples creates a new modifier called [typewriter] that accepts a time in milliseconds. The [typewriter] modifier creates a series of <span> elements for each character found within the output of the modifier and sets an animation-delay equal to the time given to the modifier multiplied by the position of the character within the total length of the text output. When used, each character will appear within the passage as if \"typed\" based on the time given to the modifier.","title":"Summary"},{"location":"typewriter/chapbook/chapbook_typewriter.html#example","text":"Download","title":"Example"},{"location":"typewriter/chapbook/chapbook_typewriter.html#twee-code","text":":: StoryTitle Chapbook: Typewriter :: Start [JavaScript] engine.extend('1.0.0', () => { config.template.modifiers = [{ match: /^typewriter\\s/i, process(output, {invocation}) { // Get the time let time = invocation.replace(/^typewriter\\s/i, ''); // Save original text let text = output.text; // Get length of original text let length = text.length; // Set initial index let index = 0; // Wipe out output to start output.text = \"\"; // Loop through the text // -- Add a new <span> for each character // -- Set the class \"fade-in\" // -- Set the delay as equal to time multiplied position for(let i = 0; i < length; i++) { output.text += `<span class='fade-in' style='animation-delay: ${time * i}ms'>${text[i]}</span>`; } } }, ...config.template.modifiers]; }); [continued] [[Start TypeWriter]] :: Start TypeWriter [typewriter 1000] Hello, world! [continued] Twee Download","title":"Twee Code"},{"location":"typewriter/harlowe/harlowe_typewriter.html","text":"\"Typewriter Effect\": Harlowe (v2.0) # Information This code can only be used once per passage. Additional Harlowe code will not be re-run. Summary # \"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Harlowe, this is achieved using the (live:) macro for delayed showing and the (append:) macro to append text to a hook. Example # Download Twee Code # :: StoryTitle Typewriter Effect in Harlowe :: Start <!-- Set the text to show --> (set: $typewriterText to \"Hello, world!\") <!-- Display (call) the Typewriter passage --> (display: \"Typewriter\") :: Typewriter { <!-- Create a variable to track the position within the $typewriterText string --> (set: $typewriterPos to 1) <!-- Create a hook to hold the typed text --> |typewriterOutput>[] <!-- Set a delay of 20ms seconds per loop --> (live: 20ms)[ <!-- Add the next character to the hook --> (append: ?typewriterOutput)[(print: $typewriterText's $typewriterPos)] <!-- Update the position --> (set: $typewriterPos to it + 1) <!-- If it's gone past the end, stop --> (if: $typewriterPos is $typewriterText's length + 1)[ (stop:) ] ] } Twee Download See Also # Delayed Text","title":"Harlowe"},{"location":"typewriter/harlowe/harlowe_typewriter.html#typewriter-effect-harlowe-v20","text":"Information This code can only be used once per passage. Additional Harlowe code will not be re-run.","title":"\"Typewriter Effect\": Harlowe (v2.0)"},{"location":"typewriter/harlowe/harlowe_typewriter.html#summary","text":"\"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Harlowe, this is achieved using the (live:) macro for delayed showing and the (append:) macro to append text to a hook.","title":"Summary"},{"location":"typewriter/harlowe/harlowe_typewriter.html#example","text":"Download","title":"Example"},{"location":"typewriter/harlowe/harlowe_typewriter.html#twee-code","text":":: StoryTitle Typewriter Effect in Harlowe :: Start <!-- Set the text to show --> (set: $typewriterText to \"Hello, world!\") <!-- Display (call) the Typewriter passage --> (display: \"Typewriter\") :: Typewriter { <!-- Create a variable to track the position within the $typewriterText string --> (set: $typewriterPos to 1) <!-- Create a hook to hold the typed text --> |typewriterOutput>[] <!-- Set a delay of 20ms seconds per loop --> (live: 20ms)[ <!-- Add the next character to the hook --> (append: ?typewriterOutput)[(print: $typewriterText's $typewriterPos)] <!-- Update the position --> (set: $typewriterPos to it + 1) <!-- If it's gone past the end, stop --> (if: $typewriterPos is $typewriterText's length + 1)[ (stop:) ] ] } Twee Download","title":"Twee Code"},{"location":"typewriter/harlowe/harlowe_typewriter.html#see-also","text":"Delayed Text","title":"See Also"},{"location":"typewriter/snowman/snowman_typewriter.html","text":"\"Typewriter Effect\": Snowman (v1.3.0) # Summary # \"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Snowman, this is achieved using recursive calls to the setTimeout() function to repeat calls once every one second. A jQuery selector is used to find an element with the ID \"typewriter\" whose HTML content is updated with the text every second until it is fully shown. Example # Download Twee Code # :: StoryTitle Typewriter Effect in Snowman :: UserScript[script] // Create a global setup object window.setup = window.setup || {}; // Add a 'typewriter' object setup.typewriter = {}; // Save an index of the string. // Start at -1 because it will be increased // once (to 0) before the first character is shown. setup.typewriter.index = -1; // Allow users to set global text setup.typewriter.text = \"\"; // Save a reference to the setTimeout call setup.typewriter.timerReference = 0; // Write text character by character to an element // with the ID \"typewriter\" setup.typewriter.write = function(){ // Test if the index is less than the text length if(setup.typewriter.index < setup.typewriter.text.length) { // Update the current text character-by-character $(\"#typewriter\").html( $(\"#typewriter\").html() + setup.typewriter.text[setup.typewriter.index] ); // Increase the index setup.typewriter.index++; // Save the timeout reference setup.typewriter.timerReference = setTimeout(setup.typewriter.write, 1000); } else { // Clear out the timeout once index is greater than string length clearTimeout(setup.typewriter.timerReference); // Reset the index setup.typewriter.index = -1; } } :: Start <div id=\"typewriter\"></div> <% setup.typewriter.text = \"Hello, world!\"; setup.typewriter.write(); %> Twee Download See Also # Delayed Text","title":"Snowman"},{"location":"typewriter/snowman/snowman_typewriter.html#typewriter-effect-snowman-v130","text":"","title":"\"Typewriter Effect\": Snowman (v1.3.0)"},{"location":"typewriter/snowman/snowman_typewriter.html#summary","text":"\"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In Snowman, this is achieved using recursive calls to the setTimeout() function to repeat calls once every one second. A jQuery selector is used to find an element with the ID \"typewriter\" whose HTML content is updated with the text every second until it is fully shown.","title":"Summary"},{"location":"typewriter/snowman/snowman_typewriter.html#example","text":"Download","title":"Example"},{"location":"typewriter/snowman/snowman_typewriter.html#twee-code","text":":: StoryTitle Typewriter Effect in Snowman :: UserScript[script] // Create a global setup object window.setup = window.setup || {}; // Add a 'typewriter' object setup.typewriter = {}; // Save an index of the string. // Start at -1 because it will be increased // once (to 0) before the first character is shown. setup.typewriter.index = -1; // Allow users to set global text setup.typewriter.text = \"\"; // Save a reference to the setTimeout call setup.typewriter.timerReference = 0; // Write text character by character to an element // with the ID \"typewriter\" setup.typewriter.write = function(){ // Test if the index is less than the text length if(setup.typewriter.index < setup.typewriter.text.length) { // Update the current text character-by-character $(\"#typewriter\").html( $(\"#typewriter\").html() + setup.typewriter.text[setup.typewriter.index] ); // Increase the index setup.typewriter.index++; // Save the timeout reference setup.typewriter.timerReference = setTimeout(setup.typewriter.write, 1000); } else { // Clear out the timeout once index is greater than string length clearTimeout(setup.typewriter.timerReference); // Reset the index setup.typewriter.index = -1; } } :: Start <div id=\"typewriter\"></div> <% setup.typewriter.text = \"Hello, world!\"; setup.typewriter.write(); %> Twee Download","title":"Twee Code"},{"location":"typewriter/snowman/snowman_typewriter.html#see-also","text":"Delayed Text","title":"See Also"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html","text":"\"Typewriter Effect\": SugarCube (v2.18) # Summary # \"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In SugarCube, a <<widget>> macro named \"typewriter\" is created that uses the <<repeat>> and <<stop>> macros internally to show one character every one second. Example # Download Twee Code # :: StoryTitle Typewriter Effect in Sugarcube :: Start <<typewriter \"Hello, world\">> :: Typewriter[widget] \\<<widget typewriter>> \\ <!-- Create a SPAN with an ID --> \\ <span id=\"typewriter\"></span> \\ <!-- In SugarCube, arrays start at 0 --> \\ <<set _textArrayLength to 0>> \\ <!-- Repeat every second --> \\ <<repeat 1s>> \\ <!-- Test if textArrayLength is greater than length of $args[0] --> \\ <<if _textArrayLength gte $args[0].length>> \\ <<stop>> \\ <<else>> \\ <!-- Append the current position to the existing characters --> \\ <<append \"#typewriter\">>$args[0][_textArrayLength]<</append>> \\ <!-- Update the length --> \\ <<set _textArrayLength++>> \\ <</if>> \\ <</repeat>> \\<</widget>> Twee Download See Also # Delayed Text","title":"SugarCube"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html#typewriter-effect-sugarcube-v218","text":"","title":"\"Typewriter Effect\": SugarCube (v2.18)"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html#summary","text":"\"Typewriter Effect\" demonstrates how to create a delayed character-by-character effect. In SugarCube, a <<widget>> macro named \"typewriter\" is created that uses the <<repeat>> and <<stop>> macros internally to show one character every one second.","title":"Summary"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html#example","text":"Download","title":"Example"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html#twee-code","text":":: StoryTitle Typewriter Effect in Sugarcube :: Start <<typewriter \"Hello, world\">> :: Typewriter[widget] \\<<widget typewriter>> \\ <!-- Create a SPAN with an ID --> \\ <span id=\"typewriter\"></span> \\ <!-- In SugarCube, arrays start at 0 --> \\ <<set _textArrayLength to 0>> \\ <!-- Repeat every second --> \\ <<repeat 1s>> \\ <!-- Test if textArrayLength is greater than length of $args[0] --> \\ <<if _textArrayLength gte $args[0].length>> \\ <<stop>> \\ <<else>> \\ <!-- Append the current position to the existing characters --> \\ <<append \"#typewriter\">>$args[0][_textArrayLength]<</append>> \\ <!-- Update the length --> \\ <<set _textArrayLength++>> \\ <</if>> \\ <</repeat>> \\<</widget>> Twee Download","title":"Twee Code"},{"location":"typewriter/sugarcube/sugarcube_typewriter.html#see-also","text":"Delayed Text","title":"See Also"},{"location":"usingaddons/sugarcube/sugarcube_usingaddons.html","text":"\"Using Add-ons\": SugarCube (v2.18) # Summary # Many people have developed external add-ons for use in story formats like SugarCube. Often, these add-ons will come with instructions that should be followed to incorporate them into a story. This example uses the <<cyclinglink>> macro created by Thomas Michael Edwards based on the work done by Leon Arnott for Twine 1. It's code was copied into the Story JavaScript for use in the story. Example # Download Twee Code # :: StoryTitle Using Add-ons in SugarCube :: UserScript[script] /*! <<cyclinglink>> macro for SugarCube 2.x */ !function(){\"use strict\";if(\"undefined\"==typeof version||\"undefined\"==typeof version.title||\"SugarCube\"!==version.title||\"undefined\"==typeof version.major||version.major<2)throw new Error(\"<<cyclinglink>> macro requires SugarCube 2.0 or greater, aborting load\");version.extensions.cyclinglinkMacro={major:3,minor:3,revision:2},macros.cyclinglink={handler:function(a,b,c){function toggleText(w){w.classList.remove(\"cyclingLinkInit\"),w.classList.toggle(rl+\"Enabled\"),w.classList.toggle(rl+\"Disabled\"),w.style.display=\"none\"===w.style.display?\"inline\":\"none\"}var rl=\"cyclingLink\";switch(c[c.length-1]){case\"end\":var end=!0;c.pop();break;case\"out\":var out=!0;c.pop()}var v=null;c.length&&\"$\"===c[0][0]&&(v=c[0].slice(1),c.shift());var h=State.variables;if(!out||!v||\"\"!==h[v]){var l=insertElement(a,\"a\");l.className=\"link-internal cyclingLink\",l.setAttribute(\"data-cycle\",0);for(var i=0;i<c.length;i++){var on=i===(v?Math.max(c.indexOf(h[v]),0):0),d=insertElement(null,\"span\",null,\"cyclingLinkInit cyclingLink\"+(on?\"En\":\"Dis\")+\"abled\");on?(v&&(h[v]=c[i]),l.setAttribute(\"data-cycle\",i)):d.style.display=\"none\",insertText(d,c[i]),on&&end&&i===c.length-1?l.parentNode.replaceChild(d,l):l.appendChild(d)}jQuery(l).ariaClick(function(){var t=this.childNodes,u=this.getAttribute(\"data-cycle\")-0,m=t.length;if(toggleText(t[u]),u+=1,out&&u===m?v&&(h[v]=\"\"):(u%=m,v&&(h[v]=c[u])),(end||out)&&u===m-(end?1:0)){if(!end)return void this.parentNode.removeChild(this);var n=this.removeChild(t[u]);return n.className=rl+\"End\",n.style.display=\"inline\",void this.parentNode.replaceChild(n,this)}toggleText(t[u]),this.setAttribute(\"data-cycle\",u)})}}}}(); :: Start <<cyclinglink \"First\" \"Second\" \"Third\">> Twee Download","title":"SugarCube"},{"location":"usingaddons/sugarcube/sugarcube_usingaddons.html#using-add-ons-sugarcube-v218","text":"","title":"\"Using Add-ons\": SugarCube (v2.18)"},{"location":"usingaddons/sugarcube/sugarcube_usingaddons.html#summary","text":"Many people have developed external add-ons for use in story formats like SugarCube. Often, these add-ons will come with instructions that should be followed to incorporate them into a story. This example uses the <<cyclinglink>> macro created by Thomas Michael Edwards based on the work done by Leon Arnott for Twine 1. It's code was copied into the Story JavaScript for use in the story.","title":"Summary"},{"location":"usingaddons/sugarcube/sugarcube_usingaddons.html#example","text":"Download","title":"Example"},{"location":"usingaddons/sugarcube/sugarcube_usingaddons.html#twee-code","text":":: StoryTitle Using Add-ons in SugarCube :: UserScript[script] /*! <<cyclinglink>> macro for SugarCube 2.x */ !function(){\"use strict\";if(\"undefined\"==typeof version||\"undefined\"==typeof version.title||\"SugarCube\"!==version.title||\"undefined\"==typeof version.major||version.major<2)throw new Error(\"<<cyclinglink>> macro requires SugarCube 2.0 or greater, aborting load\");version.extensions.cyclinglinkMacro={major:3,minor:3,revision:2},macros.cyclinglink={handler:function(a,b,c){function toggleText(w){w.classList.remove(\"cyclingLinkInit\"),w.classList.toggle(rl+\"Enabled\"),w.classList.toggle(rl+\"Disabled\"),w.style.display=\"none\"===w.style.display?\"inline\":\"none\"}var rl=\"cyclingLink\";switch(c[c.length-1]){case\"end\":var end=!0;c.pop();break;case\"out\":var out=!0;c.pop()}var v=null;c.length&&\"$\"===c[0][0]&&(v=c[0].slice(1),c.shift());var h=State.variables;if(!out||!v||\"\"!==h[v]){var l=insertElement(a,\"a\");l.className=\"link-internal cyclingLink\",l.setAttribute(\"data-cycle\",0);for(var i=0;i<c.length;i++){var on=i===(v?Math.max(c.indexOf(h[v]),0):0),d=insertElement(null,\"span\",null,\"cyclingLinkInit cyclingLink\"+(on?\"En\":\"Dis\")+\"abled\");on?(v&&(h[v]=c[i]),l.setAttribute(\"data-cycle\",i)):d.style.display=\"none\",insertText(d,c[i]),on&&end&&i===c.length-1?l.parentNode.replaceChild(d,l):l.appendChild(d)}jQuery(l).ariaClick(function(){var t=this.childNodes,u=this.getAttribute(\"data-cycle\")-0,m=t.length;if(toggleText(t[u]),u+=1,out&&u===m?v&&(h[v]=\"\"):(u%=m,v&&(h[v]=c[u])),(end||out)&&u===m-(end?1:0)){if(!end)return void this.parentNode.removeChild(this);var n=this.removeChild(t[u]);return n.className=rl+\"End\",n.style.display=\"inline\",void this.parentNode.replaceChild(n,this)}toggleText(t[u]),this.setAttribute(\"data-cycle\",u)})}}}}(); :: Start <<cyclinglink \"First\" \"Second\" \"Third\">> Twee Download","title":"Twee Code"}]}